// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#ifndef PROTOBUF_debug_2eproto__INCLUDED
#define PROTOBUF_debug_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace debug {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_debug_2eproto();
void protobuf_AssignDesc_debug_2eproto();
void protobuf_ShutdownFile_debug_2eproto();

class DebugRequest;
class DebugResponse;

// ===================================================================

class DebugRequest : public ::google::protobuf::Message {
 public:
  DebugRequest();
  virtual ~DebugRequest();

  DebugRequest(const DebugRequest& from);

  inline DebugRequest& operator=(const DebugRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugRequest& default_instance();

  void Swap(DebugRequest* other);

  // implements Message ----------------------------------------------

  DebugRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugRequest& from);
  void MergeFrom(const DebugRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string originModule = 1;
  inline bool has_originmodule() const;
  inline void clear_originmodule();
  static const int kOriginModuleFieldNumber = 1;
  inline const ::std::string& originmodule() const;
  inline void set_originmodule(const ::std::string& value);
  inline void set_originmodule(const char* value);
  inline void set_originmodule(const char* value, size_t size);
  inline ::std::string* mutable_originmodule();
  inline ::std::string* release_originmodule();
  inline void set_allocated_originmodule(::std::string* originmodule);

  // required string originMethod = 2;
  inline bool has_originmethod() const;
  inline void clear_originmethod();
  static const int kOriginMethodFieldNumber = 2;
  inline const ::std::string& originmethod() const;
  inline void set_originmethod(const ::std::string& value);
  inline void set_originmethod(const char* value);
  inline void set_originmethod(const char* value, size_t size);
  inline ::std::string* mutable_originmethod();
  inline ::std::string* release_originmethod();
  inline void set_allocated_originmethod(::std::string* originmethod);

  // required bytes requestData = 3;
  inline bool has_requestdata() const;
  inline void clear_requestdata();
  static const int kRequestDataFieldNumber = 3;
  inline const ::std::string& requestdata() const;
  inline void set_requestdata(const ::std::string& value);
  inline void set_requestdata(const char* value);
  inline void set_requestdata(const void* value, size_t size);
  inline ::std::string* mutable_requestdata();
  inline ::std::string* release_requestdata();
  inline void set_allocated_requestdata(::std::string* requestdata);

  // @@protoc_insertion_point(class_scope:protocol.debug.DebugRequest)
 private:
  inline void set_has_originmodule();
  inline void clear_has_originmodule();
  inline void set_has_originmethod();
  inline void clear_has_originmethod();
  inline void set_has_requestdata();
  inline void clear_has_requestdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* originmodule_;
  ::std::string* originmethod_;
  ::std::string* requestdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_debug_2eproto();
  friend void protobuf_AssignDesc_debug_2eproto();
  friend void protobuf_ShutdownFile_debug_2eproto();

  void InitAsDefaultInstance();
  static DebugRequest* default_instance_;
};
// -------------------------------------------------------------------

class DebugResponse : public ::google::protobuf::Message {
 public:
  DebugResponse();
  virtual ~DebugResponse();

  DebugResponse(const DebugResponse& from);

  inline DebugResponse& operator=(const DebugResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugResponse& default_instance();

  void Swap(DebugResponse* other);

  // implements Message ----------------------------------------------

  DebugResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugResponse& from);
  void MergeFrom(const DebugResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 respStatus = 1;
  inline bool has_respstatus() const;
  inline void clear_respstatus();
  static const int kRespStatusFieldNumber = 1;
  inline ::google::protobuf::int32 respstatus() const;
  inline void set_respstatus(::google::protobuf::int32 value);

  // required string debugMessage = 2;
  inline bool has_debugmessage() const;
  inline void clear_debugmessage();
  static const int kDebugMessageFieldNumber = 2;
  inline const ::std::string& debugmessage() const;
  inline void set_debugmessage(const ::std::string& value);
  inline void set_debugmessage(const char* value);
  inline void set_debugmessage(const char* value, size_t size);
  inline ::std::string* mutable_debugmessage();
  inline ::std::string* release_debugmessage();
  inline void set_allocated_debugmessage(::std::string* debugmessage);

  // required bytes responseData = 3;
  inline bool has_responsedata() const;
  inline void clear_responsedata();
  static const int kResponseDataFieldNumber = 3;
  inline const ::std::string& responsedata() const;
  inline void set_responsedata(const ::std::string& value);
  inline void set_responsedata(const char* value);
  inline void set_responsedata(const void* value, size_t size);
  inline ::std::string* mutable_responsedata();
  inline ::std::string* release_responsedata();
  inline void set_allocated_responsedata(::std::string* responsedata);

  // @@protoc_insertion_point(class_scope:protocol.debug.DebugResponse)
 private:
  inline void set_has_respstatus();
  inline void clear_has_respstatus();
  inline void set_has_debugmessage();
  inline void clear_has_debugmessage();
  inline void set_has_responsedata();
  inline void clear_has_responsedata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* debugmessage_;
  ::std::string* responsedata_;
  ::google::protobuf::int32 respstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_debug_2eproto();
  friend void protobuf_AssignDesc_debug_2eproto();
  friend void protobuf_ShutdownFile_debug_2eproto();

  void InitAsDefaultInstance();
  static DebugResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// DebugRequest

// required string originModule = 1;
inline bool DebugRequest::has_originmodule() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugRequest::set_has_originmodule() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugRequest::clear_has_originmodule() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugRequest::clear_originmodule() {
  if (originmodule_ != &::google::protobuf::internal::kEmptyString) {
    originmodule_->clear();
  }
  clear_has_originmodule();
}
inline const ::std::string& DebugRequest::originmodule() const {
  return *originmodule_;
}
inline void DebugRequest::set_originmodule(const ::std::string& value) {
  set_has_originmodule();
  if (originmodule_ == &::google::protobuf::internal::kEmptyString) {
    originmodule_ = new ::std::string;
  }
  originmodule_->assign(value);
}
inline void DebugRequest::set_originmodule(const char* value) {
  set_has_originmodule();
  if (originmodule_ == &::google::protobuf::internal::kEmptyString) {
    originmodule_ = new ::std::string;
  }
  originmodule_->assign(value);
}
inline void DebugRequest::set_originmodule(const char* value, size_t size) {
  set_has_originmodule();
  if (originmodule_ == &::google::protobuf::internal::kEmptyString) {
    originmodule_ = new ::std::string;
  }
  originmodule_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugRequest::mutable_originmodule() {
  set_has_originmodule();
  if (originmodule_ == &::google::protobuf::internal::kEmptyString) {
    originmodule_ = new ::std::string;
  }
  return originmodule_;
}
inline ::std::string* DebugRequest::release_originmodule() {
  clear_has_originmodule();
  if (originmodule_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originmodule_;
    originmodule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DebugRequest::set_allocated_originmodule(::std::string* originmodule) {
  if (originmodule_ != &::google::protobuf::internal::kEmptyString) {
    delete originmodule_;
  }
  if (originmodule) {
    set_has_originmodule();
    originmodule_ = originmodule;
  } else {
    clear_has_originmodule();
    originmodule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string originMethod = 2;
inline bool DebugRequest::has_originmethod() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugRequest::set_has_originmethod() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugRequest::clear_has_originmethod() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugRequest::clear_originmethod() {
  if (originmethod_ != &::google::protobuf::internal::kEmptyString) {
    originmethod_->clear();
  }
  clear_has_originmethod();
}
inline const ::std::string& DebugRequest::originmethod() const {
  return *originmethod_;
}
inline void DebugRequest::set_originmethod(const ::std::string& value) {
  set_has_originmethod();
  if (originmethod_ == &::google::protobuf::internal::kEmptyString) {
    originmethod_ = new ::std::string;
  }
  originmethod_->assign(value);
}
inline void DebugRequest::set_originmethod(const char* value) {
  set_has_originmethod();
  if (originmethod_ == &::google::protobuf::internal::kEmptyString) {
    originmethod_ = new ::std::string;
  }
  originmethod_->assign(value);
}
inline void DebugRequest::set_originmethod(const char* value, size_t size) {
  set_has_originmethod();
  if (originmethod_ == &::google::protobuf::internal::kEmptyString) {
    originmethod_ = new ::std::string;
  }
  originmethod_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugRequest::mutable_originmethod() {
  set_has_originmethod();
  if (originmethod_ == &::google::protobuf::internal::kEmptyString) {
    originmethod_ = new ::std::string;
  }
  return originmethod_;
}
inline ::std::string* DebugRequest::release_originmethod() {
  clear_has_originmethod();
  if (originmethod_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = originmethod_;
    originmethod_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DebugRequest::set_allocated_originmethod(::std::string* originmethod) {
  if (originmethod_ != &::google::protobuf::internal::kEmptyString) {
    delete originmethod_;
  }
  if (originmethod) {
    set_has_originmethod();
    originmethod_ = originmethod;
  } else {
    clear_has_originmethod();
    originmethod_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes requestData = 3;
inline bool DebugRequest::has_requestdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DebugRequest::set_has_requestdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DebugRequest::clear_has_requestdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DebugRequest::clear_requestdata() {
  if (requestdata_ != &::google::protobuf::internal::kEmptyString) {
    requestdata_->clear();
  }
  clear_has_requestdata();
}
inline const ::std::string& DebugRequest::requestdata() const {
  return *requestdata_;
}
inline void DebugRequest::set_requestdata(const ::std::string& value) {
  set_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    requestdata_ = new ::std::string;
  }
  requestdata_->assign(value);
}
inline void DebugRequest::set_requestdata(const char* value) {
  set_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    requestdata_ = new ::std::string;
  }
  requestdata_->assign(value);
}
inline void DebugRequest::set_requestdata(const void* value, size_t size) {
  set_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    requestdata_ = new ::std::string;
  }
  requestdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugRequest::mutable_requestdata() {
  set_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    requestdata_ = new ::std::string;
  }
  return requestdata_;
}
inline ::std::string* DebugRequest::release_requestdata() {
  clear_has_requestdata();
  if (requestdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestdata_;
    requestdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DebugRequest::set_allocated_requestdata(::std::string* requestdata) {
  if (requestdata_ != &::google::protobuf::internal::kEmptyString) {
    delete requestdata_;
  }
  if (requestdata) {
    set_has_requestdata();
    requestdata_ = requestdata;
  } else {
    clear_has_requestdata();
    requestdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DebugResponse

// required int32 respStatus = 1;
inline bool DebugResponse::has_respstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DebugResponse::set_has_respstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DebugResponse::clear_has_respstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DebugResponse::clear_respstatus() {
  respstatus_ = 0;
  clear_has_respstatus();
}
inline ::google::protobuf::int32 DebugResponse::respstatus() const {
  return respstatus_;
}
inline void DebugResponse::set_respstatus(::google::protobuf::int32 value) {
  set_has_respstatus();
  respstatus_ = value;
}

// required string debugMessage = 2;
inline bool DebugResponse::has_debugmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DebugResponse::set_has_debugmessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DebugResponse::clear_has_debugmessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DebugResponse::clear_debugmessage() {
  if (debugmessage_ != &::google::protobuf::internal::kEmptyString) {
    debugmessage_->clear();
  }
  clear_has_debugmessage();
}
inline const ::std::string& DebugResponse::debugmessage() const {
  return *debugmessage_;
}
inline void DebugResponse::set_debugmessage(const ::std::string& value) {
  set_has_debugmessage();
  if (debugmessage_ == &::google::protobuf::internal::kEmptyString) {
    debugmessage_ = new ::std::string;
  }
  debugmessage_->assign(value);
}
inline void DebugResponse::set_debugmessage(const char* value) {
  set_has_debugmessage();
  if (debugmessage_ == &::google::protobuf::internal::kEmptyString) {
    debugmessage_ = new ::std::string;
  }
  debugmessage_->assign(value);
}
inline void DebugResponse::set_debugmessage(const char* value, size_t size) {
  set_has_debugmessage();
  if (debugmessage_ == &::google::protobuf::internal::kEmptyString) {
    debugmessage_ = new ::std::string;
  }
  debugmessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugResponse::mutable_debugmessage() {
  set_has_debugmessage();
  if (debugmessage_ == &::google::protobuf::internal::kEmptyString) {
    debugmessage_ = new ::std::string;
  }
  return debugmessage_;
}
inline ::std::string* DebugResponse::release_debugmessage() {
  clear_has_debugmessage();
  if (debugmessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debugmessage_;
    debugmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DebugResponse::set_allocated_debugmessage(::std::string* debugmessage) {
  if (debugmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete debugmessage_;
  }
  if (debugmessage) {
    set_has_debugmessage();
    debugmessage_ = debugmessage;
  } else {
    clear_has_debugmessage();
    debugmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes responseData = 3;
inline bool DebugResponse::has_responsedata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DebugResponse::set_has_responsedata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DebugResponse::clear_has_responsedata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DebugResponse::clear_responsedata() {
  if (responsedata_ != &::google::protobuf::internal::kEmptyString) {
    responsedata_->clear();
  }
  clear_has_responsedata();
}
inline const ::std::string& DebugResponse::responsedata() const {
  return *responsedata_;
}
inline void DebugResponse::set_responsedata(const ::std::string& value) {
  set_has_responsedata();
  if (responsedata_ == &::google::protobuf::internal::kEmptyString) {
    responsedata_ = new ::std::string;
  }
  responsedata_->assign(value);
}
inline void DebugResponse::set_responsedata(const char* value) {
  set_has_responsedata();
  if (responsedata_ == &::google::protobuf::internal::kEmptyString) {
    responsedata_ = new ::std::string;
  }
  responsedata_->assign(value);
}
inline void DebugResponse::set_responsedata(const void* value, size_t size) {
  set_has_responsedata();
  if (responsedata_ == &::google::protobuf::internal::kEmptyString) {
    responsedata_ = new ::std::string;
  }
  responsedata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugResponse::mutable_responsedata() {
  set_has_responsedata();
  if (responsedata_ == &::google::protobuf::internal::kEmptyString) {
    responsedata_ = new ::std::string;
  }
  return responsedata_;
}
inline ::std::string* DebugResponse::release_responsedata() {
  clear_has_responsedata();
  if (responsedata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = responsedata_;
    responsedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DebugResponse::set_allocated_responsedata(::std::string* responsedata) {
  if (responsedata_ != &::google::protobuf::internal::kEmptyString) {
    delete responsedata_;
  }
  if (responsedata) {
    set_has_responsedata();
    responsedata_ = responsedata;
  } else {
    clear_has_responsedata();
    responsedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace debug
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_debug_2eproto__INCLUDED
