// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tanx_bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tanx_bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace Tanx {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdzInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_BuyerRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdzInfo_BuyerRule_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Location_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_ViewScreen_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_UserAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_UserAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_PrivateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_PrivateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_Device_ScreenOrientation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_AppCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_AppCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_NativeAdTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_Area_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_NativeAdTemplate_Area_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_NativeAdTemplate_Area_Creative_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_ContentCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_ContentCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_Content_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Deal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Deal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Deal_PreferredDeal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Deal_PreferredDeal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Deal_PrivateAuction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Deal_PrivateAuction_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Deal_PrivateAuction_BuyerRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_CrowdCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_CrowdCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ads_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ads_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResult_Res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResult_Res_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Creative_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Creative_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Creative_Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Creative_Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Creative_TrackingEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Creative_TrackingEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileCreative_Area_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileCreative_Area_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tanx_5fbidding_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tanx_5fbidding_2eproto() {
  protobuf_AddDesc_tanx_5fbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tanx_bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, timezone_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tid_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adx_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, anonymous_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, category_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adzinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_sensitive_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_ad_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, hosted_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, private_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, content_categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, deals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, crowd_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_predicted_to_be_ignored_),
  };
  BidRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _internal_metadata_),
      -1);
  BidRequest_AdzInfo_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_AdzInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, publisher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, ad_bid_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, view_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, excluded_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, min_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, adz_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, view_screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, page_session_ad_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, buyer_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, allowed_creative_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, publisher_filter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, auto_expandable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, trigger_expandable_),
  };
  BidRequest_AdzInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdzInfo_descriptor_,
      BidRequest_AdzInfo::default_instance_,
      BidRequest_AdzInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdzInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo, _internal_metadata_),
      -1);
  BidRequest_AdzInfo_BuyerRule_descriptor_ = BidRequest_AdzInfo_descriptor_->nested_type(0);
  static const int BidRequest_AdzInfo_BuyerRule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_BuyerRule, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_BuyerRule, min_cpm_price_),
  };
  BidRequest_AdzInfo_BuyerRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdzInfo_BuyerRule_descriptor_,
      BidRequest_AdzInfo_BuyerRule::default_instance_,
      BidRequest_AdzInfo_BuyerRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_BuyerRule, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdzInfo_BuyerRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdzInfo_BuyerRule, _internal_metadata_),
      -1);
  BidRequest_AdzInfo_Location_descriptor_ = BidRequest_AdzInfo_descriptor_->enum_type(0);
  BidRequest_AdzInfo_ViewScreen_descriptor_ = BidRequest_AdzInfo_descriptor_->enum_type(1);
  BidRequest_UserAttribute_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_UserAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, timestamp_),
  };
  BidRequest_UserAttribute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_UserAttribute_descriptor_,
      BidRequest_UserAttribute::default_instance_,
      BidRequest_UserAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_UserAttribute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_UserAttribute, _internal_metadata_),
      -1);
  BidRequest_PrivateInfo_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_PrivateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, tanx_cnaui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, risk_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, nick_name_),
  };
  BidRequest_PrivateInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_PrivateInfo_descriptor_,
      BidRequest_PrivateInfo::default_instance_,
      BidRequest_PrivateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_PrivateInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_PrivateInfo, _internal_metadata_),
      -1);
  BidRequest_Mobile_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Mobile_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, ad_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, ad_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, is_fullscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, package_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, native_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, landing_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, app_categories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, native_ad_template_),
  };
  BidRequest_Mobile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_descriptor_,
      BidRequest_Mobile::default_instance_,
      BidRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _internal_metadata_),
      -1);
  BidRequest_Mobile_Device_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_Device_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, operator__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, device_pixel_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, screen_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, android_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, mac_),
  };
  BidRequest_Mobile_Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_Device_descriptor_,
      BidRequest_Mobile_Device::default_instance_,
      BidRequest_Mobile_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_Device, _internal_metadata_),
      -1);
  BidRequest_Mobile_Device_ScreenOrientation_descriptor_ = BidRequest_Mobile_Device_descriptor_->enum_type(0);
  BidRequest_Mobile_AppCategory_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(1);
  static const int BidRequest_Mobile_AppCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_AppCategory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_AppCategory, confidence_level_),
  };
  BidRequest_Mobile_AppCategory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_AppCategory_descriptor_,
      BidRequest_Mobile_AppCategory::default_instance_,
      BidRequest_Mobile_AppCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_AppCategory, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_AppCategory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_AppCategory, _internal_metadata_),
      -1);
  BidRequest_Mobile_NativeAdTemplate_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(2);
  static const int BidRequest_Mobile_NativeAdTemplate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate, native_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate, areas_),
  };
  BidRequest_Mobile_NativeAdTemplate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_NativeAdTemplate_descriptor_,
      BidRequest_Mobile_NativeAdTemplate::default_instance_,
      BidRequest_Mobile_NativeAdTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_NativeAdTemplate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate, _internal_metadata_),
      -1);
  BidRequest_Mobile_NativeAdTemplate_Area_descriptor_ = BidRequest_Mobile_NativeAdTemplate_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_NativeAdTemplate_Area_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, creative_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, creative_),
  };
  BidRequest_Mobile_NativeAdTemplate_Area_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_NativeAdTemplate_Area_descriptor_,
      BidRequest_Mobile_NativeAdTemplate_Area::default_instance_,
      BidRequest_Mobile_NativeAdTemplate_Area_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_NativeAdTemplate_Area),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area, _internal_metadata_),
      -1);
  BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_ = BidRequest_Mobile_NativeAdTemplate_Area_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_NativeAdTemplate_Area_Creative_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, required_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, recommended_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, title_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, ad_words_max_safe_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, image_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, action_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, multichoice_fields_),
  };
  BidRequest_Mobile_NativeAdTemplate_Area_Creative_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_,
      BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_,
      BidRequest_Mobile_NativeAdTemplate_Area_Creative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_NativeAdTemplate_Area_Creative),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_NativeAdTemplate_Area_Creative, _internal_metadata_),
      -1);
  BidRequest_ContentCategory_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_ContentCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, confidence_level_),
  };
  BidRequest_ContentCategory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_ContentCategory_descriptor_,
      BidRequest_ContentCategory::default_instance_,
      BidRequest_ContentCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_ContentCategory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_ContentCategory, _internal_metadata_),
      -1);
  BidRequest_Video_descriptor_ = BidRequest_descriptor_->nested_type(5);
  static const int BidRequest_Video_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, video_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, videoad_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, videoad_section_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, min_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, max_ad_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, protocol_),
  };
  BidRequest_Video_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Video_descriptor_,
      BidRequest_Video::default_instance_,
      BidRequest_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Video),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _internal_metadata_),
      -1);
  BidRequest_Video_Content_descriptor_ = BidRequest_Video_descriptor_->nested_type(0);
  static const int BidRequest_Video_Content_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, keywords_),
  };
  BidRequest_Video_Content_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Video_Content_descriptor_,
      BidRequest_Video_Content::default_instance_,
      BidRequest_Video_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Video_Content),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video_Content, _internal_metadata_),
      -1);
  BidRequest_Video_VideoFormat_descriptor_ = BidRequest_Video_descriptor_->enum_type(0);
  BidRequest_Deal_descriptor_ = BidRequest_descriptor_->nested_type(6);
  static const int BidRequest_Deal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal, prefer_deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal, priv_auc_),
  };
  BidRequest_Deal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Deal_descriptor_,
      BidRequest_Deal::default_instance_,
      BidRequest_Deal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Deal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal, _internal_metadata_),
      -1);
  BidRequest_Deal_PreferredDeal_descriptor_ = BidRequest_Deal_descriptor_->nested_type(0);
  static const int BidRequest_Deal_PreferredDeal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, fix_cpm_price_),
  };
  BidRequest_Deal_PreferredDeal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Deal_PreferredDeal_descriptor_,
      BidRequest_Deal_PreferredDeal::default_instance_,
      BidRequest_Deal_PreferredDeal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Deal_PreferredDeal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PreferredDeal, _internal_metadata_),
      -1);
  BidRequest_Deal_PrivateAuction_descriptor_ = BidRequest_Deal_descriptor_->nested_type(1);
  static const int BidRequest_Deal_PrivateAuction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction, buyer_rules_),
  };
  BidRequest_Deal_PrivateAuction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Deal_PrivateAuction_descriptor_,
      BidRequest_Deal_PrivateAuction::default_instance_,
      BidRequest_Deal_PrivateAuction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Deal_PrivateAuction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction, _internal_metadata_),
      -1);
  BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_ = BidRequest_Deal_PrivateAuction_descriptor_->nested_type(0);
  static const int BidRequest_Deal_PrivateAuction_BuyerRule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction_BuyerRule, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction_BuyerRule, min_cpm_price_),
  };
  BidRequest_Deal_PrivateAuction_BuyerRule_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_,
      BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_,
      BidRequest_Deal_PrivateAuction_BuyerRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction_BuyerRule, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Deal_PrivateAuction_BuyerRule),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Deal_PrivateAuction_BuyerRule, _internal_metadata_),
      -1);
  BidRequest_CrowdCategory_descriptor_ = BidRequest_descriptor_->nested_type(7);
  static const int BidRequest_CrowdCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CrowdCategory, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CrowdCategory, confidence_level_),
  };
  BidRequest_CrowdCategory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_CrowdCategory_descriptor_,
      BidRequest_CrowdCategory::default_instance_,
      BidRequest_CrowdCategory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CrowdCategory, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_CrowdCategory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CrowdCategory, _internal_metadata_),
      -1);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, ads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, is_recognized_user_),
  };
  BidResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _internal_metadata_),
      -1);
  BidResponse_Ads_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Ads_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, adzinfo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, max_cpm_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, ad_bid_count_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, click_through_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, network_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, extend_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, destination_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, resource_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, feedback_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, video_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, mobile_creative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, advertiser_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, download_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, winnotice_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, creative_adaptive_type_),
  };
  BidResponse_Ads_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ads_descriptor_,
      BidResponse_Ads::default_instance_,
      BidResponse_Ads_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ads),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ads, _internal_metadata_),
      -1);
  BidResult_descriptor_ = file->message_type(2);
  static const int BidResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, res_),
  };
  BidResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResult_descriptor_,
      BidResult::default_instance_,
      BidResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult, _internal_metadata_),
      -1);
  BidResult_Res_descriptor_ = BidResult_descriptor_->nested_type(0);
  static const int BidResult_Res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, adzinfo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, ad_bid_count_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, result_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, extend_data_),
  };
  BidResult_Res_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResult_Res_descriptor_,
      BidResult_Res::default_instance_,
      BidResult_Res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResult_Res),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResult_Res, _internal_metadata_),
      -1);
  MobileCreative_descriptor_ = file->message_type(3);
  static const int MobileCreative_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, view_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, creatives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, native_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, areas_),
  };
  MobileCreative_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MobileCreative_descriptor_,
      MobileCreative::default_instance_,
      MobileCreative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, _has_bits_[0]),
      -1,
      -1,
      sizeof(MobileCreative),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative, _internal_metadata_),
      -1);
  MobileCreative_Creative_descriptor_ = MobileCreative_descriptor_->nested_type(0);
  static const int MobileCreative_Creative_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, img_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, img_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, click_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, destination_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, tracking_events_),
  };
  MobileCreative_Creative_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MobileCreative_Creative_descriptor_,
      MobileCreative_Creative::default_instance_,
      MobileCreative_Creative_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, _has_bits_[0]),
      -1,
      -1,
      sizeof(MobileCreative_Creative),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative, _internal_metadata_),
      -1);
  MobileCreative_Creative_Attr_descriptor_ = MobileCreative_Creative_descriptor_->nested_type(0);
  static const int MobileCreative_Creative_Attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, value_),
  };
  MobileCreative_Creative_Attr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MobileCreative_Creative_Attr_descriptor_,
      MobileCreative_Creative_Attr::default_instance_,
      MobileCreative_Creative_Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, _has_bits_[0]),
      -1,
      -1,
      sizeof(MobileCreative_Creative_Attr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_Attr, _internal_metadata_),
      -1);
  MobileCreative_Creative_TrackingEvents_descriptor_ = MobileCreative_Creative_descriptor_->nested_type(1);
  static const int MobileCreative_Creative_TrackingEvents_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, impression_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, click_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, download_complete_event_),
  };
  MobileCreative_Creative_TrackingEvents_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MobileCreative_Creative_TrackingEvents_descriptor_,
      MobileCreative_Creative_TrackingEvents::default_instance_,
      MobileCreative_Creative_TrackingEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, _has_bits_[0]),
      -1,
      -1,
      sizeof(MobileCreative_Creative_TrackingEvents),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Creative_TrackingEvents, _internal_metadata_),
      -1);
  MobileCreative_Area_descriptor_ = MobileCreative_descriptor_->nested_type(1);
  static const int MobileCreative_Area_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Area, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Area, creatives_),
  };
  MobileCreative_Area_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MobileCreative_Area_descriptor_,
      MobileCreative_Area::default_instance_,
      MobileCreative_Area_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Area, _has_bits_[0]),
      -1,
      -1,
      sizeof(MobileCreative_Area),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileCreative_Area, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tanx_5fbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdzInfo_descriptor_, &BidRequest_AdzInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdzInfo_BuyerRule_descriptor_, &BidRequest_AdzInfo_BuyerRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_UserAttribute_descriptor_, &BidRequest_UserAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_PrivateInfo_descriptor_, &BidRequest_PrivateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_descriptor_, &BidRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_Device_descriptor_, &BidRequest_Mobile_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_AppCategory_descriptor_, &BidRequest_Mobile_AppCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_NativeAdTemplate_descriptor_, &BidRequest_Mobile_NativeAdTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_NativeAdTemplate_Area_descriptor_, &BidRequest_Mobile_NativeAdTemplate_Area::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_, &BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_ContentCategory_descriptor_, &BidRequest_ContentCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Video_descriptor_, &BidRequest_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Video_Content_descriptor_, &BidRequest_Video_Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Deal_descriptor_, &BidRequest_Deal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Deal_PreferredDeal_descriptor_, &BidRequest_Deal_PreferredDeal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Deal_PrivateAuction_descriptor_, &BidRequest_Deal_PrivateAuction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_, &BidRequest_Deal_PrivateAuction_BuyerRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_CrowdCategory_descriptor_, &BidRequest_CrowdCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ads_descriptor_, &BidResponse_Ads::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResult_descriptor_, &BidResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResult_Res_descriptor_, &BidResult_Res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MobileCreative_descriptor_, &MobileCreative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MobileCreative_Creative_descriptor_, &MobileCreative_Creative::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MobileCreative_Creative_Attr_descriptor_, &MobileCreative_Creative_Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MobileCreative_Creative_TrackingEvents_descriptor_, &MobileCreative_Creative_TrackingEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MobileCreative_Area_descriptor_, &MobileCreative_Area::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tanx_5fbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_AdzInfo::default_instance_;
  delete BidRequest_AdzInfo_reflection_;
  delete BidRequest_AdzInfo_BuyerRule::default_instance_;
  delete BidRequest_AdzInfo_BuyerRule_reflection_;
  delete BidRequest_UserAttribute::default_instance_;
  delete BidRequest_UserAttribute_reflection_;
  delete BidRequest_PrivateInfo::default_instance_;
  delete BidRequest_PrivateInfo_reflection_;
  delete BidRequest_Mobile::default_instance_;
  delete BidRequest_Mobile_reflection_;
  delete BidRequest_Mobile_Device::default_instance_;
  delete BidRequest_Mobile_Device_reflection_;
  delete BidRequest_Mobile_AppCategory::default_instance_;
  delete BidRequest_Mobile_AppCategory_reflection_;
  delete BidRequest_Mobile_NativeAdTemplate::default_instance_;
  delete BidRequest_Mobile_NativeAdTemplate_reflection_;
  delete BidRequest_Mobile_NativeAdTemplate_Area::default_instance_;
  delete BidRequest_Mobile_NativeAdTemplate_Area_reflection_;
  delete BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_;
  delete BidRequest_Mobile_NativeAdTemplate_Area_Creative_reflection_;
  delete BidRequest_ContentCategory::default_instance_;
  delete BidRequest_ContentCategory_reflection_;
  delete BidRequest_Video::default_instance_;
  delete BidRequest_Video_reflection_;
  delete BidRequest_Video_Content::default_instance_;
  delete BidRequest_Video_Content_reflection_;
  delete BidRequest_Deal::default_instance_;
  delete BidRequest_Deal_reflection_;
  delete BidRequest_Deal_PreferredDeal::default_instance_;
  delete BidRequest_Deal_PreferredDeal_reflection_;
  delete BidRequest_Deal_PrivateAuction::default_instance_;
  delete BidRequest_Deal_PrivateAuction_reflection_;
  delete BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_;
  delete BidRequest_Deal_PrivateAuction_BuyerRule_reflection_;
  delete BidRequest_CrowdCategory::default_instance_;
  delete BidRequest_CrowdCategory_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Ads::default_instance_;
  delete BidResponse_Ads_reflection_;
  delete BidResult::default_instance_;
  delete BidResult_reflection_;
  delete BidResult_Res::default_instance_;
  delete BidResult_Res_reflection_;
  delete MobileCreative::default_instance_;
  delete MobileCreative_reflection_;
  delete MobileCreative_Creative::default_instance_;
  delete MobileCreative_Creative_reflection_;
  delete MobileCreative_Creative_Attr::default_instance_;
  delete MobileCreative_Creative_Attr_reflection_;
  delete MobileCreative_Creative_TrackingEvents::default_instance_;
  delete MobileCreative_Creative_TrackingEvents_reflection_;
  delete MobileCreative_Area::default_instance_;
  delete MobileCreative_Area_reflection_;
}

void protobuf_AddDesc_tanx_5fbidding_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tanx_5fbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022tanx_bidding.proto\022\rprotocol.Tanx\"\376 \n\n"
    "BidRequest\022\017\n\007version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t"
    "\022\022\n\007is_test\030\013 \001(\r:\0010\022\022\n\007is_ping\030\014 \001(\r:\0010"
    "\022\013\n\003tid\030\003 \001(\t\022\n\n\002ip\030\004 \001(\t\022\022\n\nuser_agent\030"
    "\005 \001(\t\022\027\n\017timezone_offset\030\r \001(\005\022\025\n\ruser_v"
    "ertical\030\016 \003(\005\022\023\n\013tid_version\030\023 \001(\r\022\"\n\032ex"
    "cluded_click_through_url\030\006 \003(\t\022\013\n\003url\030\007 "
    "\001(\t\022\020\n\010category\030\010 \001(\r\022\023\n\010adx_type\030\t \001(\r:"
    "\0010\022\024\n\014anonymous_id\030\017 \001(\t\022\031\n\021detected_lan"
    "guage\030\020 \001(\t\022\030\n\020category_version\030\022 \001(\005\0222\n"
    "\007adzinfo\030\n \003(\0132!.protocol.Tanx.BidReques"
    "t.AdzInfo\022#\n\033excluded_sensitive_category"
    "\030\021 \003(\005\022\034\n\024excluded_ad_category\030\024 \003(\005\022\031\n\021"
    "hosted_match_data\030\025 \001(\t\022\?\n\016user_attribut"
    "e\030\026 \003(\0132\'.protocol.Tanx.BidRequest.UserA"
    "ttribute\022\027\n\017page_session_id\030\027 \001(\t\022;\n\014pri"
    "vate_info\030\030 \003(\0132%.protocol.Tanx.BidReque"
    "st.PrivateInfo\0220\n\006mobile\030\031 \001(\0132 .protoco"
    "l.Tanx.BidRequest.Mobile\022E\n\022content_cate"
    "gories\030\032 \003(\0132).protocol.Tanx.BidRequest."
    "ContentCategory\022.\n\005video\030\033 \001(\0132\037.protoco"
    "l.Tanx.BidRequest.Video\022\013\n\003aid\030\034 \001(\t\022-\n\005"
    "deals\030\035 \003(\0132\036.protocol.Tanx.BidRequest.D"
    "eal\022\?\n\016crowd_category\030\036 \003(\0132\'.protocol.T"
    "anx.BidRequest.CrowdCategory\022)\n\032is_predi"
    "cted_to_be_ignored\030\037 \001(\010:\005false\032\236\006\n\007AdzI"
    "nfo\022\n\n\002id\030\001 \002(\r\022\013\n\003pid\030\002 \002(\t\022\024\n\014publishe"
    "r_id\030\013 \001(\t\022\014\n\004size\030\003 \001(\t\022\027\n\014ad_bid_count"
    "\030\004 \001(\r:\0012\022\021\n\tview_type\030\005 \003(\r\022\027\n\017excluded"
    "_filter\030\006 \003(\r\022\025\n\rmin_cpm_price\030\007 \001(\r\022D\n\014"
    "adz_location\030\010 \001(\0162*.protocol.Tanx.BidRe"
    "quest.AdzInfo.Location:\002NA\022L\n\013view_scree"
    "n\030\t \001(\0162,.protocol.Tanx.BidRequest.AdzIn"
    "fo.ViewScreen:\tSCREEN_NA\022\033\n\023page_session"
    "_ad_idx\030\n \001(\r\022\013\n\003api\030\014 \003(\r\022@\n\013buyer_rule"
    "s\030\r \003(\0132+.protocol.Tanx.BidRequest.AdzIn"
    "fo.BuyerRule\022\036\n\026allowed_creative_level\030\016"
    " \001(\r\022\033\n\023publisher_filter_id\030\017 \003(\t\022\036\n\017aut"
    "o_expandable\030\020 \001(\010:\005false\022!\n\022trigger_exp"
    "andable\030\021 \001(\010:\005false\032:\n\tBuyerRule\022\026\n\016adv"
    "ertiser_ids\030\001 \001(\r\022\025\n\rmin_cpm_price\030\002 \001(\r"
    "\"2\n\010Location\022\006\n\002NA\020\000\022\016\n\nFIRST_VIEW\020\001\022\016\n\n"
    "OTHER_VIEW\020\002\"\211\001\n\nViewScreen\022\r\n\tSCREEN_NA"
    "\020\000\022\020\n\014SCREEN_FIRST\020\001\022\021\n\rSCREEN_SECOND\020\002\022"
    "\020\n\014SCREEN_THIRD\020\003\022\021\n\rSCREEN_FOURTH\020\004\022\020\n\014"
    "SCREEN_FIFTH\020\005\022\020\n\014SCREEN_OTHER\020\006\032.\n\rUser"
    "Attribute\022\n\n\002id\030\001 \002(\r\022\021\n\ttimestamp\030\002 \001(\r"
    "\032J\n\013PrivateInfo\022\022\n\ntanx_cnaui\030\001 \001(\t\022\024\n\014r"
    "isk_control\030\002 \001(\t\022\021\n\tnick_name\030\003 \001(\t\032\207\013\n"
    "\006Mobile\022\016\n\006is_app\030\001 \001(\010\022\016\n\006ad_num\030\002 \001(\r\022"
    "\022\n\nad_keyword\030\003 \003(\t\022\025\n\ris_fullscreen\030\004 \001"
    "(\010\022\024\n\014package_name\030\005 \001(\t\0227\n\006device\030\006 \001(\013"
    "2\'.protocol.Tanx.BidRequest.Mobile.Devic"
    "e\022\032\n\022native_template_id\030\007 \003(\t\022\024\n\014landing"
    "_type\030\010 \003(\005\022\020\n\010app_name\030\t \001(\t\022D\n\016app_cat"
    "egories\030\n \003(\0132,.protocol.Tanx.BidRequest"
    ".Mobile.AppCategory\022M\n\022native_ad_templat"
    "e\030\013 \003(\01321.protocol.Tanx.BidRequest.Mobil"
    "e.NativeAdTemplate\032\222\004\n\006Device\022\020\n\010platfor"
    "m\030\001 \001(\t\022\r\n\005brand\030\002 \001(\t\022\r\n\005model\030\003 \001(\t\022\n\n"
    "\002os\030\004 \001(\t\022\022\n\nos_version\030\005 \001(\t\022\017\n\007network"
    "\030\006 \001(\r\022\020\n\010operator\030\007 \001(\005\022\021\n\tlongitude\030\010 "
    "\001(\t\022\020\n\010latitude\030\t \001(\t\022\023\n\013device_size\030\n \001"
    "(\t\022\021\n\tdevice_id\030\013 \001(\t\022 \n\022device_pixel_ra"
    "tio\030\014 \001(\005:\0041000\022q\n\022screen_orientation\030\r "
    "\001(\01629.protocol.Tanx.BidRequest.Mobile.De"
    "vice.ScreenOrientation:\032SCREEN_ORIENTATI"
    "ON_UNKNOWN\022\022\n\nandroid_id\030\016 \001(\t\022\014\n\004idfa\030\017"
    " \001(\t\022\014\n\004imei\030\020 \001(\t\022\013\n\003mac\030\021 \001(\t\"v\n\021Scree"
    "nOrientation\022\036\n\032SCREEN_ORIENTATION_UNKNO"
    "WN\020\000\022\037\n\033SCREEN_ORIENTATION_PORTRAIT\020\001\022 \n"
    "\034SCREEN_ORIENTATION_LANDSCAPE\020\002\0323\n\013AppCa"
    "tegory\022\n\n\002id\030\001 \002(\005\022\030\n\020confidence_level\030\002"
    " \002(\005\032\277\003\n\020NativeAdTemplate\022\032\n\022native_temp"
    "late_id\030\001 \002(\t\022E\n\005areas\030\002 \003(\01326.protocol."
    "Tanx.BidRequest.Mobile.NativeAdTemplate."
    "Area\032\307\002\n\004Area\022\n\n\002id\030\001 \002(\005\022\026\n\016creative_co"
    "unt\030\002 \001(\005\022Q\n\010creative\030\003 \001(\0132\?.protocol.T"
    "anx.BidRequest.Mobile.NativeAdTemplate.A"
    "rea.Creative\032\307\001\n\010Creative\022\027\n\017required_fi"
    "elds\030\001 \003(\005\022\032\n\022recommended_fields\030\002 \003(\005\022\035"
    "\n\025title_max_safe_length\030\003 \001(\005\022 \n\030ad_word"
    "s_max_safe_length\030\004 \001(\005\022\022\n\nimage_size\030\005 "
    "\001(\t\022\025\n\raction_fields\030\006 \003(\005\022\032\n\022multichoic"
    "e_fields\030\007 \003(\005\0327\n\017ContentCategory\022\n\n\002id\030"
    "\001 \002(\005\022\030\n\020confidence_level\030\002 \002(\005\032\371\002\n\005Vide"
    "o\022A\n\014video_format\030\001 \003(\0162+.protocol.Tanx."
    "BidRequest.Video.VideoFormat\0228\n\007content\030"
    "\002 \001(\0132\'.protocol.Tanx.BidRequest.Video.C"
    "ontent\022\033\n\023videoad_start_delay\030\003 \001(\005\022#\n\033v"
    "ideoad_section_start_delay\030\004 \001(\005\022\027\n\017min_"
    "ad_duration\030\005 \001(\005\022\027\n\017max_ad_duration\030\006 \001"
    "(\005\022\020\n\010protocol\030\007 \001(\t\032<\n\007Content\022\r\n\005title"
    "\030\001 \001(\t\022\020\n\010duration\030\002 \001(\005\022\020\n\010keywords\030\003 \003"
    "(\t\"/\n\013VideoFormat\022\017\n\013VIDEO_FLASH\020\000\022\017\n\013VI"
    "DEO_HTML5\020\001\032\207\003\n\004Deal\022A\n\013prefer_deal\030\001 \001("
    "\0132,.protocol.Tanx.BidRequest.Deal.Prefer"
    "redDeal\022\?\n\010priv_auc\030\002 \001(\0132-.protocol.Tan"
    "x.BidRequest.Deal.PrivateAuction\032N\n\rPref"
    "erredDeal\022\016\n\006dealid\030\001 \002(\r\022\026\n\016advertiser_"
    "ids\030\002 \003(\r\022\025\n\rfix_cpm_price\030\003 \001(\r\032\252\001\n\016Pri"
    "vateAuction\022\016\n\006dealid\030\001 \002(\r\022L\n\013buyer_rul"
    "es\030\002 \003(\01327.protocol.Tanx.BidRequest.Deal"
    ".PrivateAuction.BuyerRule\032:\n\tBuyerRule\022\026"
    "\n\016advertiser_ids\030\001 \003(\r\022\025\n\rmin_cpm_price\030"
    "\002 \001(\r\0325\n\rCrowdCategory\022\n\n\002id\030\001 \002(\005\022\030\n\020co"
    "nfidence_level\030\002 \001(\r\"\374\004\n\013BidResponse\022\017\n\007"
    "version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022+\n\003ads\030\003 \003(\0132"
    "\036.protocol.Tanx.BidResponse.Ads\022!\n\022is_re"
    "cognized_user\030\004 \001(\010:\005false\032\376\003\n\003Ads\022\022\n\nad"
    "zinfo_id\030\001 \002(\r\022\025\n\rmax_cpm_price\030\002 \002(\r\022\030\n"
    "\020ad_bid_count_idx\030\003 \001(\r\022\024\n\014html_snippet\030"
    "\004 \001(\t\022\031\n\021click_through_url\030\005 \003(\t\022\020\n\010cate"
    "gory\030\006 \003(\005\022\025\n\rcreative_type\030\007 \003(\005\022\024\n\014net"
    "work_guid\030\010 \001(\t\022\023\n\013extend_data\030\t \001(\t\022\027\n\017"
    "destination_url\030\n \003(\t\022\023\n\013creative_id\030\013 \001"
    "(\t\022\030\n\020resource_address\030\014 \001(\t\022\030\n\020feedback"
    "_address\030\r \001(\t\022\025\n\rvideo_snippet\030\016 \001(\t\0226\n"
    "\017mobile_creative\030\017 \001(\0132\035.protocol.Tanx.M"
    "obileCreative\022\016\n\006dealid\030\020 \001(\r\022\026\n\016adverti"
    "ser_ids\030\021 \003(\r\022\031\n\021download_complete\030\022 \001(\t"
    "\022\031\n\021winnotice_address\030\023 \001(\t\022\036\n\026creative_"
    "adaptive_type\030\024 \001(\005\"\314\001\n\tBidResult\022\017\n\007ver"
    "sion\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022)\n\003res\030\003 \003(\0132\034.p"
    "rotocol.Tanx.BidResult.Res\032v\n\003Res\022\022\n\nadz"
    "info_id\030\001 \002(\r\022\030\n\020ad_bid_count_idx\030\002 \001(\r\022"
    "\026\n\013result_code\030\003 \001(\005:\0010\022\024\n\014result_price\030"
    "\004 \001(\r\022\023\n\013extend_data\030\005 \001(\t\"\276\005\n\016MobileCre"
    "ative\022\017\n\007version\030\001 \002(\005\022\013\n\003bid\030\002 \002(\t\022\021\n\tv"
    "iew_type\030\003 \001(\r\0229\n\tcreatives\030\004 \003(\0132&.prot"
    "ocol.Tanx.MobileCreative.Creative\022\032\n\022nat"
    "ive_template_id\030\005 \001(\t\0221\n\005areas\030\006 \003(\0132\".p"
    "rotocol.Tanx.MobileCreative.Area\032\241\003\n\010Cre"
    "ative\022\017\n\007img_url\030\001 \001(\t\022\020\n\010img_size\030\002 \001(\t"
    "\022\r\n\005title\030\003 \001(\t\022\021\n\tclick_url\030\004 \001(\t\022\027\n\017de"
    "stination_url\030\005 \001(\t\0229\n\004attr\030\006 \003(\0132+.prot"
    "ocol.Tanx.MobileCreative.Creative.Attr\022\023"
    "\n\013creative_id\030\007 \001(\t\022\020\n\010category\030\010 \003(\005\022N\n"
    "\017tracking_events\030\t \001(\01325.protocol.Tanx.M"
    "obileCreative.Creative.TrackingEvents\032#\n"
    "\004Attr\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\032`\n\016Tr"
    "ackingEvents\022\030\n\020impression_event\030\001 \003(\t\022\023"
    "\n\013click_event\030\002 \003(\t\022\037\n\027download_complete"
    "_event\030\003 \003(\t\032M\n\004Area\022\n\n\002id\030\001 \002(\005\0229\n\tcrea"
    "tives\030\002 \003(\0132&.protocol.Tanx.MobileCreati"
    "ve.Creative", 5811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tanx_bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_AdzInfo::default_instance_ = new BidRequest_AdzInfo();
  BidRequest_AdzInfo_BuyerRule::default_instance_ = new BidRequest_AdzInfo_BuyerRule();
  BidRequest_UserAttribute::default_instance_ = new BidRequest_UserAttribute();
  BidRequest_PrivateInfo::default_instance_ = new BidRequest_PrivateInfo();
  BidRequest_Mobile::default_instance_ = new BidRequest_Mobile();
  BidRequest_Mobile_Device::default_instance_ = new BidRequest_Mobile_Device();
  BidRequest_Mobile_AppCategory::default_instance_ = new BidRequest_Mobile_AppCategory();
  BidRequest_Mobile_NativeAdTemplate::default_instance_ = new BidRequest_Mobile_NativeAdTemplate();
  BidRequest_Mobile_NativeAdTemplate_Area::default_instance_ = new BidRequest_Mobile_NativeAdTemplate_Area();
  BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_ = new BidRequest_Mobile_NativeAdTemplate_Area_Creative();
  BidRequest_ContentCategory::default_instance_ = new BidRequest_ContentCategory();
  BidRequest_Video::default_instance_ = new BidRequest_Video();
  BidRequest_Video_Content::default_instance_ = new BidRequest_Video_Content();
  BidRequest_Deal::default_instance_ = new BidRequest_Deal();
  BidRequest_Deal_PreferredDeal::default_instance_ = new BidRequest_Deal_PreferredDeal();
  BidRequest_Deal_PrivateAuction::default_instance_ = new BidRequest_Deal_PrivateAuction();
  BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_ = new BidRequest_Deal_PrivateAuction_BuyerRule();
  BidRequest_CrowdCategory::default_instance_ = new BidRequest_CrowdCategory();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Ads::default_instance_ = new BidResponse_Ads();
  BidResult::default_instance_ = new BidResult();
  BidResult_Res::default_instance_ = new BidResult_Res();
  MobileCreative::default_instance_ = new MobileCreative();
  MobileCreative_Creative::default_instance_ = new MobileCreative_Creative();
  MobileCreative_Creative_Attr::default_instance_ = new MobileCreative_Creative_Attr();
  MobileCreative_Creative_TrackingEvents::default_instance_ = new MobileCreative_Creative_TrackingEvents();
  MobileCreative_Area::default_instance_ = new MobileCreative_Area();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_AdzInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdzInfo_BuyerRule::default_instance_->InitAsDefaultInstance();
  BidRequest_UserAttribute::default_instance_->InitAsDefaultInstance();
  BidRequest_PrivateInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_AppCategory::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_NativeAdTemplate::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_NativeAdTemplate_Area::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_->InitAsDefaultInstance();
  BidRequest_ContentCategory::default_instance_->InitAsDefaultInstance();
  BidRequest_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_Video_Content::default_instance_->InitAsDefaultInstance();
  BidRequest_Deal::default_instance_->InitAsDefaultInstance();
  BidRequest_Deal_PreferredDeal::default_instance_->InitAsDefaultInstance();
  BidRequest_Deal_PrivateAuction::default_instance_->InitAsDefaultInstance();
  BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_->InitAsDefaultInstance();
  BidRequest_CrowdCategory::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Ads::default_instance_->InitAsDefaultInstance();
  BidResult::default_instance_->InitAsDefaultInstance();
  BidResult_Res::default_instance_->InitAsDefaultInstance();
  MobileCreative::default_instance_->InitAsDefaultInstance();
  MobileCreative_Creative::default_instance_->InitAsDefaultInstance();
  MobileCreative_Creative_Attr::default_instance_->InitAsDefaultInstance();
  MobileCreative_Creative_TrackingEvents::default_instance_->InitAsDefaultInstance();
  MobileCreative_Area::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tanx_5fbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tanx_5fbidding_2eproto {
  StaticDescriptorInitializer_tanx_5fbidding_2eproto() {
    protobuf_AddDesc_tanx_5fbidding_2eproto();
  }
} static_descriptor_initializer_tanx_5fbidding_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_Location_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_Location_descriptor_;
}
bool BidRequest_AdzInfo_Location_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::NA;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::FIRST_VIEW;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::OTHER_VIEW;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::Location_MIN;
const BidRequest_AdzInfo_Location BidRequest_AdzInfo::Location_MAX;
const int BidRequest_AdzInfo::Location_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_AdzInfo_ViewScreen_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_ViewScreen_descriptor_;
}
bool BidRequest_AdzInfo_ViewScreen_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_NA;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FIRST;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_SECOND;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_THIRD;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FOURTH;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_FIFTH;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::SCREEN_OTHER;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::ViewScreen_MIN;
const BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::ViewScreen_MAX;
const int BidRequest_AdzInfo::ViewScreen_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdzInfo_BuyerRule::kAdvertiserIdsFieldNumber;
const int BidRequest_AdzInfo_BuyerRule::kMinCpmPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdzInfo_BuyerRule::BidRequest_AdzInfo_BuyerRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
}

void BidRequest_AdzInfo_BuyerRule::InitAsDefaultInstance() {
}

BidRequest_AdzInfo_BuyerRule::BidRequest_AdzInfo_BuyerRule(const BidRequest_AdzInfo_BuyerRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
}

void BidRequest_AdzInfo_BuyerRule::SharedCtor() {
  _cached_size_ = 0;
  advertiser_ids_ = 0u;
  min_cpm_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdzInfo_BuyerRule::~BidRequest_AdzInfo_BuyerRule() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  SharedDtor();
}

void BidRequest_AdzInfo_BuyerRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdzInfo_BuyerRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdzInfo_BuyerRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_BuyerRule_descriptor_;
}

const BidRequest_AdzInfo_BuyerRule& BidRequest_AdzInfo_BuyerRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdzInfo_BuyerRule* BidRequest_AdzInfo_BuyerRule::default_instance_ = NULL;

BidRequest_AdzInfo_BuyerRule* BidRequest_AdzInfo_BuyerRule::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdzInfo_BuyerRule* n = new BidRequest_AdzInfo_BuyerRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdzInfo_BuyerRule::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_AdzInfo_BuyerRule, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdzInfo_BuyerRule*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(advertiser_ids_, min_cpm_price_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdzInfo_BuyerRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 advertiser_ids = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advertiser_ids_)));
          set_has_advertiser_ids();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_cpm_price;
        break;
      }

      // optional uint32 min_cpm_price = 2;
      case 2: {
        if (tag == 16) {
         parse_min_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cpm_price_)));
          set_has_min_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  return false;
#undef DO_
}

void BidRequest_AdzInfo_BuyerRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  // optional uint32 advertiser_ids = 1;
  if (has_advertiser_ids()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->advertiser_ids(), output);
  }

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_cpm_price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
}

::google::protobuf::uint8* BidRequest_AdzInfo_BuyerRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  // optional uint32 advertiser_ids = 1;
  if (has_advertiser_ids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->advertiser_ids(), target);
  }

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_cpm_price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  return target;
}

int BidRequest_AdzInfo_BuyerRule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 advertiser_ids = 1;
    if (has_advertiser_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advertiser_ids());
    }

    // optional uint32 min_cpm_price = 2;
    if (has_min_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_cpm_price());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdzInfo_BuyerRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdzInfo_BuyerRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdzInfo_BuyerRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
    MergeFrom(*source);
  }
}

void BidRequest_AdzInfo_BuyerRule::MergeFrom(const BidRequest_AdzInfo_BuyerRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advertiser_ids()) {
      set_advertiser_ids(from.advertiser_ids());
    }
    if (from.has_min_cpm_price()) {
      set_min_cpm_price(from.min_cpm_price());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdzInfo_BuyerRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdzInfo_BuyerRule::CopyFrom(const BidRequest_AdzInfo_BuyerRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.AdzInfo.BuyerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdzInfo_BuyerRule::IsInitialized() const {

  return true;
}

void BidRequest_AdzInfo_BuyerRule::Swap(BidRequest_AdzInfo_BuyerRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdzInfo_BuyerRule::InternalSwap(BidRequest_AdzInfo_BuyerRule* other) {
  std::swap(advertiser_ids_, other->advertiser_ids_);
  std::swap(min_cpm_price_, other->min_cpm_price_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdzInfo_BuyerRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdzInfo_BuyerRule_descriptor_;
  metadata.reflection = BidRequest_AdzInfo_BuyerRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdzInfo::kIdFieldNumber;
const int BidRequest_AdzInfo::kPidFieldNumber;
const int BidRequest_AdzInfo::kPublisherIdFieldNumber;
const int BidRequest_AdzInfo::kSizeFieldNumber;
const int BidRequest_AdzInfo::kAdBidCountFieldNumber;
const int BidRequest_AdzInfo::kViewTypeFieldNumber;
const int BidRequest_AdzInfo::kExcludedFilterFieldNumber;
const int BidRequest_AdzInfo::kMinCpmPriceFieldNumber;
const int BidRequest_AdzInfo::kAdzLocationFieldNumber;
const int BidRequest_AdzInfo::kViewScreenFieldNumber;
const int BidRequest_AdzInfo::kPageSessionAdIdxFieldNumber;
const int BidRequest_AdzInfo::kApiFieldNumber;
const int BidRequest_AdzInfo::kBuyerRulesFieldNumber;
const int BidRequest_AdzInfo::kAllowedCreativeLevelFieldNumber;
const int BidRequest_AdzInfo::kPublisherFilterIdFieldNumber;
const int BidRequest_AdzInfo::kAutoExpandableFieldNumber;
const int BidRequest_AdzInfo::kTriggerExpandableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdzInfo::BidRequest_AdzInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.AdzInfo)
}

void BidRequest_AdzInfo::InitAsDefaultInstance() {
}

BidRequest_AdzInfo::BidRequest_AdzInfo(const BidRequest_AdzInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.AdzInfo)
}

void BidRequest_AdzInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  pid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ad_bid_count_ = 2u;
  min_cpm_price_ = 0u;
  adz_location_ = 0;
  view_screen_ = 0;
  page_session_ad_idx_ = 0u;
  allowed_creative_level_ = 0u;
  auto_expandable_ = false;
  trigger_expandable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdzInfo::~BidRequest_AdzInfo() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.AdzInfo)
  SharedDtor();
}

void BidRequest_AdzInfo::SharedDtor() {
  pid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_AdzInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdzInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdzInfo_descriptor_;
}

const BidRequest_AdzInfo& BidRequest_AdzInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdzInfo* BidRequest_AdzInfo::default_instance_ = NULL;

BidRequest_AdzInfo* BidRequest_AdzInfo::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdzInfo* n = new BidRequest_AdzInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdzInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.AdzInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_AdzInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdzInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 159u) {
    id_ = 0u;
    if (has_pid()) {
      pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_publisher_id()) {
      publisher_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_size()) {
      size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ad_bid_count_ = 2u;
    min_cpm_price_ = 0u;
  }
  if (_has_bits_[8 / 32] & 42752u) {
    ZR_(adz_location_, page_session_ad_idx_);
    ZR_(allowed_creative_level_, auto_expandable_);
  }
  trigger_expandable_ = false;

#undef ZR_HELPER_
#undef ZR_

  view_type_.Clear();
  excluded_filter_.Clear();
  api_.Clear();
  buyer_rules_.Clear();
  publisher_filter_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdzInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.AdzInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pid;
        break;
      }

      // required string pid = 2;
      case 2: {
        if (tag == 18) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.AdzInfo.pid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_size;
        break;
      }

      // optional string size = 3;
      case 3: {
        if (tag == 26) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->size().data(), this->size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.AdzInfo.size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ad_bid_count;
        break;
      }

      // optional uint32 ad_bid_count = 4 [default = 2];
      case 4: {
        if (tag == 32) {
         parse_ad_bid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_)));
          set_has_ad_bid_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_view_type;
        break;
      }

      // repeated uint32 view_type = 5;
      case 5: {
        if (tag == 40) {
         parse_view_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_view_type())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_view_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_view_type;
        if (input->ExpectTag(48)) goto parse_excluded_filter;
        break;
      }

      // repeated uint32 excluded_filter = 6;
      case 6: {
        if (tag == 48) {
         parse_excluded_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_excluded_filter())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_excluded_filter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_excluded_filter;
        if (input->ExpectTag(56)) goto parse_min_cpm_price;
        break;
      }

      // optional uint32 min_cpm_price = 7;
      case 7: {
        if (tag == 56) {
         parse_min_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cpm_price_)));
          set_has_min_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_adz_location;
        break;
      }

      // optional .protocol.Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
      case 8: {
        if (tag == 64) {
         parse_adz_location:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Tanx::BidRequest_AdzInfo_Location_IsValid(value)) {
            set_adz_location(static_cast< ::protocol::Tanx::BidRequest_AdzInfo_Location >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_view_screen;
        break;
      }

      // optional .protocol.Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
      case 9: {
        if (tag == 72) {
         parse_view_screen:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Tanx::BidRequest_AdzInfo_ViewScreen_IsValid(value)) {
            set_view_screen(static_cast< ::protocol::Tanx::BidRequest_AdzInfo_ViewScreen >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_page_session_ad_idx;
        break;
      }

      // optional uint32 page_session_ad_idx = 10;
      case 10: {
        if (tag == 80) {
         parse_page_session_ad_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_session_ad_idx_)));
          set_has_page_session_ad_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher_id;
        break;
      }

      // optional string publisher_id = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publisher_id().data(), this->publisher_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.AdzInfo.publisher_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_api;
        break;
      }

      // repeated uint32 api = 12;
      case 12: {
        if (tag == 96) {
         parse_api:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_api())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_api())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_api;
        if (input->ExpectTag(106)) goto parse_buyer_rules;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
      case 13: {
        if (tag == 106) {
         parse_buyer_rules:
          DO_(input->IncrementRecursionDepth());
         parse_loop_buyer_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buyer_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_buyer_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(112)) goto parse_allowed_creative_level;
        break;
      }

      // optional uint32 allowed_creative_level = 14;
      case 14: {
        if (tag == 112) {
         parse_allowed_creative_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowed_creative_level_)));
          set_has_allowed_creative_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_publisher_filter_id;
        break;
      }

      // repeated string publisher_filter_id = 15;
      case 15: {
        if (tag == 122) {
         parse_publisher_filter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_publisher_filter_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publisher_filter_id(this->publisher_filter_id_size() - 1).data(),
            this->publisher_filter_id(this->publisher_filter_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_publisher_filter_id;
        if (input->ExpectTag(128)) goto parse_auto_expandable;
        break;
      }

      // optional bool auto_expandable = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_auto_expandable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_expandable_)));
          set_has_auto_expandable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_trigger_expandable;
        break;
      }

      // optional bool trigger_expandable = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_trigger_expandable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trigger_expandable_)));
          set_has_trigger_expandable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.AdzInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.AdzInfo)
  return false;
#undef DO_
}

void BidRequest_AdzInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.AdzInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.AdzInfo.pid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pid(), output);
  }

  // optional string size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.AdzInfo.size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->size(), output);
  }

  // optional uint32 ad_bid_count = 4 [default = 2];
  if (has_ad_bid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ad_bid_count(), output);
  }

  // repeated uint32 view_type = 5;
  for (int i = 0; i < this->view_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->view_type(i), output);
  }

  // repeated uint32 excluded_filter = 6;
  for (int i = 0; i < this->excluded_filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->excluded_filter(i), output);
  }

  // optional uint32 min_cpm_price = 7;
  if (has_min_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->min_cpm_price(), output);
  }

  // optional .protocol.Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
  if (has_adz_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->adz_location(), output);
  }

  // optional .protocol.Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
  if (has_view_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->view_screen(), output);
  }

  // optional uint32 page_session_ad_idx = 10;
  if (has_page_session_ad_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->page_session_ad_idx(), output);
  }

  // optional string publisher_id = 11;
  if (has_publisher_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_id().data(), this->publisher_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.AdzInfo.publisher_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->publisher_id(), output);
  }

  // repeated uint32 api = 12;
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->api(i), output);
  }

  // repeated .protocol.Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
  for (unsigned int i = 0, n = this->buyer_rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->buyer_rules(i), output);
  }

  // optional uint32 allowed_creative_level = 14;
  if (has_allowed_creative_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->allowed_creative_level(), output);
  }

  // repeated string publisher_filter_id = 15;
  for (int i = 0; i < this->publisher_filter_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_filter_id(i).data(), this->publisher_filter_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->publisher_filter_id(i), output);
  }

  // optional bool auto_expandable = 16 [default = false];
  if (has_auto_expandable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->auto_expandable(), output);
  }

  // optional bool trigger_expandable = 17 [default = false];
  if (has_trigger_expandable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->trigger_expandable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.AdzInfo)
}

::google::protobuf::uint8* BidRequest_AdzInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.AdzInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.AdzInfo.pid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pid(), target);
  }

  // optional string size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.AdzInfo.size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->size(), target);
  }

  // optional uint32 ad_bid_count = 4 [default = 2];
  if (has_ad_bid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ad_bid_count(), target);
  }

  // repeated uint32 view_type = 5;
  for (int i = 0; i < this->view_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->view_type(i), target);
  }

  // repeated uint32 excluded_filter = 6;
  for (int i = 0; i < this->excluded_filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->excluded_filter(i), target);
  }

  // optional uint32 min_cpm_price = 7;
  if (has_min_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->min_cpm_price(), target);
  }

  // optional .protocol.Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
  if (has_adz_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->adz_location(), target);
  }

  // optional .protocol.Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
  if (has_view_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->view_screen(), target);
  }

  // optional uint32 page_session_ad_idx = 10;
  if (has_page_session_ad_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->page_session_ad_idx(), target);
  }

  // optional string publisher_id = 11;
  if (has_publisher_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_id().data(), this->publisher_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.AdzInfo.publisher_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->publisher_id(), target);
  }

  // repeated uint32 api = 12;
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->api(i), target);
  }

  // repeated .protocol.Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
  for (unsigned int i = 0, n = this->buyer_rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->buyer_rules(i), false, target);
  }

  // optional uint32 allowed_creative_level = 14;
  if (has_allowed_creative_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->allowed_creative_level(), target);
  }

  // repeated string publisher_filter_id = 15;
  for (int i = 0; i < this->publisher_filter_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publisher_filter_id(i).data(), this->publisher_filter_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->publisher_filter_id(i), target);
  }

  // optional bool auto_expandable = 16 [default = false];
  if (has_auto_expandable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->auto_expandable(), target);
  }

  // optional bool trigger_expandable = 17 [default = false];
  if (has_trigger_expandable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->trigger_expandable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.AdzInfo)
  return target;
}

int BidRequest_AdzInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.BidRequest.AdzInfo)
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_pid()) {
    // required string pid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());
  }

  return total_size;
}
int BidRequest_AdzInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.AdzInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required string pid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 156u) {
    // optional string publisher_id = 11;
    if (has_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher_id());
    }

    // optional string size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->size());
    }

    // optional uint32 ad_bid_count = 4 [default = 2];
    if (has_ad_bid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count());
    }

    // optional uint32 min_cpm_price = 7;
    if (has_min_cpm_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_cpm_price());
    }

  }
  if (_has_bits_[8 / 32] & 42752u) {
    // optional .protocol.Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
    if (has_adz_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adz_location());
    }

    // optional .protocol.Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
    if (has_view_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->view_screen());
    }

    // optional uint32 page_session_ad_idx = 10;
    if (has_page_session_ad_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_session_ad_idx());
    }

    // optional uint32 allowed_creative_level = 14;
    if (has_allowed_creative_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allowed_creative_level());
    }

    // optional bool auto_expandable = 16 [default = false];
    if (has_auto_expandable()) {
      total_size += 2 + 1;
    }

  }
  // optional bool trigger_expandable = 17 [default = false];
  if (has_trigger_expandable()) {
    total_size += 2 + 1;
  }

  // repeated uint32 view_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->view_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->view_type(i));
    }
    total_size += 1 * this->view_type_size() + data_size;
  }

  // repeated uint32 excluded_filter = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_filter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->excluded_filter(i));
    }
    total_size += 1 * this->excluded_filter_size() + data_size;
  }

  // repeated uint32 api = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->api(i));
    }
    total_size += 1 * this->api_size() + data_size;
  }

  // repeated .protocol.Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
  total_size += 1 * this->buyer_rules_size();
  for (int i = 0; i < this->buyer_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyer_rules(i));
  }

  // repeated string publisher_filter_id = 15;
  total_size += 1 * this->publisher_filter_id_size();
  for (int i = 0; i < this->publisher_filter_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->publisher_filter_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdzInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.AdzInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdzInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdzInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.AdzInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.AdzInfo)
    MergeFrom(*source);
  }
}

void BidRequest_AdzInfo::MergeFrom(const BidRequest_AdzInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.AdzInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  view_type_.MergeFrom(from.view_type_);
  excluded_filter_.MergeFrom(from.excluded_filter_);
  api_.MergeFrom(from.api_);
  buyer_rules_.MergeFrom(from.buyer_rules_);
  publisher_filter_id_.MergeFrom(from.publisher_filter_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pid()) {
      set_has_pid();
      pid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pid_);
    }
    if (from.has_publisher_id()) {
      set_has_publisher_id();
      publisher_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publisher_id_);
    }
    if (from.has_size()) {
      set_has_size();
      size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.size_);
    }
    if (from.has_ad_bid_count()) {
      set_ad_bid_count(from.ad_bid_count());
    }
    if (from.has_min_cpm_price()) {
      set_min_cpm_price(from.min_cpm_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adz_location()) {
      set_adz_location(from.adz_location());
    }
    if (from.has_view_screen()) {
      set_view_screen(from.view_screen());
    }
    if (from.has_page_session_ad_idx()) {
      set_page_session_ad_idx(from.page_session_ad_idx());
    }
    if (from.has_allowed_creative_level()) {
      set_allowed_creative_level(from.allowed_creative_level());
    }
    if (from.has_auto_expandable()) {
      set_auto_expandable(from.auto_expandable());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trigger_expandable()) {
      set_trigger_expandable(from.trigger_expandable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdzInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.AdzInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdzInfo::CopyFrom(const BidRequest_AdzInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.AdzInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdzInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_AdzInfo::Swap(BidRequest_AdzInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdzInfo::InternalSwap(BidRequest_AdzInfo* other) {
  std::swap(id_, other->id_);
  pid_.Swap(&other->pid_);
  publisher_id_.Swap(&other->publisher_id_);
  size_.Swap(&other->size_);
  std::swap(ad_bid_count_, other->ad_bid_count_);
  view_type_.UnsafeArenaSwap(&other->view_type_);
  excluded_filter_.UnsafeArenaSwap(&other->excluded_filter_);
  std::swap(min_cpm_price_, other->min_cpm_price_);
  std::swap(adz_location_, other->adz_location_);
  std::swap(view_screen_, other->view_screen_);
  std::swap(page_session_ad_idx_, other->page_session_ad_idx_);
  api_.UnsafeArenaSwap(&other->api_);
  buyer_rules_.UnsafeArenaSwap(&other->buyer_rules_);
  std::swap(allowed_creative_level_, other->allowed_creative_level_);
  publisher_filter_id_.UnsafeArenaSwap(&other->publisher_filter_id_);
  std::swap(auto_expandable_, other->auto_expandable_);
  std::swap(trigger_expandable_, other->trigger_expandable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdzInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdzInfo_descriptor_;
  metadata.reflection = BidRequest_AdzInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_UserAttribute::kIdFieldNumber;
const int BidRequest_UserAttribute::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_UserAttribute::BidRequest_UserAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.UserAttribute)
}

void BidRequest_UserAttribute::InitAsDefaultInstance() {
}

BidRequest_UserAttribute::BidRequest_UserAttribute(const BidRequest_UserAttribute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.UserAttribute)
}

void BidRequest_UserAttribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_UserAttribute::~BidRequest_UserAttribute() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.UserAttribute)
  SharedDtor();
}

void BidRequest_UserAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_UserAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_UserAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_UserAttribute_descriptor_;
}

const BidRequest_UserAttribute& BidRequest_UserAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_UserAttribute* BidRequest_UserAttribute::default_instance_ = NULL;

BidRequest_UserAttribute* BidRequest_UserAttribute::New(::google::protobuf::Arena* arena) const {
  BidRequest_UserAttribute* n = new BidRequest_UserAttribute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_UserAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.UserAttribute)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_UserAttribute, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_UserAttribute*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, timestamp_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_UserAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.UserAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.UserAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.UserAttribute)
  return false;
#undef DO_
}

void BidRequest_UserAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.UserAttribute)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.UserAttribute)
}

::google::protobuf::uint8* BidRequest_UserAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.UserAttribute)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.UserAttribute)
  return target;
}

int BidRequest_UserAttribute::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.UserAttribute)
  int total_size = 0;

  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional uint32 timestamp = 2;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_UserAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.UserAttribute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_UserAttribute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_UserAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.UserAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.UserAttribute)
    MergeFrom(*source);
  }
}

void BidRequest_UserAttribute::MergeFrom(const BidRequest_UserAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.UserAttribute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_UserAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.UserAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_UserAttribute::CopyFrom(const BidRequest_UserAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.UserAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_UserAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_UserAttribute::Swap(BidRequest_UserAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_UserAttribute::InternalSwap(BidRequest_UserAttribute* other) {
  std::swap(id_, other->id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_UserAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_UserAttribute_descriptor_;
  metadata.reflection = BidRequest_UserAttribute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_PrivateInfo::kTanxCnauiFieldNumber;
const int BidRequest_PrivateInfo::kRiskControlFieldNumber;
const int BidRequest_PrivateInfo::kNickNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_PrivateInfo::BidRequest_PrivateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.PrivateInfo)
}

void BidRequest_PrivateInfo::InitAsDefaultInstance() {
}

BidRequest_PrivateInfo::BidRequest_PrivateInfo(const BidRequest_PrivateInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.PrivateInfo)
}

void BidRequest_PrivateInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tanx_cnaui_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  risk_control_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_PrivateInfo::~BidRequest_PrivateInfo() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.PrivateInfo)
  SharedDtor();
}

void BidRequest_PrivateInfo::SharedDtor() {
  tanx_cnaui_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  risk_control_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_PrivateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_PrivateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_PrivateInfo_descriptor_;
}

const BidRequest_PrivateInfo& BidRequest_PrivateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_PrivateInfo* BidRequest_PrivateInfo::default_instance_ = NULL;

BidRequest_PrivateInfo* BidRequest_PrivateInfo::New(::google::protobuf::Arena* arena) const {
  BidRequest_PrivateInfo* n = new BidRequest_PrivateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_PrivateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.PrivateInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_tanx_cnaui()) {
      tanx_cnaui_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_risk_control()) {
      risk_control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nick_name()) {
      nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_PrivateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.PrivateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tanx_cnaui = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tanx_cnaui()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tanx_cnaui().data(), this->tanx_cnaui().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_risk_control;
        break;
      }

      // optional string risk_control = 2;
      case 2: {
        if (tag == 18) {
         parse_risk_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_risk_control()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->risk_control().data(), this->risk_control().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.PrivateInfo.risk_control");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (tag == 26) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.PrivateInfo.nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.PrivateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.PrivateInfo)
  return false;
#undef DO_
}

void BidRequest_PrivateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.PrivateInfo)
  // optional string tanx_cnaui = 1;
  if (has_tanx_cnaui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tanx_cnaui().data(), this->tanx_cnaui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tanx_cnaui(), output);
  }

  // optional string risk_control = 2;
  if (has_risk_control()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->risk_control().data(), this->risk_control().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.PrivateInfo.risk_control");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->risk_control(), output);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.PrivateInfo.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.PrivateInfo)
}

::google::protobuf::uint8* BidRequest_PrivateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.PrivateInfo)
  // optional string tanx_cnaui = 1;
  if (has_tanx_cnaui()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tanx_cnaui().data(), this->tanx_cnaui().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tanx_cnaui(), target);
  }

  // optional string risk_control = 2;
  if (has_risk_control()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->risk_control().data(), this->risk_control().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.PrivateInfo.risk_control");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->risk_control(), target);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.PrivateInfo.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.PrivateInfo)
  return target;
}

int BidRequest_PrivateInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.PrivateInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string tanx_cnaui = 1;
    if (has_tanx_cnaui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tanx_cnaui());
    }

    // optional string risk_control = 2;
    if (has_risk_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->risk_control());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_PrivateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.PrivateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_PrivateInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_PrivateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.PrivateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.PrivateInfo)
    MergeFrom(*source);
  }
}

void BidRequest_PrivateInfo::MergeFrom(const BidRequest_PrivateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.PrivateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tanx_cnaui()) {
      set_has_tanx_cnaui();
      tanx_cnaui_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tanx_cnaui_);
    }
    if (from.has_risk_control()) {
      set_has_risk_control();
      risk_control_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.risk_control_);
    }
    if (from.has_nick_name()) {
      set_has_nick_name();
      nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_PrivateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.PrivateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_PrivateInfo::CopyFrom(const BidRequest_PrivateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.PrivateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_PrivateInfo::IsInitialized() const {

  return true;
}

void BidRequest_PrivateInfo::Swap(BidRequest_PrivateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_PrivateInfo::InternalSwap(BidRequest_PrivateInfo* other) {
  tanx_cnaui_.Swap(&other->tanx_cnaui_);
  risk_control_.Swap(&other->risk_control_);
  nick_name_.Swap(&other->nick_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_PrivateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_PrivateInfo_descriptor_;
  metadata.reflection = BidRequest_PrivateInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_Device_ScreenOrientation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_Device_ScreenOrientation_descriptor_;
}
bool BidRequest_Mobile_Device_ScreenOrientation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_UNKNOWN;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_PORTRAIT;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::SCREEN_ORIENTATION_LANDSCAPE;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::ScreenOrientation_MIN;
const BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::ScreenOrientation_MAX;
const int BidRequest_Mobile_Device::ScreenOrientation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_Device::kPlatformFieldNumber;
const int BidRequest_Mobile_Device::kBrandFieldNumber;
const int BidRequest_Mobile_Device::kModelFieldNumber;
const int BidRequest_Mobile_Device::kOsFieldNumber;
const int BidRequest_Mobile_Device::kOsVersionFieldNumber;
const int BidRequest_Mobile_Device::kNetworkFieldNumber;
const int BidRequest_Mobile_Device::kOperatorFieldNumber;
const int BidRequest_Mobile_Device::kLongitudeFieldNumber;
const int BidRequest_Mobile_Device::kLatitudeFieldNumber;
const int BidRequest_Mobile_Device::kDeviceSizeFieldNumber;
const int BidRequest_Mobile_Device::kDeviceIdFieldNumber;
const int BidRequest_Mobile_Device::kDevicePixelRatioFieldNumber;
const int BidRequest_Mobile_Device::kScreenOrientationFieldNumber;
const int BidRequest_Mobile_Device::kAndroidIdFieldNumber;
const int BidRequest_Mobile_Device::kIdfaFieldNumber;
const int BidRequest_Mobile_Device::kImeiFieldNumber;
const int BidRequest_Mobile_Device::kMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_Device::BidRequest_Mobile_Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Mobile.Device)
}

void BidRequest_Mobile_Device::InitAsDefaultInstance() {
}

BidRequest_Mobile_Device::BidRequest_Mobile_Device(const BidRequest_Mobile_Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Mobile.Device)
}

void BidRequest_Mobile_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_ = 0u;
  operator__ = 0;
  longitude_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_pixel_ratio_ = 1000;
  screen_orientation_ = 0;
  android_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_Device::~BidRequest_Mobile_Device() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Mobile.Device)
  SharedDtor();
}

void BidRequest_Mobile_Device::SharedDtor() {
  platform_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  longitude_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  android_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_Device_descriptor_;
}

const BidRequest_Mobile_Device& BidRequest_Mobile_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_Device* BidRequest_Mobile_Device::default_instance_ = NULL;

BidRequest_Mobile_Device* BidRequest_Mobile_Device::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_Device* n = new BidRequest_Mobile_Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Mobile.Device)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Mobile_Device, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile_Device*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(network_, operator__);
    if (has_platform()) {
      platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_brand()) {
      brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_os()) {
      os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_os_version()) {
      os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_longitude()) {
      longitude_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_latitude()) {
      latitude_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device_size()) {
      device_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device_id()) {
      device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    device_pixel_ratio_ = 1000;
    screen_orientation_ = 0;
    if (has_android_id()) {
      android_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_idfa()) {
      idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_imei()) {
      imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_mac()) {
    mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Mobile.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string platform = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_brand;
        break;
      }

      // optional string brand = 2;
      case 2: {
        if (tag == 18) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_os;
        break;
      }

      // optional string os = 4;
      case 4: {
        if (tag == 34) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_os_version;
        break;
      }

      // optional string os_version = 5;
      case 5: {
        if (tag == 42) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.os_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_network;
        break;
      }

      // optional uint32 network = 6;
      case 6: {
        if (tag == 48) {
         parse_network:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_)));
          set_has_network();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_operator;
        break;
      }

      // optional int32 operator = 7;
      case 7: {
        if (tag == 56) {
         parse_operator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator__)));
          set_has_operator_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_longitude;
        break;
      }

      // optional string longitude = 8;
      case 8: {
        if (tag == 66) {
         parse_longitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_longitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->longitude().data(), this->longitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.longitude");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_latitude;
        break;
      }

      // optional string latitude = 9;
      case 9: {
        if (tag == 74) {
         parse_latitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latitude()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->latitude().data(), this->latitude().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.latitude");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_device_size;
        break;
      }

      // optional string device_size = 10;
      case 10: {
        if (tag == 82) {
         parse_device_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_size().data(), this->device_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.device_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_device_id;
        break;
      }

      // optional string device_id = 11;
      case 11: {
        if (tag == 90) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_device_pixel_ratio;
        break;
      }

      // optional int32 device_pixel_ratio = 12 [default = 1000];
      case 12: {
        if (tag == 96) {
         parse_device_pixel_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_pixel_ratio_)));
          set_has_device_pixel_ratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_screen_orientation;
        break;
      }

      // optional .protocol.Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
      case 13: {
        if (tag == 104) {
         parse_screen_orientation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Tanx::BidRequest_Mobile_Device_ScreenOrientation_IsValid(value)) {
            set_screen_orientation(static_cast< ::protocol::Tanx::BidRequest_Mobile_Device_ScreenOrientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_android_id;
        break;
      }

      // optional string android_id = 14;
      case 14: {
        if (tag == 114) {
         parse_android_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_android_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->android_id().data(), this->android_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.android_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_idfa;
        break;
      }

      // optional string idfa = 15;
      case 15: {
        if (tag == 122) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.idfa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_imei;
        break;
      }

      // optional string imei = 16;
      case 16: {
        if (tag == 130) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.imei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_mac;
        break;
      }

      // optional string mac = 17;
      case 17: {
        if (tag == 138) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.Device.mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Mobile.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Mobile.Device)
  return false;
#undef DO_
}

void BidRequest_Mobile_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Mobile.Device)
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->platform(), output);
  }

  // optional string brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->brand(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // optional string os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os(), output);
  }

  // optional string os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->os_version(), output);
  }

  // optional uint32 network = 6;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network(), output);
  }

  // optional int32 operator = 7;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->operator_(), output);
  }

  // optional string longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.longitude");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->longitude(), output);
  }

  // optional string latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.latitude");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->latitude(), output);
  }

  // optional string device_size = 10;
  if (has_device_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_size().data(), this->device_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.device_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->device_size(), output);
  }

  // optional string device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->device_id(), output);
  }

  // optional int32 device_pixel_ratio = 12 [default = 1000];
  if (has_device_pixel_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->device_pixel_ratio(), output);
  }

  // optional .protocol.Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
  if (has_screen_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->screen_orientation(), output);
  }

  // optional string android_id = 14;
  if (has_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_id().data(), this->android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.android_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->android_id(), output);
  }

  // optional string idfa = 15;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->idfa(), output);
  }

  // optional string imei = 16;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->imei(), output);
  }

  // optional string mac = 17;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->mac(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Mobile.Device)
}

::google::protobuf::uint8* BidRequest_Mobile_Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Mobile.Device)
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platform(), target);
  }

  // optional string brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brand(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os(), target);
  }

  // optional string os_version = 5;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.os_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->os_version(), target);
  }

  // optional uint32 network = 6;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network(), target);
  }

  // optional int32 operator = 7;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->operator_(), target);
  }

  // optional string longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->longitude().data(), this->longitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.longitude");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->longitude(), target);
  }

  // optional string latitude = 9;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->latitude().data(), this->latitude().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.latitude");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->latitude(), target);
  }

  // optional string device_size = 10;
  if (has_device_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_size().data(), this->device_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.device_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device_size(), target);
  }

  // optional string device_id = 11;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->device_id(), target);
  }

  // optional int32 device_pixel_ratio = 12 [default = 1000];
  if (has_device_pixel_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->device_pixel_ratio(), target);
  }

  // optional .protocol.Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
  if (has_screen_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->screen_orientation(), target);
  }

  // optional string android_id = 14;
  if (has_android_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->android_id().data(), this->android_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.android_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->android_id(), target);
  }

  // optional string idfa = 15;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->idfa(), target);
  }

  // optional string imei = 16;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->imei(), target);
  }

  // optional string mac = 17;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.Device.mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->mac(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Mobile.Device)
  return target;
}

int BidRequest_Mobile_Device::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Mobile.Device)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string brand = 2;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os = 4;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string os_version = 5;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional uint32 network = 6;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network());
    }

    // optional int32 operator = 7;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_());
    }

    // optional string longitude = 8;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->longitude());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string latitude = 9;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latitude());
    }

    // optional string device_size = 10;
    if (has_device_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_size());
    }

    // optional string device_id = 11;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }

    // optional int32 device_pixel_ratio = 12 [default = 1000];
    if (has_device_pixel_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_pixel_ratio());
    }

    // optional .protocol.Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
    if (has_screen_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->screen_orientation());
    }

    // optional string android_id = 14;
    if (has_android_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->android_id());
    }

    // optional string idfa = 15;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string imei = 16;
    if (has_imei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  // optional string mac = 17;
  if (has_mac()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Mobile.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Mobile.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Mobile.Device)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_Device::MergeFrom(const BidRequest_Mobile_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Mobile.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_has_platform();
      platform_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.platform_);
    }
    if (from.has_brand()) {
      set_has_brand();
      brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_os()) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (from.has_os_version()) {
      set_has_os_version();
      os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
    if (from.has_longitude()) {
      set_has_longitude();
      longitude_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.longitude_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_latitude()) {
      set_has_latitude();
      latitude_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latitude_);
    }
    if (from.has_device_size()) {
      set_has_device_size();
      device_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_size_);
    }
    if (from.has_device_id()) {
      set_has_device_id();
      device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
    }
    if (from.has_device_pixel_ratio()) {
      set_device_pixel_ratio(from.device_pixel_ratio());
    }
    if (from.has_screen_orientation()) {
      set_screen_orientation(from.screen_orientation());
    }
    if (from.has_android_id()) {
      set_has_android_id();
      android_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.android_id_);
    }
    if (from.has_idfa()) {
      set_has_idfa();
      idfa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idfa_);
    }
    if (from.has_imei()) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mac()) {
      set_has_mac();
      mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Mobile.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_Device::CopyFrom(const BidRequest_Mobile_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Mobile.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_Device::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_Device::Swap(BidRequest_Mobile_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_Device::InternalSwap(BidRequest_Mobile_Device* other) {
  platform_.Swap(&other->platform_);
  brand_.Swap(&other->brand_);
  model_.Swap(&other->model_);
  os_.Swap(&other->os_);
  os_version_.Swap(&other->os_version_);
  std::swap(network_, other->network_);
  std::swap(operator__, other->operator__);
  longitude_.Swap(&other->longitude_);
  latitude_.Swap(&other->latitude_);
  device_size_.Swap(&other->device_size_);
  device_id_.Swap(&other->device_id_);
  std::swap(device_pixel_ratio_, other->device_pixel_ratio_);
  std::swap(screen_orientation_, other->screen_orientation_);
  android_id_.Swap(&other->android_id_);
  idfa_.Swap(&other->idfa_);
  imei_.Swap(&other->imei_);
  mac_.Swap(&other->mac_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_Device_descriptor_;
  metadata.reflection = BidRequest_Mobile_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_AppCategory::kIdFieldNumber;
const int BidRequest_Mobile_AppCategory::kConfidenceLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_AppCategory::BidRequest_Mobile_AppCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Mobile.AppCategory)
}

void BidRequest_Mobile_AppCategory::InitAsDefaultInstance() {
}

BidRequest_Mobile_AppCategory::BidRequest_Mobile_AppCategory(const BidRequest_Mobile_AppCategory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Mobile.AppCategory)
}

void BidRequest_Mobile_AppCategory::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  confidence_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_AppCategory::~BidRequest_Mobile_AppCategory() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Mobile.AppCategory)
  SharedDtor();
}

void BidRequest_Mobile_AppCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_AppCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_AppCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_AppCategory_descriptor_;
}

const BidRequest_Mobile_AppCategory& BidRequest_Mobile_AppCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_AppCategory* BidRequest_Mobile_AppCategory::default_instance_ = NULL;

BidRequest_Mobile_AppCategory* BidRequest_Mobile_AppCategory::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_AppCategory* n = new BidRequest_Mobile_AppCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_AppCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Mobile_AppCategory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile_AppCategory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_level_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_AppCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confidence_level;
        break;
      }

      // required int32 confidence_level = 2;
      case 2: {
        if (tag == 16) {
         parse_confidence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_level_)));
          set_has_confidence_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Mobile.AppCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Mobile.AppCategory)
  return false;
#undef DO_
}

void BidRequest_Mobile_AppCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confidence_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Mobile.AppCategory)
}

::google::protobuf::uint8* BidRequest_Mobile_AppCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confidence_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Mobile.AppCategory)
  return target;
}

int BidRequest_Mobile_AppCategory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_confidence_level()) {
    // required int32 confidence_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confidence_level());
  }

  return total_size;
}
int BidRequest_Mobile_AppCategory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 confidence_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confidence_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_AppCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_AppCategory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_AppCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Mobile.AppCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Mobile.AppCategory)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_AppCategory::MergeFrom(const BidRequest_Mobile_AppCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confidence_level()) {
      set_confidence_level(from.confidence_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_AppCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_AppCategory::CopyFrom(const BidRequest_Mobile_AppCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Mobile.AppCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_AppCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_Mobile_AppCategory::Swap(BidRequest_Mobile_AppCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_AppCategory::InternalSwap(BidRequest_Mobile_AppCategory* other) {
  std::swap(id_, other->id_);
  std::swap(confidence_level_, other->confidence_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_AppCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_AppCategory_descriptor_;
  metadata.reflection = BidRequest_Mobile_AppCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kRequiredFieldsFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kRecommendedFieldsFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kTitleMaxSafeLengthFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kAdWordsMaxSafeLengthFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kImageSizeFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kActionFieldsFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area_Creative::kMultichoiceFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_NativeAdTemplate_Area_Creative::BidRequest_Mobile_NativeAdTemplate_Area_Creative()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::InitAsDefaultInstance() {
}

BidRequest_Mobile_NativeAdTemplate_Area_Creative::BidRequest_Mobile_NativeAdTemplate_Area_Creative(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_max_safe_length_ = 0;
  ad_words_max_safe_length_ = 0;
  image_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_NativeAdTemplate_Area_Creative::~BidRequest_Mobile_NativeAdTemplate_Area_Creative() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  SharedDtor();
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::SharedDtor() {
  image_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_Area_Creative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_;
}

const BidRequest_Mobile_NativeAdTemplate_Area_Creative& BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_NativeAdTemplate_Area_Creative* BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance_ = NULL;

BidRequest_Mobile_NativeAdTemplate_Area_Creative* BidRequest_Mobile_NativeAdTemplate_Area_Creative::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_NativeAdTemplate_Area_Creative* n = new BidRequest_Mobile_NativeAdTemplate_Area_Creative;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Mobile_NativeAdTemplate_Area_Creative, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile_NativeAdTemplate_Area_Creative*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 28u) {
    ZR_(title_max_safe_length_, ad_words_max_safe_length_);
    if (has_image_size()) {
      image_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  required_fields_.Clear();
  recommended_fields_.Clear();
  action_fields_.Clear();
  multichoice_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 required_fields = 1;
      case 1: {
        if (tag == 8) {
         parse_required_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_required_fields())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_required_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_required_fields;
        if (input->ExpectTag(16)) goto parse_recommended_fields;
        break;
      }

      // repeated int32 recommended_fields = 2;
      case 2: {
        if (tag == 16) {
         parse_recommended_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_recommended_fields())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recommended_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recommended_fields;
        if (input->ExpectTag(24)) goto parse_title_max_safe_length;
        break;
      }

      // optional int32 title_max_safe_length = 3;
      case 3: {
        if (tag == 24) {
         parse_title_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_max_safe_length_)));
          set_has_title_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ad_words_max_safe_length;
        break;
      }

      // optional int32 ad_words_max_safe_length = 4;
      case 4: {
        if (tag == 32) {
         parse_ad_words_max_safe_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad_words_max_safe_length_)));
          set_has_ad_words_max_safe_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_size;
        break;
      }

      // optional string image_size = 5;
      case 5: {
        if (tag == 42) {
         parse_image_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_size().data(), this->image_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_action_fields;
        break;
      }

      // repeated int32 action_fields = 6;
      case 6: {
        if (tag == 48) {
         parse_action_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_action_fields())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_action_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_action_fields;
        if (input->ExpectTag(56)) goto parse_multichoice_fields;
        break;
      }

      // repeated int32 multichoice_fields = 7;
      case 7: {
        if (tag == 56) {
         parse_multichoice_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_multichoice_fields())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_multichoice_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multichoice_fields;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  return false;
#undef DO_
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  // repeated int32 required_fields = 1;
  for (int i = 0; i < this->required_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->required_fields(i), output);
  }

  // repeated int32 recommended_fields = 2;
  for (int i = 0; i < this->recommended_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->recommended_fields(i), output);
  }

  // optional int32 title_max_safe_length = 3;
  if (has_title_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->title_max_safe_length(), output);
  }

  // optional int32 ad_words_max_safe_length = 4;
  if (has_ad_words_max_safe_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ad_words_max_safe_length(), output);
  }

  // optional string image_size = 5;
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_size().data(), this->image_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_size(), output);
  }

  // repeated int32 action_fields = 6;
  for (int i = 0; i < this->action_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->action_fields(i), output);
  }

  // repeated int32 multichoice_fields = 7;
  for (int i = 0; i < this->multichoice_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->multichoice_fields(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
}

::google::protobuf::uint8* BidRequest_Mobile_NativeAdTemplate_Area_Creative::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  // repeated int32 required_fields = 1;
  for (int i = 0; i < this->required_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->required_fields(i), target);
  }

  // repeated int32 recommended_fields = 2;
  for (int i = 0; i < this->recommended_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->recommended_fields(i), target);
  }

  // optional int32 title_max_safe_length = 3;
  if (has_title_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->title_max_safe_length(), target);
  }

  // optional int32 ad_words_max_safe_length = 4;
  if (has_ad_words_max_safe_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ad_words_max_safe_length(), target);
  }

  // optional string image_size = 5;
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_size().data(), this->image_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_size(), target);
  }

  // repeated int32 action_fields = 6;
  for (int i = 0; i < this->action_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->action_fields(i), target);
  }

  // repeated int32 multichoice_fields = 7;
  for (int i = 0; i < this->multichoice_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->multichoice_fields(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  return target;
}

int BidRequest_Mobile_NativeAdTemplate_Area_Creative::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 title_max_safe_length = 3;
    if (has_title_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_max_safe_length());
    }

    // optional int32 ad_words_max_safe_length = 4;
    if (has_ad_words_max_safe_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ad_words_max_safe_length());
    }

    // optional string image_size = 5;
    if (has_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_size());
    }

  }
  // repeated int32 required_fields = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->required_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->required_fields(i));
    }
    total_size += 1 * this->required_fields_size() + data_size;
  }

  // repeated int32 recommended_fields = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->recommended_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recommended_fields(i));
    }
    total_size += 1 * this->recommended_fields_size() + data_size;
  }

  // repeated int32 action_fields = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->action_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->action_fields(i));
    }
    total_size += 1 * this->action_fields_size() + data_size;
  }

  // repeated int32 multichoice_fields = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->multichoice_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->multichoice_fields(i));
    }
    total_size += 1 * this->multichoice_fields_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_NativeAdTemplate_Area_Creative* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_NativeAdTemplate_Area_Creative>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::MergeFrom(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  required_fields_.MergeFrom(from.required_fields_);
  recommended_fields_.MergeFrom(from.recommended_fields_);
  action_fields_.MergeFrom(from.action_fields_);
  multichoice_fields_.MergeFrom(from.multichoice_fields_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_title_max_safe_length()) {
      set_title_max_safe_length(from.title_max_safe_length());
    }
    if (from.has_ad_words_max_safe_length()) {
      set_ad_words_max_safe_length(from.ad_words_max_safe_length());
    }
    if (from.has_image_size()) {
      set_has_image_size();
      image_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_size_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::CopyFrom(const BidRequest_Mobile_NativeAdTemplate_Area_Creative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_NativeAdTemplate_Area_Creative::Swap(BidRequest_Mobile_NativeAdTemplate_Area_Creative* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::InternalSwap(BidRequest_Mobile_NativeAdTemplate_Area_Creative* other) {
  required_fields_.UnsafeArenaSwap(&other->required_fields_);
  recommended_fields_.UnsafeArenaSwap(&other->recommended_fields_);
  std::swap(title_max_safe_length_, other->title_max_safe_length_);
  std::swap(ad_words_max_safe_length_, other->ad_words_max_safe_length_);
  image_size_.Swap(&other->image_size_);
  action_fields_.UnsafeArenaSwap(&other->action_fields_);
  multichoice_fields_.UnsafeArenaSwap(&other->multichoice_fields_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_NativeAdTemplate_Area_Creative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_NativeAdTemplate_Area_Creative_descriptor_;
  metadata.reflection = BidRequest_Mobile_NativeAdTemplate_Area_Creative_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_NativeAdTemplate_Area::kIdFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area::kCreativeCountFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate_Area::kCreativeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_NativeAdTemplate_Area::BidRequest_Mobile_NativeAdTemplate_Area()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
}

void BidRequest_Mobile_NativeAdTemplate_Area::InitAsDefaultInstance() {
  creative_ = const_cast< ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative*>(&::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative::default_instance());
}

BidRequest_Mobile_NativeAdTemplate_Area::BidRequest_Mobile_NativeAdTemplate_Area(const BidRequest_Mobile_NativeAdTemplate_Area& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
}

void BidRequest_Mobile_NativeAdTemplate_Area::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  creative_count_ = 0;
  creative_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_NativeAdTemplate_Area::~BidRequest_Mobile_NativeAdTemplate_Area() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  SharedDtor();
}

void BidRequest_Mobile_NativeAdTemplate_Area::SharedDtor() {
  if (this != default_instance_) {
    delete creative_;
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate_Area::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_NativeAdTemplate_Area_descriptor_;
}

const BidRequest_Mobile_NativeAdTemplate_Area& BidRequest_Mobile_NativeAdTemplate_Area::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_NativeAdTemplate_Area* BidRequest_Mobile_NativeAdTemplate_Area::default_instance_ = NULL;

BidRequest_Mobile_NativeAdTemplate_Area* BidRequest_Mobile_NativeAdTemplate_Area::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_NativeAdTemplate_Area* n = new BidRequest_Mobile_NativeAdTemplate_Area;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_NativeAdTemplate_Area::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Mobile_NativeAdTemplate_Area, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile_NativeAdTemplate_Area*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(id_, creative_count_);
    if (has_creative()) {
      if (creative_ != NULL) creative_->::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_NativeAdTemplate_Area::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creative_count;
        break;
      }

      // optional int32 creative_count = 2;
      case 2: {
        if (tag == 16) {
         parse_creative_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_count_)));
          set_has_creative_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creative;
        break;
      }

      // optional .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
      case 3: {
        if (tag == 26) {
         parse_creative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  return false;
#undef DO_
}

void BidRequest_Mobile_NativeAdTemplate_Area::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 creative_count = 2;
  if (has_creative_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->creative_count(), output);
  }

  // optional .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
  if (has_creative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->creative_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
}

::google::protobuf::uint8* BidRequest_Mobile_NativeAdTemplate_Area::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 creative_count = 2;
  if (has_creative_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->creative_count(), target);
  }

  // optional .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
  if (has_creative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->creative_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  return target;
}

int BidRequest_Mobile_NativeAdTemplate_Area::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 creative_count = 2;
    if (has_creative_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_count());
    }

    // optional .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
    if (has_creative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->creative_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_NativeAdTemplate_Area::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_NativeAdTemplate_Area* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_NativeAdTemplate_Area>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area::MergeFrom(const BidRequest_Mobile_NativeAdTemplate_Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_creative_count()) {
      set_creative_count(from.creative_count());
    }
    if (from.has_creative()) {
      mutable_creative()->::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative::MergeFrom(from.creative());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_NativeAdTemplate_Area::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_NativeAdTemplate_Area::CopyFrom(const BidRequest_Mobile_NativeAdTemplate_Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_NativeAdTemplate_Area::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_Mobile_NativeAdTemplate_Area::Swap(BidRequest_Mobile_NativeAdTemplate_Area* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_NativeAdTemplate_Area::InternalSwap(BidRequest_Mobile_NativeAdTemplate_Area* other) {
  std::swap(id_, other->id_);
  std::swap(creative_count_, other->creative_count_);
  std::swap(creative_, other->creative_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_NativeAdTemplate_Area::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_NativeAdTemplate_Area_descriptor_;
  metadata.reflection = BidRequest_Mobile_NativeAdTemplate_Area_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_NativeAdTemplate::kNativeTemplateIdFieldNumber;
const int BidRequest_Mobile_NativeAdTemplate::kAreasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_NativeAdTemplate::BidRequest_Mobile_NativeAdTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
}

void BidRequest_Mobile_NativeAdTemplate::InitAsDefaultInstance() {
}

BidRequest_Mobile_NativeAdTemplate::BidRequest_Mobile_NativeAdTemplate(const BidRequest_Mobile_NativeAdTemplate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
}

void BidRequest_Mobile_NativeAdTemplate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  native_template_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_NativeAdTemplate::~BidRequest_Mobile_NativeAdTemplate() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  SharedDtor();
}

void BidRequest_Mobile_NativeAdTemplate::SharedDtor() {
  native_template_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_NativeAdTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_NativeAdTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_NativeAdTemplate_descriptor_;
}

const BidRequest_Mobile_NativeAdTemplate& BidRequest_Mobile_NativeAdTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_NativeAdTemplate* BidRequest_Mobile_NativeAdTemplate::default_instance_ = NULL;

BidRequest_Mobile_NativeAdTemplate* BidRequest_Mobile_NativeAdTemplate::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_NativeAdTemplate* n = new BidRequest_Mobile_NativeAdTemplate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_NativeAdTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  if (has_native_template_id()) {
    native_template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_NativeAdTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string native_template_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_native_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->native_template_id().data(), this->native_template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_areas;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
      case 2: {
        if (tag == 18) {
         parse_areas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_areas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  return false;
#undef DO_
}

void BidRequest_Mobile_NativeAdTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  // required string native_template_id = 1;
  if (has_native_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id().data(), this->native_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->native_template_id(), output);
  }

  // repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
  for (unsigned int i = 0, n = this->areas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->areas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
}

::google::protobuf::uint8* BidRequest_Mobile_NativeAdTemplate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  // required string native_template_id = 1;
  if (has_native_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id().data(), this->native_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->native_template_id(), target);
  }

  // repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
  for (unsigned int i = 0, n = this->areas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->areas(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  return target;
}

int BidRequest_Mobile_NativeAdTemplate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  int total_size = 0;

  // required string native_template_id = 1;
  if (has_native_template_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->native_template_id());
  }
  // repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
  total_size += 1 * this->areas_size();
  for (int i = 0; i < this->areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areas(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_NativeAdTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_NativeAdTemplate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_NativeAdTemplate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_NativeAdTemplate::MergeFrom(const BidRequest_Mobile_NativeAdTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  areas_.MergeFrom(from.areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_native_template_id()) {
      set_has_native_template_id();
      native_template_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.native_template_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_NativeAdTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_NativeAdTemplate::CopyFrom(const BidRequest_Mobile_NativeAdTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_NativeAdTemplate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->areas())) return false;
  return true;
}

void BidRequest_Mobile_NativeAdTemplate::Swap(BidRequest_Mobile_NativeAdTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_NativeAdTemplate::InternalSwap(BidRequest_Mobile_NativeAdTemplate* other) {
  native_template_id_.Swap(&other->native_template_id_);
  areas_.UnsafeArenaSwap(&other->areas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_NativeAdTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_NativeAdTemplate_descriptor_;
  metadata.reflection = BidRequest_Mobile_NativeAdTemplate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile::kIsAppFieldNumber;
const int BidRequest_Mobile::kAdNumFieldNumber;
const int BidRequest_Mobile::kAdKeywordFieldNumber;
const int BidRequest_Mobile::kIsFullscreenFieldNumber;
const int BidRequest_Mobile::kPackageNameFieldNumber;
const int BidRequest_Mobile::kDeviceFieldNumber;
const int BidRequest_Mobile::kNativeTemplateIdFieldNumber;
const int BidRequest_Mobile::kLandingTypeFieldNumber;
const int BidRequest_Mobile::kAppNameFieldNumber;
const int BidRequest_Mobile::kAppCategoriesFieldNumber;
const int BidRequest_Mobile::kNativeAdTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile::BidRequest_Mobile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Mobile)
}

void BidRequest_Mobile::InitAsDefaultInstance() {
  device_ = const_cast< ::protocol::Tanx::BidRequest_Mobile_Device*>(&::protocol::Tanx::BidRequest_Mobile_Device::default_instance());
}

BidRequest_Mobile::BidRequest_Mobile(const BidRequest_Mobile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Mobile)
}

void BidRequest_Mobile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  is_app_ = false;
  ad_num_ = 0u;
  is_fullscreen_ = false;
  package_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = NULL;
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile::~BidRequest_Mobile() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Mobile)
  SharedDtor();
}

void BidRequest_Mobile::SharedDtor() {
  package_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete device_;
  }
}

void BidRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_descriptor_;
}

const BidRequest_Mobile& BidRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile* BidRequest_Mobile::default_instance_ = NULL;

BidRequest_Mobile* BidRequest_Mobile::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile* n = new BidRequest_Mobile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Mobile)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Mobile, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 59u) {
    ZR_(ad_num_, is_fullscreen_);
    if (has_package_name()) {
      package_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device()) {
      if (device_ != NULL) device_->::protocol::Tanx::BidRequest_Mobile_Device::Clear();
    }
  }
  if (has_app_name()) {
    app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  ad_keyword_.Clear();
  native_template_id_.Clear();
  landing_type_.Clear();
  app_categories_.Clear();
  native_ad_template_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Mobile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_app = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_app_)));
          set_has_is_app();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ad_num;
        break;
      }

      // optional uint32 ad_num = 2;
      case 2: {
        if (tag == 16) {
         parse_ad_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_num_)));
          set_has_ad_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ad_keyword;
        break;
      }

      // repeated string ad_keyword = 3;
      case 3: {
        if (tag == 26) {
         parse_ad_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ad_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ad_keyword(this->ad_keyword_size() - 1).data(),
            this->ad_keyword(this->ad_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.ad_keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ad_keyword;
        if (input->ExpectTag(32)) goto parse_is_fullscreen;
        break;
      }

      // optional bool is_fullscreen = 4;
      case 4: {
        if (tag == 32) {
         parse_is_fullscreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fullscreen_)));
          set_has_is_fullscreen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_package_name;
        break;
      }

      // optional string package_name = 5;
      case 5: {
        if (tag == 42) {
         parse_package_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package_name().data(), this->package_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.package_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional .protocol.Tanx.BidRequest.Mobile.Device device = 6;
      case 6: {
        if (tag == 50) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_native_template_id;
        break;
      }

      // repeated string native_template_id = 7;
      case 7: {
        if (tag == 58) {
         parse_native_template_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_native_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->native_template_id(this->native_template_id_size() - 1).data(),
            this->native_template_id(this->native_template_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.native_template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_native_template_id;
        if (input->ExpectTag(64)) goto parse_landing_type;
        break;
      }

      // repeated int32 landing_type = 8;
      case 8: {
        if (tag == 64) {
         parse_landing_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_landing_type())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_landing_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_landing_type;
        if (input->ExpectTag(74)) goto parse_app_name;
        break;
      }

      // optional string app_name = 9;
      case 9: {
        if (tag == 74) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Mobile.app_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_app_categories;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
      case 10: {
        if (tag == 82) {
         parse_app_categories:
          DO_(input->IncrementRecursionDepth());
         parse_loop_app_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_app_categories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_app_categories;
        if (input->ExpectTag(90)) goto parse_loop_native_ad_template;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
      case 11: {
        if (tag == 90) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_native_ad_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_native_ad_template()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_native_ad_template;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Mobile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Mobile)
  return false;
#undef DO_
}

void BidRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Mobile)
  // optional bool is_app = 1;
  if (has_is_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_app(), output);
  }

  // optional uint32 ad_num = 2;
  if (has_ad_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ad_num(), output);
  }

  // repeated string ad_keyword = 3;
  for (int i = 0; i < this->ad_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_keyword(i).data(), this->ad_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.ad_keyword");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ad_keyword(i), output);
  }

  // optional bool is_fullscreen = 4;
  if (has_is_fullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_fullscreen(), output);
  }

  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.package_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->package_name(), output);
  }

  // optional .protocol.Tanx.BidRequest.Mobile.Device device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->device_, output);
  }

  // repeated string native_template_id = 7;
  for (int i = 0; i < this->native_template_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id(i).data(), this->native_template_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.native_template_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->native_template_id(i), output);
  }

  // repeated int32 landing_type = 8;
  for (int i = 0; i < this->landing_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->landing_type(i), output);
  }

  // optional string app_name = 9;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->app_name(), output);
  }

  // repeated .protocol.Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
  for (unsigned int i = 0, n = this->app_categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->app_categories(i), output);
  }

  // repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
  for (unsigned int i = 0, n = this->native_ad_template_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->native_ad_template(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Mobile)
}

::google::protobuf::uint8* BidRequest_Mobile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Mobile)
  // optional bool is_app = 1;
  if (has_is_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_app(), target);
  }

  // optional uint32 ad_num = 2;
  if (has_ad_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ad_num(), target);
  }

  // repeated string ad_keyword = 3;
  for (int i = 0; i < this->ad_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_keyword(i).data(), this->ad_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.ad_keyword");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->ad_keyword(i), target);
  }

  // optional bool is_fullscreen = 4;
  if (has_is_fullscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_fullscreen(), target);
  }

  // optional string package_name = 5;
  if (has_package_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package_name().data(), this->package_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.package_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->package_name(), target);
  }

  // optional .protocol.Tanx.BidRequest.Mobile.Device device = 6;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->device_, false, target);
  }

  // repeated string native_template_id = 7;
  for (int i = 0; i < this->native_template_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id(i).data(), this->native_template_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.native_template_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->native_template_id(i), target);
  }

  // repeated int32 landing_type = 8;
  for (int i = 0; i < this->landing_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->landing_type(i), target);
  }

  // optional string app_name = 9;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Mobile.app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->app_name(), target);
  }

  // repeated .protocol.Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
  for (unsigned int i = 0, n = this->app_categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->app_categories(i), false, target);
  }

  // repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
  for (unsigned int i = 0, n = this->native_ad_template_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->native_ad_template(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Mobile)
  return target;
}

int BidRequest_Mobile::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Mobile)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 59u) {
    // optional bool is_app = 1;
    if (has_is_app()) {
      total_size += 1 + 1;
    }

    // optional uint32 ad_num = 2;
    if (has_ad_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_num());
    }

    // optional bool is_fullscreen = 4;
    if (has_is_fullscreen()) {
      total_size += 1 + 1;
    }

    // optional string package_name = 5;
    if (has_package_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .protocol.Tanx.BidRequest.Mobile.Device device = 6;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_);
    }

  }
  // optional string app_name = 9;
  if (has_app_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_name());
  }

  // repeated string ad_keyword = 3;
  total_size += 1 * this->ad_keyword_size();
  for (int i = 0; i < this->ad_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ad_keyword(i));
  }

  // repeated string native_template_id = 7;
  total_size += 1 * this->native_template_id_size();
  for (int i = 0; i < this->native_template_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->native_template_id(i));
  }

  // repeated int32 landing_type = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->landing_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->landing_type(i));
    }
    total_size += 1 * this->landing_type_size() + data_size;
  }

  // repeated .protocol.Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
  total_size += 1 * this->app_categories_size();
  for (int i = 0; i < this->app_categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app_categories(i));
  }

  // repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
  total_size += 1 * this->native_ad_template_size();
  for (int i = 0; i < this->native_ad_template_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->native_ad_template(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Mobile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Mobile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Mobile)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile::MergeFrom(const BidRequest_Mobile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Mobile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ad_keyword_.MergeFrom(from.ad_keyword_);
  native_template_id_.MergeFrom(from.native_template_id_);
  landing_type_.MergeFrom(from.landing_type_);
  app_categories_.MergeFrom(from.app_categories_);
  native_ad_template_.MergeFrom(from.native_ad_template_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_app()) {
      set_is_app(from.is_app());
    }
    if (from.has_ad_num()) {
      set_ad_num(from.ad_num());
    }
    if (from.has_is_fullscreen()) {
      set_is_fullscreen(from.is_fullscreen());
    }
    if (from.has_package_name()) {
      set_has_package_name();
      package_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (from.has_device()) {
      mutable_device()->::protocol::Tanx::BidRequest_Mobile_Device::MergeFrom(from.device());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_app_name()) {
      set_has_app_name();
      app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Mobile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile::CopyFrom(const BidRequest_Mobile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Mobile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->app_categories())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->native_ad_template())) return false;
  return true;
}

void BidRequest_Mobile::Swap(BidRequest_Mobile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile::InternalSwap(BidRequest_Mobile* other) {
  std::swap(is_app_, other->is_app_);
  std::swap(ad_num_, other->ad_num_);
  ad_keyword_.UnsafeArenaSwap(&other->ad_keyword_);
  std::swap(is_fullscreen_, other->is_fullscreen_);
  package_name_.Swap(&other->package_name_);
  std::swap(device_, other->device_);
  native_template_id_.UnsafeArenaSwap(&other->native_template_id_);
  landing_type_.UnsafeArenaSwap(&other->landing_type_);
  app_name_.Swap(&other->app_name_);
  app_categories_.UnsafeArenaSwap(&other->app_categories_);
  native_ad_template_.UnsafeArenaSwap(&other->native_ad_template_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_descriptor_;
  metadata.reflection = BidRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_ContentCategory::kIdFieldNumber;
const int BidRequest_ContentCategory::kConfidenceLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_ContentCategory::BidRequest_ContentCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.ContentCategory)
}

void BidRequest_ContentCategory::InitAsDefaultInstance() {
}

BidRequest_ContentCategory::BidRequest_ContentCategory(const BidRequest_ContentCategory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.ContentCategory)
}

void BidRequest_ContentCategory::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  confidence_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_ContentCategory::~BidRequest_ContentCategory() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.ContentCategory)
  SharedDtor();
}

void BidRequest_ContentCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_ContentCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_ContentCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_ContentCategory_descriptor_;
}

const BidRequest_ContentCategory& BidRequest_ContentCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_ContentCategory* BidRequest_ContentCategory::default_instance_ = NULL;

BidRequest_ContentCategory* BidRequest_ContentCategory::New(::google::protobuf::Arena* arena) const {
  BidRequest_ContentCategory* n = new BidRequest_ContentCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_ContentCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.ContentCategory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_ContentCategory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_ContentCategory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_level_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_ContentCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.ContentCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confidence_level;
        break;
      }

      // required int32 confidence_level = 2;
      case 2: {
        if (tag == 16) {
         parse_confidence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_level_)));
          set_has_confidence_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.ContentCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.ContentCategory)
  return false;
#undef DO_
}

void BidRequest_ContentCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.ContentCategory)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confidence_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.ContentCategory)
}

::google::protobuf::uint8* BidRequest_ContentCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.ContentCategory)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 confidence_level = 2;
  if (has_confidence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confidence_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.ContentCategory)
  return target;
}

int BidRequest_ContentCategory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.BidRequest.ContentCategory)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_confidence_level()) {
    // required int32 confidence_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confidence_level());
  }

  return total_size;
}
int BidRequest_ContentCategory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.ContentCategory)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 confidence_level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confidence_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_ContentCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.ContentCategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_ContentCategory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_ContentCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.ContentCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.ContentCategory)
    MergeFrom(*source);
  }
}

void BidRequest_ContentCategory::MergeFrom(const BidRequest_ContentCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.ContentCategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confidence_level()) {
      set_confidence_level(from.confidence_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_ContentCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.ContentCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_ContentCategory::CopyFrom(const BidRequest_ContentCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.ContentCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_ContentCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_ContentCategory::Swap(BidRequest_ContentCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_ContentCategory::InternalSwap(BidRequest_ContentCategory* other) {
  std::swap(id_, other->id_);
  std::swap(confidence_level_, other->confidence_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_ContentCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_ContentCategory_descriptor_;
  metadata.reflection = BidRequest_ContentCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Video_VideoFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_VideoFormat_descriptor_;
}
bool BidRequest_Video_VideoFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_FLASH;
const BidRequest_Video_VideoFormat BidRequest_Video::VIDEO_HTML5;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MIN;
const BidRequest_Video_VideoFormat BidRequest_Video::VideoFormat_MAX;
const int BidRequest_Video::VideoFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Video_Content::kTitleFieldNumber;
const int BidRequest_Video_Content::kDurationFieldNumber;
const int BidRequest_Video_Content::kKeywordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Video_Content::BidRequest_Video_Content()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Video.Content)
}

void BidRequest_Video_Content::InitAsDefaultInstance() {
}

BidRequest_Video_Content::BidRequest_Video_Content(const BidRequest_Video_Content& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Video.Content)
}

void BidRequest_Video_Content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video_Content::~BidRequest_Video_Content() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Video.Content)
  SharedDtor();
}

void BidRequest_Video_Content::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Video_Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_Content_descriptor_;
}

const BidRequest_Video_Content& BidRequest_Video_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video_Content* BidRequest_Video_Content::default_instance_ = NULL;

BidRequest_Video_Content* BidRequest_Video_Content::New(::google::protobuf::Arena* arena) const {
  BidRequest_Video_Content* n = new BidRequest_Video_Content;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Video_Content::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Video.Content)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    duration_ = 0;
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Video_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Video.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Video.Content.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int32 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 3;
      case 3: {
        if (tag == 26) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Video.Content.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Video.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Video.Content)
  return false;
#undef DO_
}

void BidRequest_Video_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Video.Content)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Video.Content.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration(), output);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Video.Content.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keywords(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Video.Content)
}

::google::protobuf::uint8* BidRequest_Video_Content::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Video.Content)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Video.Content.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional int32 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration(), target);
  }

  // repeated string keywords = 3;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Video.Content.keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->keywords(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Video.Content)
  return target;
}

int BidRequest_Video_Content::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Video.Content)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  // repeated string keywords = 3;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video_Content::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Video.Content)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Video_Content* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Video_Content>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Video.Content)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Video.Content)
    MergeFrom(*source);
  }
}

void BidRequest_Video_Content::MergeFrom(const BidRequest_Video_Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Video.Content)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Video_Content::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Video.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video_Content::CopyFrom(const BidRequest_Video_Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Video.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video_Content::IsInitialized() const {

  return true;
}

void BidRequest_Video_Content::Swap(BidRequest_Video_Content* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Video_Content::InternalSwap(BidRequest_Video_Content* other) {
  title_.Swap(&other->title_);
  std::swap(duration_, other->duration_);
  keywords_.UnsafeArenaSwap(&other->keywords_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Video_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_Content_descriptor_;
  metadata.reflection = BidRequest_Video_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Video::kVideoFormatFieldNumber;
const int BidRequest_Video::kContentFieldNumber;
const int BidRequest_Video::kVideoadStartDelayFieldNumber;
const int BidRequest_Video::kVideoadSectionStartDelayFieldNumber;
const int BidRequest_Video::kMinAdDurationFieldNumber;
const int BidRequest_Video::kMaxAdDurationFieldNumber;
const int BidRequest_Video::kProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Video::BidRequest_Video()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Video)
}

void BidRequest_Video::InitAsDefaultInstance() {
  content_ = const_cast< ::protocol::Tanx::BidRequest_Video_Content*>(&::protocol::Tanx::BidRequest_Video_Content::default_instance());
}

BidRequest_Video::BidRequest_Video(const BidRequest_Video& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Video)
}

void BidRequest_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = NULL;
  videoad_start_delay_ = 0;
  videoad_section_start_delay_ = 0;
  min_ad_duration_ = 0;
  max_ad_duration_ = 0;
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video::~BidRequest_Video() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Video)
  SharedDtor();
}

void BidRequest_Video::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete content_;
  }
}

void BidRequest_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_descriptor_;
}

const BidRequest_Video& BidRequest_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video* BidRequest_Video::default_instance_ = NULL;

BidRequest_Video* BidRequest_Video::New(::google::protobuf::Arena* arena) const {
  BidRequest_Video* n = new BidRequest_Video;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Video::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Video)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Video, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Video*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 126u) {
    ZR_(videoad_start_delay_, max_ad_duration_);
    if (has_content()) {
      if (content_ != NULL) content_->::protocol::Tanx::BidRequest_Video_Content::Clear();
    }
    if (has_protocol()) {
      protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  video_format_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.Tanx.BidRequest.Video.VideoFormat video_format = 1;
      case 1: {
        if (tag == 8) {
         parse_video_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Tanx::BidRequest_Video_VideoFormat_IsValid(value)) {
            add_video_format(static_cast< ::protocol::Tanx::BidRequest_Video_VideoFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::protocol::Tanx::BidRequest_Video_VideoFormat_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_video_format())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_video_format;
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .protocol.Tanx.BidRequest.Video.Content content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_videoad_start_delay;
        break;
      }

      // optional int32 videoad_start_delay = 3;
      case 3: {
        if (tag == 24) {
         parse_videoad_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_start_delay_)));
          set_has_videoad_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_videoad_section_start_delay;
        break;
      }

      // optional int32 videoad_section_start_delay = 4;
      case 4: {
        if (tag == 32) {
         parse_videoad_section_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videoad_section_start_delay_)));
          set_has_videoad_section_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_ad_duration;
        break;
      }

      // optional int32 min_ad_duration = 5;
      case 5: {
        if (tag == 40) {
         parse_min_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_ad_duration_)));
          set_has_min_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_ad_duration;
        break;
      }

      // optional int32 max_ad_duration = 6;
      case 6: {
        if (tag == 48) {
         parse_max_ad_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ad_duration_)));
          set_has_max_ad_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_protocol;
        break;
      }

      // optional string protocol = 7;
      case 7: {
        if (tag == 58) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.Video.protocol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Video)
  return false;
#undef DO_
}

void BidRequest_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Video)
  // repeated .protocol.Tanx.BidRequest.Video.VideoFormat video_format = 1;
  for (int i = 0; i < this->video_format_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->video_format(i), output);
  }

  // optional .protocol.Tanx.BidRequest.Video.Content content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->content_, output);
  }

  // optional int32 videoad_start_delay = 3;
  if (has_videoad_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->videoad_start_delay(), output);
  }

  // optional int32 videoad_section_start_delay = 4;
  if (has_videoad_section_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->videoad_section_start_delay(), output);
  }

  // optional int32 min_ad_duration = 5;
  if (has_min_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_ad_duration(), output);
  }

  // optional int32 max_ad_duration = 6;
  if (has_max_ad_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_ad_duration(), output);
  }

  // optional string protocol = 7;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Video.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->protocol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Video)
}

::google::protobuf::uint8* BidRequest_Video::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Video)
  // repeated .protocol.Tanx.BidRequest.Video.VideoFormat video_format = 1;
  for (int i = 0; i < this->video_format_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->video_format(i), target);
  }

  // optional .protocol.Tanx.BidRequest.Video.Content content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->content_, false, target);
  }

  // optional int32 videoad_start_delay = 3;
  if (has_videoad_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->videoad_start_delay(), target);
  }

  // optional int32 videoad_section_start_delay = 4;
  if (has_videoad_section_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->videoad_section_start_delay(), target);
  }

  // optional int32 min_ad_duration = 5;
  if (has_min_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_ad_duration(), target);
  }

  // optional int32 max_ad_duration = 6;
  if (has_max_ad_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_ad_duration(), target);
  }

  // optional string protocol = 7;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.Video.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->protocol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Video)
  return target;
}

int BidRequest_Video::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Video)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 126u) {
    // optional .protocol.Tanx.BidRequest.Video.Content content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_);
    }

    // optional int32 videoad_start_delay = 3;
    if (has_videoad_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_start_delay());
    }

    // optional int32 videoad_section_start_delay = 4;
    if (has_videoad_section_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videoad_section_start_delay());
    }

    // optional int32 min_ad_duration = 5;
    if (has_min_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_ad_duration());
    }

    // optional int32 max_ad_duration = 6;
    if (has_max_ad_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ad_duration());
    }

    // optional string protocol = 7;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

  }
  // repeated .protocol.Tanx.BidRequest.Video.VideoFormat video_format = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->video_format_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->video_format(i));
    }
    total_size += 1 * this->video_format_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Video)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Video* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Video>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Video)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Video)
    MergeFrom(*source);
  }
}

void BidRequest_Video::MergeFrom(const BidRequest_Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Video)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  video_format_.MergeFrom(from.video_format_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_content()) {
      mutable_content()->::protocol::Tanx::BidRequest_Video_Content::MergeFrom(from.content());
    }
    if (from.has_videoad_start_delay()) {
      set_videoad_start_delay(from.videoad_start_delay());
    }
    if (from.has_videoad_section_start_delay()) {
      set_videoad_section_start_delay(from.videoad_section_start_delay());
    }
    if (from.has_min_ad_duration()) {
      set_min_ad_duration(from.min_ad_duration());
    }
    if (from.has_max_ad_duration()) {
      set_max_ad_duration(from.max_ad_duration());
    }
    if (from.has_protocol()) {
      set_has_protocol();
      protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Video::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video::CopyFrom(const BidRequest_Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video::IsInitialized() const {

  return true;
}

void BidRequest_Video::Swap(BidRequest_Video* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Video::InternalSwap(BidRequest_Video* other) {
  video_format_.UnsafeArenaSwap(&other->video_format_);
  std::swap(content_, other->content_);
  std::swap(videoad_start_delay_, other->videoad_start_delay_);
  std::swap(videoad_section_start_delay_, other->videoad_section_start_delay_);
  std::swap(min_ad_duration_, other->min_ad_duration_);
  std::swap(max_ad_duration_, other->max_ad_duration_);
  protocol_.Swap(&other->protocol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_descriptor_;
  metadata.reflection = BidRequest_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Deal_PreferredDeal::kDealidFieldNumber;
const int BidRequest_Deal_PreferredDeal::kAdvertiserIdsFieldNumber;
const int BidRequest_Deal_PreferredDeal::kFixCpmPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Deal_PreferredDeal::BidRequest_Deal_PreferredDeal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Deal.PreferredDeal)
}

void BidRequest_Deal_PreferredDeal::InitAsDefaultInstance() {
}

BidRequest_Deal_PreferredDeal::BidRequest_Deal_PreferredDeal(const BidRequest_Deal_PreferredDeal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Deal.PreferredDeal)
}

void BidRequest_Deal_PreferredDeal::SharedCtor() {
  _cached_size_ = 0;
  dealid_ = 0u;
  fix_cpm_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Deal_PreferredDeal::~BidRequest_Deal_PreferredDeal() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  SharedDtor();
}

void BidRequest_Deal_PreferredDeal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Deal_PreferredDeal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Deal_PreferredDeal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Deal_PreferredDeal_descriptor_;
}

const BidRequest_Deal_PreferredDeal& BidRequest_Deal_PreferredDeal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Deal_PreferredDeal* BidRequest_Deal_PreferredDeal::default_instance_ = NULL;

BidRequest_Deal_PreferredDeal* BidRequest_Deal_PreferredDeal::New(::google::protobuf::Arena* arena) const {
  BidRequest_Deal_PreferredDeal* n = new BidRequest_Deal_PreferredDeal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Deal_PreferredDeal::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Deal_PreferredDeal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Deal_PreferredDeal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dealid_, fix_cpm_price_);

#undef ZR_HELPER_
#undef ZR_

  advertiser_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Deal_PreferredDeal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dealid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_advertiser_ids;
        break;
      }

      // repeated uint32 advertiser_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_advertiser_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_advertiser_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_advertiser_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_advertiser_ids;
        if (input->ExpectTag(24)) goto parse_fix_cpm_price;
        break;
      }

      // optional uint32 fix_cpm_price = 3;
      case 3: {
        if (tag == 24) {
         parse_fix_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fix_cpm_price_)));
          set_has_fix_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  return false;
#undef DO_
}

void BidRequest_Deal_PreferredDeal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dealid(), output);
  }

  // repeated uint32 advertiser_ids = 2;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->advertiser_ids(i), output);
  }

  // optional uint32 fix_cpm_price = 3;
  if (has_fix_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fix_cpm_price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Deal.PreferredDeal)
}

::google::protobuf::uint8* BidRequest_Deal_PreferredDeal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dealid(), target);
  }

  // repeated uint32 advertiser_ids = 2;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->advertiser_ids(i), target);
  }

  // optional uint32 fix_cpm_price = 3;
  if (has_fix_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fix_cpm_price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  return target;
}

int BidRequest_Deal_PreferredDeal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  int total_size = 0;

  // required uint32 dealid = 1;
  if (has_dealid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealid());
  }
  // optional uint32 fix_cpm_price = 3;
  if (has_fix_cpm_price()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fix_cpm_price());
  }

  // repeated uint32 advertiser_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->advertiser_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->advertiser_ids(i));
    }
    total_size += 1 * this->advertiser_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Deal_PreferredDeal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Deal_PreferredDeal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Deal_PreferredDeal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Deal.PreferredDeal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Deal.PreferredDeal)
    MergeFrom(*source);
  }
}

void BidRequest_Deal_PreferredDeal::MergeFrom(const BidRequest_Deal_PreferredDeal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  advertiser_ids_.MergeFrom(from.advertiser_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
    if (from.has_fix_cpm_price()) {
      set_fix_cpm_price(from.fix_cpm_price());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Deal_PreferredDeal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Deal_PreferredDeal::CopyFrom(const BidRequest_Deal_PreferredDeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Deal.PreferredDeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Deal_PreferredDeal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_Deal_PreferredDeal::Swap(BidRequest_Deal_PreferredDeal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Deal_PreferredDeal::InternalSwap(BidRequest_Deal_PreferredDeal* other) {
  std::swap(dealid_, other->dealid_);
  advertiser_ids_.UnsafeArenaSwap(&other->advertiser_ids_);
  std::swap(fix_cpm_price_, other->fix_cpm_price_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Deal_PreferredDeal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Deal_PreferredDeal_descriptor_;
  metadata.reflection = BidRequest_Deal_PreferredDeal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Deal_PrivateAuction_BuyerRule::kAdvertiserIdsFieldNumber;
const int BidRequest_Deal_PrivateAuction_BuyerRule::kMinCpmPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Deal_PrivateAuction_BuyerRule::BidRequest_Deal_PrivateAuction_BuyerRule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
}

void BidRequest_Deal_PrivateAuction_BuyerRule::InitAsDefaultInstance() {
}

BidRequest_Deal_PrivateAuction_BuyerRule::BidRequest_Deal_PrivateAuction_BuyerRule(const BidRequest_Deal_PrivateAuction_BuyerRule& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
}

void BidRequest_Deal_PrivateAuction_BuyerRule::SharedCtor() {
  _cached_size_ = 0;
  min_cpm_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Deal_PrivateAuction_BuyerRule::~BidRequest_Deal_PrivateAuction_BuyerRule() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  SharedDtor();
}

void BidRequest_Deal_PrivateAuction_BuyerRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Deal_PrivateAuction_BuyerRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Deal_PrivateAuction_BuyerRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_;
}

const BidRequest_Deal_PrivateAuction_BuyerRule& BidRequest_Deal_PrivateAuction_BuyerRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Deal_PrivateAuction_BuyerRule* BidRequest_Deal_PrivateAuction_BuyerRule::default_instance_ = NULL;

BidRequest_Deal_PrivateAuction_BuyerRule* BidRequest_Deal_PrivateAuction_BuyerRule::New(::google::protobuf::Arena* arena) const {
  BidRequest_Deal_PrivateAuction_BuyerRule* n = new BidRequest_Deal_PrivateAuction_BuyerRule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Deal_PrivateAuction_BuyerRule::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  min_cpm_price_ = 0u;
  advertiser_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Deal_PrivateAuction_BuyerRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 advertiser_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_advertiser_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_advertiser_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_advertiser_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_advertiser_ids;
        if (input->ExpectTag(16)) goto parse_min_cpm_price;
        break;
      }

      // optional uint32 min_cpm_price = 2;
      case 2: {
        if (tag == 16) {
         parse_min_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_cpm_price_)));
          set_has_min_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  return false;
#undef DO_
}

void BidRequest_Deal_PrivateAuction_BuyerRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  // repeated uint32 advertiser_ids = 1;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->advertiser_ids(i), output);
  }

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_cpm_price(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
}

::google::protobuf::uint8* BidRequest_Deal_PrivateAuction_BuyerRule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  // repeated uint32 advertiser_ids = 1;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->advertiser_ids(i), target);
  }

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_cpm_price(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  return target;
}

int BidRequest_Deal_PrivateAuction_BuyerRule::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  int total_size = 0;

  // optional uint32 min_cpm_price = 2;
  if (has_min_cpm_price()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_cpm_price());
  }

  // repeated uint32 advertiser_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->advertiser_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->advertiser_ids(i));
    }
    total_size += 1 * this->advertiser_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Deal_PrivateAuction_BuyerRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Deal_PrivateAuction_BuyerRule* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Deal_PrivateAuction_BuyerRule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
    MergeFrom(*source);
  }
}

void BidRequest_Deal_PrivateAuction_BuyerRule::MergeFrom(const BidRequest_Deal_PrivateAuction_BuyerRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  advertiser_ids_.MergeFrom(from.advertiser_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_min_cpm_price()) {
      set_min_cpm_price(from.min_cpm_price());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Deal_PrivateAuction_BuyerRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Deal_PrivateAuction_BuyerRule::CopyFrom(const BidRequest_Deal_PrivateAuction_BuyerRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Deal_PrivateAuction_BuyerRule::IsInitialized() const {

  return true;
}

void BidRequest_Deal_PrivateAuction_BuyerRule::Swap(BidRequest_Deal_PrivateAuction_BuyerRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Deal_PrivateAuction_BuyerRule::InternalSwap(BidRequest_Deal_PrivateAuction_BuyerRule* other) {
  advertiser_ids_.UnsafeArenaSwap(&other->advertiser_ids_);
  std::swap(min_cpm_price_, other->min_cpm_price_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Deal_PrivateAuction_BuyerRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Deal_PrivateAuction_BuyerRule_descriptor_;
  metadata.reflection = BidRequest_Deal_PrivateAuction_BuyerRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Deal_PrivateAuction::kDealidFieldNumber;
const int BidRequest_Deal_PrivateAuction::kBuyerRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Deal_PrivateAuction::BidRequest_Deal_PrivateAuction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Deal.PrivateAuction)
}

void BidRequest_Deal_PrivateAuction::InitAsDefaultInstance() {
}

BidRequest_Deal_PrivateAuction::BidRequest_Deal_PrivateAuction(const BidRequest_Deal_PrivateAuction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Deal.PrivateAuction)
}

void BidRequest_Deal_PrivateAuction::SharedCtor() {
  _cached_size_ = 0;
  dealid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Deal_PrivateAuction::~BidRequest_Deal_PrivateAuction() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  SharedDtor();
}

void BidRequest_Deal_PrivateAuction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Deal_PrivateAuction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Deal_PrivateAuction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Deal_PrivateAuction_descriptor_;
}

const BidRequest_Deal_PrivateAuction& BidRequest_Deal_PrivateAuction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Deal_PrivateAuction* BidRequest_Deal_PrivateAuction::default_instance_ = NULL;

BidRequest_Deal_PrivateAuction* BidRequest_Deal_PrivateAuction::New(::google::protobuf::Arena* arena) const {
  BidRequest_Deal_PrivateAuction* n = new BidRequest_Deal_PrivateAuction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Deal_PrivateAuction::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  dealid_ = 0u;
  buyer_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Deal_PrivateAuction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dealid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyer_rules;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
      case 2: {
        if (tag == 18) {
         parse_buyer_rules:
          DO_(input->IncrementRecursionDepth());
         parse_loop_buyer_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buyer_rules()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_buyer_rules;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  return false;
#undef DO_
}

void BidRequest_Deal_PrivateAuction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dealid(), output);
  }

  // repeated .protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
  for (unsigned int i = 0, n = this->buyer_rules_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buyer_rules(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Deal.PrivateAuction)
}

::google::protobuf::uint8* BidRequest_Deal_PrivateAuction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  // required uint32 dealid = 1;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dealid(), target);
  }

  // repeated .protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
  for (unsigned int i = 0, n = this->buyer_rules_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->buyer_rules(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  return target;
}

int BidRequest_Deal_PrivateAuction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  int total_size = 0;

  // required uint32 dealid = 1;
  if (has_dealid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dealid());
  }
  // repeated .protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
  total_size += 1 * this->buyer_rules_size();
  for (int i = 0; i < this->buyer_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyer_rules(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Deal_PrivateAuction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Deal_PrivateAuction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Deal_PrivateAuction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Deal.PrivateAuction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Deal.PrivateAuction)
    MergeFrom(*source);
  }
}

void BidRequest_Deal_PrivateAuction::MergeFrom(const BidRequest_Deal_PrivateAuction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  buyer_rules_.MergeFrom(from.buyer_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Deal_PrivateAuction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Deal_PrivateAuction::CopyFrom(const BidRequest_Deal_PrivateAuction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Deal.PrivateAuction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Deal_PrivateAuction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_Deal_PrivateAuction::Swap(BidRequest_Deal_PrivateAuction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Deal_PrivateAuction::InternalSwap(BidRequest_Deal_PrivateAuction* other) {
  std::swap(dealid_, other->dealid_);
  buyer_rules_.UnsafeArenaSwap(&other->buyer_rules_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Deal_PrivateAuction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Deal_PrivateAuction_descriptor_;
  metadata.reflection = BidRequest_Deal_PrivateAuction_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Deal::kPreferDealFieldNumber;
const int BidRequest_Deal::kPrivAucFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Deal::BidRequest_Deal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.Deal)
}

void BidRequest_Deal::InitAsDefaultInstance() {
  prefer_deal_ = const_cast< ::protocol::Tanx::BidRequest_Deal_PreferredDeal*>(&::protocol::Tanx::BidRequest_Deal_PreferredDeal::default_instance());
  priv_auc_ = const_cast< ::protocol::Tanx::BidRequest_Deal_PrivateAuction*>(&::protocol::Tanx::BidRequest_Deal_PrivateAuction::default_instance());
}

BidRequest_Deal::BidRequest_Deal(const BidRequest_Deal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.Deal)
}

void BidRequest_Deal::SharedCtor() {
  _cached_size_ = 0;
  prefer_deal_ = NULL;
  priv_auc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Deal::~BidRequest_Deal() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.Deal)
  SharedDtor();
}

void BidRequest_Deal::SharedDtor() {
  if (this != default_instance_) {
    delete prefer_deal_;
    delete priv_auc_;
  }
}

void BidRequest_Deal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Deal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Deal_descriptor_;
}

const BidRequest_Deal& BidRequest_Deal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Deal* BidRequest_Deal::default_instance_ = NULL;

BidRequest_Deal* BidRequest_Deal::New(::google::protobuf::Arena* arena) const {
  BidRequest_Deal* n = new BidRequest_Deal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Deal::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.Deal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_prefer_deal()) {
      if (prefer_deal_ != NULL) prefer_deal_->::protocol::Tanx::BidRequest_Deal_PreferredDeal::Clear();
    }
    if (has_priv_auc()) {
      if (priv_auc_ != NULL) priv_auc_->::protocol::Tanx::BidRequest_Deal_PrivateAuction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Deal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.Deal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prefer_deal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_priv_auc;
        break;
      }

      // optional .protocol.Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
      case 2: {
        if (tag == 18) {
         parse_priv_auc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_priv_auc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.Deal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.Deal)
  return false;
#undef DO_
}

void BidRequest_Deal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.Deal)
  // optional .protocol.Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
  if (has_prefer_deal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->prefer_deal_, output);
  }

  // optional .protocol.Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
  if (has_priv_auc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->priv_auc_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.Deal)
}

::google::protobuf::uint8* BidRequest_Deal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.Deal)
  // optional .protocol.Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
  if (has_prefer_deal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->prefer_deal_, false, target);
  }

  // optional .protocol.Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
  if (has_priv_auc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->priv_auc_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.Deal)
  return target;
}

int BidRequest_Deal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.Deal)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
    if (has_prefer_deal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->prefer_deal_);
    }

    // optional .protocol.Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
    if (has_priv_auc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->priv_auc_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Deal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.Deal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Deal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Deal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.Deal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.Deal)
    MergeFrom(*source);
  }
}

void BidRequest_Deal::MergeFrom(const BidRequest_Deal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.Deal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefer_deal()) {
      mutable_prefer_deal()->::protocol::Tanx::BidRequest_Deal_PreferredDeal::MergeFrom(from.prefer_deal());
    }
    if (from.has_priv_auc()) {
      mutable_priv_auc()->::protocol::Tanx::BidRequest_Deal_PrivateAuction::MergeFrom(from.priv_auc());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Deal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Deal::CopyFrom(const BidRequest_Deal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Deal::IsInitialized() const {

  if (has_prefer_deal()) {
    if (!this->prefer_deal_->IsInitialized()) return false;
  }
  if (has_priv_auc()) {
    if (!this->priv_auc_->IsInitialized()) return false;
  }
  return true;
}

void BidRequest_Deal::Swap(BidRequest_Deal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Deal::InternalSwap(BidRequest_Deal* other) {
  std::swap(prefer_deal_, other->prefer_deal_);
  std::swap(priv_auc_, other->priv_auc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Deal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Deal_descriptor_;
  metadata.reflection = BidRequest_Deal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_CrowdCategory::kIdFieldNumber;
const int BidRequest_CrowdCategory::kConfidenceLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_CrowdCategory::BidRequest_CrowdCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest.CrowdCategory)
}

void BidRequest_CrowdCategory::InitAsDefaultInstance() {
}

BidRequest_CrowdCategory::BidRequest_CrowdCategory(const BidRequest_CrowdCategory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest.CrowdCategory)
}

void BidRequest_CrowdCategory::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  confidence_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_CrowdCategory::~BidRequest_CrowdCategory() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest.CrowdCategory)
  SharedDtor();
}

void BidRequest_CrowdCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_CrowdCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_CrowdCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_CrowdCategory_descriptor_;
}

const BidRequest_CrowdCategory& BidRequest_CrowdCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_CrowdCategory* BidRequest_CrowdCategory::default_instance_ = NULL;

BidRequest_CrowdCategory* BidRequest_CrowdCategory::New(::google::protobuf::Arena* arena) const {
  BidRequest_CrowdCategory* n = new BidRequest_CrowdCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_CrowdCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest.CrowdCategory)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_CrowdCategory, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_CrowdCategory*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, confidence_level_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_CrowdCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest.CrowdCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confidence_level;
        break;
      }

      // optional uint32 confidence_level = 2;
      case 2: {
        if (tag == 16) {
         parse_confidence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confidence_level_)));
          set_has_confidence_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest.CrowdCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest.CrowdCategory)
  return false;
#undef DO_
}

void BidRequest_CrowdCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest.CrowdCategory)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 confidence_level = 2;
  if (has_confidence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->confidence_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest.CrowdCategory)
}

::google::protobuf::uint8* BidRequest_CrowdCategory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest.CrowdCategory)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 confidence_level = 2;
  if (has_confidence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->confidence_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest.CrowdCategory)
  return target;
}

int BidRequest_CrowdCategory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest.CrowdCategory)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // optional uint32 confidence_level = 2;
  if (has_confidence_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->confidence_level());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_CrowdCategory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest.CrowdCategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_CrowdCategory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_CrowdCategory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest.CrowdCategory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest.CrowdCategory)
    MergeFrom(*source);
  }
}

void BidRequest_CrowdCategory::MergeFrom(const BidRequest_CrowdCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest.CrowdCategory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_confidence_level()) {
      set_confidence_level(from.confidence_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_CrowdCategory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest.CrowdCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_CrowdCategory::CopyFrom(const BidRequest_CrowdCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest.CrowdCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_CrowdCategory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_CrowdCategory::Swap(BidRequest_CrowdCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_CrowdCategory::InternalSwap(BidRequest_CrowdCategory* other) {
  std::swap(id_, other->id_);
  std::swap(confidence_level_, other->confidence_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_CrowdCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_CrowdCategory_descriptor_;
  metadata.reflection = BidRequest_CrowdCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest::kVersionFieldNumber;
const int BidRequest::kBidFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kIsPingFieldNumber;
const int BidRequest::kTidFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kUserAgentFieldNumber;
const int BidRequest::kTimezoneOffsetFieldNumber;
const int BidRequest::kUserVerticalFieldNumber;
const int BidRequest::kTidVersionFieldNumber;
const int BidRequest::kExcludedClickThroughUrlFieldNumber;
const int BidRequest::kUrlFieldNumber;
const int BidRequest::kCategoryFieldNumber;
const int BidRequest::kAdxTypeFieldNumber;
const int BidRequest::kAnonymousIdFieldNumber;
const int BidRequest::kDetectedLanguageFieldNumber;
const int BidRequest::kCategoryVersionFieldNumber;
const int BidRequest::kAdzinfoFieldNumber;
const int BidRequest::kExcludedSensitiveCategoryFieldNumber;
const int BidRequest::kExcludedAdCategoryFieldNumber;
const int BidRequest::kHostedMatchDataFieldNumber;
const int BidRequest::kUserAttributeFieldNumber;
const int BidRequest::kPageSessionIdFieldNumber;
const int BidRequest::kPrivateInfoFieldNumber;
const int BidRequest::kMobileFieldNumber;
const int BidRequest::kContentCategoriesFieldNumber;
const int BidRequest::kVideoFieldNumber;
const int BidRequest::kAidFieldNumber;
const int BidRequest::kDealsFieldNumber;
const int BidRequest::kCrowdCategoryFieldNumber;
const int BidRequest::kIsPredictedToBeIgnoredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest::BidRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  mobile_ = const_cast< ::protocol::Tanx::BidRequest_Mobile*>(&::protocol::Tanx::BidRequest_Mobile::default_instance());
  video_ = const_cast< ::protocol::Tanx::BidRequest_Video*>(&::protocol::Tanx::BidRequest_Video::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_test_ = 0u;
  is_ping_ = 0u;
  tid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_offset_ = 0;
  tid_version_ = 0u;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_ = 0u;
  adx_type_ = 0u;
  anonymous_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detected_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  category_version_ = 0;
  hosted_match_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = NULL;
  video_ = NULL;
  aid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_predicted_to_be_ignored_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  bid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anonymous_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detected_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hosted_match_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_session_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete mobile_;
    delete video_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New(::google::protobuf::Arena* arena) const {
  BidRequest* n = new BidRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(version_, is_test_);
    ZR_(is_ping_, timezone_offset_);
    if (has_bid()) {
      bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tid()) {
      tid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_agent()) {
      user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 64000u) {
    ZR_(tid_version_, category_);
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    adx_type_ = 0u;
    if (has_anonymous_id()) {
      anonymous_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_detected_language()) {
      detected_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 5308416u) {
    category_version_ = 0;
    if (has_hosted_match_data()) {
      hosted_match_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_page_session_id()) {
      page_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[24 / 32] & 1291845632u) {
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::protocol::Tanx::BidRequest_Mobile::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::protocol::Tanx::BidRequest_Video::Clear();
    }
    if (has_aid()) {
      aid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_predicted_to_be_ignored_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  user_vertical_.Clear();
  excluded_click_through_url_.Clear();
  adzinfo_.Clear();
  excluded_sensitive_category_.Clear();
  excluded_ad_category_.Clear();
  user_attribute_.Clear();
  private_info_.Clear();
  content_categories_.Clear();
  deals_.Clear();
  crowd_category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tid;
        break;
      }

      // optional string tid = 3;
      case 3: {
        if (tag == 26) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tid().data(), this->tid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.tid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 5;
      case 5: {
        if (tag == 42) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.user_agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_excluded_click_through_url;
        break;
      }

      // repeated string excluded_click_through_url = 6;
      case 6: {
        if (tag == 50) {
         parse_excluded_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excluded_click_through_url(this->excluded_click_through_url_size() - 1).data(),
            this->excluded_click_through_url(this->excluded_click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.excluded_click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_excluded_click_through_url;
        if (input->ExpectTag(58)) goto parse_url;
        break;
      }

      // optional string url = 7;
      case 7: {
        if (tag == 58) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_category;
        break;
      }

      // optional uint32 category = 8;
      case 8: {
        if (tag == 64) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_adx_type;
        break;
      }

      // optional uint32 adx_type = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_adx_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adx_type_)));
          set_has_adx_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_adzinfo;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.AdzInfo adzinfo = 10;
      case 10: {
        if (tag == 82) {
         parse_adzinfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_adzinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adzinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_adzinfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_is_test;
        break;
      }

      // optional uint32 is_test = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_ping;
        break;
      }

      // optional uint32 is_ping = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_timezone_offset;
        break;
      }

      // optional int32 timezone_offset = 13;
      case 13: {
        if (tag == 104) {
         parse_timezone_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_offset_)));
          set_has_timezone_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_user_vertical;
        break;
      }

      // repeated int32 user_vertical = 14;
      case 14: {
        if (tag == 112) {
         parse_user_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_user_vertical())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_user_vertical())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_user_vertical;
        if (input->ExpectTag(122)) goto parse_anonymous_id;
        break;
      }

      // optional string anonymous_id = 15;
      case 15: {
        if (tag == 122) {
         parse_anonymous_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anonymous_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->anonymous_id().data(), this->anonymous_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.anonymous_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_detected_language;
        break;
      }

      // optional string detected_language = 16;
      case 16: {
        if (tag == 130) {
         parse_detected_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detected_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detected_language().data(), this->detected_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.detected_language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_excluded_sensitive_category;
        break;
      }

      // repeated int32 excluded_sensitive_category = 17;
      case 17: {
        if (tag == 136) {
         parse_excluded_sensitive_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_excluded_sensitive_category())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_sensitive_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_excluded_sensitive_category;
        if (input->ExpectTag(144)) goto parse_category_version;
        break;
      }

      // optional int32 category_version = 18;
      case 18: {
        if (tag == 144) {
         parse_category_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_version_)));
          set_has_category_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tid_version;
        break;
      }

      // optional uint32 tid_version = 19;
      case 19: {
        if (tag == 152) {
         parse_tid_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_version_)));
          set_has_tid_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_excluded_ad_category;
        break;
      }

      // repeated int32 excluded_ad_category = 20;
      case 20: {
        if (tag == 160) {
         parse_excluded_ad_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_excluded_ad_category())));
        } else if (tag == 162) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_ad_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_excluded_ad_category;
        if (input->ExpectTag(170)) goto parse_hosted_match_data;
        break;
      }

      // optional string hosted_match_data = 21;
      case 21: {
        if (tag == 170) {
         parse_hosted_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hosted_match_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hosted_match_data().data(), this->hosted_match_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.hosted_match_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_user_attribute;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.UserAttribute user_attribute = 22;
      case 22: {
        if (tag == 178) {
         parse_user_attribute:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_user_attribute;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(186)) goto parse_page_session_id;
        break;
      }

      // optional string page_session_id = 23;
      case 23: {
        if (tag == 186) {
         parse_page_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_session_id().data(), this->page_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.page_session_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_private_info;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.PrivateInfo private_info = 24;
      case 24: {
        if (tag == 194) {
         parse_private_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_private_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_private_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_loop_private_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(202)) goto parse_mobile;
        break;
      }

      // optional .protocol.Tanx.BidRequest.Mobile mobile = 25;
      case 25: {
        if (tag == 202) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_content_categories;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.ContentCategory content_categories = 26;
      case 26: {
        if (tag == 210) {
         parse_content_categories:
          DO_(input->IncrementRecursionDepth());
         parse_loop_content_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_content_categories()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_loop_content_categories;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(218)) goto parse_video;
        break;
      }

      // optional .protocol.Tanx.BidRequest.Video video = 27;
      case 27: {
        if (tag == 218) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_aid;
        break;
      }

      // optional string aid = 28;
      case 28: {
        if (tag == 226) {
         parse_aid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aid().data(), this->aid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidRequest.aid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_deals;
        break;
      }

      // repeated .protocol.Tanx.BidRequest.Deal deals = 29;
      case 29: {
        if (tag == 234) {
         parse_deals:
          DO_(input->IncrementRecursionDepth());
         parse_loop_deals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_loop_deals;
        if (input->ExpectTag(242)) goto parse_loop_crowd_category;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .protocol.Tanx.BidRequest.CrowdCategory crowd_category = 30;
      case 30: {
        if (tag == 242) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_crowd_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_crowd_category()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_loop_crowd_category;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(248)) goto parse_is_predicted_to_be_ignored;
        break;
      }

      // optional bool is_predicted_to_be_ignored = 31 [default = false];
      case 31: {
        if (tag == 248) {
         parse_is_predicted_to_be_ignored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_predicted_to_be_ignored_)));
          set_has_is_predicted_to_be_ignored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidRequest)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // optional string tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.tid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tid(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_agent(), output);
  }

  // repeated string excluded_click_through_url = 6;
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_click_through_url(i).data(), this->excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.excluded_click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->excluded_click_through_url(i), output);
  }

  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->url(), output);
  }

  // optional uint32 category = 8;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->category(), output);
  }

  // optional uint32 adx_type = 9 [default = 0];
  if (has_adx_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->adx_type(), output);
  }

  // repeated .protocol.Tanx.BidRequest.AdzInfo adzinfo = 10;
  for (unsigned int i = 0, n = this->adzinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->adzinfo(i), output);
  }

  // optional uint32 is_test = 11 [default = 0];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->is_test(), output);
  }

  // optional uint32 is_ping = 12 [default = 0];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->is_ping(), output);
  }

  // optional int32 timezone_offset = 13;
  if (has_timezone_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->timezone_offset(), output);
  }

  // repeated int32 user_vertical = 14;
  for (int i = 0; i < this->user_vertical_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->user_vertical(i), output);
  }

  // optional string anonymous_id = 15;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.anonymous_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->anonymous_id(), output);
  }

  // optional string detected_language = 16;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.detected_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->detected_language(), output);
  }

  // repeated int32 excluded_sensitive_category = 17;
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->excluded_sensitive_category(i), output);
  }

  // optional int32 category_version = 18;
  if (has_category_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->category_version(), output);
  }

  // optional uint32 tid_version = 19;
  if (has_tid_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tid_version(), output);
  }

  // repeated int32 excluded_ad_category = 20;
  for (int i = 0; i < this->excluded_ad_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->excluded_ad_category(i), output);
  }

  // optional string hosted_match_data = 21;
  if (has_hosted_match_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hosted_match_data().data(), this->hosted_match_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.hosted_match_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->hosted_match_data(), output);
  }

  // repeated .protocol.Tanx.BidRequest.UserAttribute user_attribute = 22;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->user_attribute(i), output);
  }

  // optional string page_session_id = 23;
  if (has_page_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_session_id().data(), this->page_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.page_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->page_session_id(), output);
  }

  // repeated .protocol.Tanx.BidRequest.PrivateInfo private_info = 24;
  for (unsigned int i = 0, n = this->private_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->private_info(i), output);
  }

  // optional .protocol.Tanx.BidRequest.Mobile mobile = 25;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->mobile_, output);
  }

  // repeated .protocol.Tanx.BidRequest.ContentCategory content_categories = 26;
  for (unsigned int i = 0, n = this->content_categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->content_categories(i), output);
  }

  // optional .protocol.Tanx.BidRequest.Video video = 27;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->video_, output);
  }

  // optional string aid = 28;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aid().data(), this->aid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.aid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->aid(), output);
  }

  // repeated .protocol.Tanx.BidRequest.Deal deals = 29;
  for (unsigned int i = 0, n = this->deals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->deals(i), output);
  }

  // repeated .protocol.Tanx.BidRequest.CrowdCategory crowd_category = 30;
  for (unsigned int i = 0, n = this->crowd_category_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->crowd_category(i), output);
  }

  // optional bool is_predicted_to_be_ignored = 31 [default = false];
  if (has_is_predicted_to_be_ignored()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_predicted_to_be_ignored(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidRequest)
}

::google::protobuf::uint8* BidRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidRequest)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // optional string tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.tid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tid(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_agent(), target);
  }

  // repeated string excluded_click_through_url = 6;
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_click_through_url(i).data(), this->excluded_click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.excluded_click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->excluded_click_through_url(i), target);
  }

  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->url(), target);
  }

  // optional uint32 category = 8;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->category(), target);
  }

  // optional uint32 adx_type = 9 [default = 0];
  if (has_adx_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->adx_type(), target);
  }

  // repeated .protocol.Tanx.BidRequest.AdzInfo adzinfo = 10;
  for (unsigned int i = 0, n = this->adzinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->adzinfo(i), false, target);
  }

  // optional uint32 is_test = 11 [default = 0];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->is_test(), target);
  }

  // optional uint32 is_ping = 12 [default = 0];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->is_ping(), target);
  }

  // optional int32 timezone_offset = 13;
  if (has_timezone_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->timezone_offset(), target);
  }

  // repeated int32 user_vertical = 14;
  for (int i = 0; i < this->user_vertical_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->user_vertical(i), target);
  }

  // optional string anonymous_id = 15;
  if (has_anonymous_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->anonymous_id().data(), this->anonymous_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.anonymous_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->anonymous_id(), target);
  }

  // optional string detected_language = 16;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.detected_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->detected_language(), target);
  }

  // repeated int32 excluded_sensitive_category = 17;
  for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->excluded_sensitive_category(i), target);
  }

  // optional int32 category_version = 18;
  if (has_category_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->category_version(), target);
  }

  // optional uint32 tid_version = 19;
  if (has_tid_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tid_version(), target);
  }

  // repeated int32 excluded_ad_category = 20;
  for (int i = 0; i < this->excluded_ad_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->excluded_ad_category(i), target);
  }

  // optional string hosted_match_data = 21;
  if (has_hosted_match_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hosted_match_data().data(), this->hosted_match_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.hosted_match_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->hosted_match_data(), target);
  }

  // repeated .protocol.Tanx.BidRequest.UserAttribute user_attribute = 22;
  for (unsigned int i = 0, n = this->user_attribute_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->user_attribute(i), false, target);
  }

  // optional string page_session_id = 23;
  if (has_page_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_session_id().data(), this->page_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.page_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->page_session_id(), target);
  }

  // repeated .protocol.Tanx.BidRequest.PrivateInfo private_info = 24;
  for (unsigned int i = 0, n = this->private_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->private_info(i), false, target);
  }

  // optional .protocol.Tanx.BidRequest.Mobile mobile = 25;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->mobile_, false, target);
  }

  // repeated .protocol.Tanx.BidRequest.ContentCategory content_categories = 26;
  for (unsigned int i = 0, n = this->content_categories_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->content_categories(i), false, target);
  }

  // optional .protocol.Tanx.BidRequest.Video video = 27;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->video_, false, target);
  }

  // optional string aid = 28;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aid().data(), this->aid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidRequest.aid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->aid(), target);
  }

  // repeated .protocol.Tanx.BidRequest.Deal deals = 29;
  for (unsigned int i = 0, n = this->deals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, this->deals(i), false, target);
  }

  // repeated .protocol.Tanx.BidRequest.CrowdCategory crowd_category = 30;
  for (unsigned int i = 0, n = this->crowd_category_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, this->crowd_category(i), false, target);
  }

  // optional bool is_predicted_to_be_ignored = 31 [default = false];
  if (has_is_predicted_to_be_ignored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_predicted_to_be_ignored(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidRequest)
  return target;
}

int BidRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.BidRequest)
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_bid()) {
    // required string bid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());
  }

  return total_size;
}
int BidRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required string bid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional uint32 is_test = 11 [default = 0];
    if (has_is_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_test());
    }

    // optional uint32 is_ping = 12 [default = 0];
    if (has_is_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_ping());
    }

    // optional string tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tid());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string user_agent = 5;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional int32 timezone_offset = 13;
    if (has_timezone_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timezone_offset());
    }

  }
  if (_has_bits_[9 / 32] & 64000u) {
    // optional uint32 tid_version = 19;
    if (has_tid_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid_version());
    }

    // optional string url = 7;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 category = 8;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category());
    }

    // optional uint32 adx_type = 9 [default = 0];
    if (has_adx_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adx_type());
    }

    // optional string anonymous_id = 15;
    if (has_anonymous_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anonymous_id());
    }

    // optional string detected_language = 16;
    if (has_detected_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detected_language());
    }

  }
  if (_has_bits_[16 / 32] & 5308416u) {
    // optional int32 category_version = 18;
    if (has_category_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category_version());
    }

    // optional string hosted_match_data = 21;
    if (has_hosted_match_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hosted_match_data());
    }

    // optional string page_session_id = 23;
    if (has_page_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_session_id());
    }

  }
  if (_has_bits_[24 / 32] & 1291845632u) {
    // optional .protocol.Tanx.BidRequest.Mobile mobile = 25;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mobile_);
    }

    // optional .protocol.Tanx.BidRequest.Video video = 27;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_);
    }

    // optional string aid = 28;
    if (has_aid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aid());
    }

    // optional bool is_predicted_to_be_ignored = 31 [default = false];
    if (has_is_predicted_to_be_ignored()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 user_vertical = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_vertical_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->user_vertical(i));
    }
    total_size += 1 * this->user_vertical_size() + data_size;
  }

  // repeated string excluded_click_through_url = 6;
  total_size += 1 * this->excluded_click_through_url_size();
  for (int i = 0; i < this->excluded_click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_click_through_url(i));
  }

  // repeated .protocol.Tanx.BidRequest.AdzInfo adzinfo = 10;
  total_size += 1 * this->adzinfo_size();
  for (int i = 0; i < this->adzinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adzinfo(i));
  }

  // repeated int32 excluded_sensitive_category = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_sensitive_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_sensitive_category(i));
    }
    total_size += 2 * this->excluded_sensitive_category_size() + data_size;
  }

  // repeated int32 excluded_ad_category = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_ad_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_ad_category(i));
    }
    total_size += 2 * this->excluded_ad_category_size() + data_size;
  }

  // repeated .protocol.Tanx.BidRequest.UserAttribute user_attribute = 22;
  total_size += 2 * this->user_attribute_size();
  for (int i = 0; i < this->user_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_attribute(i));
  }

  // repeated .protocol.Tanx.BidRequest.PrivateInfo private_info = 24;
  total_size += 2 * this->private_info_size();
  for (int i = 0; i < this->private_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->private_info(i));
  }

  // repeated .protocol.Tanx.BidRequest.ContentCategory content_categories = 26;
  total_size += 2 * this->content_categories_size();
  for (int i = 0; i < this->content_categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content_categories(i));
  }

  // repeated .protocol.Tanx.BidRequest.Deal deals = 29;
  total_size += 2 * this->deals_size();
  for (int i = 0; i < this->deals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deals(i));
  }

  // repeated .protocol.Tanx.BidRequest.CrowdCategory crowd_category = 30;
  total_size += 2 * this->crowd_category_size();
  for (int i = 0; i < this->crowd_category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crowd_category(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidRequest)
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  user_vertical_.MergeFrom(from.user_vertical_);
  excluded_click_through_url_.MergeFrom(from.excluded_click_through_url_);
  adzinfo_.MergeFrom(from.adzinfo_);
  excluded_sensitive_category_.MergeFrom(from.excluded_sensitive_category_);
  excluded_ad_category_.MergeFrom(from.excluded_ad_category_);
  user_attribute_.MergeFrom(from.user_attribute_);
  private_info_.MergeFrom(from.private_info_);
  content_categories_.MergeFrom(from.content_categories_);
  deals_.MergeFrom(from.deals_);
  crowd_category_.MergeFrom(from.crowd_category_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_has_bid();
      bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bid_);
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
    if (from.has_tid()) {
      set_has_tid();
      tid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tid_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_user_agent()) {
      set_has_user_agent();
      user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
    }
    if (from.has_timezone_offset()) {
      set_timezone_offset(from.timezone_offset());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_tid_version()) {
      set_tid_version(from.tid_version());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_adx_type()) {
      set_adx_type(from.adx_type());
    }
    if (from.has_anonymous_id()) {
      set_has_anonymous_id();
      anonymous_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anonymous_id_);
    }
    if (from.has_detected_language()) {
      set_has_detected_language();
      detected_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detected_language_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_category_version()) {
      set_category_version(from.category_version());
    }
    if (from.has_hosted_match_data()) {
      set_has_hosted_match_data();
      hosted_match_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hosted_match_data_);
    }
    if (from.has_page_session_id()) {
      set_has_page_session_id();
      page_session_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_session_id_);
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_mobile()) {
      mutable_mobile()->::protocol::Tanx::BidRequest_Mobile::MergeFrom(from.mobile());
    }
    if (from.has_video()) {
      mutable_video()->::protocol::Tanx::BidRequest_Video::MergeFrom(from.video());
    }
    if (from.has_aid()) {
      set_has_aid();
      aid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.aid_);
    }
    if (from.has_is_predicted_to_be_ignored()) {
      set_is_predicted_to_be_ignored(from.is_predicted_to_be_ignored());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->adzinfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->user_attribute())) return false;
  if (has_mobile()) {
    if (!this->mobile_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->content_categories())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->deals())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->crowd_category())) return false;
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest::InternalSwap(BidRequest* other) {
  std::swap(version_, other->version_);
  bid_.Swap(&other->bid_);
  std::swap(is_test_, other->is_test_);
  std::swap(is_ping_, other->is_ping_);
  tid_.Swap(&other->tid_);
  ip_.Swap(&other->ip_);
  user_agent_.Swap(&other->user_agent_);
  std::swap(timezone_offset_, other->timezone_offset_);
  user_vertical_.UnsafeArenaSwap(&other->user_vertical_);
  std::swap(tid_version_, other->tid_version_);
  excluded_click_through_url_.UnsafeArenaSwap(&other->excluded_click_through_url_);
  url_.Swap(&other->url_);
  std::swap(category_, other->category_);
  std::swap(adx_type_, other->adx_type_);
  anonymous_id_.Swap(&other->anonymous_id_);
  detected_language_.Swap(&other->detected_language_);
  std::swap(category_version_, other->category_version_);
  adzinfo_.UnsafeArenaSwap(&other->adzinfo_);
  excluded_sensitive_category_.UnsafeArenaSwap(&other->excluded_sensitive_category_);
  excluded_ad_category_.UnsafeArenaSwap(&other->excluded_ad_category_);
  hosted_match_data_.Swap(&other->hosted_match_data_);
  user_attribute_.UnsafeArenaSwap(&other->user_attribute_);
  page_session_id_.Swap(&other->page_session_id_);
  private_info_.UnsafeArenaSwap(&other->private_info_);
  std::swap(mobile_, other->mobile_);
  content_categories_.UnsafeArenaSwap(&other->content_categories_);
  std::swap(video_, other->video_);
  aid_.Swap(&other->aid_);
  deals_.UnsafeArenaSwap(&other->deals_);
  crowd_category_.UnsafeArenaSwap(&other->crowd_category_);
  std::swap(is_predicted_to_be_ignored_, other->is_predicted_to_be_ignored_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidRequest_AdzInfo_BuyerRule

// optional uint32 advertiser_ids = 1;
bool BidRequest_AdzInfo_BuyerRule::has_advertiser_ids() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdzInfo_BuyerRule::set_has_advertiser_ids() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdzInfo_BuyerRule::clear_has_advertiser_ids() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdzInfo_BuyerRule::clear_advertiser_ids() {
  advertiser_ids_ = 0u;
  clear_has_advertiser_ids();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo_BuyerRule::advertiser_ids() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.BuyerRule.advertiser_ids)
  return advertiser_ids_;
}
 void BidRequest_AdzInfo_BuyerRule::set_advertiser_ids(::google::protobuf::uint32 value) {
  set_has_advertiser_ids();
  advertiser_ids_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.BuyerRule.advertiser_ids)
}

// optional uint32 min_cpm_price = 2;
bool BidRequest_AdzInfo_BuyerRule::has_min_cpm_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdzInfo_BuyerRule::set_has_min_cpm_price() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdzInfo_BuyerRule::clear_has_min_cpm_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdzInfo_BuyerRule::clear_min_cpm_price() {
  min_cpm_price_ = 0u;
  clear_has_min_cpm_price();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo_BuyerRule::min_cpm_price() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.BuyerRule.min_cpm_price)
  return min_cpm_price_;
}
 void BidRequest_AdzInfo_BuyerRule::set_min_cpm_price(::google::protobuf::uint32 value) {
  set_has_min_cpm_price();
  min_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.BuyerRule.min_cpm_price)
}

// -------------------------------------------------------------------

// BidRequest_AdzInfo

// required uint32 id = 1;
bool BidRequest_AdzInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdzInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdzInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdzInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo::id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.id)
  return id_;
}
 void BidRequest_AdzInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.id)
}

// required string pid = 2;
bool BidRequest_AdzInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdzInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdzInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdzInfo::clear_pid() {
  pid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pid();
}
 const ::std::string& BidRequest_AdzInfo::pid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.pid)
  return pid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdzInfo::set_pid(const ::std::string& value) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.pid)
}
 void BidRequest_AdzInfo::set_pid(const char* value) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.AdzInfo.pid)
}
 void BidRequest_AdzInfo::set_pid(const char* value, size_t size) {
  set_has_pid();
  pid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.AdzInfo.pid)
}
 ::std::string* BidRequest_AdzInfo::mutable_pid() {
  set_has_pid();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.AdzInfo.pid)
  return pid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_AdzInfo::release_pid() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.AdzInfo.pid)
  clear_has_pid();
  return pid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdzInfo::set_allocated_pid(::std::string* pid) {
  if (pid != NULL) {
    set_has_pid();
  } else {
    clear_has_pid();
  }
  pid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.AdzInfo.pid)
}

// optional string publisher_id = 11;
bool BidRequest_AdzInfo::has_publisher_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_AdzInfo::set_has_publisher_id() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_AdzInfo::clear_has_publisher_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_AdzInfo::clear_publisher_id() {
  publisher_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publisher_id();
}
 const ::std::string& BidRequest_AdzInfo::publisher_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.publisher_id)
  return publisher_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdzInfo::set_publisher_id(const ::std::string& value) {
  set_has_publisher_id();
  publisher_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.publisher_id)
}
 void BidRequest_AdzInfo::set_publisher_id(const char* value) {
  set_has_publisher_id();
  publisher_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.AdzInfo.publisher_id)
}
 void BidRequest_AdzInfo::set_publisher_id(const char* value, size_t size) {
  set_has_publisher_id();
  publisher_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.AdzInfo.publisher_id)
}
 ::std::string* BidRequest_AdzInfo::mutable_publisher_id() {
  set_has_publisher_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.AdzInfo.publisher_id)
  return publisher_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_AdzInfo::release_publisher_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.AdzInfo.publisher_id)
  clear_has_publisher_id();
  return publisher_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdzInfo::set_allocated_publisher_id(::std::string* publisher_id) {
  if (publisher_id != NULL) {
    set_has_publisher_id();
  } else {
    clear_has_publisher_id();
  }
  publisher_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisher_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.AdzInfo.publisher_id)
}

// optional string size = 3;
bool BidRequest_AdzInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_AdzInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_AdzInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_AdzInfo::clear_size() {
  size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_size();
}
 const ::std::string& BidRequest_AdzInfo::size() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.size)
  return size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdzInfo::set_size(const ::std::string& value) {
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.size)
}
 void BidRequest_AdzInfo::set_size(const char* value) {
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.AdzInfo.size)
}
 void BidRequest_AdzInfo::set_size(const char* value, size_t size) {
  set_has_size();
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.AdzInfo.size)
}
 ::std::string* BidRequest_AdzInfo::mutable_size() {
  set_has_size();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.AdzInfo.size)
  return size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_AdzInfo::release_size() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.AdzInfo.size)
  clear_has_size();
  return size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdzInfo::set_allocated_size(::std::string* size) {
  if (size != NULL) {
    set_has_size();
  } else {
    clear_has_size();
  }
  size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.AdzInfo.size)
}

// optional uint32 ad_bid_count = 4 [default = 2];
bool BidRequest_AdzInfo::has_ad_bid_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_AdzInfo::set_has_ad_bid_count() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_AdzInfo::clear_has_ad_bid_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_AdzInfo::clear_ad_bid_count() {
  ad_bid_count_ = 2u;
  clear_has_ad_bid_count();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo::ad_bid_count() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.ad_bid_count)
  return ad_bid_count_;
}
 void BidRequest_AdzInfo::set_ad_bid_count(::google::protobuf::uint32 value) {
  set_has_ad_bid_count();
  ad_bid_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.ad_bid_count)
}

// repeated uint32 view_type = 5;
int BidRequest_AdzInfo::view_type_size() const {
  return view_type_.size();
}
void BidRequest_AdzInfo::clear_view_type() {
  view_type_.Clear();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo::view_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.view_type)
  return view_type_.Get(index);
}
 void BidRequest_AdzInfo::set_view_type(int index, ::google::protobuf::uint32 value) {
  view_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.view_type)
}
 void BidRequest_AdzInfo::add_view_type(::google::protobuf::uint32 value) {
  view_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.AdzInfo.view_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_AdzInfo::view_type() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.AdzInfo.view_type)
  return view_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_AdzInfo::mutable_view_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.AdzInfo.view_type)
  return &view_type_;
}

// repeated uint32 excluded_filter = 6;
int BidRequest_AdzInfo::excluded_filter_size() const {
  return excluded_filter_.size();
}
void BidRequest_AdzInfo::clear_excluded_filter() {
  excluded_filter_.Clear();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo::excluded_filter(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.excluded_filter)
  return excluded_filter_.Get(index);
}
 void BidRequest_AdzInfo::set_excluded_filter(int index, ::google::protobuf::uint32 value) {
  excluded_filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.excluded_filter)
}
 void BidRequest_AdzInfo::add_excluded_filter(::google::protobuf::uint32 value) {
  excluded_filter_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.AdzInfo.excluded_filter)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_AdzInfo::excluded_filter() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.AdzInfo.excluded_filter)
  return excluded_filter_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_AdzInfo::mutable_excluded_filter() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.AdzInfo.excluded_filter)
  return &excluded_filter_;
}

// optional uint32 min_cpm_price = 7;
bool BidRequest_AdzInfo::has_min_cpm_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_AdzInfo::set_has_min_cpm_price() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_AdzInfo::clear_has_min_cpm_price() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_AdzInfo::clear_min_cpm_price() {
  min_cpm_price_ = 0u;
  clear_has_min_cpm_price();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo::min_cpm_price() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.min_cpm_price)
  return min_cpm_price_;
}
 void BidRequest_AdzInfo::set_min_cpm_price(::google::protobuf::uint32 value) {
  set_has_min_cpm_price();
  min_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.min_cpm_price)
}

// optional .protocol.Tanx.BidRequest.AdzInfo.Location adz_location = 8 [default = NA];
bool BidRequest_AdzInfo::has_adz_location() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_AdzInfo::set_has_adz_location() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_AdzInfo::clear_has_adz_location() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_AdzInfo::clear_adz_location() {
  adz_location_ = 0;
  clear_has_adz_location();
}
 ::protocol::Tanx::BidRequest_AdzInfo_Location BidRequest_AdzInfo::adz_location() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.adz_location)
  return static_cast< ::protocol::Tanx::BidRequest_AdzInfo_Location >(adz_location_);
}
 void BidRequest_AdzInfo::set_adz_location(::protocol::Tanx::BidRequest_AdzInfo_Location value) {
  assert(::protocol::Tanx::BidRequest_AdzInfo_Location_IsValid(value));
  set_has_adz_location();
  adz_location_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.adz_location)
}

// optional .protocol.Tanx.BidRequest.AdzInfo.ViewScreen view_screen = 9 [default = SCREEN_NA];
bool BidRequest_AdzInfo::has_view_screen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_AdzInfo::set_has_view_screen() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_AdzInfo::clear_has_view_screen() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_AdzInfo::clear_view_screen() {
  view_screen_ = 0;
  clear_has_view_screen();
}
 ::protocol::Tanx::BidRequest_AdzInfo_ViewScreen BidRequest_AdzInfo::view_screen() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.view_screen)
  return static_cast< ::protocol::Tanx::BidRequest_AdzInfo_ViewScreen >(view_screen_);
}
 void BidRequest_AdzInfo::set_view_screen(::protocol::Tanx::BidRequest_AdzInfo_ViewScreen value) {
  assert(::protocol::Tanx::BidRequest_AdzInfo_ViewScreen_IsValid(value));
  set_has_view_screen();
  view_screen_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.view_screen)
}

// optional uint32 page_session_ad_idx = 10;
bool BidRequest_AdzInfo::has_page_session_ad_idx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest_AdzInfo::set_has_page_session_ad_idx() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest_AdzInfo::clear_has_page_session_ad_idx() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest_AdzInfo::clear_page_session_ad_idx() {
  page_session_ad_idx_ = 0u;
  clear_has_page_session_ad_idx();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo::page_session_ad_idx() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.page_session_ad_idx)
  return page_session_ad_idx_;
}
 void BidRequest_AdzInfo::set_page_session_ad_idx(::google::protobuf::uint32 value) {
  set_has_page_session_ad_idx();
  page_session_ad_idx_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.page_session_ad_idx)
}

// repeated uint32 api = 12;
int BidRequest_AdzInfo::api_size() const {
  return api_.size();
}
void BidRequest_AdzInfo::clear_api() {
  api_.Clear();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo::api(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.api)
  return api_.Get(index);
}
 void BidRequest_AdzInfo::set_api(int index, ::google::protobuf::uint32 value) {
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.api)
}
 void BidRequest_AdzInfo::add_api(::google::protobuf::uint32 value) {
  api_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.AdzInfo.api)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_AdzInfo::api() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.AdzInfo.api)
  return api_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_AdzInfo::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.AdzInfo.api)
  return &api_;
}

// repeated .protocol.Tanx.BidRequest.AdzInfo.BuyerRule buyer_rules = 13;
int BidRequest_AdzInfo::buyer_rules_size() const {
  return buyer_rules_.size();
}
void BidRequest_AdzInfo::clear_buyer_rules() {
  buyer_rules_.Clear();
}
const ::protocol::Tanx::BidRequest_AdzInfo_BuyerRule& BidRequest_AdzInfo::buyer_rules(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.buyer_rules)
  return buyer_rules_.Get(index);
}
::protocol::Tanx::BidRequest_AdzInfo_BuyerRule* BidRequest_AdzInfo::mutable_buyer_rules(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.AdzInfo.buyer_rules)
  return buyer_rules_.Mutable(index);
}
::protocol::Tanx::BidRequest_AdzInfo_BuyerRule* BidRequest_AdzInfo::add_buyer_rules() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.AdzInfo.buyer_rules)
  return buyer_rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_AdzInfo_BuyerRule >*
BidRequest_AdzInfo::mutable_buyer_rules() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.AdzInfo.buyer_rules)
  return &buyer_rules_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_AdzInfo_BuyerRule >&
BidRequest_AdzInfo::buyer_rules() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.AdzInfo.buyer_rules)
  return buyer_rules_;
}

// optional uint32 allowed_creative_level = 14;
bool BidRequest_AdzInfo::has_allowed_creative_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_AdzInfo::set_has_allowed_creative_level() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_AdzInfo::clear_has_allowed_creative_level() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_AdzInfo::clear_allowed_creative_level() {
  allowed_creative_level_ = 0u;
  clear_has_allowed_creative_level();
}
 ::google::protobuf::uint32 BidRequest_AdzInfo::allowed_creative_level() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.allowed_creative_level)
  return allowed_creative_level_;
}
 void BidRequest_AdzInfo::set_allowed_creative_level(::google::protobuf::uint32 value) {
  set_has_allowed_creative_level();
  allowed_creative_level_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.allowed_creative_level)
}

// repeated string publisher_filter_id = 15;
int BidRequest_AdzInfo::publisher_filter_id_size() const {
  return publisher_filter_id_.size();
}
void BidRequest_AdzInfo::clear_publisher_filter_id() {
  publisher_filter_id_.Clear();
}
 const ::std::string& BidRequest_AdzInfo::publisher_filter_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return publisher_filter_id_.Get(index);
}
 ::std::string* BidRequest_AdzInfo::mutable_publisher_filter_id(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return publisher_filter_id_.Mutable(index);
}
 void BidRequest_AdzInfo::set_publisher_filter_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
  publisher_filter_id_.Mutable(index)->assign(value);
}
 void BidRequest_AdzInfo::set_publisher_filter_id(int index, const char* value) {
  publisher_filter_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
 void BidRequest_AdzInfo::set_publisher_filter_id(int index, const char* value, size_t size) {
  publisher_filter_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
 ::std::string* BidRequest_AdzInfo::add_publisher_filter_id() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return publisher_filter_id_.Add();
}
 void BidRequest_AdzInfo::add_publisher_filter_id(const ::std::string& value) {
  publisher_filter_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
 void BidRequest_AdzInfo::add_publisher_filter_id(const char* value) {
  publisher_filter_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
 void BidRequest_AdzInfo::add_publisher_filter_id(const char* value, size_t size) {
  publisher_filter_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdzInfo::publisher_filter_id() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return publisher_filter_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdzInfo::mutable_publisher_filter_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.AdzInfo.publisher_filter_id)
  return &publisher_filter_id_;
}

// optional bool auto_expandable = 16 [default = false];
bool BidRequest_AdzInfo::has_auto_expandable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest_AdzInfo::set_has_auto_expandable() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest_AdzInfo::clear_has_auto_expandable() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest_AdzInfo::clear_auto_expandable() {
  auto_expandable_ = false;
  clear_has_auto_expandable();
}
 bool BidRequest_AdzInfo::auto_expandable() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.auto_expandable)
  return auto_expandable_;
}
 void BidRequest_AdzInfo::set_auto_expandable(bool value) {
  set_has_auto_expandable();
  auto_expandable_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.auto_expandable)
}

// optional bool trigger_expandable = 17 [default = false];
bool BidRequest_AdzInfo::has_trigger_expandable() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest_AdzInfo::set_has_trigger_expandable() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest_AdzInfo::clear_has_trigger_expandable() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest_AdzInfo::clear_trigger_expandable() {
  trigger_expandable_ = false;
  clear_has_trigger_expandable();
}
 bool BidRequest_AdzInfo::trigger_expandable() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.AdzInfo.trigger_expandable)
  return trigger_expandable_;
}
 void BidRequest_AdzInfo::set_trigger_expandable(bool value) {
  set_has_trigger_expandable();
  trigger_expandable_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.AdzInfo.trigger_expandable)
}

// -------------------------------------------------------------------

// BidRequest_UserAttribute

// required uint32 id = 1;
bool BidRequest_UserAttribute::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_UserAttribute::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_UserAttribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_UserAttribute::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 BidRequest_UserAttribute::id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.UserAttribute.id)
  return id_;
}
 void BidRequest_UserAttribute::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.UserAttribute.id)
}

// optional uint32 timestamp = 2;
bool BidRequest_UserAttribute::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_UserAttribute::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_UserAttribute::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_UserAttribute::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::google::protobuf::uint32 BidRequest_UserAttribute::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.UserAttribute.timestamp)
  return timestamp_;
}
 void BidRequest_UserAttribute::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.UserAttribute.timestamp)
}

// -------------------------------------------------------------------

// BidRequest_PrivateInfo

// optional string tanx_cnaui = 1;
bool BidRequest_PrivateInfo::has_tanx_cnaui() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_PrivateInfo::set_has_tanx_cnaui() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_PrivateInfo::clear_has_tanx_cnaui() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_PrivateInfo::clear_tanx_cnaui() {
  tanx_cnaui_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tanx_cnaui();
}
 const ::std::string& BidRequest_PrivateInfo::tanx_cnaui() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui)
  return tanx_cnaui_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_PrivateInfo::set_tanx_cnaui(const ::std::string& value) {
  set_has_tanx_cnaui();
  tanx_cnaui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui)
}
 void BidRequest_PrivateInfo::set_tanx_cnaui(const char* value) {
  set_has_tanx_cnaui();
  tanx_cnaui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui)
}
 void BidRequest_PrivateInfo::set_tanx_cnaui(const char* value, size_t size) {
  set_has_tanx_cnaui();
  tanx_cnaui_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui)
}
 ::std::string* BidRequest_PrivateInfo::mutable_tanx_cnaui() {
  set_has_tanx_cnaui();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui)
  return tanx_cnaui_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_PrivateInfo::release_tanx_cnaui() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui)
  clear_has_tanx_cnaui();
  return tanx_cnaui_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_PrivateInfo::set_allocated_tanx_cnaui(::std::string* tanx_cnaui) {
  if (tanx_cnaui != NULL) {
    set_has_tanx_cnaui();
  } else {
    clear_has_tanx_cnaui();
  }
  tanx_cnaui_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tanx_cnaui);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.PrivateInfo.tanx_cnaui)
}

// optional string risk_control = 2;
bool BidRequest_PrivateInfo::has_risk_control() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_PrivateInfo::set_has_risk_control() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_PrivateInfo::clear_has_risk_control() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_PrivateInfo::clear_risk_control() {
  risk_control_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_risk_control();
}
 const ::std::string& BidRequest_PrivateInfo::risk_control() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.PrivateInfo.risk_control)
  return risk_control_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_PrivateInfo::set_risk_control(const ::std::string& value) {
  set_has_risk_control();
  risk_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.PrivateInfo.risk_control)
}
 void BidRequest_PrivateInfo::set_risk_control(const char* value) {
  set_has_risk_control();
  risk_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.PrivateInfo.risk_control)
}
 void BidRequest_PrivateInfo::set_risk_control(const char* value, size_t size) {
  set_has_risk_control();
  risk_control_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.PrivateInfo.risk_control)
}
 ::std::string* BidRequest_PrivateInfo::mutable_risk_control() {
  set_has_risk_control();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.PrivateInfo.risk_control)
  return risk_control_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_PrivateInfo::release_risk_control() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.PrivateInfo.risk_control)
  clear_has_risk_control();
  return risk_control_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_PrivateInfo::set_allocated_risk_control(::std::string* risk_control) {
  if (risk_control != NULL) {
    set_has_risk_control();
  } else {
    clear_has_risk_control();
  }
  risk_control_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), risk_control);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.PrivateInfo.risk_control)
}

// optional string nick_name = 3;
bool BidRequest_PrivateInfo::has_nick_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_PrivateInfo::set_has_nick_name() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_PrivateInfo::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_PrivateInfo::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick_name();
}
 const ::std::string& BidRequest_PrivateInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.PrivateInfo.nick_name)
  return nick_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_PrivateInfo::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.PrivateInfo.nick_name)
}
 void BidRequest_PrivateInfo::set_nick_name(const char* value) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.PrivateInfo.nick_name)
}
 void BidRequest_PrivateInfo::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.PrivateInfo.nick_name)
}
 ::std::string* BidRequest_PrivateInfo::mutable_nick_name() {
  set_has_nick_name();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.PrivateInfo.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_PrivateInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.PrivateInfo.nick_name)
  clear_has_nick_name();
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_PrivateInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    set_has_nick_name();
  } else {
    clear_has_nick_name();
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.PrivateInfo.nick_name)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_Device

// optional string platform = 1;
bool BidRequest_Mobile_Device::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_Device::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_Device::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_Device::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_platform();
}
 const ::std::string& BidRequest_Mobile_Device::platform() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.platform)
  return platform_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_platform(const ::std::string& value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.platform)
}
 void BidRequest_Mobile_Device::set_platform(const char* value) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.platform)
}
 void BidRequest_Mobile_Device::set_platform(const char* value, size_t size) {
  set_has_platform();
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.platform)
}
 ::std::string* BidRequest_Mobile_Device::mutable_platform() {
  set_has_platform();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_platform() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.platform)
  clear_has_platform();
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    set_has_platform();
  } else {
    clear_has_platform();
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.platform)
}

// optional string brand = 2;
bool BidRequest_Mobile_Device::has_brand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile_Device::set_has_brand() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile_Device::clear_has_brand() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile_Device::clear_brand() {
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand();
}
 const ::std::string& BidRequest_Mobile_Device::brand() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.brand)
  return brand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_brand(const ::std::string& value) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.brand)
}
 void BidRequest_Mobile_Device::set_brand(const char* value) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.brand)
}
 void BidRequest_Mobile_Device::set_brand(const char* value, size_t size) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.brand)
}
 ::std::string* BidRequest_Mobile_Device::mutable_brand() {
  set_has_brand();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.brand)
  return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_brand() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.brand)
  clear_has_brand();
  return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    set_has_brand();
  } else {
    clear_has_brand();
  }
  brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.brand)
}

// optional string model = 3;
bool BidRequest_Mobile_Device::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Mobile_Device::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Mobile_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Mobile_Device::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& BidRequest_Mobile_Device::model() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.model)
}
 void BidRequest_Mobile_Device::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.model)
}
 void BidRequest_Mobile_Device::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.model)
}
 ::std::string* BidRequest_Mobile_Device::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_model() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.model)
}

// optional string os = 4;
bool BidRequest_Mobile_Device::has_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Mobile_Device::set_has_os() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Mobile_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Mobile_Device::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os();
}
 const ::std::string& BidRequest_Mobile_Device::os() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.os)
  return os_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_os(const ::std::string& value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.os)
}
 void BidRequest_Mobile_Device::set_os(const char* value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.os)
}
 void BidRequest_Mobile_Device::set_os(const char* value, size_t size) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.os)
}
 ::std::string* BidRequest_Mobile_Device::mutable_os() {
  set_has_os();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_os() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.os)
  clear_has_os();
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    set_has_os();
  } else {
    clear_has_os();
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.os)
}

// optional string os_version = 5;
bool BidRequest_Mobile_Device::has_os_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Mobile_Device::set_has_os_version() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Mobile_Device::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Mobile_Device::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os_version();
}
 const ::std::string& BidRequest_Mobile_Device::os_version() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.os_version)
  return os_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_os_version(const ::std::string& value) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.os_version)
}
 void BidRequest_Mobile_Device::set_os_version(const char* value) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.os_version)
}
 void BidRequest_Mobile_Device::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.os_version)
}
 ::std::string* BidRequest_Mobile_Device::mutable_os_version() {
  set_has_os_version();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_os_version() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.os_version)
  clear_has_os_version();
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.os_version)
}

// optional uint32 network = 6;
bool BidRequest_Mobile_Device::has_network() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Mobile_Device::set_has_network() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Mobile_Device::clear_has_network() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Mobile_Device::clear_network() {
  network_ = 0u;
  clear_has_network();
}
 ::google::protobuf::uint32 BidRequest_Mobile_Device::network() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.network)
  return network_;
}
 void BidRequest_Mobile_Device::set_network(::google::protobuf::uint32 value) {
  set_has_network();
  network_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.network)
}

// optional int32 operator = 7;
bool BidRequest_Mobile_Device::has_operator_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Mobile_Device::set_has_operator_() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Mobile_Device::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Mobile_Device::clear_operator_() {
  operator__ = 0;
  clear_has_operator_();
}
 ::google::protobuf::int32 BidRequest_Mobile_Device::operator_() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.operator)
  return operator__;
}
 void BidRequest_Mobile_Device::set_operator_(::google::protobuf::int32 value) {
  set_has_operator_();
  operator__ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.operator)
}

// optional string longitude = 8;
bool BidRequest_Mobile_Device::has_longitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Mobile_Device::set_has_longitude() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Mobile_Device::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Mobile_Device::clear_longitude() {
  longitude_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_longitude();
}
 const ::std::string& BidRequest_Mobile_Device::longitude() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.longitude)
  return longitude_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_longitude(const ::std::string& value) {
  set_has_longitude();
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.longitude)
}
 void BidRequest_Mobile_Device::set_longitude(const char* value) {
  set_has_longitude();
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.longitude)
}
 void BidRequest_Mobile_Device::set_longitude(const char* value, size_t size) {
  set_has_longitude();
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.longitude)
}
 ::std::string* BidRequest_Mobile_Device::mutable_longitude() {
  set_has_longitude();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.longitude)
  return longitude_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_longitude() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.longitude)
  clear_has_longitude();
  return longitude_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_longitude(::std::string* longitude) {
  if (longitude != NULL) {
    set_has_longitude();
  } else {
    clear_has_longitude();
  }
  longitude_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), longitude);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.longitude)
}

// optional string latitude = 9;
bool BidRequest_Mobile_Device::has_latitude() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Mobile_Device::set_has_latitude() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Mobile_Device::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Mobile_Device::clear_latitude() {
  latitude_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_latitude();
}
 const ::std::string& BidRequest_Mobile_Device::latitude() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.latitude)
  return latitude_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_latitude(const ::std::string& value) {
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.latitude)
}
 void BidRequest_Mobile_Device::set_latitude(const char* value) {
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.latitude)
}
 void BidRequest_Mobile_Device::set_latitude(const char* value, size_t size) {
  set_has_latitude();
  latitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.latitude)
}
 ::std::string* BidRequest_Mobile_Device::mutable_latitude() {
  set_has_latitude();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.latitude)
  return latitude_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_latitude() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.latitude)
  clear_has_latitude();
  return latitude_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_latitude(::std::string* latitude) {
  if (latitude != NULL) {
    set_has_latitude();
  } else {
    clear_has_latitude();
  }
  latitude_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), latitude);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.latitude)
}

// optional string device_size = 10;
bool BidRequest_Mobile_Device::has_device_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Mobile_Device::set_has_device_size() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Mobile_Device::clear_has_device_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Mobile_Device::clear_device_size() {
  device_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_size();
}
 const ::std::string& BidRequest_Mobile_Device::device_size() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.device_size)
  return device_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_device_size(const ::std::string& value) {
  set_has_device_size();
  device_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.device_size)
}
 void BidRequest_Mobile_Device::set_device_size(const char* value) {
  set_has_device_size();
  device_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.device_size)
}
 void BidRequest_Mobile_Device::set_device_size(const char* value, size_t size) {
  set_has_device_size();
  device_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.device_size)
}
 ::std::string* BidRequest_Mobile_Device::mutable_device_size() {
  set_has_device_size();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.device_size)
  return device_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_device_size() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.device_size)
  clear_has_device_size();
  return device_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_device_size(::std::string* device_size) {
  if (device_size != NULL) {
    set_has_device_size();
  } else {
    clear_has_device_size();
  }
  device_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_size);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.device_size)
}

// optional string device_id = 11;
bool BidRequest_Mobile_Device::has_device_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest_Mobile_Device::set_has_device_id() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest_Mobile_Device::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest_Mobile_Device::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_id();
}
 const ::std::string& BidRequest_Mobile_Device::device_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.device_id)
  return device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_device_id(const ::std::string& value) {
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.device_id)
}
 void BidRequest_Mobile_Device::set_device_id(const char* value) {
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.device_id)
}
 void BidRequest_Mobile_Device::set_device_id(const char* value, size_t size) {
  set_has_device_id();
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.device_id)
}
 ::std::string* BidRequest_Mobile_Device::mutable_device_id() {
  set_has_device_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_device_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.device_id)
  clear_has_device_id();
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    set_has_device_id();
  } else {
    clear_has_device_id();
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.device_id)
}

// optional int32 device_pixel_ratio = 12 [default = 1000];
bool BidRequest_Mobile_Device::has_device_pixel_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Mobile_Device::set_has_device_pixel_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Mobile_Device::clear_has_device_pixel_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Mobile_Device::clear_device_pixel_ratio() {
  device_pixel_ratio_ = 1000;
  clear_has_device_pixel_ratio();
}
 ::google::protobuf::int32 BidRequest_Mobile_Device::device_pixel_ratio() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.device_pixel_ratio)
  return device_pixel_ratio_;
}
 void BidRequest_Mobile_Device::set_device_pixel_ratio(::google::protobuf::int32 value) {
  set_has_device_pixel_ratio();
  device_pixel_ratio_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.device_pixel_ratio)
}

// optional .protocol.Tanx.BidRequest.Mobile.Device.ScreenOrientation screen_orientation = 13 [default = SCREEN_ORIENTATION_UNKNOWN];
bool BidRequest_Mobile_Device::has_screen_orientation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_Mobile_Device::set_has_screen_orientation() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_Mobile_Device::clear_has_screen_orientation() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_Mobile_Device::clear_screen_orientation() {
  screen_orientation_ = 0;
  clear_has_screen_orientation();
}
 ::protocol::Tanx::BidRequest_Mobile_Device_ScreenOrientation BidRequest_Mobile_Device::screen_orientation() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.screen_orientation)
  return static_cast< ::protocol::Tanx::BidRequest_Mobile_Device_ScreenOrientation >(screen_orientation_);
}
 void BidRequest_Mobile_Device::set_screen_orientation(::protocol::Tanx::BidRequest_Mobile_Device_ScreenOrientation value) {
  assert(::protocol::Tanx::BidRequest_Mobile_Device_ScreenOrientation_IsValid(value));
  set_has_screen_orientation();
  screen_orientation_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.screen_orientation)
}

// optional string android_id = 14;
bool BidRequest_Mobile_Device::has_android_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_Mobile_Device::set_has_android_id() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_Mobile_Device::clear_has_android_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_Mobile_Device::clear_android_id() {
  android_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_android_id();
}
 const ::std::string& BidRequest_Mobile_Device::android_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.android_id)
  return android_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_android_id(const ::std::string& value) {
  set_has_android_id();
  android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.android_id)
}
 void BidRequest_Mobile_Device::set_android_id(const char* value) {
  set_has_android_id();
  android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.android_id)
}
 void BidRequest_Mobile_Device::set_android_id(const char* value, size_t size) {
  set_has_android_id();
  android_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.android_id)
}
 ::std::string* BidRequest_Mobile_Device::mutable_android_id() {
  set_has_android_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.android_id)
  return android_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_android_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.android_id)
  clear_has_android_id();
  return android_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_android_id(::std::string* android_id) {
  if (android_id != NULL) {
    set_has_android_id();
  } else {
    clear_has_android_id();
  }
  android_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), android_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.android_id)
}

// optional string idfa = 15;
bool BidRequest_Mobile_Device::has_idfa() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest_Mobile_Device::set_has_idfa() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest_Mobile_Device::clear_has_idfa() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest_Mobile_Device::clear_idfa() {
  idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idfa();
}
 const ::std::string& BidRequest_Mobile_Device::idfa() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.idfa)
  return idfa_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_idfa(const ::std::string& value) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.idfa)
}
 void BidRequest_Mobile_Device::set_idfa(const char* value) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.idfa)
}
 void BidRequest_Mobile_Device::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.idfa)
}
 ::std::string* BidRequest_Mobile_Device::mutable_idfa() {
  set_has_idfa();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.idfa)
  return idfa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_idfa() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.idfa)
  clear_has_idfa();
  return idfa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_idfa(::std::string* idfa) {
  if (idfa != NULL) {
    set_has_idfa();
  } else {
    clear_has_idfa();
  }
  idfa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idfa);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.idfa)
}

// optional string imei = 16;
bool BidRequest_Mobile_Device::has_imei() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest_Mobile_Device::set_has_imei() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest_Mobile_Device::clear_has_imei() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest_Mobile_Device::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
 const ::std::string& BidRequest_Mobile_Device::imei() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.imei)
  return imei_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.imei)
}
 void BidRequest_Mobile_Device::set_imei(const char* value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.imei)
}
 void BidRequest_Mobile_Device::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.imei)
}
 ::std::string* BidRequest_Mobile_Device::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_imei() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.imei)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.imei)
}

// optional string mac = 17;
bool BidRequest_Mobile_Device::has_mac() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest_Mobile_Device::set_has_mac() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest_Mobile_Device::clear_has_mac() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest_Mobile_Device::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mac();
}
 const ::std::string& BidRequest_Mobile_Device::mac() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.Device.mac)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_mac(const ::std::string& value) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.Device.mac)
}
 void BidRequest_Mobile_Device::set_mac(const char* value) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.Device.mac)
}
 void BidRequest_Mobile_Device::set_mac(const char* value, size_t size) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.Device.mac)
}
 ::std::string* BidRequest_Mobile_Device::mutable_mac() {
  set_has_mac();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.Device.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_Device::release_mac() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.Device.mac)
  clear_has_mac();
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_Device::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    set_has_mac();
  } else {
    clear_has_mac();
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.Device.mac)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_AppCategory

// required int32 id = 1;
bool BidRequest_Mobile_AppCategory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_AppCategory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_AppCategory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_AppCategory::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 BidRequest_Mobile_AppCategory::id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.AppCategory.id)
  return id_;
}
 void BidRequest_Mobile_AppCategory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.AppCategory.id)
}

// required int32 confidence_level = 2;
bool BidRequest_Mobile_AppCategory::has_confidence_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile_AppCategory::set_has_confidence_level() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile_AppCategory::clear_has_confidence_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile_AppCategory::clear_confidence_level() {
  confidence_level_ = 0;
  clear_has_confidence_level();
}
 ::google::protobuf::int32 BidRequest_Mobile_AppCategory::confidence_level() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.AppCategory.confidence_level)
  return confidence_level_;
}
 void BidRequest_Mobile_AppCategory::set_confidence_level(::google::protobuf::int32 value) {
  set_has_confidence_level();
  confidence_level_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.AppCategory.confidence_level)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_NativeAdTemplate_Area_Creative

// repeated int32 required_fields = 1;
int BidRequest_Mobile_NativeAdTemplate_Area_Creative::required_fields_size() const {
  return required_fields_.size();
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_required_fields() {
  required_fields_.Clear();
}
 ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::required_fields(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
  return required_fields_.Get(index);
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_required_fields(int index, ::google::protobuf::int32 value) {
  required_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::add_required_fields(::google::protobuf::int32 value) {
  required_fields_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile_NativeAdTemplate_Area_Creative::required_fields() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
  return required_fields_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_required_fields() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.required_fields)
  return &required_fields_;
}

// repeated int32 recommended_fields = 2;
int BidRequest_Mobile_NativeAdTemplate_Area_Creative::recommended_fields_size() const {
  return recommended_fields_.size();
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_recommended_fields() {
  recommended_fields_.Clear();
}
 ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::recommended_fields(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
  return recommended_fields_.Get(index);
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_recommended_fields(int index, ::google::protobuf::int32 value) {
  recommended_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::add_recommended_fields(::google::protobuf::int32 value) {
  recommended_fields_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile_NativeAdTemplate_Area_Creative::recommended_fields() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
  return recommended_fields_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_recommended_fields() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.recommended_fields)
  return &recommended_fields_;
}

// optional int32 title_max_safe_length = 3;
bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::has_title_max_safe_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_has_title_max_safe_length() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_has_title_max_safe_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_title_max_safe_length() {
  title_max_safe_length_ = 0;
  clear_has_title_max_safe_length();
}
 ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::title_max_safe_length() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.title_max_safe_length)
  return title_max_safe_length_;
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_title_max_safe_length(::google::protobuf::int32 value) {
  set_has_title_max_safe_length();
  title_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.title_max_safe_length)
}

// optional int32 ad_words_max_safe_length = 4;
bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::has_ad_words_max_safe_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_has_ad_words_max_safe_length() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_has_ad_words_max_safe_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_ad_words_max_safe_length() {
  ad_words_max_safe_length_ = 0;
  clear_has_ad_words_max_safe_length();
}
 ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::ad_words_max_safe_length() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.ad_words_max_safe_length)
  return ad_words_max_safe_length_;
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_ad_words_max_safe_length(::google::protobuf::int32 value) {
  set_has_ad_words_max_safe_length();
  ad_words_max_safe_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.ad_words_max_safe_length)
}

// optional string image_size = 5;
bool BidRequest_Mobile_NativeAdTemplate_Area_Creative::has_image_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_has_image_size() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_image_size() {
  image_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_size();
}
 const ::std::string& BidRequest_Mobile_NativeAdTemplate_Area_Creative::image_size() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
  return image_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_image_size(const ::std::string& value) {
  set_has_image_size();
  image_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_image_size(const char* value) {
  set_has_image_size();
  image_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_image_size(const char* value, size_t size) {
  set_has_image_size();
  image_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
}
 ::std::string* BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_image_size() {
  set_has_image_size();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
  return image_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_NativeAdTemplate_Area_Creative::release_image_size() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
  clear_has_image_size();
  return image_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_allocated_image_size(::std::string* image_size) {
  if (image_size != NULL) {
    set_has_image_size();
  } else {
    clear_has_image_size();
  }
  image_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_size);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.image_size)
}

// repeated int32 action_fields = 6;
int BidRequest_Mobile_NativeAdTemplate_Area_Creative::action_fields_size() const {
  return action_fields_.size();
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_action_fields() {
  action_fields_.Clear();
}
 ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::action_fields(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
  return action_fields_.Get(index);
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_action_fields(int index, ::google::protobuf::int32 value) {
  action_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::add_action_fields(::google::protobuf::int32 value) {
  action_fields_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile_NativeAdTemplate_Area_Creative::action_fields() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
  return action_fields_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_action_fields() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.action_fields)
  return &action_fields_;
}

// repeated int32 multichoice_fields = 7;
int BidRequest_Mobile_NativeAdTemplate_Area_Creative::multichoice_fields_size() const {
  return multichoice_fields_.size();
}
void BidRequest_Mobile_NativeAdTemplate_Area_Creative::clear_multichoice_fields() {
  multichoice_fields_.Clear();
}
 ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area_Creative::multichoice_fields(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
  return multichoice_fields_.Get(index);
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::set_multichoice_fields(int index, ::google::protobuf::int32 value) {
  multichoice_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
}
 void BidRequest_Mobile_NativeAdTemplate_Area_Creative::add_multichoice_fields(::google::protobuf::int32 value) {
  multichoice_fields_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile_NativeAdTemplate_Area_Creative::multichoice_fields() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
  return multichoice_fields_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile_NativeAdTemplate_Area_Creative::mutable_multichoice_fields() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative.multichoice_fields)
  return &multichoice_fields_;
}

// -------------------------------------------------------------------

// BidRequest_Mobile_NativeAdTemplate_Area

// required int32 id = 1;
bool BidRequest_Mobile_NativeAdTemplate_Area::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_NativeAdTemplate_Area::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_NativeAdTemplate_Area::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_NativeAdTemplate_Area::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area::id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.id)
  return id_;
}
 void BidRequest_Mobile_NativeAdTemplate_Area::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.id)
}

// optional int32 creative_count = 2;
bool BidRequest_Mobile_NativeAdTemplate_Area::has_creative_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile_NativeAdTemplate_Area::set_has_creative_count() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile_NativeAdTemplate_Area::clear_has_creative_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile_NativeAdTemplate_Area::clear_creative_count() {
  creative_count_ = 0;
  clear_has_creative_count();
}
 ::google::protobuf::int32 BidRequest_Mobile_NativeAdTemplate_Area::creative_count() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative_count)
  return creative_count_;
}
 void BidRequest_Mobile_NativeAdTemplate_Area::set_creative_count(::google::protobuf::int32 value) {
  set_has_creative_count();
  creative_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative_count)
}

// optional .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.Creative creative = 3;
bool BidRequest_Mobile_NativeAdTemplate_Area::has_creative() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Mobile_NativeAdTemplate_Area::set_has_creative() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Mobile_NativeAdTemplate_Area::clear_has_creative() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Mobile_NativeAdTemplate_Area::clear_creative() {
  if (creative_ != NULL) creative_->::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative::Clear();
  clear_has_creative();
}
const ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative& BidRequest_Mobile_NativeAdTemplate_Area::creative() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative)
  return creative_ != NULL ? *creative_ : *default_instance_->creative_;
}
::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* BidRequest_Mobile_NativeAdTemplate_Area::mutable_creative() {
  set_has_creative();
  if (creative_ == NULL) {
    creative_ = new ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative)
  return creative_;
}
::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* BidRequest_Mobile_NativeAdTemplate_Area::release_creative() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative)
  clear_has_creative();
  ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* temp = creative_;
  creative_ = NULL;
  return temp;
}
void BidRequest_Mobile_NativeAdTemplate_Area::set_allocated_creative(::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area_Creative* creative) {
  delete creative_;
  creative_ = creative;
  if (creative) {
    set_has_creative();
  } else {
    clear_has_creative();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area.creative)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_NativeAdTemplate

// required string native_template_id = 1;
bool BidRequest_Mobile_NativeAdTemplate::has_native_template_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_NativeAdTemplate::set_has_native_template_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_NativeAdTemplate::clear_has_native_template_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_NativeAdTemplate::clear_native_template_id() {
  native_template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_native_template_id();
}
 const ::std::string& BidRequest_Mobile_NativeAdTemplate::native_template_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
  return native_template_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_NativeAdTemplate::set_native_template_id(const ::std::string& value) {
  set_has_native_template_id();
  native_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
}
 void BidRequest_Mobile_NativeAdTemplate::set_native_template_id(const char* value) {
  set_has_native_template_id();
  native_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
}
 void BidRequest_Mobile_NativeAdTemplate::set_native_template_id(const char* value, size_t size) {
  set_has_native_template_id();
  native_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
}
 ::std::string* BidRequest_Mobile_NativeAdTemplate::mutable_native_template_id() {
  set_has_native_template_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
  return native_template_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_NativeAdTemplate::release_native_template_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
  clear_has_native_template_id();
  return native_template_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_NativeAdTemplate::set_allocated_native_template_id(::std::string* native_template_id) {
  if (native_template_id != NULL) {
    set_has_native_template_id();
  } else {
    clear_has_native_template_id();
  }
  native_template_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), native_template_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.native_template_id)
}

// repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.Area areas = 2;
int BidRequest_Mobile_NativeAdTemplate::areas_size() const {
  return areas_.size();
}
void BidRequest_Mobile_NativeAdTemplate::clear_areas() {
  areas_.Clear();
}
const ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area& BidRequest_Mobile_NativeAdTemplate::areas(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return areas_.Get(index);
}
::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area* BidRequest_Mobile_NativeAdTemplate::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return areas_.Mutable(index);
}
::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area* BidRequest_Mobile_NativeAdTemplate::add_areas() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return areas_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area >*
BidRequest_Mobile_NativeAdTemplate::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return &areas_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate_Area >&
BidRequest_Mobile_NativeAdTemplate::areas() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.NativeAdTemplate.areas)
  return areas_;
}

// -------------------------------------------------------------------

// BidRequest_Mobile

// optional bool is_app = 1;
bool BidRequest_Mobile::has_is_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile::set_has_is_app() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile::clear_has_is_app() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile::clear_is_app() {
  is_app_ = false;
  clear_has_is_app();
}
 bool BidRequest_Mobile::is_app() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.is_app)
  return is_app_;
}
 void BidRequest_Mobile::set_is_app(bool value) {
  set_has_is_app();
  is_app_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.is_app)
}

// optional uint32 ad_num = 2;
bool BidRequest_Mobile::has_ad_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile::set_has_ad_num() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile::clear_has_ad_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile::clear_ad_num() {
  ad_num_ = 0u;
  clear_has_ad_num();
}
 ::google::protobuf::uint32 BidRequest_Mobile::ad_num() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.ad_num)
  return ad_num_;
}
 void BidRequest_Mobile::set_ad_num(::google::protobuf::uint32 value) {
  set_has_ad_num();
  ad_num_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.ad_num)
}

// repeated string ad_keyword = 3;
int BidRequest_Mobile::ad_keyword_size() const {
  return ad_keyword_.size();
}
void BidRequest_Mobile::clear_ad_keyword() {
  ad_keyword_.Clear();
}
 const ::std::string& BidRequest_Mobile::ad_keyword(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.ad_keyword)
  return ad_keyword_.Get(index);
}
 ::std::string* BidRequest_Mobile::mutable_ad_keyword(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.ad_keyword)
  return ad_keyword_.Mutable(index);
}
 void BidRequest_Mobile::set_ad_keyword(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.ad_keyword)
  ad_keyword_.Mutable(index)->assign(value);
}
 void BidRequest_Mobile::set_ad_keyword(int index, const char* value) {
  ad_keyword_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.ad_keyword)
}
 void BidRequest_Mobile::set_ad_keyword(int index, const char* value, size_t size) {
  ad_keyword_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.ad_keyword)
}
 ::std::string* BidRequest_Mobile::add_ad_keyword() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.BidRequest.Mobile.ad_keyword)
  return ad_keyword_.Add();
}
 void BidRequest_Mobile::add_ad_keyword(const ::std::string& value) {
  ad_keyword_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.ad_keyword)
}
 void BidRequest_Mobile::add_ad_keyword(const char* value) {
  ad_keyword_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.BidRequest.Mobile.ad_keyword)
}
 void BidRequest_Mobile::add_ad_keyword(const char* value, size_t size) {
  ad_keyword_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.BidRequest.Mobile.ad_keyword)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Mobile::ad_keyword() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.ad_keyword)
  return ad_keyword_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Mobile::mutable_ad_keyword() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.ad_keyword)
  return &ad_keyword_;
}

// optional bool is_fullscreen = 4;
bool BidRequest_Mobile::has_is_fullscreen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Mobile::set_has_is_fullscreen() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Mobile::clear_has_is_fullscreen() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Mobile::clear_is_fullscreen() {
  is_fullscreen_ = false;
  clear_has_is_fullscreen();
}
 bool BidRequest_Mobile::is_fullscreen() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.is_fullscreen)
  return is_fullscreen_;
}
 void BidRequest_Mobile::set_is_fullscreen(bool value) {
  set_has_is_fullscreen();
  is_fullscreen_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.is_fullscreen)
}

// optional string package_name = 5;
bool BidRequest_Mobile::has_package_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Mobile::set_has_package_name() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Mobile::clear_has_package_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Mobile::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_package_name();
}
 const ::std::string& BidRequest_Mobile::package_name() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.package_name)
  return package_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_package_name(const ::std::string& value) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.package_name)
}
 void BidRequest_Mobile::set_package_name(const char* value) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.package_name)
}
 void BidRequest_Mobile::set_package_name(const char* value, size_t size) {
  set_has_package_name();
  package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.package_name)
}
 ::std::string* BidRequest_Mobile::mutable_package_name() {
  set_has_package_name();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.package_name)
  return package_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_package_name() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.package_name)
  clear_has_package_name();
  return package_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_package_name(::std::string* package_name) {
  if (package_name != NULL) {
    set_has_package_name();
  } else {
    clear_has_package_name();
  }
  package_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.package_name)
}

// optional .protocol.Tanx.BidRequest.Mobile.Device device = 6;
bool BidRequest_Mobile::has_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Mobile::set_has_device() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Mobile::clear_has_device() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Mobile::clear_device() {
  if (device_ != NULL) device_->::protocol::Tanx::BidRequest_Mobile_Device::Clear();
  clear_has_device();
}
const ::protocol::Tanx::BidRequest_Mobile_Device& BidRequest_Mobile::device() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
::protocol::Tanx::BidRequest_Mobile_Device* BidRequest_Mobile::mutable_device() {
  set_has_device();
  if (device_ == NULL) {
    device_ = new ::protocol::Tanx::BidRequest_Mobile_Device;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.device)
  return device_;
}
::protocol::Tanx::BidRequest_Mobile_Device* BidRequest_Mobile::release_device() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.device)
  clear_has_device();
  ::protocol::Tanx::BidRequest_Mobile_Device* temp = device_;
  device_ = NULL;
  return temp;
}
void BidRequest_Mobile::set_allocated_device(::protocol::Tanx::BidRequest_Mobile_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.device)
}

// repeated string native_template_id = 7;
int BidRequest_Mobile::native_template_id_size() const {
  return native_template_id_.size();
}
void BidRequest_Mobile::clear_native_template_id() {
  native_template_id_.Clear();
}
 const ::std::string& BidRequest_Mobile::native_template_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.native_template_id)
  return native_template_id_.Get(index);
}
 ::std::string* BidRequest_Mobile::mutable_native_template_id(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.native_template_id)
  return native_template_id_.Mutable(index);
}
 void BidRequest_Mobile::set_native_template_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.native_template_id)
  native_template_id_.Mutable(index)->assign(value);
}
 void BidRequest_Mobile::set_native_template_id(int index, const char* value) {
  native_template_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.native_template_id)
}
 void BidRequest_Mobile::set_native_template_id(int index, const char* value, size_t size) {
  native_template_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.native_template_id)
}
 ::std::string* BidRequest_Mobile::add_native_template_id() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.BidRequest.Mobile.native_template_id)
  return native_template_id_.Add();
}
 void BidRequest_Mobile::add_native_template_id(const ::std::string& value) {
  native_template_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.native_template_id)
}
 void BidRequest_Mobile::add_native_template_id(const char* value) {
  native_template_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.BidRequest.Mobile.native_template_id)
}
 void BidRequest_Mobile::add_native_template_id(const char* value, size_t size) {
  native_template_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.BidRequest.Mobile.native_template_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Mobile::native_template_id() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.native_template_id)
  return native_template_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Mobile::mutable_native_template_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.native_template_id)
  return &native_template_id_;
}

// repeated int32 landing_type = 8;
int BidRequest_Mobile::landing_type_size() const {
  return landing_type_.size();
}
void BidRequest_Mobile::clear_landing_type() {
  landing_type_.Clear();
}
 ::google::protobuf::int32 BidRequest_Mobile::landing_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.landing_type)
  return landing_type_.Get(index);
}
 void BidRequest_Mobile::set_landing_type(int index, ::google::protobuf::int32 value) {
  landing_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.landing_type)
}
 void BidRequest_Mobile::add_landing_type(::google::protobuf::int32 value) {
  landing_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.landing_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Mobile::landing_type() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.landing_type)
  return landing_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Mobile::mutable_landing_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.landing_type)
  return &landing_type_;
}

// optional string app_name = 9;
bool BidRequest_Mobile::has_app_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Mobile::set_has_app_name() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Mobile::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Mobile::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_name();
}
 const ::std::string& BidRequest_Mobile::app_name() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.app_name)
  return app_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_app_name(const ::std::string& value) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Mobile.app_name)
}
 void BidRequest_Mobile::set_app_name(const char* value) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Mobile.app_name)
}
 void BidRequest_Mobile::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Mobile.app_name)
}
 ::std::string* BidRequest_Mobile::mutable_app_name() {
  set_has_app_name();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.app_name)
  return app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_app_name() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Mobile.app_name)
  clear_has_app_name();
  return app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_app_name(::std::string* app_name) {
  if (app_name != NULL) {
    set_has_app_name();
  } else {
    clear_has_app_name();
  }
  app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Mobile.app_name)
}

// repeated .protocol.Tanx.BidRequest.Mobile.AppCategory app_categories = 10;
int BidRequest_Mobile::app_categories_size() const {
  return app_categories_.size();
}
void BidRequest_Mobile::clear_app_categories() {
  app_categories_.Clear();
}
const ::protocol::Tanx::BidRequest_Mobile_AppCategory& BidRequest_Mobile::app_categories(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.app_categories)
  return app_categories_.Get(index);
}
::protocol::Tanx::BidRequest_Mobile_AppCategory* BidRequest_Mobile::mutable_app_categories(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.app_categories)
  return app_categories_.Mutable(index);
}
::protocol::Tanx::BidRequest_Mobile_AppCategory* BidRequest_Mobile::add_app_categories() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.app_categories)
  return app_categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Mobile_AppCategory >*
BidRequest_Mobile::mutable_app_categories() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.app_categories)
  return &app_categories_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Mobile_AppCategory >&
BidRequest_Mobile::app_categories() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.app_categories)
  return app_categories_;
}

// repeated .protocol.Tanx.BidRequest.Mobile.NativeAdTemplate native_ad_template = 11;
int BidRequest_Mobile::native_ad_template_size() const {
  return native_ad_template_.size();
}
void BidRequest_Mobile::clear_native_ad_template() {
  native_ad_template_.Clear();
}
const ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate& BidRequest_Mobile::native_ad_template(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Mobile.native_ad_template)
  return native_ad_template_.Get(index);
}
::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate* BidRequest_Mobile::mutable_native_ad_template(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Mobile.native_ad_template)
  return native_ad_template_.Mutable(index);
}
::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate* BidRequest_Mobile::add_native_ad_template() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Mobile.native_ad_template)
  return native_ad_template_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate >*
BidRequest_Mobile::mutable_native_ad_template() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Mobile.native_ad_template)
  return &native_ad_template_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Mobile_NativeAdTemplate >&
BidRequest_Mobile::native_ad_template() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Mobile.native_ad_template)
  return native_ad_template_;
}

// -------------------------------------------------------------------

// BidRequest_ContentCategory

// required int32 id = 1;
bool BidRequest_ContentCategory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_ContentCategory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_ContentCategory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_ContentCategory::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 BidRequest_ContentCategory::id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.ContentCategory.id)
  return id_;
}
 void BidRequest_ContentCategory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.ContentCategory.id)
}

// required int32 confidence_level = 2;
bool BidRequest_ContentCategory::has_confidence_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_ContentCategory::set_has_confidence_level() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_ContentCategory::clear_has_confidence_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_ContentCategory::clear_confidence_level() {
  confidence_level_ = 0;
  clear_has_confidence_level();
}
 ::google::protobuf::int32 BidRequest_ContentCategory::confidence_level() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.ContentCategory.confidence_level)
  return confidence_level_;
}
 void BidRequest_ContentCategory::set_confidence_level(::google::protobuf::int32 value) {
  set_has_confidence_level();
  confidence_level_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.ContentCategory.confidence_level)
}

// -------------------------------------------------------------------

// BidRequest_Video_Content

// optional string title = 1;
bool BidRequest_Video_Content::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Video_Content::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Video_Content::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Video_Content::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& BidRequest_Video_Content::title() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.Content.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Video_Content::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.Content.title)
}
 void BidRequest_Video_Content::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Video.Content.title)
}
 void BidRequest_Video_Content::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Video.Content.title)
}
 ::std::string* BidRequest_Video_Content::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Video.Content.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Video_Content::release_title() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Video.Content.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Video_Content::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Video.Content.title)
}

// optional int32 duration = 2;
bool BidRequest_Video_Content::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Video_Content::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Video_Content::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Video_Content::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
 ::google::protobuf::int32 BidRequest_Video_Content::duration() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.Content.duration)
  return duration_;
}
 void BidRequest_Video_Content::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.Content.duration)
}

// repeated string keywords = 3;
int BidRequest_Video_Content::keywords_size() const {
  return keywords_.size();
}
void BidRequest_Video_Content::clear_keywords() {
  keywords_.Clear();
}
 const ::std::string& BidRequest_Video_Content::keywords(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.Content.keywords)
  return keywords_.Get(index);
}
 ::std::string* BidRequest_Video_Content::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Video.Content.keywords)
  return keywords_.Mutable(index);
}
 void BidRequest_Video_Content::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.Content.keywords)
  keywords_.Mutable(index)->assign(value);
}
 void BidRequest_Video_Content::set_keywords(int index, const char* value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Video.Content.keywords)
}
 void BidRequest_Video_Content::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Video.Content.keywords)
}
 ::std::string* BidRequest_Video_Content::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.BidRequest.Video.Content.keywords)
  return keywords_.Add();
}
 void BidRequest_Video_Content::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Video.Content.keywords)
}
 void BidRequest_Video_Content::add_keywords(const char* value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.BidRequest.Video.Content.keywords)
}
 void BidRequest_Video_Content::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.BidRequest.Video.Content.keywords)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Video_Content::keywords() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Video.Content.keywords)
  return keywords_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Video_Content::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Video.Content.keywords)
  return &keywords_;
}

// -------------------------------------------------------------------

// BidRequest_Video

// repeated .protocol.Tanx.BidRequest.Video.VideoFormat video_format = 1;
int BidRequest_Video::video_format_size() const {
  return video_format_.size();
}
void BidRequest_Video::clear_video_format() {
  video_format_.Clear();
}
 ::protocol::Tanx::BidRequest_Video_VideoFormat BidRequest_Video::video_format(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.video_format)
  return static_cast< ::protocol::Tanx::BidRequest_Video_VideoFormat >(video_format_.Get(index));
}
 void BidRequest_Video::set_video_format(int index, ::protocol::Tanx::BidRequest_Video_VideoFormat value) {
  assert(::protocol::Tanx::BidRequest_Video_VideoFormat_IsValid(value));
  video_format_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.video_format)
}
 void BidRequest_Video::add_video_format(::protocol::Tanx::BidRequest_Video_VideoFormat value) {
  assert(::protocol::Tanx::BidRequest_Video_VideoFormat_IsValid(value));
  video_format_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Video.video_format)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Video::video_format() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Video.video_format)
  return video_format_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Video::mutable_video_format() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Video.video_format)
  return &video_format_;
}

// optional .protocol.Tanx.BidRequest.Video.Content content = 2;
bool BidRequest_Video::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Video::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Video::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Video::clear_content() {
  if (content_ != NULL) content_->::protocol::Tanx::BidRequest_Video_Content::Clear();
  clear_has_content();
}
const ::protocol::Tanx::BidRequest_Video_Content& BidRequest_Video::content() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
::protocol::Tanx::BidRequest_Video_Content* BidRequest_Video::mutable_content() {
  set_has_content();
  if (content_ == NULL) {
    content_ = new ::protocol::Tanx::BidRequest_Video_Content;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Video.content)
  return content_;
}
::protocol::Tanx::BidRequest_Video_Content* BidRequest_Video::release_content() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Video.content)
  clear_has_content();
  ::protocol::Tanx::BidRequest_Video_Content* temp = content_;
  content_ = NULL;
  return temp;
}
void BidRequest_Video::set_allocated_content(::protocol::Tanx::BidRequest_Video_Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Video.content)
}

// optional int32 videoad_start_delay = 3;
bool BidRequest_Video::has_videoad_start_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Video::set_has_videoad_start_delay() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Video::clear_has_videoad_start_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Video::clear_videoad_start_delay() {
  videoad_start_delay_ = 0;
  clear_has_videoad_start_delay();
}
 ::google::protobuf::int32 BidRequest_Video::videoad_start_delay() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.videoad_start_delay)
  return videoad_start_delay_;
}
 void BidRequest_Video::set_videoad_start_delay(::google::protobuf::int32 value) {
  set_has_videoad_start_delay();
  videoad_start_delay_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.videoad_start_delay)
}

// optional int32 videoad_section_start_delay = 4;
bool BidRequest_Video::has_videoad_section_start_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Video::set_has_videoad_section_start_delay() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Video::clear_has_videoad_section_start_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Video::clear_videoad_section_start_delay() {
  videoad_section_start_delay_ = 0;
  clear_has_videoad_section_start_delay();
}
 ::google::protobuf::int32 BidRequest_Video::videoad_section_start_delay() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.videoad_section_start_delay)
  return videoad_section_start_delay_;
}
 void BidRequest_Video::set_videoad_section_start_delay(::google::protobuf::int32 value) {
  set_has_videoad_section_start_delay();
  videoad_section_start_delay_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.videoad_section_start_delay)
}

// optional int32 min_ad_duration = 5;
bool BidRequest_Video::has_min_ad_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Video::set_has_min_ad_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Video::clear_has_min_ad_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Video::clear_min_ad_duration() {
  min_ad_duration_ = 0;
  clear_has_min_ad_duration();
}
 ::google::protobuf::int32 BidRequest_Video::min_ad_duration() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.min_ad_duration)
  return min_ad_duration_;
}
 void BidRequest_Video::set_min_ad_duration(::google::protobuf::int32 value) {
  set_has_min_ad_duration();
  min_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.min_ad_duration)
}

// optional int32 max_ad_duration = 6;
bool BidRequest_Video::has_max_ad_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Video::set_has_max_ad_duration() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Video::clear_has_max_ad_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Video::clear_max_ad_duration() {
  max_ad_duration_ = 0;
  clear_has_max_ad_duration();
}
 ::google::protobuf::int32 BidRequest_Video::max_ad_duration() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.max_ad_duration)
  return max_ad_duration_;
}
 void BidRequest_Video::set_max_ad_duration(::google::protobuf::int32 value) {
  set_has_max_ad_duration();
  max_ad_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.max_ad_duration)
}

// optional string protocol = 7;
bool BidRequest_Video::has_protocol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Video::set_has_protocol() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Video::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Video::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol();
}
 const ::std::string& BidRequest_Video::protocol() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Video.protocol)
  return protocol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Video::set_protocol(const ::std::string& value) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Video.protocol)
}
 void BidRequest_Video::set_protocol(const char* value) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.Video.protocol)
}
 void BidRequest_Video::set_protocol(const char* value, size_t size) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.Video.protocol)
}
 ::std::string* BidRequest_Video::mutable_protocol() {
  set_has_protocol();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Video.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Video::release_protocol() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Video.protocol)
  clear_has_protocol();
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Video::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    set_has_protocol();
  } else {
    clear_has_protocol();
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Video.protocol)
}

// -------------------------------------------------------------------

// BidRequest_Deal_PreferredDeal

// required uint32 dealid = 1;
bool BidRequest_Deal_PreferredDeal::has_dealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Deal_PreferredDeal::set_has_dealid() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Deal_PreferredDeal::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Deal_PreferredDeal::clear_dealid() {
  dealid_ = 0u;
  clear_has_dealid();
}
 ::google::protobuf::uint32 BidRequest_Deal_PreferredDeal::dealid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.PreferredDeal.dealid)
  return dealid_;
}
 void BidRequest_Deal_PreferredDeal::set_dealid(::google::protobuf::uint32 value) {
  set_has_dealid();
  dealid_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Deal.PreferredDeal.dealid)
}

// repeated uint32 advertiser_ids = 2;
int BidRequest_Deal_PreferredDeal::advertiser_ids_size() const {
  return advertiser_ids_.size();
}
void BidRequest_Deal_PreferredDeal::clear_advertiser_ids() {
  advertiser_ids_.Clear();
}
 ::google::protobuf::uint32 BidRequest_Deal_PreferredDeal::advertiser_ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
  return advertiser_ids_.Get(index);
}
 void BidRequest_Deal_PreferredDeal::set_advertiser_ids(int index, ::google::protobuf::uint32 value) {
  advertiser_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
}
 void BidRequest_Deal_PreferredDeal::add_advertiser_ids(::google::protobuf::uint32 value) {
  advertiser_ids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_Deal_PreferredDeal::advertiser_ids() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
  return advertiser_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_Deal_PreferredDeal::mutable_advertiser_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Deal.PreferredDeal.advertiser_ids)
  return &advertiser_ids_;
}

// optional uint32 fix_cpm_price = 3;
bool BidRequest_Deal_PreferredDeal::has_fix_cpm_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Deal_PreferredDeal::set_has_fix_cpm_price() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Deal_PreferredDeal::clear_has_fix_cpm_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Deal_PreferredDeal::clear_fix_cpm_price() {
  fix_cpm_price_ = 0u;
  clear_has_fix_cpm_price();
}
 ::google::protobuf::uint32 BidRequest_Deal_PreferredDeal::fix_cpm_price() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.PreferredDeal.fix_cpm_price)
  return fix_cpm_price_;
}
 void BidRequest_Deal_PreferredDeal::set_fix_cpm_price(::google::protobuf::uint32 value) {
  set_has_fix_cpm_price();
  fix_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Deal.PreferredDeal.fix_cpm_price)
}

// -------------------------------------------------------------------

// BidRequest_Deal_PrivateAuction_BuyerRule

// repeated uint32 advertiser_ids = 1;
int BidRequest_Deal_PrivateAuction_BuyerRule::advertiser_ids_size() const {
  return advertiser_ids_.size();
}
void BidRequest_Deal_PrivateAuction_BuyerRule::clear_advertiser_ids() {
  advertiser_ids_.Clear();
}
 ::google::protobuf::uint32 BidRequest_Deal_PrivateAuction_BuyerRule::advertiser_ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
  return advertiser_ids_.Get(index);
}
 void BidRequest_Deal_PrivateAuction_BuyerRule::set_advertiser_ids(int index, ::google::protobuf::uint32 value) {
  advertiser_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
}
 void BidRequest_Deal_PrivateAuction_BuyerRule::add_advertiser_ids(::google::protobuf::uint32 value) {
  advertiser_ids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidRequest_Deal_PrivateAuction_BuyerRule::advertiser_ids() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
  return advertiser_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidRequest_Deal_PrivateAuction_BuyerRule::mutable_advertiser_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.advertiser_ids)
  return &advertiser_ids_;
}

// optional uint32 min_cpm_price = 2;
bool BidRequest_Deal_PrivateAuction_BuyerRule::has_min_cpm_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Deal_PrivateAuction_BuyerRule::set_has_min_cpm_price() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Deal_PrivateAuction_BuyerRule::clear_has_min_cpm_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Deal_PrivateAuction_BuyerRule::clear_min_cpm_price() {
  min_cpm_price_ = 0u;
  clear_has_min_cpm_price();
}
 ::google::protobuf::uint32 BidRequest_Deal_PrivateAuction_BuyerRule::min_cpm_price() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.min_cpm_price)
  return min_cpm_price_;
}
 void BidRequest_Deal_PrivateAuction_BuyerRule::set_min_cpm_price(::google::protobuf::uint32 value) {
  set_has_min_cpm_price();
  min_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule.min_cpm_price)
}

// -------------------------------------------------------------------

// BidRequest_Deal_PrivateAuction

// required uint32 dealid = 1;
bool BidRequest_Deal_PrivateAuction::has_dealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Deal_PrivateAuction::set_has_dealid() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Deal_PrivateAuction::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Deal_PrivateAuction::clear_dealid() {
  dealid_ = 0u;
  clear_has_dealid();
}
 ::google::protobuf::uint32 BidRequest_Deal_PrivateAuction::dealid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.PrivateAuction.dealid)
  return dealid_;
}
 void BidRequest_Deal_PrivateAuction::set_dealid(::google::protobuf::uint32 value) {
  set_has_dealid();
  dealid_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.Deal.PrivateAuction.dealid)
}

// repeated .protocol.Tanx.BidRequest.Deal.PrivateAuction.BuyerRule buyer_rules = 2;
int BidRequest_Deal_PrivateAuction::buyer_rules_size() const {
  return buyer_rules_.size();
}
void BidRequest_Deal_PrivateAuction::clear_buyer_rules() {
  buyer_rules_.Clear();
}
const ::protocol::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule& BidRequest_Deal_PrivateAuction::buyer_rules(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return buyer_rules_.Get(index);
}
::protocol::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule* BidRequest_Deal_PrivateAuction::mutable_buyer_rules(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return buyer_rules_.Mutable(index);
}
::protocol::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule* BidRequest_Deal_PrivateAuction::add_buyer_rules() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return buyer_rules_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule >*
BidRequest_Deal_PrivateAuction::mutable_buyer_rules() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return &buyer_rules_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Deal_PrivateAuction_BuyerRule >&
BidRequest_Deal_PrivateAuction::buyer_rules() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.Deal.PrivateAuction.buyer_rules)
  return buyer_rules_;
}

// -------------------------------------------------------------------

// BidRequest_Deal

// optional .protocol.Tanx.BidRequest.Deal.PreferredDeal prefer_deal = 1;
bool BidRequest_Deal::has_prefer_deal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Deal::set_has_prefer_deal() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Deal::clear_has_prefer_deal() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Deal::clear_prefer_deal() {
  if (prefer_deal_ != NULL) prefer_deal_->::protocol::Tanx::BidRequest_Deal_PreferredDeal::Clear();
  clear_has_prefer_deal();
}
const ::protocol::Tanx::BidRequest_Deal_PreferredDeal& BidRequest_Deal::prefer_deal() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.prefer_deal)
  return prefer_deal_ != NULL ? *prefer_deal_ : *default_instance_->prefer_deal_;
}
::protocol::Tanx::BidRequest_Deal_PreferredDeal* BidRequest_Deal::mutable_prefer_deal() {
  set_has_prefer_deal();
  if (prefer_deal_ == NULL) {
    prefer_deal_ = new ::protocol::Tanx::BidRequest_Deal_PreferredDeal;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Deal.prefer_deal)
  return prefer_deal_;
}
::protocol::Tanx::BidRequest_Deal_PreferredDeal* BidRequest_Deal::release_prefer_deal() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Deal.prefer_deal)
  clear_has_prefer_deal();
  ::protocol::Tanx::BidRequest_Deal_PreferredDeal* temp = prefer_deal_;
  prefer_deal_ = NULL;
  return temp;
}
void BidRequest_Deal::set_allocated_prefer_deal(::protocol::Tanx::BidRequest_Deal_PreferredDeal* prefer_deal) {
  delete prefer_deal_;
  prefer_deal_ = prefer_deal;
  if (prefer_deal) {
    set_has_prefer_deal();
  } else {
    clear_has_prefer_deal();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Deal.prefer_deal)
}

// optional .protocol.Tanx.BidRequest.Deal.PrivateAuction priv_auc = 2;
bool BidRequest_Deal::has_priv_auc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Deal::set_has_priv_auc() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Deal::clear_has_priv_auc() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Deal::clear_priv_auc() {
  if (priv_auc_ != NULL) priv_auc_->::protocol::Tanx::BidRequest_Deal_PrivateAuction::Clear();
  clear_has_priv_auc();
}
const ::protocol::Tanx::BidRequest_Deal_PrivateAuction& BidRequest_Deal::priv_auc() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.Deal.priv_auc)
  return priv_auc_ != NULL ? *priv_auc_ : *default_instance_->priv_auc_;
}
::protocol::Tanx::BidRequest_Deal_PrivateAuction* BidRequest_Deal::mutable_priv_auc() {
  set_has_priv_auc();
  if (priv_auc_ == NULL) {
    priv_auc_ = new ::protocol::Tanx::BidRequest_Deal_PrivateAuction;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.Deal.priv_auc)
  return priv_auc_;
}
::protocol::Tanx::BidRequest_Deal_PrivateAuction* BidRequest_Deal::release_priv_auc() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.Deal.priv_auc)
  clear_has_priv_auc();
  ::protocol::Tanx::BidRequest_Deal_PrivateAuction* temp = priv_auc_;
  priv_auc_ = NULL;
  return temp;
}
void BidRequest_Deal::set_allocated_priv_auc(::protocol::Tanx::BidRequest_Deal_PrivateAuction* priv_auc) {
  delete priv_auc_;
  priv_auc_ = priv_auc;
  if (priv_auc) {
    set_has_priv_auc();
  } else {
    clear_has_priv_auc();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.Deal.priv_auc)
}

// -------------------------------------------------------------------

// BidRequest_CrowdCategory

// required int32 id = 1;
bool BidRequest_CrowdCategory::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_CrowdCategory::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_CrowdCategory::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_CrowdCategory::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 BidRequest_CrowdCategory::id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.CrowdCategory.id)
  return id_;
}
 void BidRequest_CrowdCategory::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.CrowdCategory.id)
}

// optional uint32 confidence_level = 2;
bool BidRequest_CrowdCategory::has_confidence_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_CrowdCategory::set_has_confidence_level() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_CrowdCategory::clear_has_confidence_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_CrowdCategory::clear_confidence_level() {
  confidence_level_ = 0u;
  clear_has_confidence_level();
}
 ::google::protobuf::uint32 BidRequest_CrowdCategory::confidence_level() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.CrowdCategory.confidence_level)
  return confidence_level_;
}
 void BidRequest_CrowdCategory::set_confidence_level(::google::protobuf::uint32 value) {
  set_has_confidence_level();
  confidence_level_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.CrowdCategory.confidence_level)
}

// -------------------------------------------------------------------

// BidRequest

// required int32 version = 1;
bool BidRequest::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 BidRequest::version() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.version)
  return version_;
}
 void BidRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.version)
}

// required string bid = 2;
bool BidRequest::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest::clear_bid() {
  bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bid();
}
 const ::std::string& BidRequest::bid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.bid)
  return bid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_bid(const ::std::string& value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.bid)
}
 void BidRequest::set_bid(const char* value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.bid)
}
 void BidRequest::set_bid(const char* value, size_t size) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.bid)
}
 ::std::string* BidRequest::mutable_bid() {
  set_has_bid();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.bid)
  return bid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_bid() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.bid)
  clear_has_bid();
  return bid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_bid(::std::string* bid) {
  if (bid != NULL) {
    set_has_bid();
  } else {
    clear_has_bid();
  }
  bid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.bid)
}

// optional uint32 is_test = 11 [default = 0];
bool BidRequest::has_is_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest::set_has_is_test() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest::clear_has_is_test() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest::clear_is_test() {
  is_test_ = 0u;
  clear_has_is_test();
}
 ::google::protobuf::uint32 BidRequest::is_test() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.is_test)
  return is_test_;
}
 void BidRequest::set_is_test(::google::protobuf::uint32 value) {
  set_has_is_test();
  is_test_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.is_test)
}

// optional uint32 is_ping = 12 [default = 0];
bool BidRequest::has_is_ping() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest::set_has_is_ping() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest::clear_has_is_ping() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest::clear_is_ping() {
  is_ping_ = 0u;
  clear_has_is_ping();
}
 ::google::protobuf::uint32 BidRequest::is_ping() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.is_ping)
  return is_ping_;
}
 void BidRequest::set_is_ping(::google::protobuf::uint32 value) {
  set_has_is_ping();
  is_ping_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.is_ping)
}

// optional string tid = 3;
bool BidRequest::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest::set_has_tid() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest::clear_has_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest::clear_tid() {
  tid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tid();
}
 const ::std::string& BidRequest::tid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.tid)
  return tid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_tid(const ::std::string& value) {
  set_has_tid();
  tid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.tid)
}
 void BidRequest::set_tid(const char* value) {
  set_has_tid();
  tid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.tid)
}
 void BidRequest::set_tid(const char* value, size_t size) {
  set_has_tid();
  tid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.tid)
}
 ::std::string* BidRequest::mutable_tid() {
  set_has_tid();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.tid)
  return tid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_tid() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.tid)
  clear_has_tid();
  return tid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_tid(::std::string* tid) {
  if (tid != NULL) {
    set_has_tid();
  } else {
    clear_has_tid();
  }
  tid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.tid)
}

// optional string ip = 4;
bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& BidRequest::ip() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.ip)
}
 void BidRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.ip)
}
 void BidRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.ip)
}
 ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.ip)
}

// optional string user_agent = 5;
bool BidRequest::has_user_agent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest::set_has_user_agent() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_agent();
}
 const ::std::string& BidRequest::user_agent() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.user_agent)
  return user_agent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.user_agent)
}
 void BidRequest::set_user_agent(const char* value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.user_agent)
}
 void BidRequest::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.user_agent)
}
 ::std::string* BidRequest::mutable_user_agent() {
  set_has_user_agent();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_user_agent() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.user_agent)
  clear_has_user_agent();
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.user_agent)
}

// optional int32 timezone_offset = 13;
bool BidRequest::has_timezone_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest::set_has_timezone_offset() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest::clear_has_timezone_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest::clear_timezone_offset() {
  timezone_offset_ = 0;
  clear_has_timezone_offset();
}
 ::google::protobuf::int32 BidRequest::timezone_offset() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.timezone_offset)
  return timezone_offset_;
}
 void BidRequest::set_timezone_offset(::google::protobuf::int32 value) {
  set_has_timezone_offset();
  timezone_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.timezone_offset)
}

// repeated int32 user_vertical = 14;
int BidRequest::user_vertical_size() const {
  return user_vertical_.size();
}
void BidRequest::clear_user_vertical() {
  user_vertical_.Clear();
}
 ::google::protobuf::int32 BidRequest::user_vertical(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.user_vertical)
  return user_vertical_.Get(index);
}
 void BidRequest::set_user_vertical(int index, ::google::protobuf::int32 value) {
  user_vertical_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.user_vertical)
}
 void BidRequest::add_user_vertical(::google::protobuf::int32 value) {
  user_vertical_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.user_vertical)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::user_vertical() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.user_vertical)
  return user_vertical_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_user_vertical() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.user_vertical)
  return &user_vertical_;
}

// optional uint32 tid_version = 19;
bool BidRequest::has_tid_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest::set_has_tid_version() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest::clear_has_tid_version() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest::clear_tid_version() {
  tid_version_ = 0u;
  clear_has_tid_version();
}
 ::google::protobuf::uint32 BidRequest::tid_version() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.tid_version)
  return tid_version_;
}
 void BidRequest::set_tid_version(::google::protobuf::uint32 value) {
  set_has_tid_version();
  tid_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.tid_version)
}

// repeated string excluded_click_through_url = 6;
int BidRequest::excluded_click_through_url_size() const {
  return excluded_click_through_url_.size();
}
void BidRequest::clear_excluded_click_through_url() {
  excluded_click_through_url_.Clear();
}
 const ::std::string& BidRequest::excluded_click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.excluded_click_through_url)
  return excluded_click_through_url_.Get(index);
}
 ::std::string* BidRequest::mutable_excluded_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.excluded_click_through_url)
  return excluded_click_through_url_.Mutable(index);
}
 void BidRequest::set_excluded_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.excluded_click_through_url)
  excluded_click_through_url_.Mutable(index)->assign(value);
}
 void BidRequest::set_excluded_click_through_url(int index, const char* value) {
  excluded_click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.excluded_click_through_url)
}
 void BidRequest::set_excluded_click_through_url(int index, const char* value, size_t size) {
  excluded_click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.excluded_click_through_url)
}
 ::std::string* BidRequest::add_excluded_click_through_url() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.BidRequest.excluded_click_through_url)
  return excluded_click_through_url_.Add();
}
 void BidRequest::add_excluded_click_through_url(const ::std::string& value) {
  excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.excluded_click_through_url)
}
 void BidRequest::add_excluded_click_through_url(const char* value) {
  excluded_click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.BidRequest.excluded_click_through_url)
}
 void BidRequest::add_excluded_click_through_url(const char* value, size_t size) {
  excluded_click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.BidRequest.excluded_click_through_url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::excluded_click_through_url() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.excluded_click_through_url)
  return excluded_click_through_url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_excluded_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.excluded_click_through_url)
  return &excluded_click_through_url_;
}

// optional string url = 7;
bool BidRequest::has_url() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest::set_has_url() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& BidRequest::url() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.url)
}
 void BidRequest::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.url)
}
 void BidRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.url)
}
 ::std::string* BidRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_url() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.url)
}

// optional uint32 category = 8;
bool BidRequest::has_category() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest::set_has_category() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest::clear_has_category() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest::clear_category() {
  category_ = 0u;
  clear_has_category();
}
 ::google::protobuf::uint32 BidRequest::category() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.category)
  return category_;
}
 void BidRequest::set_category(::google::protobuf::uint32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.category)
}

// optional uint32 adx_type = 9 [default = 0];
bool BidRequest::has_adx_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest::set_has_adx_type() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest::clear_has_adx_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest::clear_adx_type() {
  adx_type_ = 0u;
  clear_has_adx_type();
}
 ::google::protobuf::uint32 BidRequest::adx_type() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.adx_type)
  return adx_type_;
}
 void BidRequest::set_adx_type(::google::protobuf::uint32 value) {
  set_has_adx_type();
  adx_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.adx_type)
}

// optional string anonymous_id = 15;
bool BidRequest::has_anonymous_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest::set_has_anonymous_id() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest::clear_has_anonymous_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest::clear_anonymous_id() {
  anonymous_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_anonymous_id();
}
 const ::std::string& BidRequest::anonymous_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.anonymous_id)
  return anonymous_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_anonymous_id(const ::std::string& value) {
  set_has_anonymous_id();
  anonymous_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.anonymous_id)
}
 void BidRequest::set_anonymous_id(const char* value) {
  set_has_anonymous_id();
  anonymous_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.anonymous_id)
}
 void BidRequest::set_anonymous_id(const char* value, size_t size) {
  set_has_anonymous_id();
  anonymous_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.anonymous_id)
}
 ::std::string* BidRequest::mutable_anonymous_id() {
  set_has_anonymous_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.anonymous_id)
  return anonymous_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_anonymous_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.anonymous_id)
  clear_has_anonymous_id();
  return anonymous_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_anonymous_id(::std::string* anonymous_id) {
  if (anonymous_id != NULL) {
    set_has_anonymous_id();
  } else {
    clear_has_anonymous_id();
  }
  anonymous_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anonymous_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.anonymous_id)
}

// optional string detected_language = 16;
bool BidRequest::has_detected_language() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest::set_has_detected_language() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest::clear_has_detected_language() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest::clear_detected_language() {
  detected_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detected_language();
}
 const ::std::string& BidRequest::detected_language() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.detected_language)
  return detected_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_detected_language(const ::std::string& value) {
  set_has_detected_language();
  detected_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.detected_language)
}
 void BidRequest::set_detected_language(const char* value) {
  set_has_detected_language();
  detected_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.detected_language)
}
 void BidRequest::set_detected_language(const char* value, size_t size) {
  set_has_detected_language();
  detected_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.detected_language)
}
 ::std::string* BidRequest::mutable_detected_language() {
  set_has_detected_language();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.detected_language)
  return detected_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_detected_language() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.detected_language)
  clear_has_detected_language();
  return detected_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_detected_language(::std::string* detected_language) {
  if (detected_language != NULL) {
    set_has_detected_language();
  } else {
    clear_has_detected_language();
  }
  detected_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detected_language);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.detected_language)
}

// optional int32 category_version = 18;
bool BidRequest::has_category_version() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest::set_has_category_version() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest::clear_has_category_version() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest::clear_category_version() {
  category_version_ = 0;
  clear_has_category_version();
}
 ::google::protobuf::int32 BidRequest::category_version() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.category_version)
  return category_version_;
}
 void BidRequest::set_category_version(::google::protobuf::int32 value) {
  set_has_category_version();
  category_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.category_version)
}

// repeated .protocol.Tanx.BidRequest.AdzInfo adzinfo = 10;
int BidRequest::adzinfo_size() const {
  return adzinfo_.size();
}
void BidRequest::clear_adzinfo() {
  adzinfo_.Clear();
}
const ::protocol::Tanx::BidRequest_AdzInfo& BidRequest::adzinfo(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.adzinfo)
  return adzinfo_.Get(index);
}
::protocol::Tanx::BidRequest_AdzInfo* BidRequest::mutable_adzinfo(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.adzinfo)
  return adzinfo_.Mutable(index);
}
::protocol::Tanx::BidRequest_AdzInfo* BidRequest::add_adzinfo() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.adzinfo)
  return adzinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_AdzInfo >*
BidRequest::mutable_adzinfo() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.adzinfo)
  return &adzinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_AdzInfo >&
BidRequest::adzinfo() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.adzinfo)
  return adzinfo_;
}

// repeated int32 excluded_sensitive_category = 17;
int BidRequest::excluded_sensitive_category_size() const {
  return excluded_sensitive_category_.size();
}
void BidRequest::clear_excluded_sensitive_category() {
  excluded_sensitive_category_.Clear();
}
 ::google::protobuf::int32 BidRequest::excluded_sensitive_category(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.excluded_sensitive_category)
  return excluded_sensitive_category_.Get(index);
}
 void BidRequest::set_excluded_sensitive_category(int index, ::google::protobuf::int32 value) {
  excluded_sensitive_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.excluded_sensitive_category)
}
 void BidRequest::add_excluded_sensitive_category(::google::protobuf::int32 value) {
  excluded_sensitive_category_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.excluded_sensitive_category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::excluded_sensitive_category() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.excluded_sensitive_category)
  return excluded_sensitive_category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_excluded_sensitive_category() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.excluded_sensitive_category)
  return &excluded_sensitive_category_;
}

// repeated int32 excluded_ad_category = 20;
int BidRequest::excluded_ad_category_size() const {
  return excluded_ad_category_.size();
}
void BidRequest::clear_excluded_ad_category() {
  excluded_ad_category_.Clear();
}
 ::google::protobuf::int32 BidRequest::excluded_ad_category(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.excluded_ad_category)
  return excluded_ad_category_.Get(index);
}
 void BidRequest::set_excluded_ad_category(int index, ::google::protobuf::int32 value) {
  excluded_ad_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.excluded_ad_category)
}
 void BidRequest::add_excluded_ad_category(::google::protobuf::int32 value) {
  excluded_ad_category_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.excluded_ad_category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::excluded_ad_category() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.excluded_ad_category)
  return excluded_ad_category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_excluded_ad_category() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.excluded_ad_category)
  return &excluded_ad_category_;
}

// optional string hosted_match_data = 21;
bool BidRequest::has_hosted_match_data() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void BidRequest::set_has_hosted_match_data() {
  _has_bits_[0] |= 0x00100000u;
}
void BidRequest::clear_has_hosted_match_data() {
  _has_bits_[0] &= ~0x00100000u;
}
void BidRequest::clear_hosted_match_data() {
  hosted_match_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hosted_match_data();
}
 const ::std::string& BidRequest::hosted_match_data() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.hosted_match_data)
  return hosted_match_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_hosted_match_data(const ::std::string& value) {
  set_has_hosted_match_data();
  hosted_match_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.hosted_match_data)
}
 void BidRequest::set_hosted_match_data(const char* value) {
  set_has_hosted_match_data();
  hosted_match_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.hosted_match_data)
}
 void BidRequest::set_hosted_match_data(const char* value, size_t size) {
  set_has_hosted_match_data();
  hosted_match_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.hosted_match_data)
}
 ::std::string* BidRequest::mutable_hosted_match_data() {
  set_has_hosted_match_data();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.hosted_match_data)
  return hosted_match_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_hosted_match_data() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.hosted_match_data)
  clear_has_hosted_match_data();
  return hosted_match_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_hosted_match_data(::std::string* hosted_match_data) {
  if (hosted_match_data != NULL) {
    set_has_hosted_match_data();
  } else {
    clear_has_hosted_match_data();
  }
  hosted_match_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hosted_match_data);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.hosted_match_data)
}

// repeated .protocol.Tanx.BidRequest.UserAttribute user_attribute = 22;
int BidRequest::user_attribute_size() const {
  return user_attribute_.size();
}
void BidRequest::clear_user_attribute() {
  user_attribute_.Clear();
}
const ::protocol::Tanx::BidRequest_UserAttribute& BidRequest::user_attribute(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.user_attribute)
  return user_attribute_.Get(index);
}
::protocol::Tanx::BidRequest_UserAttribute* BidRequest::mutable_user_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.user_attribute)
  return user_attribute_.Mutable(index);
}
::protocol::Tanx::BidRequest_UserAttribute* BidRequest::add_user_attribute() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.user_attribute)
  return user_attribute_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_UserAttribute >*
BidRequest::mutable_user_attribute() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.user_attribute)
  return &user_attribute_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_UserAttribute >&
BidRequest::user_attribute() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.user_attribute)
  return user_attribute_;
}

// optional string page_session_id = 23;
bool BidRequest::has_page_session_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void BidRequest::set_has_page_session_id() {
  _has_bits_[0] |= 0x00400000u;
}
void BidRequest::clear_has_page_session_id() {
  _has_bits_[0] &= ~0x00400000u;
}
void BidRequest::clear_page_session_id() {
  page_session_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page_session_id();
}
 const ::std::string& BidRequest::page_session_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.page_session_id)
  return page_session_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_page_session_id(const ::std::string& value) {
  set_has_page_session_id();
  page_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.page_session_id)
}
 void BidRequest::set_page_session_id(const char* value) {
  set_has_page_session_id();
  page_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.page_session_id)
}
 void BidRequest::set_page_session_id(const char* value, size_t size) {
  set_has_page_session_id();
  page_session_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.page_session_id)
}
 ::std::string* BidRequest::mutable_page_session_id() {
  set_has_page_session_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.page_session_id)
  return page_session_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_page_session_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.page_session_id)
  clear_has_page_session_id();
  return page_session_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_page_session_id(::std::string* page_session_id) {
  if (page_session_id != NULL) {
    set_has_page_session_id();
  } else {
    clear_has_page_session_id();
  }
  page_session_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_session_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.page_session_id)
}

// repeated .protocol.Tanx.BidRequest.PrivateInfo private_info = 24;
int BidRequest::private_info_size() const {
  return private_info_.size();
}
void BidRequest::clear_private_info() {
  private_info_.Clear();
}
const ::protocol::Tanx::BidRequest_PrivateInfo& BidRequest::private_info(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.private_info)
  return private_info_.Get(index);
}
::protocol::Tanx::BidRequest_PrivateInfo* BidRequest::mutable_private_info(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.private_info)
  return private_info_.Mutable(index);
}
::protocol::Tanx::BidRequest_PrivateInfo* BidRequest::add_private_info() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.private_info)
  return private_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_PrivateInfo >*
BidRequest::mutable_private_info() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.private_info)
  return &private_info_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_PrivateInfo >&
BidRequest::private_info() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.private_info)
  return private_info_;
}

// optional .protocol.Tanx.BidRequest.Mobile mobile = 25;
bool BidRequest::has_mobile() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void BidRequest::set_has_mobile() {
  _has_bits_[0] |= 0x01000000u;
}
void BidRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x01000000u;
}
void BidRequest::clear_mobile() {
  if (mobile_ != NULL) mobile_->::protocol::Tanx::BidRequest_Mobile::Clear();
  clear_has_mobile();
}
const ::protocol::Tanx::BidRequest_Mobile& BidRequest::mobile() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.mobile)
  return mobile_ != NULL ? *mobile_ : *default_instance_->mobile_;
}
::protocol::Tanx::BidRequest_Mobile* BidRequest::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == NULL) {
    mobile_ = new ::protocol::Tanx::BidRequest_Mobile;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.mobile)
  return mobile_;
}
::protocol::Tanx::BidRequest_Mobile* BidRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.mobile)
  clear_has_mobile();
  ::protocol::Tanx::BidRequest_Mobile* temp = mobile_;
  mobile_ = NULL;
  return temp;
}
void BidRequest::set_allocated_mobile(::protocol::Tanx::BidRequest_Mobile* mobile) {
  delete mobile_;
  mobile_ = mobile;
  if (mobile) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.mobile)
}

// repeated .protocol.Tanx.BidRequest.ContentCategory content_categories = 26;
int BidRequest::content_categories_size() const {
  return content_categories_.size();
}
void BidRequest::clear_content_categories() {
  content_categories_.Clear();
}
const ::protocol::Tanx::BidRequest_ContentCategory& BidRequest::content_categories(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.content_categories)
  return content_categories_.Get(index);
}
::protocol::Tanx::BidRequest_ContentCategory* BidRequest::mutable_content_categories(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.content_categories)
  return content_categories_.Mutable(index);
}
::protocol::Tanx::BidRequest_ContentCategory* BidRequest::add_content_categories() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.content_categories)
  return content_categories_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_ContentCategory >*
BidRequest::mutable_content_categories() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.content_categories)
  return &content_categories_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_ContentCategory >&
BidRequest::content_categories() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.content_categories)
  return content_categories_;
}

// optional .protocol.Tanx.BidRequest.Video video = 27;
bool BidRequest::has_video() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void BidRequest::set_has_video() {
  _has_bits_[0] |= 0x04000000u;
}
void BidRequest::clear_has_video() {
  _has_bits_[0] &= ~0x04000000u;
}
void BidRequest::clear_video() {
  if (video_ != NULL) video_->::protocol::Tanx::BidRequest_Video::Clear();
  clear_has_video();
}
const ::protocol::Tanx::BidRequest_Video& BidRequest::video() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
::protocol::Tanx::BidRequest_Video* BidRequest::mutable_video() {
  set_has_video();
  if (video_ == NULL) {
    video_ = new ::protocol::Tanx::BidRequest_Video;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.video)
  return video_;
}
::protocol::Tanx::BidRequest_Video* BidRequest::release_video() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.video)
  clear_has_video();
  ::protocol::Tanx::BidRequest_Video* temp = video_;
  video_ = NULL;
  return temp;
}
void BidRequest::set_allocated_video(::protocol::Tanx::BidRequest_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.video)
}

// optional string aid = 28;
bool BidRequest::has_aid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void BidRequest::set_has_aid() {
  _has_bits_[0] |= 0x08000000u;
}
void BidRequest::clear_has_aid() {
  _has_bits_[0] &= ~0x08000000u;
}
void BidRequest::clear_aid() {
  aid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_aid();
}
 const ::std::string& BidRequest::aid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.aid)
  return aid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_aid(const ::std::string& value) {
  set_has_aid();
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.aid)
}
 void BidRequest::set_aid(const char* value) {
  set_has_aid();
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidRequest.aid)
}
 void BidRequest::set_aid(const char* value, size_t size) {
  set_has_aid();
  aid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidRequest.aid)
}
 ::std::string* BidRequest::mutable_aid() {
  set_has_aid();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.aid)
  return aid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_aid() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidRequest.aid)
  clear_has_aid();
  return aid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_aid(::std::string* aid) {
  if (aid != NULL) {
    set_has_aid();
  } else {
    clear_has_aid();
  }
  aid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), aid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidRequest.aid)
}

// repeated .protocol.Tanx.BidRequest.Deal deals = 29;
int BidRequest::deals_size() const {
  return deals_.size();
}
void BidRequest::clear_deals() {
  deals_.Clear();
}
const ::protocol::Tanx::BidRequest_Deal& BidRequest::deals(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.deals)
  return deals_.Get(index);
}
::protocol::Tanx::BidRequest_Deal* BidRequest::mutable_deals(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.deals)
  return deals_.Mutable(index);
}
::protocol::Tanx::BidRequest_Deal* BidRequest::add_deals() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.deals)
  return deals_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Deal >*
BidRequest::mutable_deals() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.deals)
  return &deals_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_Deal >&
BidRequest::deals() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.deals)
  return deals_;
}

// repeated .protocol.Tanx.BidRequest.CrowdCategory crowd_category = 30;
int BidRequest::crowd_category_size() const {
  return crowd_category_.size();
}
void BidRequest::clear_crowd_category() {
  crowd_category_.Clear();
}
const ::protocol::Tanx::BidRequest_CrowdCategory& BidRequest::crowd_category(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.crowd_category)
  return crowd_category_.Get(index);
}
::protocol::Tanx::BidRequest_CrowdCategory* BidRequest::mutable_crowd_category(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidRequest.crowd_category)
  return crowd_category_.Mutable(index);
}
::protocol::Tanx::BidRequest_CrowdCategory* BidRequest::add_crowd_category() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidRequest.crowd_category)
  return crowd_category_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_CrowdCategory >*
BidRequest::mutable_crowd_category() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidRequest.crowd_category)
  return &crowd_category_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidRequest_CrowdCategory >&
BidRequest::crowd_category() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidRequest.crowd_category)
  return crowd_category_;
}

// optional bool is_predicted_to_be_ignored = 31 [default = false];
bool BidRequest::has_is_predicted_to_be_ignored() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void BidRequest::set_has_is_predicted_to_be_ignored() {
  _has_bits_[0] |= 0x40000000u;
}
void BidRequest::clear_has_is_predicted_to_be_ignored() {
  _has_bits_[0] &= ~0x40000000u;
}
void BidRequest::clear_is_predicted_to_be_ignored() {
  is_predicted_to_be_ignored_ = false;
  clear_has_is_predicted_to_be_ignored();
}
 bool BidRequest::is_predicted_to_be_ignored() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidRequest.is_predicted_to_be_ignored)
  return is_predicted_to_be_ignored_;
}
 void BidRequest::set_is_predicted_to_be_ignored(bool value) {
  set_has_is_predicted_to_be_ignored();
  is_predicted_to_be_ignored_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidRequest.is_predicted_to_be_ignored)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ads::kAdzinfoIdFieldNumber;
const int BidResponse_Ads::kMaxCpmPriceFieldNumber;
const int BidResponse_Ads::kAdBidCountIdxFieldNumber;
const int BidResponse_Ads::kHtmlSnippetFieldNumber;
const int BidResponse_Ads::kClickThroughUrlFieldNumber;
const int BidResponse_Ads::kCategoryFieldNumber;
const int BidResponse_Ads::kCreativeTypeFieldNumber;
const int BidResponse_Ads::kNetworkGuidFieldNumber;
const int BidResponse_Ads::kExtendDataFieldNumber;
const int BidResponse_Ads::kDestinationUrlFieldNumber;
const int BidResponse_Ads::kCreativeIdFieldNumber;
const int BidResponse_Ads::kResourceAddressFieldNumber;
const int BidResponse_Ads::kFeedbackAddressFieldNumber;
const int BidResponse_Ads::kVideoSnippetFieldNumber;
const int BidResponse_Ads::kMobileCreativeFieldNumber;
const int BidResponse_Ads::kDealidFieldNumber;
const int BidResponse_Ads::kAdvertiserIdsFieldNumber;
const int BidResponse_Ads::kDownloadCompleteFieldNumber;
const int BidResponse_Ads::kWinnoticeAddressFieldNumber;
const int BidResponse_Ads::kCreativeAdaptiveTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ads::BidResponse_Ads()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidResponse.Ads)
}

void BidResponse_Ads::InitAsDefaultInstance() {
  mobile_creative_ = const_cast< ::protocol::Tanx::MobileCreative*>(&::protocol::Tanx::MobileCreative::default_instance());
}

BidResponse_Ads::BidResponse_Ads(const BidResponse_Ads& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidResponse.Ads)
}

void BidResponse_Ads::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adzinfo_id_ = 0u;
  max_cpm_price_ = 0u;
  ad_bid_count_idx_ = 0u;
  html_snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedback_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_creative_ = NULL;
  dealid_ = 0u;
  download_complete_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winnotice_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_adaptive_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ads::~BidResponse_Ads() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidResponse.Ads)
  SharedDtor();
}

void BidResponse_Ads::SharedDtor() {
  html_snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extend_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedback_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  video_snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_complete_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winnotice_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete mobile_creative_;
  }
}

void BidResponse_Ads::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ads::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ads_descriptor_;
}

const BidResponse_Ads& BidResponse_Ads::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ads* BidResponse_Ads::default_instance_ = NULL;

BidResponse_Ads* BidResponse_Ads::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ads* n = new BidResponse_Ads;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ads::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidResponse.Ads)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse_Ads, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_Ads*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 143u) {
    ZR_(adzinfo_id_, max_cpm_price_);
    ad_bid_count_idx_ = 0u;
    if (has_html_snippet()) {
      html_snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_network_guid()) {
      network_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 64768u) {
    if (has_extend_data()) {
      extend_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_creative_id()) {
      creative_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_resource_address()) {
      resource_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_feedback_address()) {
      feedback_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_video_snippet()) {
      video_snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mobile_creative()) {
      if (mobile_creative_ != NULL) mobile_creative_->::protocol::Tanx::MobileCreative::Clear();
    }
    dealid_ = 0u;
  }
  if (_has_bits_[16 / 32] & 917504u) {
    if (has_download_complete()) {
      download_complete_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_winnotice_address()) {
      winnotice_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    creative_adaptive_type_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  click_through_url_.Clear();
  category_.Clear();
  creative_type_.Clear();
  destination_url_.Clear();
  advertiser_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ads::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidResponse.Ads)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adzinfo_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adzinfo_id_)));
          set_has_adzinfo_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_cpm_price;
        break;
      }

      // required uint32 max_cpm_price = 2;
      case 2: {
        if (tag == 16) {
         parse_max_cpm_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cpm_price_)));
          set_has_max_cpm_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ad_bid_count_idx;
        break;
      }

      // optional uint32 ad_bid_count_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_ad_bid_count_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_idx_)));
          set_has_ad_bid_count_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_html_snippet;
        break;
      }

      // optional string html_snippet = 4;
      case 4: {
        if (tag == 34) {
         parse_html_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.html_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_click_through_url;
        break;
      }

      // repeated string click_through_url = 5;
      case 5: {
        if (tag == 42) {
         parse_click_through_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_through_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_through_url(this->click_through_url_size() - 1).data(),
            this->click_through_url(this->click_through_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.click_through_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_click_through_url;
        if (input->ExpectTag(48)) goto parse_category;
        break;
      }

      // repeated int32 category = 6;
      case 6: {
        if (tag == 48) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_category())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_category;
        if (input->ExpectTag(56)) goto parse_creative_type;
        break;
      }

      // repeated int32 creative_type = 7;
      case 7: {
        if (tag == 56) {
         parse_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_creative_type())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_creative_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_creative_type;
        if (input->ExpectTag(66)) goto parse_network_guid;
        break;
      }

      // optional string network_guid = 8;
      case 8: {
        if (tag == 66) {
         parse_network_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_guid().data(), this->network_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.network_guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_extend_data;
        break;
      }

      // optional string extend_data = 9;
      case 9: {
        if (tag == 74) {
         parse_extend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extend_data().data(), this->extend_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.extend_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_destination_url;
        break;
      }

      // repeated string destination_url = 10;
      case 10: {
        if (tag == 82) {
         parse_destination_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_destination_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination_url(this->destination_url_size() - 1).data(),
            this->destination_url(this->destination_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.destination_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_destination_url;
        if (input->ExpectTag(90)) goto parse_creative_id;
        break;
      }

      // optional string creative_id = 11;
      case 11: {
        if (tag == 90) {
         parse_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_resource_address;
        break;
      }

      // optional string resource_address = 12;
      case 12: {
        if (tag == 98) {
         parse_resource_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resource_address().data(), this->resource_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.resource_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_feedback_address;
        break;
      }

      // optional string feedback_address = 13;
      case 13: {
        if (tag == 106) {
         parse_feedback_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feedback_address().data(), this->feedback_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.feedback_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_video_snippet;
        break;
      }

      // optional string video_snippet = 14;
      case 14: {
        if (tag == 114) {
         parse_video_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_video_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->video_snippet().data(), this->video_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.video_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_mobile_creative;
        break;
      }

      // optional .protocol.Tanx.MobileCreative mobile_creative = 15;
      case 15: {
        if (tag == 122) {
         parse_mobile_creative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile_creative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dealid;
        break;
      }

      // optional uint32 dealid = 16;
      case 16: {
        if (tag == 128) {
         parse_dealid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealid_)));
          set_has_dealid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_advertiser_ids;
        break;
      }

      // repeated uint32 advertiser_ids = 17;
      case 17: {
        if (tag == 136) {
         parse_advertiser_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 136, input, this->mutable_advertiser_ids())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_advertiser_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_advertiser_ids;
        if (input->ExpectTag(146)) goto parse_download_complete;
        break;
      }

      // optional string download_complete = 18;
      case 18: {
        if (tag == 146) {
         parse_download_complete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_complete()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_complete().data(), this->download_complete().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.download_complete");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_winnotice_address;
        break;
      }

      // optional string winnotice_address = 19;
      case 19: {
        if (tag == 154) {
         parse_winnotice_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winnotice_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winnotice_address().data(), this->winnotice_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.Ads.winnotice_address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_creative_adaptive_type;
        break;
      }

      // optional int32 creative_adaptive_type = 20;
      case 20: {
        if (tag == 160) {
         parse_creative_adaptive_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_adaptive_type_)));
          set_has_creative_adaptive_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidResponse.Ads)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidResponse.Ads)
  return false;
#undef DO_
}

void BidResponse_Ads::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidResponse.Ads)
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adzinfo_id(), output);
  }

  // required uint32 max_cpm_price = 2;
  if (has_max_cpm_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_cpm_price(), output);
  }

  // optional uint32 ad_bid_count_idx = 3;
  if (has_ad_bid_count_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ad_bid_count_idx(), output);
  }

  // optional string html_snippet = 4;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.html_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->html_snippet(), output);
  }

  // repeated string click_through_url = 5;
  for (int i = 0; i < this->click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url(i).data(), this->click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.click_through_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->click_through_url(i), output);
  }

  // repeated int32 category = 6;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->category(i), output);
  }

  // repeated int32 creative_type = 7;
  for (int i = 0; i < this->creative_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->creative_type(i), output);
  }

  // optional string network_guid = 8;
  if (has_network_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_guid().data(), this->network_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.network_guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->network_guid(), output);
  }

  // optional string extend_data = 9;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.extend_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->extend_data(), output);
  }

  // repeated string destination_url = 10;
  for (int i = 0; i < this->destination_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_url(i).data(), this->destination_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.destination_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->destination_url(i), output);
  }

  // optional string creative_id = 11;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->creative_id(), output);
  }

  // optional string resource_address = 12;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.resource_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->resource_address(), output);
  }

  // optional string feedback_address = 13;
  if (has_feedback_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback_address().data(), this->feedback_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.feedback_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->feedback_address(), output);
  }

  // optional string video_snippet = 14;
  if (has_video_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_snippet().data(), this->video_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.video_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->video_snippet(), output);
  }

  // optional .protocol.Tanx.MobileCreative mobile_creative = 15;
  if (has_mobile_creative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->mobile_creative_, output);
  }

  // optional uint32 dealid = 16;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dealid(), output);
  }

  // repeated uint32 advertiser_ids = 17;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      17, this->advertiser_ids(i), output);
  }

  // optional string download_complete = 18;
  if (has_download_complete()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_complete().data(), this->download_complete().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.download_complete");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->download_complete(), output);
  }

  // optional string winnotice_address = 19;
  if (has_winnotice_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winnotice_address().data(), this->winnotice_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.winnotice_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->winnotice_address(), output);
  }

  // optional int32 creative_adaptive_type = 20;
  if (has_creative_adaptive_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->creative_adaptive_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidResponse.Ads)
}

::google::protobuf::uint8* BidResponse_Ads::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidResponse.Ads)
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adzinfo_id(), target);
  }

  // required uint32 max_cpm_price = 2;
  if (has_max_cpm_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_cpm_price(), target);
  }

  // optional uint32 ad_bid_count_idx = 3;
  if (has_ad_bid_count_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ad_bid_count_idx(), target);
  }

  // optional string html_snippet = 4;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.html_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->html_snippet(), target);
  }

  // repeated string click_through_url = 5;
  for (int i = 0; i < this->click_through_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_through_url(i).data(), this->click_through_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.click_through_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->click_through_url(i), target);
  }

  // repeated int32 category = 6;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->category(i), target);
  }

  // repeated int32 creative_type = 7;
  for (int i = 0; i < this->creative_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->creative_type(i), target);
  }

  // optional string network_guid = 8;
  if (has_network_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_guid().data(), this->network_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.network_guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->network_guid(), target);
  }

  // optional string extend_data = 9;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.extend_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->extend_data(), target);
  }

  // repeated string destination_url = 10;
  for (int i = 0; i < this->destination_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_url(i).data(), this->destination_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.destination_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->destination_url(i), target);
  }

  // optional string creative_id = 11;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->creative_id(), target);
  }

  // optional string resource_address = 12;
  if (has_resource_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resource_address().data(), this->resource_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.resource_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->resource_address(), target);
  }

  // optional string feedback_address = 13;
  if (has_feedback_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback_address().data(), this->feedback_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.feedback_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->feedback_address(), target);
  }

  // optional string video_snippet = 14;
  if (has_video_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->video_snippet().data(), this->video_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.video_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->video_snippet(), target);
  }

  // optional .protocol.Tanx.MobileCreative mobile_creative = 15;
  if (has_mobile_creative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->mobile_creative_, false, target);
  }

  // optional uint32 dealid = 16;
  if (has_dealid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dealid(), target);
  }

  // repeated uint32 advertiser_ids = 17;
  for (int i = 0; i < this->advertiser_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(17, this->advertiser_ids(i), target);
  }

  // optional string download_complete = 18;
  if (has_download_complete()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_complete().data(), this->download_complete().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.download_complete");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->download_complete(), target);
  }

  // optional string winnotice_address = 19;
  if (has_winnotice_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winnotice_address().data(), this->winnotice_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.Ads.winnotice_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->winnotice_address(), target);
  }

  // optional int32 creative_adaptive_type = 20;
  if (has_creative_adaptive_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->creative_adaptive_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidResponse.Ads)
  return target;
}

int BidResponse_Ads::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.BidResponse.Ads)
  int total_size = 0;

  if (has_adzinfo_id()) {
    // required uint32 adzinfo_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adzinfo_id());
  }

  if (has_max_cpm_price()) {
    // required uint32 max_cpm_price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_cpm_price());
  }

  return total_size;
}
int BidResponse_Ads::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidResponse.Ads)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 adzinfo_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adzinfo_id());

    // required uint32 max_cpm_price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_cpm_price());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 140u) {
    // optional uint32 ad_bid_count_idx = 3;
    if (has_ad_bid_count_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count_idx());
    }

    // optional string html_snippet = 4;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional string network_guid = 8;
    if (has_network_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_guid());
    }

  }
  if (_has_bits_[8 / 32] & 64768u) {
    // optional string extend_data = 9;
    if (has_extend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend_data());
    }

    // optional string creative_id = 11;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

    // optional string resource_address = 12;
    if (has_resource_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_address());
    }

    // optional string feedback_address = 13;
    if (has_feedback_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feedback_address());
    }

    // optional string video_snippet = 14;
    if (has_video_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->video_snippet());
    }

    // optional .protocol.Tanx.MobileCreative mobile_creative = 15;
    if (has_mobile_creative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mobile_creative_);
    }

    // optional uint32 dealid = 16;
    if (has_dealid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dealid());
    }

  }
  if (_has_bits_[17 / 32] & 917504u) {
    // optional string download_complete = 18;
    if (has_download_complete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_complete());
    }

    // optional string winnotice_address = 19;
    if (has_winnotice_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winnotice_address());
    }

    // optional int32 creative_adaptive_type = 20;
    if (has_creative_adaptive_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_adaptive_type());
    }

  }
  // repeated string click_through_url = 5;
  total_size += 1 * this->click_through_url_size();
  for (int i = 0; i < this->click_through_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_through_url(i));
  }

  // repeated int32 category = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  // repeated int32 creative_type = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->creative_type(i));
    }
    total_size += 1 * this->creative_type_size() + data_size;
  }

  // repeated string destination_url = 10;
  total_size += 1 * this->destination_url_size();
  for (int i = 0; i < this->destination_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->destination_url(i));
  }

  // repeated uint32 advertiser_ids = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->advertiser_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->advertiser_ids(i));
    }
    total_size += 2 * this->advertiser_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ads::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidResponse.Ads)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_Ads* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ads>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidResponse.Ads)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidResponse.Ads)
    MergeFrom(*source);
  }
}

void BidResponse_Ads::MergeFrom(const BidResponse_Ads& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidResponse.Ads)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  click_through_url_.MergeFrom(from.click_through_url_);
  category_.MergeFrom(from.category_);
  creative_type_.MergeFrom(from.creative_type_);
  destination_url_.MergeFrom(from.destination_url_);
  advertiser_ids_.MergeFrom(from.advertiser_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adzinfo_id()) {
      set_adzinfo_id(from.adzinfo_id());
    }
    if (from.has_max_cpm_price()) {
      set_max_cpm_price(from.max_cpm_price());
    }
    if (from.has_ad_bid_count_idx()) {
      set_ad_bid_count_idx(from.ad_bid_count_idx());
    }
    if (from.has_html_snippet()) {
      set_has_html_snippet();
      html_snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_snippet_);
    }
    if (from.has_network_guid()) {
      set_has_network_guid();
      network_guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_guid_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extend_data()) {
      set_has_extend_data();
      extend_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_data_);
    }
    if (from.has_creative_id()) {
      set_has_creative_id();
      creative_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creative_id_);
    }
    if (from.has_resource_address()) {
      set_has_resource_address();
      resource_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_address_);
    }
    if (from.has_feedback_address()) {
      set_has_feedback_address();
      feedback_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_address_);
    }
    if (from.has_video_snippet()) {
      set_has_video_snippet();
      video_snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.video_snippet_);
    }
    if (from.has_mobile_creative()) {
      mutable_mobile_creative()->::protocol::Tanx::MobileCreative::MergeFrom(from.mobile_creative());
    }
    if (from.has_dealid()) {
      set_dealid(from.dealid());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_download_complete()) {
      set_has_download_complete();
      download_complete_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_complete_);
    }
    if (from.has_winnotice_address()) {
      set_has_winnotice_address();
      winnotice_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winnotice_address_);
    }
    if (from.has_creative_adaptive_type()) {
      set_creative_adaptive_type(from.creative_adaptive_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ads::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidResponse.Ads)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ads::CopyFrom(const BidResponse_Ads& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidResponse.Ads)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ads::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mobile_creative()) {
    if (!this->mobile_creative_->IsInitialized()) return false;
  }
  return true;
}

void BidResponse_Ads::Swap(BidResponse_Ads* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ads::InternalSwap(BidResponse_Ads* other) {
  std::swap(adzinfo_id_, other->adzinfo_id_);
  std::swap(max_cpm_price_, other->max_cpm_price_);
  std::swap(ad_bid_count_idx_, other->ad_bid_count_idx_);
  html_snippet_.Swap(&other->html_snippet_);
  click_through_url_.UnsafeArenaSwap(&other->click_through_url_);
  category_.UnsafeArenaSwap(&other->category_);
  creative_type_.UnsafeArenaSwap(&other->creative_type_);
  network_guid_.Swap(&other->network_guid_);
  extend_data_.Swap(&other->extend_data_);
  destination_url_.UnsafeArenaSwap(&other->destination_url_);
  creative_id_.Swap(&other->creative_id_);
  resource_address_.Swap(&other->resource_address_);
  feedback_address_.Swap(&other->feedback_address_);
  video_snippet_.Swap(&other->video_snippet_);
  std::swap(mobile_creative_, other->mobile_creative_);
  std::swap(dealid_, other->dealid_);
  advertiser_ids_.UnsafeArenaSwap(&other->advertiser_ids_);
  download_complete_.Swap(&other->download_complete_);
  winnotice_address_.Swap(&other->winnotice_address_);
  std::swap(creative_adaptive_type_, other->creative_adaptive_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ads::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ads_descriptor_;
  metadata.reflection = BidResponse_Ads_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse::kVersionFieldNumber;
const int BidResponse::kBidFieldNumber;
const int BidResponse::kAdsFieldNumber;
const int BidResponse::kIsRecognizedUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse::BidResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_recognized_user_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  bid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New(::google::protobuf::Arena* arena) const {
  BidResponse* n = new BidResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(version_, is_recognized_user_);
    if (has_bid()) {
      bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResponse.bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ads;
        break;
      }

      // repeated .protocol.Tanx.BidResponse.Ads ads = 3;
      case 3: {
        if (tag == 26) {
         parse_ads:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_ads;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_is_recognized_user;
        break;
      }

      // optional bool is_recognized_user = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_is_recognized_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recognized_user_)));
          set_has_is_recognized_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidResponse)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // repeated .protocol.Tanx.BidResponse.Ads ads = 3;
  for (unsigned int i = 0, n = this->ads_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ads(i), output);
  }

  // optional bool is_recognized_user = 4 [default = false];
  if (has_is_recognized_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_recognized_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidResponse)
}

::google::protobuf::uint8* BidResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidResponse)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResponse.bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // repeated .protocol.Tanx.BidResponse.Ads ads = 3;
  for (unsigned int i = 0, n = this->ads_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->ads(i), false, target);
  }

  // optional bool is_recognized_user = 4 [default = false];
  if (has_is_recognized_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_recognized_user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidResponse)
  return target;
}

int BidResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.BidResponse)
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_bid()) {
    // required string bid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());
  }

  return total_size;
}
int BidResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required string bid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool is_recognized_user = 4 [default = false];
  if (has_is_recognized_user()) {
    total_size += 1 + 1;
  }

  // repeated .protocol.Tanx.BidResponse.Ads ads = 3;
  total_size += 1 * this->ads_size();
  for (int i = 0; i < this->ads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ads(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidResponse)
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ads_.MergeFrom(from.ads_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_has_bid();
      bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bid_);
    }
    if (from.has_is_recognized_user()) {
      set_is_recognized_user(from.is_recognized_user());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ads())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse::InternalSwap(BidResponse* other) {
  std::swap(version_, other->version_);
  bid_.Swap(&other->bid_);
  ads_.UnsafeArenaSwap(&other->ads_);
  std::swap(is_recognized_user_, other->is_recognized_user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidResponse_Ads

// required uint32 adzinfo_id = 1;
bool BidResponse_Ads::has_adzinfo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ads::set_has_adzinfo_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ads::clear_has_adzinfo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ads::clear_adzinfo_id() {
  adzinfo_id_ = 0u;
  clear_has_adzinfo_id();
}
 ::google::protobuf::uint32 BidResponse_Ads::adzinfo_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.adzinfo_id)
  return adzinfo_id_;
}
 void BidResponse_Ads::set_adzinfo_id(::google::protobuf::uint32 value) {
  set_has_adzinfo_id();
  adzinfo_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.adzinfo_id)
}

// required uint32 max_cpm_price = 2;
bool BidResponse_Ads::has_max_cpm_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ads::set_has_max_cpm_price() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ads::clear_has_max_cpm_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ads::clear_max_cpm_price() {
  max_cpm_price_ = 0u;
  clear_has_max_cpm_price();
}
 ::google::protobuf::uint32 BidResponse_Ads::max_cpm_price() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.max_cpm_price)
  return max_cpm_price_;
}
 void BidResponse_Ads::set_max_cpm_price(::google::protobuf::uint32 value) {
  set_has_max_cpm_price();
  max_cpm_price_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.max_cpm_price)
}

// optional uint32 ad_bid_count_idx = 3;
bool BidResponse_Ads::has_ad_bid_count_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_Ads::set_has_ad_bid_count_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_Ads::clear_has_ad_bid_count_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_Ads::clear_ad_bid_count_idx() {
  ad_bid_count_idx_ = 0u;
  clear_has_ad_bid_count_idx();
}
 ::google::protobuf::uint32 BidResponse_Ads::ad_bid_count_idx() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.ad_bid_count_idx)
  return ad_bid_count_idx_;
}
 void BidResponse_Ads::set_ad_bid_count_idx(::google::protobuf::uint32 value) {
  set_has_ad_bid_count_idx();
  ad_bid_count_idx_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.ad_bid_count_idx)
}

// optional string html_snippet = 4;
bool BidResponse_Ads::has_html_snippet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_Ads::set_has_html_snippet() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_Ads::clear_has_html_snippet() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_Ads::clear_html_snippet() {
  html_snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html_snippet();
}
 const ::std::string& BidResponse_Ads::html_snippet() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.html_snippet)
  return html_snippet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_html_snippet(const ::std::string& value) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.html_snippet)
}
 void BidResponse_Ads::set_html_snippet(const char* value) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.html_snippet)
}
 void BidResponse_Ads::set_html_snippet(const char* value, size_t size) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.html_snippet)
}
 ::std::string* BidResponse_Ads::mutable_html_snippet() {
  set_has_html_snippet();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.html_snippet)
  return html_snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_html_snippet() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.html_snippet)
  clear_has_html_snippet();
  return html_snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_html_snippet(::std::string* html_snippet) {
  if (html_snippet != NULL) {
    set_has_html_snippet();
  } else {
    clear_has_html_snippet();
  }
  html_snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html_snippet);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.html_snippet)
}

// repeated string click_through_url = 5;
int BidResponse_Ads::click_through_url_size() const {
  return click_through_url_.size();
}
void BidResponse_Ads::clear_click_through_url() {
  click_through_url_.Clear();
}
 const ::std::string& BidResponse_Ads::click_through_url(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.click_through_url)
  return click_through_url_.Get(index);
}
 ::std::string* BidResponse_Ads::mutable_click_through_url(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.click_through_url)
  return click_through_url_.Mutable(index);
}
 void BidResponse_Ads::set_click_through_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.click_through_url)
  click_through_url_.Mutable(index)->assign(value);
}
 void BidResponse_Ads::set_click_through_url(int index, const char* value) {
  click_through_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.click_through_url)
}
 void BidResponse_Ads::set_click_through_url(int index, const char* value, size_t size) {
  click_through_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.click_through_url)
}
 ::std::string* BidResponse_Ads::add_click_through_url() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.BidResponse.Ads.click_through_url)
  return click_through_url_.Add();
}
 void BidResponse_Ads::add_click_through_url(const ::std::string& value) {
  click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidResponse.Ads.click_through_url)
}
 void BidResponse_Ads::add_click_through_url(const char* value) {
  click_through_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.BidResponse.Ads.click_through_url)
}
 void BidResponse_Ads::add_click_through_url(const char* value, size_t size) {
  click_through_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.BidResponse.Ads.click_through_url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads::click_through_url() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidResponse.Ads.click_through_url)
  return click_through_url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads::mutable_click_through_url() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidResponse.Ads.click_through_url)
  return &click_through_url_;
}

// repeated int32 category = 6;
int BidResponse_Ads::category_size() const {
  return category_.size();
}
void BidResponse_Ads::clear_category() {
  category_.Clear();
}
 ::google::protobuf::int32 BidResponse_Ads::category(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.category)
  return category_.Get(index);
}
 void BidResponse_Ads::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.category)
}
 void BidResponse_Ads::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidResponse.Ads.category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ads::category() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidResponse.Ads.category)
  return category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ads::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidResponse.Ads.category)
  return &category_;
}

// repeated int32 creative_type = 7;
int BidResponse_Ads::creative_type_size() const {
  return creative_type_.size();
}
void BidResponse_Ads::clear_creative_type() {
  creative_type_.Clear();
}
 ::google::protobuf::int32 BidResponse_Ads::creative_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.creative_type)
  return creative_type_.Get(index);
}
 void BidResponse_Ads::set_creative_type(int index, ::google::protobuf::int32 value) {
  creative_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.creative_type)
}
 void BidResponse_Ads::add_creative_type(::google::protobuf::int32 value) {
  creative_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidResponse.Ads.creative_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ads::creative_type() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidResponse.Ads.creative_type)
  return creative_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ads::mutable_creative_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidResponse.Ads.creative_type)
  return &creative_type_;
}

// optional string network_guid = 8;
bool BidResponse_Ads::has_network_guid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidResponse_Ads::set_has_network_guid() {
  _has_bits_[0] |= 0x00000080u;
}
void BidResponse_Ads::clear_has_network_guid() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidResponse_Ads::clear_network_guid() {
  network_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network_guid();
}
 const ::std::string& BidResponse_Ads::network_guid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.network_guid)
  return network_guid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_network_guid(const ::std::string& value) {
  set_has_network_guid();
  network_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.network_guid)
}
 void BidResponse_Ads::set_network_guid(const char* value) {
  set_has_network_guid();
  network_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.network_guid)
}
 void BidResponse_Ads::set_network_guid(const char* value, size_t size) {
  set_has_network_guid();
  network_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.network_guid)
}
 ::std::string* BidResponse_Ads::mutable_network_guid() {
  set_has_network_guid();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.network_guid)
  return network_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_network_guid() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.network_guid)
  clear_has_network_guid();
  return network_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_network_guid(::std::string* network_guid) {
  if (network_guid != NULL) {
    set_has_network_guid();
  } else {
    clear_has_network_guid();
  }
  network_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_guid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.network_guid)
}

// optional string extend_data = 9;
bool BidResponse_Ads::has_extend_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidResponse_Ads::set_has_extend_data() {
  _has_bits_[0] |= 0x00000100u;
}
void BidResponse_Ads::clear_has_extend_data() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidResponse_Ads::clear_extend_data() {
  extend_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extend_data();
}
 const ::std::string& BidResponse_Ads::extend_data() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.extend_data)
  return extend_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_extend_data(const ::std::string& value) {
  set_has_extend_data();
  extend_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.extend_data)
}
 void BidResponse_Ads::set_extend_data(const char* value) {
  set_has_extend_data();
  extend_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.extend_data)
}
 void BidResponse_Ads::set_extend_data(const char* value, size_t size) {
  set_has_extend_data();
  extend_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.extend_data)
}
 ::std::string* BidResponse_Ads::mutable_extend_data() {
  set_has_extend_data();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.extend_data)
  return extend_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_extend_data() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.extend_data)
  clear_has_extend_data();
  return extend_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_extend_data(::std::string* extend_data) {
  if (extend_data != NULL) {
    set_has_extend_data();
  } else {
    clear_has_extend_data();
  }
  extend_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend_data);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.extend_data)
}

// repeated string destination_url = 10;
int BidResponse_Ads::destination_url_size() const {
  return destination_url_.size();
}
void BidResponse_Ads::clear_destination_url() {
  destination_url_.Clear();
}
 const ::std::string& BidResponse_Ads::destination_url(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.destination_url)
  return destination_url_.Get(index);
}
 ::std::string* BidResponse_Ads::mutable_destination_url(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.destination_url)
  return destination_url_.Mutable(index);
}
 void BidResponse_Ads::set_destination_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.destination_url)
  destination_url_.Mutable(index)->assign(value);
}
 void BidResponse_Ads::set_destination_url(int index, const char* value) {
  destination_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.destination_url)
}
 void BidResponse_Ads::set_destination_url(int index, const char* value, size_t size) {
  destination_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.destination_url)
}
 ::std::string* BidResponse_Ads::add_destination_url() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.BidResponse.Ads.destination_url)
  return destination_url_.Add();
}
 void BidResponse_Ads::add_destination_url(const ::std::string& value) {
  destination_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidResponse.Ads.destination_url)
}
 void BidResponse_Ads::add_destination_url(const char* value) {
  destination_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.BidResponse.Ads.destination_url)
}
 void BidResponse_Ads::add_destination_url(const char* value, size_t size) {
  destination_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.BidResponse.Ads.destination_url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ads::destination_url() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidResponse.Ads.destination_url)
  return destination_url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ads::mutable_destination_url() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidResponse.Ads.destination_url)
  return &destination_url_;
}

// optional string creative_id = 11;
bool BidResponse_Ads::has_creative_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidResponse_Ads::set_has_creative_id() {
  _has_bits_[0] |= 0x00000400u;
}
void BidResponse_Ads::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidResponse_Ads::clear_creative_id() {
  creative_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creative_id();
}
 const ::std::string& BidResponse_Ads::creative_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.creative_id)
  return creative_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_creative_id(const ::std::string& value) {
  set_has_creative_id();
  creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.creative_id)
}
 void BidResponse_Ads::set_creative_id(const char* value) {
  set_has_creative_id();
  creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.creative_id)
}
 void BidResponse_Ads::set_creative_id(const char* value, size_t size) {
  set_has_creative_id();
  creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.creative_id)
}
 ::std::string* BidResponse_Ads::mutable_creative_id() {
  set_has_creative_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.creative_id)
  return creative_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_creative_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.creative_id)
  clear_has_creative_id();
  return creative_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_creative_id(::std::string* creative_id) {
  if (creative_id != NULL) {
    set_has_creative_id();
  } else {
    clear_has_creative_id();
  }
  creative_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creative_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.creative_id)
}

// optional string resource_address = 12;
bool BidResponse_Ads::has_resource_address() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidResponse_Ads::set_has_resource_address() {
  _has_bits_[0] |= 0x00000800u;
}
void BidResponse_Ads::clear_has_resource_address() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidResponse_Ads::clear_resource_address() {
  resource_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resource_address();
}
 const ::std::string& BidResponse_Ads::resource_address() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.resource_address)
  return resource_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_resource_address(const ::std::string& value) {
  set_has_resource_address();
  resource_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.resource_address)
}
 void BidResponse_Ads::set_resource_address(const char* value) {
  set_has_resource_address();
  resource_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.resource_address)
}
 void BidResponse_Ads::set_resource_address(const char* value, size_t size) {
  set_has_resource_address();
  resource_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.resource_address)
}
 ::std::string* BidResponse_Ads::mutable_resource_address() {
  set_has_resource_address();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.resource_address)
  return resource_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_resource_address() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.resource_address)
  clear_has_resource_address();
  return resource_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_resource_address(::std::string* resource_address) {
  if (resource_address != NULL) {
    set_has_resource_address();
  } else {
    clear_has_resource_address();
  }
  resource_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.resource_address)
}

// optional string feedback_address = 13;
bool BidResponse_Ads::has_feedback_address() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidResponse_Ads::set_has_feedback_address() {
  _has_bits_[0] |= 0x00001000u;
}
void BidResponse_Ads::clear_has_feedback_address() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidResponse_Ads::clear_feedback_address() {
  feedback_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_feedback_address();
}
 const ::std::string& BidResponse_Ads::feedback_address() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.feedback_address)
  return feedback_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_feedback_address(const ::std::string& value) {
  set_has_feedback_address();
  feedback_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.feedback_address)
}
 void BidResponse_Ads::set_feedback_address(const char* value) {
  set_has_feedback_address();
  feedback_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.feedback_address)
}
 void BidResponse_Ads::set_feedback_address(const char* value, size_t size) {
  set_has_feedback_address();
  feedback_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.feedback_address)
}
 ::std::string* BidResponse_Ads::mutable_feedback_address() {
  set_has_feedback_address();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.feedback_address)
  return feedback_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_feedback_address() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.feedback_address)
  clear_has_feedback_address();
  return feedback_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_feedback_address(::std::string* feedback_address) {
  if (feedback_address != NULL) {
    set_has_feedback_address();
  } else {
    clear_has_feedback_address();
  }
  feedback_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feedback_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.feedback_address)
}

// optional string video_snippet = 14;
bool BidResponse_Ads::has_video_snippet() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidResponse_Ads::set_has_video_snippet() {
  _has_bits_[0] |= 0x00002000u;
}
void BidResponse_Ads::clear_has_video_snippet() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidResponse_Ads::clear_video_snippet() {
  video_snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_snippet();
}
 const ::std::string& BidResponse_Ads::video_snippet() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.video_snippet)
  return video_snippet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_video_snippet(const ::std::string& value) {
  set_has_video_snippet();
  video_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.video_snippet)
}
 void BidResponse_Ads::set_video_snippet(const char* value) {
  set_has_video_snippet();
  video_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.video_snippet)
}
 void BidResponse_Ads::set_video_snippet(const char* value, size_t size) {
  set_has_video_snippet();
  video_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.video_snippet)
}
 ::std::string* BidResponse_Ads::mutable_video_snippet() {
  set_has_video_snippet();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.video_snippet)
  return video_snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_video_snippet() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.video_snippet)
  clear_has_video_snippet();
  return video_snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_video_snippet(::std::string* video_snippet) {
  if (video_snippet != NULL) {
    set_has_video_snippet();
  } else {
    clear_has_video_snippet();
  }
  video_snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_snippet);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.video_snippet)
}

// optional .protocol.Tanx.MobileCreative mobile_creative = 15;
bool BidResponse_Ads::has_mobile_creative() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidResponse_Ads::set_has_mobile_creative() {
  _has_bits_[0] |= 0x00004000u;
}
void BidResponse_Ads::clear_has_mobile_creative() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidResponse_Ads::clear_mobile_creative() {
  if (mobile_creative_ != NULL) mobile_creative_->::protocol::Tanx::MobileCreative::Clear();
  clear_has_mobile_creative();
}
const ::protocol::Tanx::MobileCreative& BidResponse_Ads::mobile_creative() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.mobile_creative)
  return mobile_creative_ != NULL ? *mobile_creative_ : *default_instance_->mobile_creative_;
}
::protocol::Tanx::MobileCreative* BidResponse_Ads::mutable_mobile_creative() {
  set_has_mobile_creative();
  if (mobile_creative_ == NULL) {
    mobile_creative_ = new ::protocol::Tanx::MobileCreative;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.mobile_creative)
  return mobile_creative_;
}
::protocol::Tanx::MobileCreative* BidResponse_Ads::release_mobile_creative() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.mobile_creative)
  clear_has_mobile_creative();
  ::protocol::Tanx::MobileCreative* temp = mobile_creative_;
  mobile_creative_ = NULL;
  return temp;
}
void BidResponse_Ads::set_allocated_mobile_creative(::protocol::Tanx::MobileCreative* mobile_creative) {
  delete mobile_creative_;
  mobile_creative_ = mobile_creative;
  if (mobile_creative) {
    set_has_mobile_creative();
  } else {
    clear_has_mobile_creative();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.mobile_creative)
}

// optional uint32 dealid = 16;
bool BidResponse_Ads::has_dealid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidResponse_Ads::set_has_dealid() {
  _has_bits_[0] |= 0x00008000u;
}
void BidResponse_Ads::clear_has_dealid() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidResponse_Ads::clear_dealid() {
  dealid_ = 0u;
  clear_has_dealid();
}
 ::google::protobuf::uint32 BidResponse_Ads::dealid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.dealid)
  return dealid_;
}
 void BidResponse_Ads::set_dealid(::google::protobuf::uint32 value) {
  set_has_dealid();
  dealid_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.dealid)
}

// repeated uint32 advertiser_ids = 17;
int BidResponse_Ads::advertiser_ids_size() const {
  return advertiser_ids_.size();
}
void BidResponse_Ads::clear_advertiser_ids() {
  advertiser_ids_.Clear();
}
 ::google::protobuf::uint32 BidResponse_Ads::advertiser_ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.advertiser_ids)
  return advertiser_ids_.Get(index);
}
 void BidResponse_Ads::set_advertiser_ids(int index, ::google::protobuf::uint32 value) {
  advertiser_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.advertiser_ids)
}
 void BidResponse_Ads::add_advertiser_ids(::google::protobuf::uint32 value) {
  advertiser_ids_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidResponse.Ads.advertiser_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BidResponse_Ads::advertiser_ids() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidResponse.Ads.advertiser_ids)
  return advertiser_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BidResponse_Ads::mutable_advertiser_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidResponse.Ads.advertiser_ids)
  return &advertiser_ids_;
}

// optional string download_complete = 18;
bool BidResponse_Ads::has_download_complete() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BidResponse_Ads::set_has_download_complete() {
  _has_bits_[0] |= 0x00020000u;
}
void BidResponse_Ads::clear_has_download_complete() {
  _has_bits_[0] &= ~0x00020000u;
}
void BidResponse_Ads::clear_download_complete() {
  download_complete_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_download_complete();
}
 const ::std::string& BidResponse_Ads::download_complete() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.download_complete)
  return download_complete_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_download_complete(const ::std::string& value) {
  set_has_download_complete();
  download_complete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.download_complete)
}
 void BidResponse_Ads::set_download_complete(const char* value) {
  set_has_download_complete();
  download_complete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.download_complete)
}
 void BidResponse_Ads::set_download_complete(const char* value, size_t size) {
  set_has_download_complete();
  download_complete_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.download_complete)
}
 ::std::string* BidResponse_Ads::mutable_download_complete() {
  set_has_download_complete();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.download_complete)
  return download_complete_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_download_complete() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.download_complete)
  clear_has_download_complete();
  return download_complete_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_download_complete(::std::string* download_complete) {
  if (download_complete != NULL) {
    set_has_download_complete();
  } else {
    clear_has_download_complete();
  }
  download_complete_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_complete);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.download_complete)
}

// optional string winnotice_address = 19;
bool BidResponse_Ads::has_winnotice_address() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void BidResponse_Ads::set_has_winnotice_address() {
  _has_bits_[0] |= 0x00040000u;
}
void BidResponse_Ads::clear_has_winnotice_address() {
  _has_bits_[0] &= ~0x00040000u;
}
void BidResponse_Ads::clear_winnotice_address() {
  winnotice_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_winnotice_address();
}
 const ::std::string& BidResponse_Ads::winnotice_address() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.winnotice_address)
  return winnotice_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_winnotice_address(const ::std::string& value) {
  set_has_winnotice_address();
  winnotice_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.winnotice_address)
}
 void BidResponse_Ads::set_winnotice_address(const char* value) {
  set_has_winnotice_address();
  winnotice_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.Ads.winnotice_address)
}
 void BidResponse_Ads::set_winnotice_address(const char* value, size_t size) {
  set_has_winnotice_address();
  winnotice_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.Ads.winnotice_address)
}
 ::std::string* BidResponse_Ads::mutable_winnotice_address() {
  set_has_winnotice_address();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.Ads.winnotice_address)
  return winnotice_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ads::release_winnotice_address() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.Ads.winnotice_address)
  clear_has_winnotice_address();
  return winnotice_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ads::set_allocated_winnotice_address(::std::string* winnotice_address) {
  if (winnotice_address != NULL) {
    set_has_winnotice_address();
  } else {
    clear_has_winnotice_address();
  }
  winnotice_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winnotice_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.Ads.winnotice_address)
}

// optional int32 creative_adaptive_type = 20;
bool BidResponse_Ads::has_creative_adaptive_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BidResponse_Ads::set_has_creative_adaptive_type() {
  _has_bits_[0] |= 0x00080000u;
}
void BidResponse_Ads::clear_has_creative_adaptive_type() {
  _has_bits_[0] &= ~0x00080000u;
}
void BidResponse_Ads::clear_creative_adaptive_type() {
  creative_adaptive_type_ = 0;
  clear_has_creative_adaptive_type();
}
 ::google::protobuf::int32 BidResponse_Ads::creative_adaptive_type() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.Ads.creative_adaptive_type)
  return creative_adaptive_type_;
}
 void BidResponse_Ads::set_creative_adaptive_type(::google::protobuf::int32 value) {
  set_has_creative_adaptive_type();
  creative_adaptive_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.Ads.creative_adaptive_type)
}

// -------------------------------------------------------------------

// BidResponse

// required int32 version = 1;
bool BidResponse::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 BidResponse::version() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.version)
  return version_;
}
 void BidResponse::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.version)
}

// required string bid = 2;
bool BidResponse::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse::clear_bid() {
  bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bid();
}
 const ::std::string& BidResponse::bid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.bid)
  return bid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_bid(const ::std::string& value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.bid)
}
 void BidResponse::set_bid(const char* value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResponse.bid)
}
 void BidResponse::set_bid(const char* value, size_t size) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResponse.bid)
}
 ::std::string* BidResponse::mutable_bid() {
  set_has_bid();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.bid)
  return bid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_bid() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResponse.bid)
  clear_has_bid();
  return bid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_bid(::std::string* bid) {
  if (bid != NULL) {
    set_has_bid();
  } else {
    clear_has_bid();
  }
  bid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResponse.bid)
}

// repeated .protocol.Tanx.BidResponse.Ads ads = 3;
int BidResponse::ads_size() const {
  return ads_.size();
}
void BidResponse::clear_ads() {
  ads_.Clear();
}
const ::protocol::Tanx::BidResponse_Ads& BidResponse::ads(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.ads)
  return ads_.Get(index);
}
::protocol::Tanx::BidResponse_Ads* BidResponse::mutable_ads(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResponse.ads)
  return ads_.Mutable(index);
}
::protocol::Tanx::BidResponse_Ads* BidResponse::add_ads() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidResponse.ads)
  return ads_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidResponse_Ads >*
BidResponse::mutable_ads() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidResponse.ads)
  return &ads_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidResponse_Ads >&
BidResponse::ads() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidResponse.ads)
  return ads_;
}

// optional bool is_recognized_user = 4 [default = false];
bool BidResponse::has_is_recognized_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse::set_has_is_recognized_user() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse::clear_has_is_recognized_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse::clear_is_recognized_user() {
  is_recognized_user_ = false;
  clear_has_is_recognized_user();
}
 bool BidResponse::is_recognized_user() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResponse.is_recognized_user)
  return is_recognized_user_;
}
 void BidResponse::set_is_recognized_user(bool value) {
  set_has_is_recognized_user();
  is_recognized_user_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResponse.is_recognized_user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResult_Res::kAdzinfoIdFieldNumber;
const int BidResult_Res::kAdBidCountIdxFieldNumber;
const int BidResult_Res::kResultCodeFieldNumber;
const int BidResult_Res::kResultPriceFieldNumber;
const int BidResult_Res::kExtendDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResult_Res::BidResult_Res()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidResult.Res)
}

void BidResult_Res::InitAsDefaultInstance() {
}

BidResult_Res::BidResult_Res(const BidResult_Res& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidResult.Res)
}

void BidResult_Res::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  adzinfo_id_ = 0u;
  ad_bid_count_idx_ = 0u;
  result_code_ = 0;
  result_price_ = 0u;
  extend_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResult_Res::~BidResult_Res() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidResult.Res)
  SharedDtor();
}

void BidResult_Res::SharedDtor() {
  extend_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResult_Res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResult_Res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResult_Res_descriptor_;
}

const BidResult_Res& BidResult_Res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidResult_Res* BidResult_Res::default_instance_ = NULL;

BidResult_Res* BidResult_Res::New(::google::protobuf::Arena* arena) const {
  BidResult_Res* n = new BidResult_Res;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResult_Res::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidResult.Res)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResult_Res, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResult_Res*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(adzinfo_id_, result_price_);
    if (has_extend_data()) {
      extend_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResult_Res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidResult.Res)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 adzinfo_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adzinfo_id_)));
          set_has_adzinfo_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ad_bid_count_idx;
        break;
      }

      // optional uint32 ad_bid_count_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_ad_bid_count_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ad_bid_count_idx_)));
          set_has_ad_bid_count_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result_code;
        break;
      }

      // optional int32 result_code = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result_price;
        break;
      }

      // optional uint32 result_price = 4;
      case 4: {
        if (tag == 32) {
         parse_result_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_price_)));
          set_has_result_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extend_data;
        break;
      }

      // optional string extend_data = 5;
      case 5: {
        if (tag == 42) {
         parse_extend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extend_data().data(), this->extend_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResult.Res.extend_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidResult.Res)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidResult.Res)
  return false;
#undef DO_
}

void BidResult_Res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidResult.Res)
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adzinfo_id(), output);
  }

  // optional uint32 ad_bid_count_idx = 2;
  if (has_ad_bid_count_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ad_bid_count_idx(), output);
  }

  // optional int32 result_code = 3 [default = 0];
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result_code(), output);
  }

  // optional uint32 result_price = 4;
  if (has_result_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_price(), output);
  }

  // optional string extend_data = 5;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResult.Res.extend_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extend_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidResult.Res)
}

::google::protobuf::uint8* BidResult_Res::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidResult.Res)
  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adzinfo_id(), target);
  }

  // optional uint32 ad_bid_count_idx = 2;
  if (has_ad_bid_count_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ad_bid_count_idx(), target);
  }

  // optional int32 result_code = 3 [default = 0];
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result_code(), target);
  }

  // optional uint32 result_price = 4;
  if (has_result_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result_price(), target);
  }

  // optional string extend_data = 5;
  if (has_extend_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend_data().data(), this->extend_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResult.Res.extend_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extend_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidResult.Res)
  return target;
}

int BidResult_Res::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidResult.Res)
  int total_size = 0;

  // required uint32 adzinfo_id = 1;
  if (has_adzinfo_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->adzinfo_id());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional uint32 ad_bid_count_idx = 2;
    if (has_ad_bid_count_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ad_bid_count_idx());
    }

    // optional int32 result_code = 3 [default = 0];
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // optional uint32 result_price = 4;
    if (has_result_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_price());
    }

    // optional string extend_data = 5;
    if (has_extend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extend_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResult_Res::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidResult.Res)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResult_Res* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResult_Res>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidResult.Res)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidResult.Res)
    MergeFrom(*source);
  }
}

void BidResult_Res::MergeFrom(const BidResult_Res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidResult.Res)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adzinfo_id()) {
      set_adzinfo_id(from.adzinfo_id());
    }
    if (from.has_ad_bid_count_idx()) {
      set_ad_bid_count_idx(from.ad_bid_count_idx());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_result_price()) {
      set_result_price(from.result_price());
    }
    if (from.has_extend_data()) {
      set_has_extend_data();
      extend_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResult_Res::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidResult.Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResult_Res::CopyFrom(const BidResult_Res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidResult.Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResult_Res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidResult_Res::Swap(BidResult_Res* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResult_Res::InternalSwap(BidResult_Res* other) {
  std::swap(adzinfo_id_, other->adzinfo_id_);
  std::swap(ad_bid_count_idx_, other->ad_bid_count_idx_);
  std::swap(result_code_, other->result_code_);
  std::swap(result_price_, other->result_price_);
  extend_data_.Swap(&other->extend_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResult_Res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResult_Res_descriptor_;
  metadata.reflection = BidResult_Res_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResult::kVersionFieldNumber;
const int BidResult::kBidFieldNumber;
const int BidResult::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResult::BidResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.BidResult)
}

void BidResult::InitAsDefaultInstance() {
}

BidResult::BidResult(const BidResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.BidResult)
}

void BidResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResult::~BidResult() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.BidResult)
  SharedDtor();
}

void BidResult::SharedDtor() {
  bid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResult_descriptor_;
}

const BidResult& BidResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

BidResult* BidResult::default_instance_ = NULL;

BidResult* BidResult::New(::google::protobuf::Arena* arena) const {
  BidResult* n = new BidResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResult::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.BidResult)
  if (_has_bits_[0 / 32] & 3u) {
    version_ = 0;
    if (has_bid()) {
      bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.BidResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.BidResult.bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_res;
        break;
      }

      // repeated .protocol.Tanx.BidResult.Res res = 3;
      case 3: {
        if (tag == 26) {
         parse_res:
          DO_(input->IncrementRecursionDepth());
         parse_loop_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_res;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.BidResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.BidResult)
  return false;
#undef DO_
}

void BidResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.BidResult)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResult.bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // repeated .protocol.Tanx.BidResult.Res res = 3;
  for (unsigned int i = 0, n = this->res_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->res(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.BidResult)
}

::google::protobuf::uint8* BidResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.BidResult)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.BidResult.bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // repeated .protocol.Tanx.BidResult.Res res = 3;
  for (unsigned int i = 0, n = this->res_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->res(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.BidResult)
  return target;
}

int BidResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.BidResult)
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_bid()) {
    // required string bid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());
  }

  return total_size;
}
int BidResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.BidResult)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required string bid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .protocol.Tanx.BidResult.Res res = 3;
  total_size += 1 * this->res_size();
  for (int i = 0; i < this->res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.BidResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.BidResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.BidResult)
    MergeFrom(*source);
  }
}

void BidResult::MergeFrom(const BidResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.BidResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  res_.MergeFrom(from.res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_has_bid();
      bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.BidResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResult::CopyFrom(const BidResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.BidResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->res())) return false;
  return true;
}

void BidResult::Swap(BidResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResult::InternalSwap(BidResult* other) {
  std::swap(version_, other->version_);
  bid_.Swap(&other->bid_);
  res_.UnsafeArenaSwap(&other->res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResult_descriptor_;
  metadata.reflection = BidResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidResult_Res

// required uint32 adzinfo_id = 1;
bool BidResult_Res::has_adzinfo_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResult_Res::set_has_adzinfo_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResult_Res::clear_has_adzinfo_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResult_Res::clear_adzinfo_id() {
  adzinfo_id_ = 0u;
  clear_has_adzinfo_id();
}
 ::google::protobuf::uint32 BidResult_Res::adzinfo_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResult.Res.adzinfo_id)
  return adzinfo_id_;
}
 void BidResult_Res::set_adzinfo_id(::google::protobuf::uint32 value) {
  set_has_adzinfo_id();
  adzinfo_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResult.Res.adzinfo_id)
}

// optional uint32 ad_bid_count_idx = 2;
bool BidResult_Res::has_ad_bid_count_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResult_Res::set_has_ad_bid_count_idx() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResult_Res::clear_has_ad_bid_count_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResult_Res::clear_ad_bid_count_idx() {
  ad_bid_count_idx_ = 0u;
  clear_has_ad_bid_count_idx();
}
 ::google::protobuf::uint32 BidResult_Res::ad_bid_count_idx() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResult.Res.ad_bid_count_idx)
  return ad_bid_count_idx_;
}
 void BidResult_Res::set_ad_bid_count_idx(::google::protobuf::uint32 value) {
  set_has_ad_bid_count_idx();
  ad_bid_count_idx_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResult.Res.ad_bid_count_idx)
}

// optional int32 result_code = 3 [default = 0];
bool BidResult_Res::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResult_Res::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResult_Res::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResult_Res::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
 ::google::protobuf::int32 BidResult_Res::result_code() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResult.Res.result_code)
  return result_code_;
}
 void BidResult_Res::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResult.Res.result_code)
}

// optional uint32 result_price = 4;
bool BidResult_Res::has_result_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResult_Res::set_has_result_price() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResult_Res::clear_has_result_price() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResult_Res::clear_result_price() {
  result_price_ = 0u;
  clear_has_result_price();
}
 ::google::protobuf::uint32 BidResult_Res::result_price() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResult.Res.result_price)
  return result_price_;
}
 void BidResult_Res::set_result_price(::google::protobuf::uint32 value) {
  set_has_result_price();
  result_price_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResult.Res.result_price)
}

// optional string extend_data = 5;
bool BidResult_Res::has_extend_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResult_Res::set_has_extend_data() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResult_Res::clear_has_extend_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResult_Res::clear_extend_data() {
  extend_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extend_data();
}
 const ::std::string& BidResult_Res::extend_data() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResult.Res.extend_data)
  return extend_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResult_Res::set_extend_data(const ::std::string& value) {
  set_has_extend_data();
  extend_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResult.Res.extend_data)
}
 void BidResult_Res::set_extend_data(const char* value) {
  set_has_extend_data();
  extend_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResult.Res.extend_data)
}
 void BidResult_Res::set_extend_data(const char* value, size_t size) {
  set_has_extend_data();
  extend_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResult.Res.extend_data)
}
 ::std::string* BidResult_Res::mutable_extend_data() {
  set_has_extend_data();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResult.Res.extend_data)
  return extend_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResult_Res::release_extend_data() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResult.Res.extend_data)
  clear_has_extend_data();
  return extend_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResult_Res::set_allocated_extend_data(::std::string* extend_data) {
  if (extend_data != NULL) {
    set_has_extend_data();
  } else {
    clear_has_extend_data();
  }
  extend_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extend_data);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResult.Res.extend_data)
}

// -------------------------------------------------------------------

// BidResult

// required int32 version = 1;
bool BidResult::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResult::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResult::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResult::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 BidResult::version() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResult.version)
  return version_;
}
 void BidResult::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResult.version)
}

// required string bid = 2;
bool BidResult::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResult::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResult::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResult::clear_bid() {
  bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bid();
}
 const ::std::string& BidResult::bid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResult.bid)
  return bid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResult::set_bid(const ::std::string& value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.BidResult.bid)
}
 void BidResult::set_bid(const char* value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.BidResult.bid)
}
 void BidResult::set_bid(const char* value, size_t size) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.BidResult.bid)
}
 ::std::string* BidResult::mutable_bid() {
  set_has_bid();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResult.bid)
  return bid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResult::release_bid() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.BidResult.bid)
  clear_has_bid();
  return bid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResult::set_allocated_bid(::std::string* bid) {
  if (bid != NULL) {
    set_has_bid();
  } else {
    clear_has_bid();
  }
  bid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.BidResult.bid)
}

// repeated .protocol.Tanx.BidResult.Res res = 3;
int BidResult::res_size() const {
  return res_.size();
}
void BidResult::clear_res() {
  res_.Clear();
}
const ::protocol::Tanx::BidResult_Res& BidResult::res(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.BidResult.res)
  return res_.Get(index);
}
::protocol::Tanx::BidResult_Res* BidResult::mutable_res(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.BidResult.res)
  return res_.Mutable(index);
}
::protocol::Tanx::BidResult_Res* BidResult::add_res() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.BidResult.res)
  return res_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidResult_Res >*
BidResult::mutable_res() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.BidResult.res)
  return &res_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::BidResult_Res >&
BidResult::res() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.BidResult.res)
  return res_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobileCreative_Creative_Attr::kNameFieldNumber;
const int MobileCreative_Creative_Attr::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobileCreative_Creative_Attr::MobileCreative_Creative_Attr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.MobileCreative.Creative.Attr)
}

void MobileCreative_Creative_Attr::InitAsDefaultInstance() {
}

MobileCreative_Creative_Attr::MobileCreative_Creative_Attr(const MobileCreative_Creative_Attr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.MobileCreative.Creative.Attr)
}

void MobileCreative_Creative_Attr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Creative_Attr::~MobileCreative_Creative_Attr() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.MobileCreative.Creative.Attr)
  SharedDtor();
}

void MobileCreative_Creative_Attr::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MobileCreative_Creative_Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Creative_Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Creative_Attr_descriptor_;
}

const MobileCreative_Creative_Attr& MobileCreative_Creative_Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Creative_Attr* MobileCreative_Creative_Attr::default_instance_ = NULL;

MobileCreative_Creative_Attr* MobileCreative_Creative_Attr::New(::google::protobuf::Arena* arena) const {
  MobileCreative_Creative_Attr* n = new MobileCreative_Creative_Attr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MobileCreative_Creative_Attr::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.MobileCreative.Creative.Attr)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MobileCreative_Creative_Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.MobileCreative.Creative.Attr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.Attr.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.Attr.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.MobileCreative.Creative.Attr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.MobileCreative.Creative.Attr)
  return false;
#undef DO_
}

void MobileCreative_Creative_Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.MobileCreative.Creative.Attr)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.Attr.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.Attr.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.MobileCreative.Creative.Attr)
}

::google::protobuf::uint8* MobileCreative_Creative_Attr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.MobileCreative.Creative.Attr)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.Attr.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.Attr.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.MobileCreative.Creative.Attr)
  return target;
}

int MobileCreative_Creative_Attr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.MobileCreative.Creative.Attr)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int MobileCreative_Creative_Attr::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.MobileCreative.Creative.Attr)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Creative_Attr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.MobileCreative.Creative.Attr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MobileCreative_Creative_Attr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MobileCreative_Creative_Attr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.MobileCreative.Creative.Attr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.MobileCreative.Creative.Attr)
    MergeFrom(*source);
  }
}

void MobileCreative_Creative_Attr::MergeFrom(const MobileCreative_Creative_Attr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.MobileCreative.Creative.Attr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MobileCreative_Creative_Attr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.MobileCreative.Creative.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Creative_Attr::CopyFrom(const MobileCreative_Creative_Attr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.MobileCreative.Creative.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Creative_Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MobileCreative_Creative_Attr::Swap(MobileCreative_Creative_Attr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobileCreative_Creative_Attr::InternalSwap(MobileCreative_Creative_Attr* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MobileCreative_Creative_Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Creative_Attr_descriptor_;
  metadata.reflection = MobileCreative_Creative_Attr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobileCreative_Creative_TrackingEvents::kImpressionEventFieldNumber;
const int MobileCreative_Creative_TrackingEvents::kClickEventFieldNumber;
const int MobileCreative_Creative_TrackingEvents::kDownloadCompleteEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobileCreative_Creative_TrackingEvents::MobileCreative_Creative_TrackingEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
}

void MobileCreative_Creative_TrackingEvents::InitAsDefaultInstance() {
}

MobileCreative_Creative_TrackingEvents::MobileCreative_Creative_TrackingEvents(const MobileCreative_Creative_TrackingEvents& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
}

void MobileCreative_Creative_TrackingEvents::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Creative_TrackingEvents::~MobileCreative_Creative_TrackingEvents() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  SharedDtor();
}

void MobileCreative_Creative_TrackingEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MobileCreative_Creative_TrackingEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Creative_TrackingEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Creative_TrackingEvents_descriptor_;
}

const MobileCreative_Creative_TrackingEvents& MobileCreative_Creative_TrackingEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Creative_TrackingEvents* MobileCreative_Creative_TrackingEvents::default_instance_ = NULL;

MobileCreative_Creative_TrackingEvents* MobileCreative_Creative_TrackingEvents::New(::google::protobuf::Arena* arena) const {
  MobileCreative_Creative_TrackingEvents* n = new MobileCreative_Creative_TrackingEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MobileCreative_Creative_TrackingEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  impression_event_.Clear();
  click_event_.Clear();
  download_complete_event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MobileCreative_Creative_TrackingEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string impression_event = 1;
      case 1: {
        if (tag == 10) {
         parse_impression_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_impression_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impression_event(this->impression_event_size() - 1).data(),
            this->impression_event(this->impression_event_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_impression_event;
        if (input->ExpectTag(18)) goto parse_click_event;
        break;
      }

      // repeated string click_event = 2;
      case 2: {
        if (tag == 18) {
         parse_click_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_click_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_event(this->click_event_size() - 1).data(),
            this->click_event(this->click_event_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_click_event;
        if (input->ExpectTag(26)) goto parse_download_complete_event;
        break;
      }

      // repeated string download_complete_event = 3;
      case 3: {
        if (tag == 26) {
         parse_download_complete_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_download_complete_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_complete_event(this->download_complete_event_size() - 1).data(),
            this->download_complete_event(this->download_complete_event_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_download_complete_event;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  return false;
#undef DO_
}

void MobileCreative_Creative_TrackingEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  // repeated string impression_event = 1;
  for (int i = 0; i < this->impression_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_event(i).data(), this->impression_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->impression_event(i), output);
  }

  // repeated string click_event = 2;
  for (int i = 0; i < this->click_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_event(i).data(), this->click_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->click_event(i), output);
  }

  // repeated string download_complete_event = 3;
  for (int i = 0; i < this->download_complete_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_complete_event(i).data(), this->download_complete_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->download_complete_event(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
}

::google::protobuf::uint8* MobileCreative_Creative_TrackingEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  // repeated string impression_event = 1;
  for (int i = 0; i < this->impression_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impression_event(i).data(), this->impression_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->impression_event(i), target);
  }

  // repeated string click_event = 2;
  for (int i = 0; i < this->click_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_event(i).data(), this->click_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->click_event(i), target);
  }

  // repeated string download_complete_event = 3;
  for (int i = 0; i < this->download_complete_event_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_complete_event(i).data(), this->download_complete_event(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->download_complete_event(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  return target;
}

int MobileCreative_Creative_TrackingEvents::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  int total_size = 0;

  // repeated string impression_event = 1;
  total_size += 1 * this->impression_event_size();
  for (int i = 0; i < this->impression_event_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->impression_event(i));
  }

  // repeated string click_event = 2;
  total_size += 1 * this->click_event_size();
  for (int i = 0; i < this->click_event_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->click_event(i));
  }

  // repeated string download_complete_event = 3;
  total_size += 1 * this->download_complete_event_size();
  for (int i = 0; i < this->download_complete_event_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->download_complete_event(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Creative_TrackingEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MobileCreative_Creative_TrackingEvents* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MobileCreative_Creative_TrackingEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
    MergeFrom(*source);
  }
}

void MobileCreative_Creative_TrackingEvents::MergeFrom(const MobileCreative_Creative_TrackingEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  impression_event_.MergeFrom(from.impression_event_);
  click_event_.MergeFrom(from.click_event_);
  download_complete_event_.MergeFrom(from.download_complete_event_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MobileCreative_Creative_TrackingEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Creative_TrackingEvents::CopyFrom(const MobileCreative_Creative_TrackingEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.MobileCreative.Creative.TrackingEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Creative_TrackingEvents::IsInitialized() const {

  return true;
}

void MobileCreative_Creative_TrackingEvents::Swap(MobileCreative_Creative_TrackingEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobileCreative_Creative_TrackingEvents::InternalSwap(MobileCreative_Creative_TrackingEvents* other) {
  impression_event_.UnsafeArenaSwap(&other->impression_event_);
  click_event_.UnsafeArenaSwap(&other->click_event_);
  download_complete_event_.UnsafeArenaSwap(&other->download_complete_event_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MobileCreative_Creative_TrackingEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Creative_TrackingEvents_descriptor_;
  metadata.reflection = MobileCreative_Creative_TrackingEvents_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobileCreative_Creative::kImgUrlFieldNumber;
const int MobileCreative_Creative::kImgSizeFieldNumber;
const int MobileCreative_Creative::kTitleFieldNumber;
const int MobileCreative_Creative::kClickUrlFieldNumber;
const int MobileCreative_Creative::kDestinationUrlFieldNumber;
const int MobileCreative_Creative::kAttrFieldNumber;
const int MobileCreative_Creative::kCreativeIdFieldNumber;
const int MobileCreative_Creative::kCategoryFieldNumber;
const int MobileCreative_Creative::kTrackingEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobileCreative_Creative::MobileCreative_Creative()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.MobileCreative.Creative)
}

void MobileCreative_Creative::InitAsDefaultInstance() {
  tracking_events_ = const_cast< ::protocol::Tanx::MobileCreative_Creative_TrackingEvents*>(&::protocol::Tanx::MobileCreative_Creative_TrackingEvents::default_instance());
}

MobileCreative_Creative::MobileCreative_Creative(const MobileCreative_Creative& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.MobileCreative.Creative)
}

void MobileCreative_Creative::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  img_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracking_events_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Creative::~MobileCreative_Creative() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.MobileCreative.Creative)
  SharedDtor();
}

void MobileCreative_Creative::SharedDtor() {
  img_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_size_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete tracking_events_;
  }
}

void MobileCreative_Creative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Creative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Creative_descriptor_;
}

const MobileCreative_Creative& MobileCreative_Creative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Creative* MobileCreative_Creative::default_instance_ = NULL;

MobileCreative_Creative* MobileCreative_Creative::New(::google::protobuf::Arena* arena) const {
  MobileCreative_Creative* n = new MobileCreative_Creative;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MobileCreative_Creative::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.MobileCreative.Creative)
  if (_has_bits_[0 / 32] & 95u) {
    if (has_img_url()) {
      img_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_img_size()) {
      img_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_click_url()) {
      click_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_destination_url()) {
      destination_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_creative_id()) {
      creative_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_tracking_events()) {
    if (tracking_events_ != NULL) tracking_events_->::protocol::Tanx::MobileCreative_Creative_TrackingEvents::Clear();
  }
  attr_.Clear();
  category_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MobileCreative_Creative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.MobileCreative.Creative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string img_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_url().data(), this->img_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.img_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_img_size;
        break;
      }

      // optional string img_size = 2;
      case 2: {
        if (tag == 18) {
         parse_img_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->img_size().data(), this->img_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.img_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_click_url;
        break;
      }

      // optional string click_url = 4;
      case 4: {
        if (tag == 34) {
         parse_click_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->click_url().data(), this->click_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.click_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destination_url;
        break;
      }

      // optional string destination_url = 5;
      case 5: {
        if (tag == 42) {
         parse_destination_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination_url().data(), this->destination_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.destination_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        break;
      }

      // repeated .protocol.Tanx.MobileCreative.Creative.Attr attr = 6;
      case 6: {
        if (tag == 50) {
         parse_attr:
          DO_(input->IncrementRecursionDepth());
         parse_loop_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_attr;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(58)) goto parse_creative_id;
        break;
      }

      // optional string creative_id = 7;
      case 7: {
        if (tag == 58) {
         parse_creative_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.Creative.creative_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_category;
        break;
      }

      // repeated int32 category = 8;
      case 8: {
        if (tag == 64) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_category())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_category;
        if (input->ExpectTag(74)) goto parse_tracking_events;
        break;
      }

      // optional .protocol.Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
      case 9: {
        if (tag == 74) {
         parse_tracking_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracking_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.MobileCreative.Creative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.MobileCreative.Creative)
  return false;
#undef DO_
}

void MobileCreative_Creative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.MobileCreative.Creative)
  // optional string img_url = 1;
  if (has_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), this->img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.img_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->img_url(), output);
  }

  // optional string img_size = 2;
  if (has_img_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_size().data(), this->img_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.img_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->img_size(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string click_url = 4;
  if (has_click_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_url().data(), this->click_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.click_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->click_url(), output);
  }

  // optional string destination_url = 5;
  if (has_destination_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_url().data(), this->destination_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.destination_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->destination_url(), output);
  }

  // repeated .protocol.Tanx.MobileCreative.Creative.Attr attr = 6;
  for (unsigned int i = 0, n = this->attr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attr(i), output);
  }

  // optional string creative_id = 7;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.creative_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->creative_id(), output);
  }

  // repeated int32 category = 8;
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->category(i), output);
  }

  // optional .protocol.Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
  if (has_tracking_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->tracking_events_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.MobileCreative.Creative)
}

::google::protobuf::uint8* MobileCreative_Creative::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.MobileCreative.Creative)
  // optional string img_url = 1;
  if (has_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_url().data(), this->img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.img_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->img_url(), target);
  }

  // optional string img_size = 2;
  if (has_img_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->img_size().data(), this->img_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.img_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->img_size(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string click_url = 4;
  if (has_click_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->click_url().data(), this->click_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.click_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->click_url(), target);
  }

  // optional string destination_url = 5;
  if (has_destination_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination_url().data(), this->destination_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.destination_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->destination_url(), target);
  }

  // repeated .protocol.Tanx.MobileCreative.Creative.Attr attr = 6;
  for (unsigned int i = 0, n = this->attr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->attr(i), false, target);
  }

  // optional string creative_id = 7;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.Creative.creative_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->creative_id(), target);
  }

  // repeated int32 category = 8;
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->category(i), target);
  }

  // optional .protocol.Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
  if (has_tracking_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->tracking_events_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.MobileCreative.Creative)
  return target;
}

int MobileCreative_Creative::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.MobileCreative.Creative)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 95u) {
    // optional string img_url = 1;
    if (has_img_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_url());
    }

    // optional string img_size = 2;
    if (has_img_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_size());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string click_url = 4;
    if (has_click_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_url());
    }

    // optional string destination_url = 5;
    if (has_destination_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_url());
    }

    // optional string creative_id = 7;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

  }
  // optional .protocol.Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
  if (has_tracking_events()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tracking_events_);
  }

  // repeated .protocol.Tanx.MobileCreative.Creative.Attr attr = 6;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated int32 category = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    total_size += 1 * this->category_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Creative::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.MobileCreative.Creative)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MobileCreative_Creative* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MobileCreative_Creative>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.MobileCreative.Creative)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.MobileCreative.Creative)
    MergeFrom(*source);
  }
}

void MobileCreative_Creative::MergeFrom(const MobileCreative_Creative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.MobileCreative.Creative)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  attr_.MergeFrom(from.attr_);
  category_.MergeFrom(from.category_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img_url()) {
      set_has_img_url();
      img_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_url_);
    }
    if (from.has_img_size()) {
      set_has_img_size();
      img_size_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_size_);
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_click_url()) {
      set_has_click_url();
      click_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.click_url_);
    }
    if (from.has_destination_url()) {
      set_has_destination_url();
      destination_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_url_);
    }
    if (from.has_creative_id()) {
      set_has_creative_id();
      creative_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creative_id_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tracking_events()) {
      mutable_tracking_events()->::protocol::Tanx::MobileCreative_Creative_TrackingEvents::MergeFrom(from.tracking_events());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MobileCreative_Creative::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.MobileCreative.Creative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Creative::CopyFrom(const MobileCreative_Creative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.MobileCreative.Creative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Creative::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void MobileCreative_Creative::Swap(MobileCreative_Creative* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobileCreative_Creative::InternalSwap(MobileCreative_Creative* other) {
  img_url_.Swap(&other->img_url_);
  img_size_.Swap(&other->img_size_);
  title_.Swap(&other->title_);
  click_url_.Swap(&other->click_url_);
  destination_url_.Swap(&other->destination_url_);
  attr_.UnsafeArenaSwap(&other->attr_);
  creative_id_.Swap(&other->creative_id_);
  category_.UnsafeArenaSwap(&other->category_);
  std::swap(tracking_events_, other->tracking_events_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MobileCreative_Creative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Creative_descriptor_;
  metadata.reflection = MobileCreative_Creative_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobileCreative_Area::kIdFieldNumber;
const int MobileCreative_Area::kCreativesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobileCreative_Area::MobileCreative_Area()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.MobileCreative.Area)
}

void MobileCreative_Area::InitAsDefaultInstance() {
}

MobileCreative_Area::MobileCreative_Area(const MobileCreative_Area& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.MobileCreative.Area)
}

void MobileCreative_Area::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative_Area::~MobileCreative_Area() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.MobileCreative.Area)
  SharedDtor();
}

void MobileCreative_Area::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MobileCreative_Area::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative_Area::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_Area_descriptor_;
}

const MobileCreative_Area& MobileCreative_Area::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

MobileCreative_Area* MobileCreative_Area::default_instance_ = NULL;

MobileCreative_Area* MobileCreative_Area::New(::google::protobuf::Arena* arena) const {
  MobileCreative_Area* n = new MobileCreative_Area;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MobileCreative_Area::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.MobileCreative.Area)
  id_ = 0;
  creatives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MobileCreative_Area::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.MobileCreative.Area)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creatives;
        break;
      }

      // repeated .protocol.Tanx.MobileCreative.Creative creatives = 2;
      case 2: {
        if (tag == 18) {
         parse_creatives:
          DO_(input->IncrementRecursionDepth());
         parse_loop_creatives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_creatives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_creatives;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.MobileCreative.Area)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.MobileCreative.Area)
  return false;
#undef DO_
}

void MobileCreative_Area::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.MobileCreative.Area)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .protocol.Tanx.MobileCreative.Creative creatives = 2;
  for (unsigned int i = 0, n = this->creatives_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creatives(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.MobileCreative.Area)
}

::google::protobuf::uint8* MobileCreative_Area::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.MobileCreative.Area)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .protocol.Tanx.MobileCreative.Creative creatives = 2;
  for (unsigned int i = 0, n = this->creatives_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->creatives(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.MobileCreative.Area)
  return target;
}

int MobileCreative_Area::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.MobileCreative.Area)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // repeated .protocol.Tanx.MobileCreative.Creative creatives = 2;
  total_size += 1 * this->creatives_size();
  for (int i = 0; i < this->creatives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatives(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative_Area::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.MobileCreative.Area)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MobileCreative_Area* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MobileCreative_Area>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.MobileCreative.Area)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.MobileCreative.Area)
    MergeFrom(*source);
  }
}

void MobileCreative_Area::MergeFrom(const MobileCreative_Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.MobileCreative.Area)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  creatives_.MergeFrom(from.creatives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MobileCreative_Area::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.MobileCreative.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative_Area::CopyFrom(const MobileCreative_Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.MobileCreative.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative_Area::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->creatives())) return false;
  return true;
}

void MobileCreative_Area::Swap(MobileCreative_Area* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobileCreative_Area::InternalSwap(MobileCreative_Area* other) {
  std::swap(id_, other->id_);
  creatives_.UnsafeArenaSwap(&other->creatives_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MobileCreative_Area::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_Area_descriptor_;
  metadata.reflection = MobileCreative_Area_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobileCreative::kVersionFieldNumber;
const int MobileCreative::kBidFieldNumber;
const int MobileCreative::kViewTypeFieldNumber;
const int MobileCreative::kCreativesFieldNumber;
const int MobileCreative::kNativeTemplateIdFieldNumber;
const int MobileCreative::kAreasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobileCreative::MobileCreative()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Tanx.MobileCreative)
}

void MobileCreative::InitAsDefaultInstance() {
}

MobileCreative::MobileCreative(const MobileCreative& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Tanx.MobileCreative)
}

void MobileCreative::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_type_ = 0u;
  native_template_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileCreative::~MobileCreative() {
  // @@protoc_insertion_point(destructor:protocol.Tanx.MobileCreative)
  SharedDtor();
}

void MobileCreative::SharedDtor() {
  bid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  native_template_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MobileCreative::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileCreative::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileCreative_descriptor_;
}

const MobileCreative& MobileCreative::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tanx_5fbidding_2eproto();
  return *default_instance_;
}

MobileCreative* MobileCreative::default_instance_ = NULL;

MobileCreative* MobileCreative::New(::google::protobuf::Arena* arena) const {
  MobileCreative* n = new MobileCreative;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MobileCreative::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Tanx.MobileCreative)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MobileCreative, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MobileCreative*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(version_, view_type_);
    if (has_bid()) {
      bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_native_template_id()) {
      native_template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  creatives_.Clear();
  areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MobileCreative::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Tanx.MobileCreative)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bid;
        break;
      }

      // required string bid = 2;
      case 2: {
        if (tag == 18) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_view_type;
        break;
      }

      // optional uint32 view_type = 3;
      case 3: {
        if (tag == 24) {
         parse_view_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &view_type_)));
          set_has_view_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_creatives;
        break;
      }

      // repeated .protocol.Tanx.MobileCreative.Creative creatives = 4;
      case 4: {
        if (tag == 34) {
         parse_creatives:
          DO_(input->IncrementRecursionDepth());
         parse_loop_creatives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_creatives()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_creatives;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_native_template_id;
        break;
      }

      // optional string native_template_id = 5;
      case 5: {
        if (tag == 42) {
         parse_native_template_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_native_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->native_template_id().data(), this->native_template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.Tanx.MobileCreative.native_template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_areas;
        break;
      }

      // repeated .protocol.Tanx.MobileCreative.Area areas = 6;
      case 6: {
        if (tag == 50) {
         parse_areas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_areas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_areas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Tanx.MobileCreative)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Tanx.MobileCreative)
  return false;
#undef DO_
}

void MobileCreative::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Tanx.MobileCreative)
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bid(), output);
  }

  // optional uint32 view_type = 3;
  if (has_view_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->view_type(), output);
  }

  // repeated .protocol.Tanx.MobileCreative.Creative creatives = 4;
  for (unsigned int i = 0, n = this->creatives_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->creatives(i), output);
  }

  // optional string native_template_id = 5;
  if (has_native_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id().data(), this->native_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.native_template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->native_template_id(), output);
  }

  // repeated .protocol.Tanx.MobileCreative.Area areas = 6;
  for (unsigned int i = 0, n = this->areas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->areas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Tanx.MobileCreative)
}

::google::protobuf::uint8* MobileCreative::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Tanx.MobileCreative)
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required string bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bid(), target);
  }

  // optional uint32 view_type = 3;
  if (has_view_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->view_type(), target);
  }

  // repeated .protocol.Tanx.MobileCreative.Creative creatives = 4;
  for (unsigned int i = 0, n = this->creatives_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->creatives(i), false, target);
  }

  // optional string native_template_id = 5;
  if (has_native_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->native_template_id().data(), this->native_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.Tanx.MobileCreative.native_template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->native_template_id(), target);
  }

  // repeated .protocol.Tanx.MobileCreative.Area areas = 6;
  for (unsigned int i = 0, n = this->areas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->areas(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Tanx.MobileCreative)
  return target;
}

int MobileCreative::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.Tanx.MobileCreative)
  int total_size = 0;

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_bid()) {
    // required string bid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());
  }

  return total_size;
}
int MobileCreative::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Tanx.MobileCreative)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required string bid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 20u) {
    // optional uint32 view_type = 3;
    if (has_view_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->view_type());
    }

    // optional string native_template_id = 5;
    if (has_native_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->native_template_id());
    }

  }
  // repeated .protocol.Tanx.MobileCreative.Creative creatives = 4;
  total_size += 1 * this->creatives_size();
  for (int i = 0; i < this->creatives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->creatives(i));
  }

  // repeated .protocol.Tanx.MobileCreative.Area areas = 6;
  total_size += 1 * this->areas_size();
  for (int i = 0; i < this->areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areas(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileCreative::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Tanx.MobileCreative)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MobileCreative* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MobileCreative>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Tanx.MobileCreative)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Tanx.MobileCreative)
    MergeFrom(*source);
  }
}

void MobileCreative::MergeFrom(const MobileCreative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Tanx.MobileCreative)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  creatives_.MergeFrom(from.creatives_);
  areas_.MergeFrom(from.areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_bid()) {
      set_has_bid();
      bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bid_);
    }
    if (from.has_view_type()) {
      set_view_type(from.view_type());
    }
    if (from.has_native_template_id()) {
      set_has_native_template_id();
      native_template_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.native_template_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MobileCreative::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Tanx.MobileCreative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileCreative::CopyFrom(const MobileCreative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Tanx.MobileCreative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileCreative::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->creatives())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->areas())) return false;
  return true;
}

void MobileCreative::Swap(MobileCreative* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobileCreative::InternalSwap(MobileCreative* other) {
  std::swap(version_, other->version_);
  bid_.Swap(&other->bid_);
  std::swap(view_type_, other->view_type_);
  creatives_.UnsafeArenaSwap(&other->creatives_);
  native_template_id_.Swap(&other->native_template_id_);
  areas_.UnsafeArenaSwap(&other->areas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MobileCreative::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileCreative_descriptor_;
  metadata.reflection = MobileCreative_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MobileCreative_Creative_Attr

// required string name = 1;
bool MobileCreative_Creative_Attr::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MobileCreative_Creative_Attr::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MobileCreative_Creative_Attr::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MobileCreative_Creative_Attr::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& MobileCreative_Creative_Attr::name() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.Attr.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative_Attr::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.Attr.name)
}
 void MobileCreative_Creative_Attr::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.Attr.name)
}
 void MobileCreative_Creative_Attr::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.Attr.name)
}
 ::std::string* MobileCreative_Creative_Attr::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.Attr.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative_Creative_Attr::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.Attr.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative_Attr::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.Attr.name)
}

// required string value = 2;
bool MobileCreative_Creative_Attr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MobileCreative_Creative_Attr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void MobileCreative_Creative_Attr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void MobileCreative_Creative_Attr::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& MobileCreative_Creative_Attr::value() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.Attr.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative_Attr::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.Attr.value)
}
 void MobileCreative_Creative_Attr::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.Attr.value)
}
 void MobileCreative_Creative_Attr::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.Attr.value)
}
 ::std::string* MobileCreative_Creative_Attr::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.Attr.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative_Creative_Attr::release_value() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.Attr.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative_Attr::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.Attr.value)
}

// -------------------------------------------------------------------

// MobileCreative_Creative_TrackingEvents

// repeated string impression_event = 1;
int MobileCreative_Creative_TrackingEvents::impression_event_size() const {
  return impression_event_.size();
}
void MobileCreative_Creative_TrackingEvents::clear_impression_event() {
  impression_event_.Clear();
}
 const ::std::string& MobileCreative_Creative_TrackingEvents::impression_event(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return impression_event_.Get(index);
}
 ::std::string* MobileCreative_Creative_TrackingEvents::mutable_impression_event(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return impression_event_.Mutable(index);
}
 void MobileCreative_Creative_TrackingEvents::set_impression_event(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  impression_event_.Mutable(index)->assign(value);
}
 void MobileCreative_Creative_TrackingEvents::set_impression_event(int index, const char* value) {
  impression_event_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
 void MobileCreative_Creative_TrackingEvents::set_impression_event(int index, const char* value, size_t size) {
  impression_event_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
 ::std::string* MobileCreative_Creative_TrackingEvents::add_impression_event() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return impression_event_.Add();
}
 void MobileCreative_Creative_TrackingEvents::add_impression_event(const ::std::string& value) {
  impression_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
 void MobileCreative_Creative_TrackingEvents::add_impression_event(const char* value) {
  impression_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
 void MobileCreative_Creative_TrackingEvents::add_impression_event(const char* value, size_t size) {
  impression_event_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileCreative_Creative_TrackingEvents::impression_event() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return impression_event_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileCreative_Creative_TrackingEvents::mutable_impression_event() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.MobileCreative.Creative.TrackingEvents.impression_event)
  return &impression_event_;
}

// repeated string click_event = 2;
int MobileCreative_Creative_TrackingEvents::click_event_size() const {
  return click_event_.size();
}
void MobileCreative_Creative_TrackingEvents::clear_click_event() {
  click_event_.Clear();
}
 const ::std::string& MobileCreative_Creative_TrackingEvents::click_event(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return click_event_.Get(index);
}
 ::std::string* MobileCreative_Creative_TrackingEvents::mutable_click_event(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return click_event_.Mutable(index);
}
 void MobileCreative_Creative_TrackingEvents::set_click_event(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  click_event_.Mutable(index)->assign(value);
}
 void MobileCreative_Creative_TrackingEvents::set_click_event(int index, const char* value) {
  click_event_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
 void MobileCreative_Creative_TrackingEvents::set_click_event(int index, const char* value, size_t size) {
  click_event_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
 ::std::string* MobileCreative_Creative_TrackingEvents::add_click_event() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return click_event_.Add();
}
 void MobileCreative_Creative_TrackingEvents::add_click_event(const ::std::string& value) {
  click_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
 void MobileCreative_Creative_TrackingEvents::add_click_event(const char* value) {
  click_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
 void MobileCreative_Creative_TrackingEvents::add_click_event(const char* value, size_t size) {
  click_event_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileCreative_Creative_TrackingEvents::click_event() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return click_event_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileCreative_Creative_TrackingEvents::mutable_click_event() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.MobileCreative.Creative.TrackingEvents.click_event)
  return &click_event_;
}

// repeated string download_complete_event = 3;
int MobileCreative_Creative_TrackingEvents::download_complete_event_size() const {
  return download_complete_event_.size();
}
void MobileCreative_Creative_TrackingEvents::clear_download_complete_event() {
  download_complete_event_.Clear();
}
 const ::std::string& MobileCreative_Creative_TrackingEvents::download_complete_event(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return download_complete_event_.Get(index);
}
 ::std::string* MobileCreative_Creative_TrackingEvents::mutable_download_complete_event(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return download_complete_event_.Mutable(index);
}
 void MobileCreative_Creative_TrackingEvents::set_download_complete_event(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  download_complete_event_.Mutable(index)->assign(value);
}
 void MobileCreative_Creative_TrackingEvents::set_download_complete_event(int index, const char* value) {
  download_complete_event_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
 void MobileCreative_Creative_TrackingEvents::set_download_complete_event(int index, const char* value, size_t size) {
  download_complete_event_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
 ::std::string* MobileCreative_Creative_TrackingEvents::add_download_complete_event() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return download_complete_event_.Add();
}
 void MobileCreative_Creative_TrackingEvents::add_download_complete_event(const ::std::string& value) {
  download_complete_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
 void MobileCreative_Creative_TrackingEvents::add_download_complete_event(const char* value) {
  download_complete_event_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
 void MobileCreative_Creative_TrackingEvents::add_download_complete_event(const char* value, size_t size) {
  download_complete_event_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MobileCreative_Creative_TrackingEvents::download_complete_event() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return download_complete_event_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MobileCreative_Creative_TrackingEvents::mutable_download_complete_event() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.MobileCreative.Creative.TrackingEvents.download_complete_event)
  return &download_complete_event_;
}

// -------------------------------------------------------------------

// MobileCreative_Creative

// optional string img_url = 1;
bool MobileCreative_Creative::has_img_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MobileCreative_Creative::set_has_img_url() {
  _has_bits_[0] |= 0x00000001u;
}
void MobileCreative_Creative::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void MobileCreative_Creative::clear_img_url() {
  img_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_url();
}
 const ::std::string& MobileCreative_Creative::img_url() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.img_url)
  return img_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_img_url(const ::std::string& value) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.img_url)
}
 void MobileCreative_Creative::set_img_url(const char* value) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.img_url)
}
 void MobileCreative_Creative::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  img_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.img_url)
}
 ::std::string* MobileCreative_Creative::mutable_img_url() {
  set_has_img_url();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.img_url)
  return img_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative_Creative::release_img_url() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.img_url)
  clear_has_img_url();
  return img_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_allocated_img_url(::std::string* img_url) {
  if (img_url != NULL) {
    set_has_img_url();
  } else {
    clear_has_img_url();
  }
  img_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_url);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.img_url)
}

// optional string img_size = 2;
bool MobileCreative_Creative::has_img_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MobileCreative_Creative::set_has_img_size() {
  _has_bits_[0] |= 0x00000002u;
}
void MobileCreative_Creative::clear_has_img_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void MobileCreative_Creative::clear_img_size() {
  img_size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_img_size();
}
 const ::std::string& MobileCreative_Creative::img_size() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.img_size)
  return img_size_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_img_size(const ::std::string& value) {
  set_has_img_size();
  img_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.img_size)
}
 void MobileCreative_Creative::set_img_size(const char* value) {
  set_has_img_size();
  img_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.img_size)
}
 void MobileCreative_Creative::set_img_size(const char* value, size_t size) {
  set_has_img_size();
  img_size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.img_size)
}
 ::std::string* MobileCreative_Creative::mutable_img_size() {
  set_has_img_size();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.img_size)
  return img_size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative_Creative::release_img_size() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.img_size)
  clear_has_img_size();
  return img_size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_allocated_img_size(::std::string* img_size) {
  if (img_size != NULL) {
    set_has_img_size();
  } else {
    clear_has_img_size();
  }
  img_size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img_size);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.img_size)
}

// optional string title = 3;
bool MobileCreative_Creative::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MobileCreative_Creative::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void MobileCreative_Creative::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void MobileCreative_Creative::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& MobileCreative_Creative::title() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.title)
}
 void MobileCreative_Creative::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.title)
}
 void MobileCreative_Creative::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.title)
}
 ::std::string* MobileCreative_Creative::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative_Creative::release_title() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.title)
}

// optional string click_url = 4;
bool MobileCreative_Creative::has_click_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MobileCreative_Creative::set_has_click_url() {
  _has_bits_[0] |= 0x00000008u;
}
void MobileCreative_Creative::clear_has_click_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void MobileCreative_Creative::clear_click_url() {
  click_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_click_url();
}
 const ::std::string& MobileCreative_Creative::click_url() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.click_url)
  return click_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_click_url(const ::std::string& value) {
  set_has_click_url();
  click_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.click_url)
}
 void MobileCreative_Creative::set_click_url(const char* value) {
  set_has_click_url();
  click_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.click_url)
}
 void MobileCreative_Creative::set_click_url(const char* value, size_t size) {
  set_has_click_url();
  click_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.click_url)
}
 ::std::string* MobileCreative_Creative::mutable_click_url() {
  set_has_click_url();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.click_url)
  return click_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative_Creative::release_click_url() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.click_url)
  clear_has_click_url();
  return click_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_allocated_click_url(::std::string* click_url) {
  if (click_url != NULL) {
    set_has_click_url();
  } else {
    clear_has_click_url();
  }
  click_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), click_url);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.click_url)
}

// optional string destination_url = 5;
bool MobileCreative_Creative::has_destination_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MobileCreative_Creative::set_has_destination_url() {
  _has_bits_[0] |= 0x00000010u;
}
void MobileCreative_Creative::clear_has_destination_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void MobileCreative_Creative::clear_destination_url() {
  destination_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_url();
}
 const ::std::string& MobileCreative_Creative::destination_url() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.destination_url)
  return destination_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_destination_url(const ::std::string& value) {
  set_has_destination_url();
  destination_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.destination_url)
}
 void MobileCreative_Creative::set_destination_url(const char* value) {
  set_has_destination_url();
  destination_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.destination_url)
}
 void MobileCreative_Creative::set_destination_url(const char* value, size_t size) {
  set_has_destination_url();
  destination_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.destination_url)
}
 ::std::string* MobileCreative_Creative::mutable_destination_url() {
  set_has_destination_url();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.destination_url)
  return destination_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative_Creative::release_destination_url() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.destination_url)
  clear_has_destination_url();
  return destination_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_allocated_destination_url(::std::string* destination_url) {
  if (destination_url != NULL) {
    set_has_destination_url();
  } else {
    clear_has_destination_url();
  }
  destination_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_url);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.destination_url)
}

// repeated .protocol.Tanx.MobileCreative.Creative.Attr attr = 6;
int MobileCreative_Creative::attr_size() const {
  return attr_.size();
}
void MobileCreative_Creative::clear_attr() {
  attr_.Clear();
}
const ::protocol::Tanx::MobileCreative_Creative_Attr& MobileCreative_Creative::attr(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.attr)
  return attr_.Get(index);
}
::protocol::Tanx::MobileCreative_Creative_Attr* MobileCreative_Creative::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.attr)
  return attr_.Mutable(index);
}
::protocol::Tanx::MobileCreative_Creative_Attr* MobileCreative_Creative::add_attr() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.MobileCreative.Creative.attr)
  return attr_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::MobileCreative_Creative_Attr >*
MobileCreative_Creative::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.MobileCreative.Creative.attr)
  return &attr_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::MobileCreative_Creative_Attr >&
MobileCreative_Creative::attr() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.MobileCreative.Creative.attr)
  return attr_;
}

// optional string creative_id = 7;
bool MobileCreative_Creative::has_creative_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MobileCreative_Creative::set_has_creative_id() {
  _has_bits_[0] |= 0x00000040u;
}
void MobileCreative_Creative::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void MobileCreative_Creative::clear_creative_id() {
  creative_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creative_id();
}
 const ::std::string& MobileCreative_Creative::creative_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.creative_id)
  return creative_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_creative_id(const ::std::string& value) {
  set_has_creative_id();
  creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.creative_id)
}
 void MobileCreative_Creative::set_creative_id(const char* value) {
  set_has_creative_id();
  creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.Creative.creative_id)
}
 void MobileCreative_Creative::set_creative_id(const char* value, size_t size) {
  set_has_creative_id();
  creative_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.Creative.creative_id)
}
 ::std::string* MobileCreative_Creative::mutable_creative_id() {
  set_has_creative_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.creative_id)
  return creative_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative_Creative::release_creative_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.creative_id)
  clear_has_creative_id();
  return creative_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative_Creative::set_allocated_creative_id(::std::string* creative_id) {
  if (creative_id != NULL) {
    set_has_creative_id();
  } else {
    clear_has_creative_id();
  }
  creative_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creative_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.creative_id)
}

// repeated int32 category = 8;
int MobileCreative_Creative::category_size() const {
  return category_.size();
}
void MobileCreative_Creative::clear_category() {
  category_.Clear();
}
 ::google::protobuf::int32 MobileCreative_Creative::category(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.category)
  return category_.Get(index);
}
 void MobileCreative_Creative::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Creative.category)
}
 void MobileCreative_Creative::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Tanx.MobileCreative.Creative.category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MobileCreative_Creative::category() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.MobileCreative.Creative.category)
  return category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MobileCreative_Creative::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.MobileCreative.Creative.category)
  return &category_;
}

// optional .protocol.Tanx.MobileCreative.Creative.TrackingEvents tracking_events = 9;
bool MobileCreative_Creative::has_tracking_events() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MobileCreative_Creative::set_has_tracking_events() {
  _has_bits_[0] |= 0x00000100u;
}
void MobileCreative_Creative::clear_has_tracking_events() {
  _has_bits_[0] &= ~0x00000100u;
}
void MobileCreative_Creative::clear_tracking_events() {
  if (tracking_events_ != NULL) tracking_events_->::protocol::Tanx::MobileCreative_Creative_TrackingEvents::Clear();
  clear_has_tracking_events();
}
const ::protocol::Tanx::MobileCreative_Creative_TrackingEvents& MobileCreative_Creative::tracking_events() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Creative.tracking_events)
  return tracking_events_ != NULL ? *tracking_events_ : *default_instance_->tracking_events_;
}
::protocol::Tanx::MobileCreative_Creative_TrackingEvents* MobileCreative_Creative::mutable_tracking_events() {
  set_has_tracking_events();
  if (tracking_events_ == NULL) {
    tracking_events_ = new ::protocol::Tanx::MobileCreative_Creative_TrackingEvents;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Creative.tracking_events)
  return tracking_events_;
}
::protocol::Tanx::MobileCreative_Creative_TrackingEvents* MobileCreative_Creative::release_tracking_events() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.Creative.tracking_events)
  clear_has_tracking_events();
  ::protocol::Tanx::MobileCreative_Creative_TrackingEvents* temp = tracking_events_;
  tracking_events_ = NULL;
  return temp;
}
void MobileCreative_Creative::set_allocated_tracking_events(::protocol::Tanx::MobileCreative_Creative_TrackingEvents* tracking_events) {
  delete tracking_events_;
  tracking_events_ = tracking_events;
  if (tracking_events) {
    set_has_tracking_events();
  } else {
    clear_has_tracking_events();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.Creative.tracking_events)
}

// -------------------------------------------------------------------

// MobileCreative_Area

// required int32 id = 1;
bool MobileCreative_Area::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MobileCreative_Area::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MobileCreative_Area::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MobileCreative_Area::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 MobileCreative_Area::id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Area.id)
  return id_;
}
 void MobileCreative_Area::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.Area.id)
}

// repeated .protocol.Tanx.MobileCreative.Creative creatives = 2;
int MobileCreative_Area::creatives_size() const {
  return creatives_.size();
}
void MobileCreative_Area::clear_creatives() {
  creatives_.Clear();
}
const ::protocol::Tanx::MobileCreative_Creative& MobileCreative_Area::creatives(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.Area.creatives)
  return creatives_.Get(index);
}
::protocol::Tanx::MobileCreative_Creative* MobileCreative_Area::mutable_creatives(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.Area.creatives)
  return creatives_.Mutable(index);
}
::protocol::Tanx::MobileCreative_Creative* MobileCreative_Area::add_creatives() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.MobileCreative.Area.creatives)
  return creatives_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::MobileCreative_Creative >*
MobileCreative_Area::mutable_creatives() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.MobileCreative.Area.creatives)
  return &creatives_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::MobileCreative_Creative >&
MobileCreative_Area::creatives() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.MobileCreative.Area.creatives)
  return creatives_;
}

// -------------------------------------------------------------------

// MobileCreative

// required int32 version = 1;
bool MobileCreative::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MobileCreative::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void MobileCreative::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void MobileCreative::clear_version() {
  version_ = 0;
  clear_has_version();
}
 ::google::protobuf::int32 MobileCreative::version() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.version)
  return version_;
}
 void MobileCreative::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.version)
}

// required string bid = 2;
bool MobileCreative::has_bid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MobileCreative::set_has_bid() {
  _has_bits_[0] |= 0x00000002u;
}
void MobileCreative::clear_has_bid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MobileCreative::clear_bid() {
  bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bid();
}
 const ::std::string& MobileCreative::bid() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.bid)
  return bid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative::set_bid(const ::std::string& value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.bid)
}
 void MobileCreative::set_bid(const char* value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.bid)
}
 void MobileCreative::set_bid(const char* value, size_t size) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.bid)
}
 ::std::string* MobileCreative::mutable_bid() {
  set_has_bid();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.bid)
  return bid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative::release_bid() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.bid)
  clear_has_bid();
  return bid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative::set_allocated_bid(::std::string* bid) {
  if (bid != NULL) {
    set_has_bid();
  } else {
    clear_has_bid();
  }
  bid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.bid)
}

// optional uint32 view_type = 3;
bool MobileCreative::has_view_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MobileCreative::set_has_view_type() {
  _has_bits_[0] |= 0x00000004u;
}
void MobileCreative::clear_has_view_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void MobileCreative::clear_view_type() {
  view_type_ = 0u;
  clear_has_view_type();
}
 ::google::protobuf::uint32 MobileCreative::view_type() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.view_type)
  return view_type_;
}
 void MobileCreative::set_view_type(::google::protobuf::uint32 value) {
  set_has_view_type();
  view_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.view_type)
}

// repeated .protocol.Tanx.MobileCreative.Creative creatives = 4;
int MobileCreative::creatives_size() const {
  return creatives_.size();
}
void MobileCreative::clear_creatives() {
  creatives_.Clear();
}
const ::protocol::Tanx::MobileCreative_Creative& MobileCreative::creatives(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.creatives)
  return creatives_.Get(index);
}
::protocol::Tanx::MobileCreative_Creative* MobileCreative::mutable_creatives(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.creatives)
  return creatives_.Mutable(index);
}
::protocol::Tanx::MobileCreative_Creative* MobileCreative::add_creatives() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.MobileCreative.creatives)
  return creatives_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::MobileCreative_Creative >*
MobileCreative::mutable_creatives() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.MobileCreative.creatives)
  return &creatives_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::MobileCreative_Creative >&
MobileCreative::creatives() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.MobileCreative.creatives)
  return creatives_;
}

// optional string native_template_id = 5;
bool MobileCreative::has_native_template_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MobileCreative::set_has_native_template_id() {
  _has_bits_[0] |= 0x00000010u;
}
void MobileCreative::clear_has_native_template_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void MobileCreative::clear_native_template_id() {
  native_template_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_native_template_id();
}
 const ::std::string& MobileCreative::native_template_id() const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.native_template_id)
  return native_template_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative::set_native_template_id(const ::std::string& value) {
  set_has_native_template_id();
  native_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Tanx.MobileCreative.native_template_id)
}
 void MobileCreative::set_native_template_id(const char* value) {
  set_has_native_template_id();
  native_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Tanx.MobileCreative.native_template_id)
}
 void MobileCreative::set_native_template_id(const char* value, size_t size) {
  set_has_native_template_id();
  native_template_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Tanx.MobileCreative.native_template_id)
}
 ::std::string* MobileCreative::mutable_native_template_id() {
  set_has_native_template_id();
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.native_template_id)
  return native_template_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MobileCreative::release_native_template_id() {
  // @@protoc_insertion_point(field_release:protocol.Tanx.MobileCreative.native_template_id)
  clear_has_native_template_id();
  return native_template_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MobileCreative::set_allocated_native_template_id(::std::string* native_template_id) {
  if (native_template_id != NULL) {
    set_has_native_template_id();
  } else {
    clear_has_native_template_id();
  }
  native_template_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), native_template_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Tanx.MobileCreative.native_template_id)
}

// repeated .protocol.Tanx.MobileCreative.Area areas = 6;
int MobileCreative::areas_size() const {
  return areas_.size();
}
void MobileCreative::clear_areas() {
  areas_.Clear();
}
const ::protocol::Tanx::MobileCreative_Area& MobileCreative::areas(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Tanx.MobileCreative.areas)
  return areas_.Get(index);
}
::protocol::Tanx::MobileCreative_Area* MobileCreative::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Tanx.MobileCreative.areas)
  return areas_.Mutable(index);
}
::protocol::Tanx::MobileCreative_Area* MobileCreative::add_areas() {
  // @@protoc_insertion_point(field_add:protocol.Tanx.MobileCreative.areas)
  return areas_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Tanx::MobileCreative_Area >*
MobileCreative::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Tanx.MobileCreative.areas)
  return &areas_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Tanx::MobileCreative_Area >&
MobileCreative::areas() const {
  // @@protoc_insertion_point(field_list:protocol.Tanx.MobileCreative.areas)
  return areas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Tanx
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
