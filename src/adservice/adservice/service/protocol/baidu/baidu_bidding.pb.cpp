// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baidu_bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "baidu_bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace baidu {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_BaiduId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_BaiduId_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_CustomizedUserTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_CustomizedUserTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_CustomizedUserTag_AmsTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_CustomizedUserTag_AmsTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_Coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_Coordinate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Geo_Coordinate_Standard_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_UserLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_UserLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_MobileID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_MobileID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileID_IDType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_DeviceOsVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_DeviceOsVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_ForAdvertisingID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_ForAdvertisingID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ForAdvertisingID_IDType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Mobile_MobileApp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Mobile_MobileApp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileApp_AppInteractionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_OS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_WirelessNetworkType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_VideoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_VideoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_LinkUnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_LinkUnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_PreferredOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_PreferredOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_GuaranteedOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_GuaranteedOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_GuaranteedOrder_Charge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_GuaranteedOrder_Charge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_ExpandCreativeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_ExpandCreativeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_ExpandCreativeInfo_ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_ExpandCreativeInfo_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_NativeAdParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_NativeAdParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_AdSlot_NativeAdParam_ImageEle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_AdSlot_NativeAdParam_ImageEle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_NativeAdParam_Fields_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_CreativeDescType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_AdSlotLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_LinkUnitKeyword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_LinkUnitKeyword_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_ExpandCreativeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_ExpandCreativeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_DeeplinkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_DeeplinkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_NativeAd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_NativeAd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Ad_NativeAd_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Ad_NativeAd_Image_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_baidu_5fbidding_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_baidu_5fbidding_2eproto() {
  protobuf_AddDesc_baidu_5fbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "baidu_bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, baidu_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, baidu_user_id_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, baidu_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, buyer_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, customized_user_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, detected_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, flash_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_geo_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, referer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, site_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, site_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, page_vertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, excluded_product_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, adslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
  };
  BidRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _internal_metadata_),
      -1);
  BidRequest_BaiduId_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_BaiduId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BaiduId, baidu_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BaiduId, baidu_user_id_version_),
  };
  BidRequest_BaiduId_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_BaiduId_descriptor_,
      BidRequest_BaiduId::default_instance_,
      BidRequest_BaiduId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BaiduId, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_BaiduId),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_BaiduId, _internal_metadata_),
      -1);
  BidRequest_CustomizedUserTag_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_CustomizedUserTag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CustomizedUserTag, ams_tag_list_),
  };
  BidRequest_CustomizedUserTag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_CustomizedUserTag_descriptor_,
      BidRequest_CustomizedUserTag::default_instance_,
      BidRequest_CustomizedUserTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CustomizedUserTag, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_CustomizedUserTag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CustomizedUserTag, _internal_metadata_),
      -1);
  BidRequest_CustomizedUserTag_AmsTag_descriptor_ = BidRequest_CustomizedUserTag_descriptor_->nested_type(0);
  static const int BidRequest_CustomizedUserTag_AmsTag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CustomizedUserTag_AmsTag, tag_id_),
  };
  BidRequest_CustomizedUserTag_AmsTag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_CustomizedUserTag_AmsTag_descriptor_,
      BidRequest_CustomizedUserTag_AmsTag::default_instance_,
      BidRequest_CustomizedUserTag_AmsTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CustomizedUserTag_AmsTag, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_CustomizedUserTag_AmsTag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_CustomizedUserTag_AmsTag, _internal_metadata_),
      -1);
  BidRequest_Geo_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_Geo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, user_coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, user_location_),
  };
  BidRequest_Geo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Geo_descriptor_,
      BidRequest_Geo::default_instance_,
      BidRequest_Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Geo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _internal_metadata_),
      -1);
  BidRequest_Geo_Coordinate_descriptor_ = BidRequest_Geo_descriptor_->nested_type(0);
  static const int BidRequest_Geo_Coordinate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, standard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, longitude_),
  };
  BidRequest_Geo_Coordinate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Geo_Coordinate_descriptor_,
      BidRequest_Geo_Coordinate::default_instance_,
      BidRequest_Geo_Coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Geo_Coordinate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_Coordinate, _internal_metadata_),
      -1);
  BidRequest_Geo_Coordinate_Standard_descriptor_ = BidRequest_Geo_Coordinate_descriptor_->enum_type(0);
  BidRequest_Geo_UserLocation_descriptor_ = BidRequest_Geo_descriptor_->nested_type(1);
  static const int BidRequest_Geo_UserLocation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, district_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, street_),
  };
  BidRequest_Geo_UserLocation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Geo_UserLocation_descriptor_,
      BidRequest_Geo_UserLocation::default_instance_,
      BidRequest_Geo_UserLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Geo_UserLocation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo_UserLocation, _internal_metadata_),
      -1);
  BidRequest_Mobile_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Mobile_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, screen_density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, carrier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, wireless_network_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, deprecated_for_advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, for_advertising_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, mobile_app_),
  };
  BidRequest_Mobile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_descriptor_,
      BidRequest_Mobile::default_instance_,
      BidRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile, _internal_metadata_),
      -1);
  BidRequest_Mobile_MobileID_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(0);
  static const int BidRequest_Mobile_MobileID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileID, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileID, id_),
  };
  BidRequest_Mobile_MobileID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_MobileID_descriptor_,
      BidRequest_Mobile_MobileID::default_instance_,
      BidRequest_Mobile_MobileID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileID, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_MobileID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileID, _internal_metadata_),
      -1);
  BidRequest_Mobile_MobileID_IDType_descriptor_ = BidRequest_Mobile_MobileID_descriptor_->enum_type(0);
  BidRequest_Mobile_DeviceOsVersion_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(1);
  static const int BidRequest_Mobile_DeviceOsVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, os_version_micro_),
  };
  BidRequest_Mobile_DeviceOsVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_DeviceOsVersion_descriptor_,
      BidRequest_Mobile_DeviceOsVersion::default_instance_,
      BidRequest_Mobile_DeviceOsVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_DeviceOsVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_DeviceOsVersion, _internal_metadata_),
      -1);
  BidRequest_Mobile_ForAdvertisingID_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(2);
  static const int BidRequest_Mobile_ForAdvertisingID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_ForAdvertisingID, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_ForAdvertisingID, id_),
  };
  BidRequest_Mobile_ForAdvertisingID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_ForAdvertisingID_descriptor_,
      BidRequest_Mobile_ForAdvertisingID::default_instance_,
      BidRequest_Mobile_ForAdvertisingID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_ForAdvertisingID, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_ForAdvertisingID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_ForAdvertisingID, _internal_metadata_),
      -1);
  BidRequest_Mobile_ForAdvertisingID_IDType_descriptor_ = BidRequest_Mobile_ForAdvertisingID_descriptor_->enum_type(0);
  BidRequest_Mobile_MobileApp_descriptor_ = BidRequest_Mobile_descriptor_->nested_type(3);
  static const int BidRequest_Mobile_MobileApp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_bundle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_publisher_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, app_interaction_type_),
  };
  BidRequest_Mobile_MobileApp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Mobile_MobileApp_descriptor_,
      BidRequest_Mobile_MobileApp::default_instance_,
      BidRequest_Mobile_MobileApp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Mobile_MobileApp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Mobile_MobileApp, _internal_metadata_),
      -1);
  BidRequest_Mobile_MobileApp_AppInteractionType_descriptor_ = BidRequest_Mobile_MobileApp_descriptor_->enum_type(0);
  BidRequest_Mobile_MobileDeviceType_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(0);
  BidRequest_Mobile_OS_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(1);
  BidRequest_Mobile_WirelessNetworkType_descriptor_ = BidRequest_Mobile_descriptor_->enum_type(2);
  BidRequest_Video_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_Video_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, content_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, channel_id_),
  };
  BidRequest_Video_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Video_descriptor_,
      BidRequest_Video::default_instance_,
      BidRequest_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Video),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Video, _internal_metadata_),
      -1);
  BidRequest_AdSlot_descriptor_ = BidRequest_descriptor_->nested_type(5);
  static const int BidRequest_AdSlot_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, ad_block_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, adslot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, actual_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, actual_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, slot_visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, creative_desc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, excluded_landing_page_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, publisher_settings_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, minimum_cpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, max_video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, min_video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, video_start_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, video_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, link_unit_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, preferred_order_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, guaranteed_orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, expand_creative_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, adslot_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, allowed_non_nativead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, nativead_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, secure_),
  };
  BidRequest_AdSlot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_descriptor_,
      BidRequest_AdSlot::default_instance_,
      BidRequest_AdSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot, _internal_metadata_),
      -1);
  BidRequest_AdSlot_VideoInfo_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_VideoInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, max_video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, min_video_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, video_start_delay_),
  };
  BidRequest_AdSlot_VideoInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_VideoInfo_descriptor_,
      BidRequest_AdSlot_VideoInfo::default_instance_,
      BidRequest_AdSlot_VideoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_VideoInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_VideoInfo, _internal_metadata_),
      -1);
  BidRequest_AdSlot_LinkUnitInfo_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(1);
  static const int BidRequest_AdSlot_LinkUnitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, style_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, req_keyword_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, proposed_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, keywords_),
  };
  BidRequest_AdSlot_LinkUnitInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_LinkUnitInfo_descriptor_,
      BidRequest_AdSlot_LinkUnitInfo::default_instance_,
      BidRequest_AdSlot_LinkUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_LinkUnitInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo, _internal_metadata_),
      -1);
  BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_descriptor_ = BidRequest_AdSlot_LinkUnitInfo_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword, pctr1_),
  };
  BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_descriptor_,
      BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::default_instance_,
      BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword, _internal_metadata_),
      -1);
  BidRequest_AdSlot_PreferredOrderInfo_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(2);
  static const int BidRequest_AdSlot_PreferredOrderInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo, preferred_orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo, allow_auction_),
  };
  BidRequest_AdSlot_PreferredOrderInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_PreferredOrderInfo_descriptor_,
      BidRequest_AdSlot_PreferredOrderInfo::default_instance_,
      BidRequest_AdSlot_PreferredOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_PreferredOrderInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo, _internal_metadata_),
      -1);
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_ = BidRequest_AdSlot_PreferredOrderInfo_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder, fixed_cpm_),
  };
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_,
      BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_,
      BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder, _internal_metadata_),
      -1);
  BidRequest_AdSlot_GuaranteedOrder_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(3);
  static const int BidRequest_AdSlot_GuaranteedOrder_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_GuaranteedOrder, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_GuaranteedOrder, charge_),
  };
  BidRequest_AdSlot_GuaranteedOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_GuaranteedOrder_descriptor_,
      BidRequest_AdSlot_GuaranteedOrder::default_instance_,
      BidRequest_AdSlot_GuaranteedOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_GuaranteedOrder, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_GuaranteedOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_GuaranteedOrder, _internal_metadata_),
      -1);
  BidRequest_AdSlot_GuaranteedOrder_Charge_descriptor_ = BidRequest_AdSlot_GuaranteedOrder_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_GuaranteedOrder_Charge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_GuaranteedOrder_Charge, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_GuaranteedOrder_Charge, charge_mode_),
  };
  BidRequest_AdSlot_GuaranteedOrder_Charge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_GuaranteedOrder_Charge_descriptor_,
      BidRequest_AdSlot_GuaranteedOrder_Charge::default_instance_,
      BidRequest_AdSlot_GuaranteedOrder_Charge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_GuaranteedOrder_Charge, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_GuaranteedOrder_Charge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_GuaranteedOrder_Charge, _internal_metadata_),
      -1);
  BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType_descriptor_ = BidRequest_AdSlot_GuaranteedOrder_Charge_descriptor_->enum_type(0);
  BidRequest_AdSlot_ExpandCreativeInfo_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(4);
  static const int BidRequest_AdSlot_ExpandCreativeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, expand_duration_),
  };
  BidRequest_AdSlot_ExpandCreativeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_ExpandCreativeInfo_descriptor_,
      BidRequest_AdSlot_ExpandCreativeInfo::default_instance_,
      BidRequest_AdSlot_ExpandCreativeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_ExpandCreativeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_ExpandCreativeInfo, _internal_metadata_),
      -1);
  BidRequest_AdSlot_ExpandCreativeInfo_ActionType_descriptor_ = BidRequest_AdSlot_ExpandCreativeInfo_descriptor_->enum_type(0);
  BidRequest_AdSlot_ExpandCreativeInfo_Direction_descriptor_ = BidRequest_AdSlot_ExpandCreativeInfo_descriptor_->enum_type(1);
  BidRequest_AdSlot_NativeAdParam_descriptor_ = BidRequest_AdSlot_descriptor_->nested_type(5);
  static const int BidRequest_AdSlot_NativeAdParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam, required_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam, title_max_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam, desc_max_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam, logo_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam, image_num_),
  };
  BidRequest_AdSlot_NativeAdParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_NativeAdParam_descriptor_,
      BidRequest_AdSlot_NativeAdParam::default_instance_,
      BidRequest_AdSlot_NativeAdParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_NativeAdParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam, _internal_metadata_),
      -1);
  BidRequest_AdSlot_NativeAdParam_ImageEle_descriptor_ = BidRequest_AdSlot_NativeAdParam_descriptor_->nested_type(0);
  static const int BidRequest_AdSlot_NativeAdParam_ImageEle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam_ImageEle, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam_ImageEle, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam_ImageEle, shape_),
  };
  BidRequest_AdSlot_NativeAdParam_ImageEle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_AdSlot_NativeAdParam_ImageEle_descriptor_,
      BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance_,
      BidRequest_AdSlot_NativeAdParam_ImageEle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam_ImageEle, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_AdSlot_NativeAdParam_ImageEle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_AdSlot_NativeAdParam_ImageEle, _internal_metadata_),
      -1);
  BidRequest_AdSlot_NativeAdParam_Fields_descriptor_ = BidRequest_AdSlot_NativeAdParam_descriptor_->enum_type(0);
  BidRequest_AdSlot_CreativeDescType_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(0);
  BidRequest_AdSlot_AdSlotLevel_descriptor_ = BidRequest_AdSlot_descriptor_->enum_type(1);
  BidRequest_Gender_descriptor_ = BidRequest_descriptor_->enum_type(0);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, debug_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, processing_time_ms_),
  };
  BidResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _internal_metadata_),
      -1);
  BidResponse_Ad_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Ad_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, sequence_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, html_snippet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, link_unit_keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, expand_creative_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, advertiser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, landing_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, target_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, monitor_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, max_cpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, extdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, is_cookie_matching_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, preferred_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, guaranteed_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, deeplink_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, native_ad_),
  };
  BidResponse_Ad_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_descriptor_,
      BidResponse_Ad::default_instance_,
      BidResponse_Ad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _extensions_),
      sizeof(BidResponse_Ad),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad, _internal_metadata_),
      -1);
  BidResponse_Ad_LinkUnitKeyword_descriptor_ = BidResponse_Ad_descriptor_->nested_type(0);
  static const int BidResponse_Ad_LinkUnitKeyword_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_LinkUnitKeyword, keyword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_LinkUnitKeyword, selected_style_type_),
  };
  BidResponse_Ad_LinkUnitKeyword_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_LinkUnitKeyword_descriptor_,
      BidResponse_Ad_LinkUnitKeyword::default_instance_,
      BidResponse_Ad_LinkUnitKeyword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_LinkUnitKeyword, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ad_LinkUnitKeyword),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_LinkUnitKeyword, _internal_metadata_),
      -1);
  BidResponse_Ad_ExpandCreativeInfo_descriptor_ = BidResponse_Ad_descriptor_->nested_type(1);
  static const int BidResponse_Ad_ExpandCreativeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, creative_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, creative_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, creative_landing_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, creative_type_),
  };
  BidResponse_Ad_ExpandCreativeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_ExpandCreativeInfo_descriptor_,
      BidResponse_Ad_ExpandCreativeInfo::default_instance_,
      BidResponse_Ad_ExpandCreativeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ad_ExpandCreativeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_ExpandCreativeInfo, _internal_metadata_),
      -1);
  BidResponse_Ad_DeeplinkInfo_descriptor_ = BidResponse_Ad_descriptor_->nested_type(2);
  static const int BidResponse_Ad_DeeplinkInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_DeeplinkInfo, deeplink_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_DeeplinkInfo, app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_DeeplinkInfo, fallback_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_DeeplinkInfo, fallback_type_),
  };
  BidResponse_Ad_DeeplinkInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_DeeplinkInfo_descriptor_,
      BidResponse_Ad_DeeplinkInfo::default_instance_,
      BidResponse_Ad_DeeplinkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_DeeplinkInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ad_DeeplinkInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_DeeplinkInfo, _internal_metadata_),
      -1);
  BidResponse_Ad_NativeAd_descriptor_ = BidResponse_Ad_descriptor_->nested_type(3);
  static const int BidResponse_Ad_NativeAd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, logo_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, app_size_),
  };
  BidResponse_Ad_NativeAd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_NativeAd_descriptor_,
      BidResponse_Ad_NativeAd::default_instance_,
      BidResponse_Ad_NativeAd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ad_NativeAd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd, _internal_metadata_),
      -1);
  BidResponse_Ad_NativeAd_Image_descriptor_ = BidResponse_Ad_NativeAd_descriptor_->nested_type(0);
  static const int BidResponse_Ad_NativeAd_Image_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, height_),
  };
  BidResponse_Ad_NativeAd_Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_Ad_NativeAd_Image_descriptor_,
      BidResponse_Ad_NativeAd_Image::default_instance_,
      BidResponse_Ad_NativeAd_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_Ad_NativeAd_Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Ad_NativeAd_Image, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_baidu_5fbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_BaiduId_descriptor_, &BidRequest_BaiduId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_CustomizedUserTag_descriptor_, &BidRequest_CustomizedUserTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_CustomizedUserTag_AmsTag_descriptor_, &BidRequest_CustomizedUserTag_AmsTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Geo_descriptor_, &BidRequest_Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Geo_Coordinate_descriptor_, &BidRequest_Geo_Coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Geo_UserLocation_descriptor_, &BidRequest_Geo_UserLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_descriptor_, &BidRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_MobileID_descriptor_, &BidRequest_Mobile_MobileID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_DeviceOsVersion_descriptor_, &BidRequest_Mobile_DeviceOsVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_ForAdvertisingID_descriptor_, &BidRequest_Mobile_ForAdvertisingID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Mobile_MobileApp_descriptor_, &BidRequest_Mobile_MobileApp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Video_descriptor_, &BidRequest_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_descriptor_, &BidRequest_AdSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_VideoInfo_descriptor_, &BidRequest_AdSlot_VideoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_LinkUnitInfo_descriptor_, &BidRequest_AdSlot_LinkUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_descriptor_, &BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_PreferredOrderInfo_descriptor_, &BidRequest_AdSlot_PreferredOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_, &BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_GuaranteedOrder_descriptor_, &BidRequest_AdSlot_GuaranteedOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_GuaranteedOrder_Charge_descriptor_, &BidRequest_AdSlot_GuaranteedOrder_Charge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_ExpandCreativeInfo_descriptor_, &BidRequest_AdSlot_ExpandCreativeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_NativeAdParam_descriptor_, &BidRequest_AdSlot_NativeAdParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_AdSlot_NativeAdParam_ImageEle_descriptor_, &BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_descriptor_, &BidResponse_Ad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_LinkUnitKeyword_descriptor_, &BidResponse_Ad_LinkUnitKeyword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_ExpandCreativeInfo_descriptor_, &BidResponse_Ad_ExpandCreativeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_DeeplinkInfo_descriptor_, &BidResponse_Ad_DeeplinkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_NativeAd_descriptor_, &BidResponse_Ad_NativeAd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_Ad_NativeAd_Image_descriptor_, &BidResponse_Ad_NativeAd_Image::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_baidu_5fbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_BaiduId::default_instance_;
  delete BidRequest_BaiduId_reflection_;
  delete BidRequest_CustomizedUserTag::default_instance_;
  delete BidRequest_CustomizedUserTag_reflection_;
  delete BidRequest_CustomizedUserTag_AmsTag::default_instance_;
  delete BidRequest_CustomizedUserTag_AmsTag_reflection_;
  delete BidRequest_Geo::default_instance_;
  delete BidRequest_Geo_reflection_;
  delete BidRequest_Geo_Coordinate::default_instance_;
  delete BidRequest_Geo_Coordinate_reflection_;
  delete BidRequest_Geo_UserLocation::default_instance_;
  delete BidRequest_Geo_UserLocation_reflection_;
  delete BidRequest_Mobile::default_instance_;
  delete BidRequest_Mobile_reflection_;
  delete BidRequest_Mobile_MobileID::default_instance_;
  delete BidRequest_Mobile_MobileID_reflection_;
  delete BidRequest_Mobile_DeviceOsVersion::default_instance_;
  delete BidRequest_Mobile_DeviceOsVersion_reflection_;
  delete BidRequest_Mobile_ForAdvertisingID::default_instance_;
  delete BidRequest_Mobile_ForAdvertisingID_reflection_;
  delete BidRequest_Mobile_MobileApp::default_instance_;
  delete BidRequest_Mobile_MobileApp_reflection_;
  delete BidRequest_Video::default_instance_;
  delete BidRequest_Video_reflection_;
  delete BidRequest_AdSlot::default_instance_;
  delete BidRequest_AdSlot_reflection_;
  delete BidRequest_AdSlot_VideoInfo::default_instance_;
  delete BidRequest_AdSlot_VideoInfo_reflection_;
  delete BidRequest_AdSlot_LinkUnitInfo::default_instance_;
  delete BidRequest_AdSlot_LinkUnitInfo_reflection_;
  delete BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::default_instance_;
  delete BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_reflection_;
  delete BidRequest_AdSlot_PreferredOrderInfo::default_instance_;
  delete BidRequest_AdSlot_PreferredOrderInfo_reflection_;
  delete BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_;
  delete BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_reflection_;
  delete BidRequest_AdSlot_GuaranteedOrder::default_instance_;
  delete BidRequest_AdSlot_GuaranteedOrder_reflection_;
  delete BidRequest_AdSlot_GuaranteedOrder_Charge::default_instance_;
  delete BidRequest_AdSlot_GuaranteedOrder_Charge_reflection_;
  delete BidRequest_AdSlot_ExpandCreativeInfo::default_instance_;
  delete BidRequest_AdSlot_ExpandCreativeInfo_reflection_;
  delete BidRequest_AdSlot_NativeAdParam::default_instance_;
  delete BidRequest_AdSlot_NativeAdParam_reflection_;
  delete BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance_;
  delete BidRequest_AdSlot_NativeAdParam_ImageEle_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Ad::default_instance_;
  delete BidResponse_Ad_reflection_;
  delete BidResponse_Ad_LinkUnitKeyword::default_instance_;
  delete BidResponse_Ad_LinkUnitKeyword_reflection_;
  delete BidResponse_Ad_ExpandCreativeInfo::default_instance_;
  delete BidResponse_Ad_ExpandCreativeInfo_reflection_;
  delete BidResponse_Ad_DeeplinkInfo::default_instance_;
  delete BidResponse_Ad_DeeplinkInfo_reflection_;
  delete BidResponse_Ad_NativeAd::default_instance_;
  delete BidResponse_Ad_NativeAd_reflection_;
  delete BidResponse_Ad_NativeAd_Image::default_instance_;
  delete BidResponse_Ad_NativeAd_Image_reflection_;
}

void protobuf_AddDesc_baidu_5fbidding_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_baidu_5fbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023baidu_bidding.proto\022\016protocol.baidu\"\334."
    "\n\nBidRequest\022\n\n\002id\030\001 \002(\t\022\n\n\002ip\030\002 \001(\t\022\022\n\n"
    "user_agent\030\003 \001(\t\022\025\n\rbaidu_user_id\030\004 \001(\t\022"
    "\035\n\025baidu_user_id_version\030\005 \001(\005\0229\n\rbaidu_"
    "id_list\030\010 \003(\0132\".protocol.baidu.BidReques"
    "t.BaiduId\022\025\n\rbuyer_user_id\030  \001(\t\022\025\n\ruser"
    "_category\030\006 \003(\003\022I\n\023customized_user_tag\030\037"
    " \001(\0132,.protocol.baidu.BidRequest.Customi"
    "zedUserTag\0221\n\006gender\030\007 \001(\0162!.protocol.ba"
    "idu.BidRequest.Gender\022\031\n\021detected_langua"
    "ge\030\t \001(\t\022\025\n\rflash_version\030\n \001(\t\0225\n\ruser_"
    "geo_info\030\034 \001(\0132\036.protocol.baidu.BidReque"
    "st.Geo\022\013\n\003url\030\013 \001(\t\022\017\n\007referer\030\014 \001(\t\022\025\n\r"
    "site_category\030\r \001(\005\022\024\n\014site_quality\030\016 \001("
    "\005\022\021\n\tpage_type\030\017 \001(\005\022\024\n\014page_keyword\030\021 \003"
    "(\t\022\024\n\014page_quality\030\022 \001(\005\022\025\n\rpage_vertica"
    "l\030\025 \001(\005\022%\n\031excluded_product_category\030\023 \003"
    "(\005B\002\020\001\0221\n\006mobile\030\035 \001(\0132!.protocol.baidu."
    "BidRequest.Mobile\022/\n\005video\030\036 \001(\0132 .proto"
    "col.baidu.BidRequest.Video\0221\n\006adslot\030\024 \003"
    "(\0132!.protocol.baidu.BidRequest.AdSlot\022\026\n"
    "\007is_test\030\032 \001(\010:\005false\022\026\n\007is_ping\030\033 \001(\010:\005"
    "false\032\?\n\007BaiduId\022\025\n\rbaidu_user_id\030\001 \001(\t\022"
    "\035\n\025baidu_user_id_version\030\002 \001(\005\032x\n\021Custom"
    "izedUserTag\022I\n\014ams_tag_list\030\001 \003(\01323.prot"
    "ocol.baidu.BidRequest.CustomizedUserTag."
    "AmsTag\032\030\n\006AmsTag\022\016\n\006tag_id\030\001 \001(\004\032\226\003\n\003Geo"
    "\022B\n\017user_coordinate\030\001 \003(\0132).protocol.bai"
    "du.BidRequest.Geo.Coordinate\022B\n\ruser_loc"
    "ation\030\002 \001(\0132+.protocol.baidu.BidRequest."
    "Geo.UserLocation\032\264\001\n\nCoordinate\022D\n\010stand"
    "ard\030\001 \001(\01622.protocol.baidu.BidRequest.Ge"
    "o.Coordinate.Standard\022\020\n\010latitude\030\002 \001(\002\022"
    "\021\n\tlongitude\030\003 \001(\002\";\n\010Standard\022\t\n\005BD_09\020"
    "\000\022\n\n\006GCJ_02\020\001\022\n\n\006WGS_84\020\002\022\014\n\010BD_09_LL\020\003\032"
    "P\n\014UserLocation\022\020\n\010province\030\001 \001(\t\022\014\n\004cit"
    "y\030\002 \001(\t\022\020\n\010district\030\003 \001(\t\022\016\n\006street\030\004 \001("
    "\t\032\244\014\n\006Mobile\022\034\n\024DEPRECATED_device_id\030\001 \001"
    "(\t\0226\n\002id\030\r \003(\0132*.protocol.baidu.BidReque"
    "st.Mobile.MobileID\022G\n\013device_type\030\002 \001(\0162"
    "2.protocol.baidu.BidRequest.Mobile.Mobil"
    "eDeviceType\022B\n\010platform\030\003 \001(\0162$.protocol"
    ".baidu.BidRequest.Mobile.OS:\nUNKNOWN_OS\022"
    "E\n\nos_version\030\004 \001(\01321.protocol.baidu.Bid"
    "Request.Mobile.DeviceOsVersion\022\r\n\005brand\030"
    "\005 \001(\t\022\r\n\005model\030\006 \001(\t\022\024\n\014screen_width\030\007 \001"
    "(\005\022\025\n\rscreen_height\030\010 \001(\005\022\026\n\016screen_dens"
    "ity\030\017 \001(\002\022\022\n\ncarrier_id\030\t \001(\003\022T\n\025wireles"
    "s_network_type\030\n \001(\01625.protocol.baidu.Bi"
    "dRequest.Mobile.WirelessNetworkType\022%\n\035D"
    "EPRECATED_for_advertising_id\030\013 \001(\t\022N\n\022fo"
    "r_advertising_id\030\016 \003(\01322.protocol.baidu."
    "BidRequest.Mobile.ForAdvertisingID\022\?\n\nmo"
    "bile_app\030\014 \001(\0132+.protocol.baidu.BidReque"
    "st.Mobile.MobileApp\032\201\001\n\010MobileID\022\?\n\004type"
    "\030\001 \001(\01621.protocol.baidu.BidRequest.Mobil"
    "e.MobileID.IDType\022\n\n\002id\030\002 \001(\t\"(\n\006IDType\022"
    "\013\n\007UNKNOWN\020\000\022\010\n\004IMEI\020\001\022\007\n\003MAC\020\002\032_\n\017Devic"
    "eOsVersion\022\030\n\020os_version_major\030\001 \001(\005\022\030\n\020"
    "os_version_minor\030\002 \001(\005\022\030\n\020os_version_mic"
    "ro\030\003 \001(\005\032\230\001\n\020ForAdvertisingID\022G\n\004type\030\001 "
    "\001(\01629.protocol.baidu.BidRequest.Mobile.F"
    "orAdvertisingID.IDType\022\n\n\002id\030\002 \001(\t\"/\n\006ID"
    "Type\022\013\n\007UNKNOWN\020\000\022\016\n\nANDROID_ID\020\004\022\010\n\004IDF"
    "A\020\005\032\201\002\n\tMobileApp\022\016\n\006app_id\030\001 \001(\t\022\025\n\rapp"
    "_bundle_id\030\002 \001(\t\022\024\n\014app_category\030\003 \001(\005\022\030"
    "\n\020app_publisher_id\030\004 \001(\005\022\\\n\024app_interact"
    "ion_type\030\005 \003(\0162>.protocol.baidu.BidReque"
    "st.Mobile.MobileApp.AppInteractionType\"\?"
    "\n\022AppInteractionType\022\r\n\tTELEPHONE\020\000\022\014\n\010D"
    "OWNLOAD\020\001\022\014\n\010DEEPLINK\020\002\"E\n\020MobileDeviceT"
    "ype\022\022\n\016UNKNOWN_DEVICE\020\000\022\021\n\rHIGHEND_PHONE"
    "\020\001\022\n\n\006TABLET\020\002\"=\n\002OS\022\016\n\nUNKNOWN_OS\020\000\022\007\n\003"
    "IOS\020\001\022\013\n\007ANDROID\020\002\022\021\n\rWINDOWS_PHONE\020\003\"a\n"
    "\023WirelessNetworkType\022\023\n\017UNKNOWN_NETWORK\020"
    "\000\022\010\n\004WIFI\020\001\022\r\n\tMOBILE_2G\020\002\022\r\n\tMOBILE_3G\020"
    "\003\022\r\n\tMOBILE_4G\020\004\032P\n\005Video\022\r\n\005title\030\001 \001(\t"
    "\022\014\n\004tags\030\002 \003(\t\022\026\n\016content_length\030\003 \001(\005\022\022"
    "\n\nchannel_id\030\004 \003(\003\032\222\026\n\006AdSlot\022\024\n\014ad_bloc"
    "k_key\030\001 \001(\004\022\023\n\013sequence_id\030\002 \001(\005\022\023\n\013adsl"
    "ot_type\030\003 \001(\005\022\r\n\005width\030\004 \001(\005\022\016\n\006height\030\005"
    " \001(\005\022\024\n\014actual_width\030\022 \001(\005\022\025\n\ractual_hei"
    "ght\030\023 \001(\005\022\027\n\017slot_visibility\030\006 \001(\005\022\031\n\rcr"
    "eative_type\030\007 \003(\005B\002\020\001\022N\n\022creative_desc_t"
    "ype\030\026 \003(\01622.protocol.baidu.BidRequest.Ad"
    "Slot.CreativeDescType\022!\n\031excluded_landin"
    "g_page_url\030\010 \003(\t\022\"\n\032publisher_settings_l"
    "ist_id\030\016 \003(\006\022\023\n\013minimum_cpm\030\t \001(\005\022\032\n\022max"
    "_video_duration\030\n \001(\005\022\032\n\022min_video_durat"
    "ion\030\013 \001(\005\022\031\n\021video_start_delay\030\014 \001(\005\022\?\n\n"
    "video_info\030\017 \001(\0132+.protocol.baidu.BidReq"
    "uest.AdSlot.VideoInfo\022F\n\016link_unit_info\030"
    "\020 \001(\0132..protocol.baidu.BidRequest.AdSlot"
    ".LinkUnitInfo\022R\n\024preferred_order_info\030\r "
    "\001(\01324.protocol.baidu.BidRequest.AdSlot.P"
    "referredOrderInfo\022L\n\021guaranteed_orders\030\024"
    " \003(\01321.protocol.baidu.BidRequest.AdSlot."
    "GuaranteedOrder\022R\n\024expand_creative_info\030"
    "\021 \001(\01324.protocol.baidu.BidRequest.AdSlot"
    ".ExpandCreativeInfo\022V\n\014adslot_level\030\025 \001("
    "\0162-.protocol.baidu.BidRequest.AdSlot.AdS"
    "lotLevel:\021UNKNOWN_ADB_LEVEL\022\"\n\024allowed_n"
    "on_nativead\030\027 \001(\010:\004true\022G\n\016nativead_para"
    "m\030\030 \001(\0132/.protocol.baidu.BidRequest.AdSl"
    "ot.NativeAdParam\022\025\n\006secure\030\031 \001(\010:\005false\032"
    "^\n\tVideoInfo\022\032\n\022max_video_duration\030\001 \001(\005"
    "\022\032\n\022min_video_duration\030\002 \001(\005\022\031\n\021video_st"
    "art_delay\030\003 \001(\005\032\327\001\n\014LinkUnitInfo\022\022\n\nstyl"
    "e_type\030\001 \003(\005\022\027\n\017req_keyword_num\030\002 \001(\005\022\030\n"
    "\020proposed_keyword\030\003 \003(\t\022P\n\010keywords\030\004 \003("
    "\0132>.protocol.baidu.BidRequest.AdSlot.Lin"
    "kUnitInfo.ProposedKeyword\032.\n\017ProposedKey"
    "word\022\014\n\004text\030\001 \001(\t\022\r\n\005pctr1\030\002 \001(\002\032\307\001\n\022Pr"
    "eferredOrderInfo\022]\n\020preferred_orders\030\001 \003"
    "(\0132C.protocol.baidu.BidRequest.AdSlot.Pr"
    "eferredOrderInfo.PreferredOrder\022\033\n\rallow"
    "_auction\030\002 \001(\010:\004true\0325\n\016PreferredOrder\022\020"
    "\n\010order_id\030\001 \001(\t\022\021\n\tfixed_cpm\030\002 \001(\003\032\221\002\n\017"
    "GuaranteedOrder\022\020\n\010order_id\030\001 \001(\r\022H\n\006cha"
    "rge\030\002 \001(\01328.protocol.baidu.BidRequest.Ad"
    "Slot.GuaranteedOrder.Charge\032\241\001\n\006Charge\022\r"
    "\n\005price\030\001 \001(\005\022g\n\013charge_mode\030\002 \001(\0162C.pro"
    "tocol.baidu.BidRequest.AdSlot.Guaranteed"
    "Order.Charge.ChargeType:\rCHARGE_GD_CPM\"\037"
    "\n\nChargeType\022\021\n\rCHARGE_GD_CPM\020\002\032\302\003\n\022Expa"
    "ndCreativeInfo\022[\n\022expand_action_type\030\001 \003"
    "(\0162\?.protocol.baidu.BidRequest.AdSlot.Ex"
    "pandCreativeInfo.ActionType\022X\n\020expand_di"
    "rection\030\002 \001(\0162>.protocol.baidu.BidReques"
    "t.AdSlot.ExpandCreativeInfo.Direction\022 \n"
    "\024expand_creative_type\030\003 \003(\005B\002\020\001\022\024\n\014expan"
    "d_width\030\004 \001(\005\022\025\n\rexpand_height\030\005 \001(\005\022\027\n\017"
    "expand_duration\030\006 \001(\005\",\n\nActionType\022\t\n\005H"
    "OVER\020\001\022\t\n\005CLICK\020\002\022\010\n\004LOAD\020\003\"_\n\tDirection"
    "\022\017\n\013EXPAND_NONE\020\000\022\r\n\tEXPAND_UP\020\001\022\017\n\013EXPA"
    "ND_DOWN\020\002\022\017\n\013EXPAND_LEFT\020\003\022\020\n\014EXPAND_RIG"
    "HT\020\004\032\206\003\n\rNativeAdParam\022\027\n\017required_field"
    "s\030\001 \003(\003\022\030\n\020title_max_length\030\002 \001(\005\022\027\n\017des"
    "c_max_length\030\003 \001(\005\022K\n\tlogo_icon\030\004 \001(\01328."
    "protocol.baidu.BidRequest.AdSlot.NativeA"
    "dParam.ImageEle\022G\n\005image\030\005 \001(\01328.protoco"
    "l.baidu.BidRequest.AdSlot.NativeAdParam."
    "ImageEle\022\021\n\timage_num\030\006 \001(\005\032;\n\010ImageEle\022"
    "\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\020\n\005shape\030"
    "\003 \001(\005:\0010\"C\n\006Fields\022\t\n\005TITLE\020\001\022\010\n\004DESC\020\002\022"
    "\t\n\005IMAGE\020\004\022\014\n\010LOGOICON\020\010\022\013\n\007APPSIZE\020\020\"=\n"
    "\020CreativeDescType\022\023\n\017STATIC_CREATIVE\020\001\022\024"
    "\n\020DYNAMIC_CREATIVE\020\002\"I\n\013AdSlotLevel\022\025\n\021U"
    "NKNOWN_ADB_LEVEL\020\000\022\007\n\003TOP\020\001\022\007\n\003MED\020\002\022\010\n\004"
    "TAIL\020\003\022\007\n\003LOW\020\004\"+\n\006Gender\022\013\n\007UNKNOWN\020\000\022\010"
    "\n\004MALE\020\001\022\n\n\006FEMALE\020\002\"\205\n\n\013BidResponse\022\n\n\002"
    "id\030\001 \002(\t\022*\n\002ad\030\002 \003(\0132\036.protocol.baidu.Bi"
    "dResponse.Ad\022\024\n\014debug_string\030\003 \001(\t\022\032\n\022pr"
    "ocessing_time_ms\030\004 \001(\005\032\213\t\n\002Ad\022\023\n\013sequenc"
    "e_id\030\001 \001(\005\022\023\n\013creative_id\030\002 \001(\003\022\024\n\014html_"
    "snippet\030\007 \001(\t\022I\n\021link_unit_keyword\030\022 \001(\013"
    "2..protocol.baidu.BidResponse.Ad.LinkUni"
    "tKeyword\022O\n\024expand_creative_info\030\023 \001(\01321"
    ".protocol.baidu.BidResponse.Ad.ExpandCre"
    "ativeInfo\022\025\n\radvertiser_id\030\010 \001(\004\022\r\n\005widt"
    "h\030\t \001(\005\022\016\n\006height\030\n \001(\005\022\020\n\010category\030\013 \001("
    "\005\022\014\n\004type\030\014 \001(\005\022\024\n\014landing_page\030\r \001(\t\022\022\n"
    "\ntarget_url\030\016 \003(\t\022\024\n\014monitor_urls\030\021 \003(\t\022"
    "\017\n\007max_cpm\030\003 \001(\005\022\017\n\007extdata\030\005 \001(\t\022\032\n\022is_"
    "cookie_matching\030\006 \001(\010\022\032\n\022preferred_order"
    "_id\030\017 \001(\t\022\033\n\023guaranteed_order_id\030\024 \001(\r\022B"
    "\n\rdeeplink_info\030\025 \001(\0132+.protocol.baidu.B"
    "idResponse.Ad.DeeplinkInfo\022:\n\tnative_ad\030"
    "\026 \001(\0132\'.protocol.baidu.BidResponse.Ad.Na"
    "tiveAd\032\?\n\017LinkUnitKeyword\022\017\n\007keyword\030\001 \001"
    "(\t\022\033\n\023selected_style_type\030\002 \003(\005\032{\n\022Expan"
    "dCreativeInfo\022\026\n\016creative_width\030\001 \001(\005\022\027\n"
    "\017creative_height\030\002 \001(\005\022\035\n\025creative_landi"
    "ng_page\030\003 \001(\t\022\025\n\rcreative_type\030\004 \001(\005\032f\n\014"
    "DeeplinkInfo\022\024\n\014deeplink_url\030\001 \001(\t\022\023\n\013ap"
    "p_version\030\002 \001(\r\022\024\n\014fallback_url\030\003 \001(\t\022\025\n"
    "\rfallback_type\030\004 \001(\r\032\356\001\n\010NativeAd\022\r\n\005tit"
    "le\030\001 \001(\014\022\014\n\004desc\030\002 \001(\014\022<\n\005image\030\003 \003(\0132-."
    "protocol.baidu.BidResponse.Ad.NativeAd.I"
    "mage\022@\n\tlogo_icon\030\004 \001(\0132-.protocol.baidu"
    ".BidResponse.Ad.NativeAd.Image\022\020\n\010app_si"
    "ze\030\005 \001(\005\0323\n\005Image\022\013\n\003url\030\001 \001(\t\022\r\n\005width\030"
    "\002 \001(\005\022\016\n\006height\030\003 \001(\005*\005\010d\020\310\001:1\n\tad_statu"
    "s\022\036.protocol.baidu.BidResponse.Ad\030e \001(\005", 7359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "baidu_bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_BaiduId::default_instance_ = new BidRequest_BaiduId();
  BidRequest_CustomizedUserTag::default_instance_ = new BidRequest_CustomizedUserTag();
  BidRequest_CustomizedUserTag_AmsTag::default_instance_ = new BidRequest_CustomizedUserTag_AmsTag();
  BidRequest_Geo::default_instance_ = new BidRequest_Geo();
  BidRequest_Geo_Coordinate::default_instance_ = new BidRequest_Geo_Coordinate();
  BidRequest_Geo_UserLocation::default_instance_ = new BidRequest_Geo_UserLocation();
  BidRequest_Mobile::default_instance_ = new BidRequest_Mobile();
  BidRequest_Mobile_MobileID::default_instance_ = new BidRequest_Mobile_MobileID();
  BidRequest_Mobile_DeviceOsVersion::default_instance_ = new BidRequest_Mobile_DeviceOsVersion();
  BidRequest_Mobile_ForAdvertisingID::default_instance_ = new BidRequest_Mobile_ForAdvertisingID();
  BidRequest_Mobile_MobileApp::default_instance_ = new BidRequest_Mobile_MobileApp();
  BidRequest_Video::default_instance_ = new BidRequest_Video();
  BidRequest_AdSlot::default_instance_ = new BidRequest_AdSlot();
  BidRequest_AdSlot_VideoInfo::default_instance_ = new BidRequest_AdSlot_VideoInfo();
  BidRequest_AdSlot_LinkUnitInfo::default_instance_ = new BidRequest_AdSlot_LinkUnitInfo();
  BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::default_instance_ = new BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword();
  BidRequest_AdSlot_PreferredOrderInfo::default_instance_ = new BidRequest_AdSlot_PreferredOrderInfo();
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_ = new BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder();
  BidRequest_AdSlot_GuaranteedOrder::default_instance_ = new BidRequest_AdSlot_GuaranteedOrder();
  BidRequest_AdSlot_GuaranteedOrder_Charge::default_instance_ = new BidRequest_AdSlot_GuaranteedOrder_Charge();
  BidRequest_AdSlot_ExpandCreativeInfo::default_instance_ = new BidRequest_AdSlot_ExpandCreativeInfo();
  BidRequest_AdSlot_NativeAdParam::default_instance_ = new BidRequest_AdSlot_NativeAdParam();
  BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance_ = new BidRequest_AdSlot_NativeAdParam_ImageEle();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Ad::default_instance_ = new BidResponse_Ad();
  BidResponse_Ad_LinkUnitKeyword::default_instance_ = new BidResponse_Ad_LinkUnitKeyword();
  BidResponse_Ad_ExpandCreativeInfo::default_instance_ = new BidResponse_Ad_ExpandCreativeInfo();
  BidResponse_Ad_DeeplinkInfo::default_instance_ = new BidResponse_Ad_DeeplinkInfo();
  BidResponse_Ad_NativeAd::default_instance_ = new BidResponse_Ad_NativeAd();
  BidResponse_Ad_NativeAd_Image::default_instance_ = new BidResponse_Ad_NativeAd_Image();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::protocol::baidu::BidResponse_Ad::default_instance(),
    101, 5, false, false);
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_BaiduId::default_instance_->InitAsDefaultInstance();
  BidRequest_CustomizedUserTag::default_instance_->InitAsDefaultInstance();
  BidRequest_CustomizedUserTag_AmsTag::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo_Coordinate::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo_UserLocation::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_MobileID::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_DeviceOsVersion::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_ForAdvertisingID::default_instance_->InitAsDefaultInstance();
  BidRequest_Mobile_MobileApp::default_instance_->InitAsDefaultInstance();
  BidRequest_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_VideoInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_LinkUnitInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_PreferredOrderInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_GuaranteedOrder::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_GuaranteedOrder_Charge::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_ExpandCreativeInfo::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_NativeAdParam::default_instance_->InitAsDefaultInstance();
  BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_LinkUnitKeyword::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_ExpandCreativeInfo::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_DeeplinkInfo::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_NativeAd::default_instance_->InitAsDefaultInstance();
  BidResponse_Ad_NativeAd_Image::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_baidu_5fbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_baidu_5fbidding_2eproto {
  StaticDescriptorInitializer_baidu_5fbidding_2eproto() {
    protobuf_AddDesc_baidu_5fbidding_2eproto();
  }
} static_descriptor_initializer_baidu_5fbidding_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Gender_descriptor_;
}
bool BidRequest_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Gender BidRequest::UNKNOWN;
const BidRequest_Gender BidRequest::MALE;
const BidRequest_Gender BidRequest::FEMALE;
const BidRequest_Gender BidRequest::Gender_MIN;
const BidRequest_Gender BidRequest::Gender_MAX;
const int BidRequest::Gender_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_BaiduId::kBaiduUserIdFieldNumber;
const int BidRequest_BaiduId::kBaiduUserIdVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_BaiduId::BidRequest_BaiduId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.BaiduId)
}

void BidRequest_BaiduId::InitAsDefaultInstance() {
}

BidRequest_BaiduId::BidRequest_BaiduId(const BidRequest_BaiduId& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.BaiduId)
}

void BidRequest_BaiduId::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  baidu_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baidu_user_id_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_BaiduId::~BidRequest_BaiduId() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.BaiduId)
  SharedDtor();
}

void BidRequest_BaiduId::SharedDtor() {
  baidu_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_BaiduId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_BaiduId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_BaiduId_descriptor_;
}

const BidRequest_BaiduId& BidRequest_BaiduId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_BaiduId* BidRequest_BaiduId::default_instance_ = NULL;

BidRequest_BaiduId* BidRequest_BaiduId::New(::google::protobuf::Arena* arena) const {
  BidRequest_BaiduId* n = new BidRequest_BaiduId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_BaiduId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.BaiduId)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_baidu_user_id()) {
      baidu_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    baidu_user_id_version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_BaiduId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.BaiduId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string baidu_user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baidu_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->baidu_user_id().data(), this->baidu_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.BaiduId.baidu_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_baidu_user_id_version;
        break;
      }

      // optional int32 baidu_user_id_version = 2;
      case 2: {
        if (tag == 16) {
         parse_baidu_user_id_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baidu_user_id_version_)));
          set_has_baidu_user_id_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.BaiduId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.BaiduId)
  return false;
#undef DO_
}

void BidRequest_BaiduId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.BaiduId)
  // optional string baidu_user_id = 1;
  if (has_baidu_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baidu_user_id().data(), this->baidu_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.BaiduId.baidu_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->baidu_user_id(), output);
  }

  // optional int32 baidu_user_id_version = 2;
  if (has_baidu_user_id_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->baidu_user_id_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.BaiduId)
}

::google::protobuf::uint8* BidRequest_BaiduId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.BaiduId)
  // optional string baidu_user_id = 1;
  if (has_baidu_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baidu_user_id().data(), this->baidu_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.BaiduId.baidu_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->baidu_user_id(), target);
  }

  // optional int32 baidu_user_id_version = 2;
  if (has_baidu_user_id_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->baidu_user_id_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.BaiduId)
  return target;
}

int BidRequest_BaiduId::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.BaiduId)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string baidu_user_id = 1;
    if (has_baidu_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baidu_user_id());
    }

    // optional int32 baidu_user_id_version = 2;
    if (has_baidu_user_id_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baidu_user_id_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_BaiduId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.BaiduId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_BaiduId* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_BaiduId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.BaiduId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.BaiduId)
    MergeFrom(*source);
  }
}

void BidRequest_BaiduId::MergeFrom(const BidRequest_BaiduId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.BaiduId)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baidu_user_id()) {
      set_has_baidu_user_id();
      baidu_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.baidu_user_id_);
    }
    if (from.has_baidu_user_id_version()) {
      set_baidu_user_id_version(from.baidu_user_id_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_BaiduId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.BaiduId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_BaiduId::CopyFrom(const BidRequest_BaiduId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.BaiduId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_BaiduId::IsInitialized() const {

  return true;
}

void BidRequest_BaiduId::Swap(BidRequest_BaiduId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_BaiduId::InternalSwap(BidRequest_BaiduId* other) {
  baidu_user_id_.Swap(&other->baidu_user_id_);
  std::swap(baidu_user_id_version_, other->baidu_user_id_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_BaiduId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_BaiduId_descriptor_;
  metadata.reflection = BidRequest_BaiduId_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_CustomizedUserTag_AmsTag::kTagIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_CustomizedUserTag_AmsTag::BidRequest_CustomizedUserTag_AmsTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
}

void BidRequest_CustomizedUserTag_AmsTag::InitAsDefaultInstance() {
}

BidRequest_CustomizedUserTag_AmsTag::BidRequest_CustomizedUserTag_AmsTag(const BidRequest_CustomizedUserTag_AmsTag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
}

void BidRequest_CustomizedUserTag_AmsTag::SharedCtor() {
  _cached_size_ = 0;
  tag_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_CustomizedUserTag_AmsTag::~BidRequest_CustomizedUserTag_AmsTag() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  SharedDtor();
}

void BidRequest_CustomizedUserTag_AmsTag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_CustomizedUserTag_AmsTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_CustomizedUserTag_AmsTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_CustomizedUserTag_AmsTag_descriptor_;
}

const BidRequest_CustomizedUserTag_AmsTag& BidRequest_CustomizedUserTag_AmsTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_CustomizedUserTag_AmsTag* BidRequest_CustomizedUserTag_AmsTag::default_instance_ = NULL;

BidRequest_CustomizedUserTag_AmsTag* BidRequest_CustomizedUserTag_AmsTag::New(::google::protobuf::Arena* arena) const {
  BidRequest_CustomizedUserTag_AmsTag* n = new BidRequest_CustomizedUserTag_AmsTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_CustomizedUserTag_AmsTag::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  tag_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_CustomizedUserTag_AmsTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tag_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_id_)));
          set_has_tag_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  return false;
#undef DO_
}

void BidRequest_CustomizedUserTag_AmsTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  // optional uint64 tag_id = 1;
  if (has_tag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tag_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
}

::google::protobuf::uint8* BidRequest_CustomizedUserTag_AmsTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  // optional uint64 tag_id = 1;
  if (has_tag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tag_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  return target;
}

int BidRequest_CustomizedUserTag_AmsTag::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  int total_size = 0;

  // optional uint64 tag_id = 1;
  if (has_tag_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tag_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_CustomizedUserTag_AmsTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_CustomizedUserTag_AmsTag* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_CustomizedUserTag_AmsTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
    MergeFrom(*source);
  }
}

void BidRequest_CustomizedUserTag_AmsTag::MergeFrom(const BidRequest_CustomizedUserTag_AmsTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag_id()) {
      set_tag_id(from.tag_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_CustomizedUserTag_AmsTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_CustomizedUserTag_AmsTag::CopyFrom(const BidRequest_CustomizedUserTag_AmsTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_CustomizedUserTag_AmsTag::IsInitialized() const {

  return true;
}

void BidRequest_CustomizedUserTag_AmsTag::Swap(BidRequest_CustomizedUserTag_AmsTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_CustomizedUserTag_AmsTag::InternalSwap(BidRequest_CustomizedUserTag_AmsTag* other) {
  std::swap(tag_id_, other->tag_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_CustomizedUserTag_AmsTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_CustomizedUserTag_AmsTag_descriptor_;
  metadata.reflection = BidRequest_CustomizedUserTag_AmsTag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_CustomizedUserTag::kAmsTagListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_CustomizedUserTag::BidRequest_CustomizedUserTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.CustomizedUserTag)
}

void BidRequest_CustomizedUserTag::InitAsDefaultInstance() {
}

BidRequest_CustomizedUserTag::BidRequest_CustomizedUserTag(const BidRequest_CustomizedUserTag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.CustomizedUserTag)
}

void BidRequest_CustomizedUserTag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_CustomizedUserTag::~BidRequest_CustomizedUserTag() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.CustomizedUserTag)
  SharedDtor();
}

void BidRequest_CustomizedUserTag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_CustomizedUserTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_CustomizedUserTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_CustomizedUserTag_descriptor_;
}

const BidRequest_CustomizedUserTag& BidRequest_CustomizedUserTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_CustomizedUserTag* BidRequest_CustomizedUserTag::default_instance_ = NULL;

BidRequest_CustomizedUserTag* BidRequest_CustomizedUserTag::New(::google::protobuf::Arena* arena) const {
  BidRequest_CustomizedUserTag* n = new BidRequest_CustomizedUserTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_CustomizedUserTag::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.CustomizedUserTag)
  ams_tag_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_CustomizedUserTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.CustomizedUserTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.baidu.BidRequest.CustomizedUserTag.AmsTag ams_tag_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_ams_tag_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ams_tag_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_ams_tag_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.CustomizedUserTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.CustomizedUserTag)
  return false;
#undef DO_
}

void BidRequest_CustomizedUserTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.CustomizedUserTag)
  // repeated .protocol.baidu.BidRequest.CustomizedUserTag.AmsTag ams_tag_list = 1;
  for (unsigned int i = 0, n = this->ams_tag_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ams_tag_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.CustomizedUserTag)
}

::google::protobuf::uint8* BidRequest_CustomizedUserTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.CustomizedUserTag)
  // repeated .protocol.baidu.BidRequest.CustomizedUserTag.AmsTag ams_tag_list = 1;
  for (unsigned int i = 0, n = this->ams_tag_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->ams_tag_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.CustomizedUserTag)
  return target;
}

int BidRequest_CustomizedUserTag::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.CustomizedUserTag)
  int total_size = 0;

  // repeated .protocol.baidu.BidRequest.CustomizedUserTag.AmsTag ams_tag_list = 1;
  total_size += 1 * this->ams_tag_list_size();
  for (int i = 0; i < this->ams_tag_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ams_tag_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_CustomizedUserTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.CustomizedUserTag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_CustomizedUserTag* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_CustomizedUserTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.CustomizedUserTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.CustomizedUserTag)
    MergeFrom(*source);
  }
}

void BidRequest_CustomizedUserTag::MergeFrom(const BidRequest_CustomizedUserTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.CustomizedUserTag)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ams_tag_list_.MergeFrom(from.ams_tag_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_CustomizedUserTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.CustomizedUserTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_CustomizedUserTag::CopyFrom(const BidRequest_CustomizedUserTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.CustomizedUserTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_CustomizedUserTag::IsInitialized() const {

  return true;
}

void BidRequest_CustomizedUserTag::Swap(BidRequest_CustomizedUserTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_CustomizedUserTag::InternalSwap(BidRequest_CustomizedUserTag* other) {
  ams_tag_list_.UnsafeArenaSwap(&other->ams_tag_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_CustomizedUserTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_CustomizedUserTag_descriptor_;
  metadata.reflection = BidRequest_CustomizedUserTag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Geo_Coordinate_Standard_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_Coordinate_Standard_descriptor_;
}
bool BidRequest_Geo_Coordinate_Standard_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::BD_09;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::GCJ_02;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::WGS_84;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::BD_09_LL;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::Standard_MIN;
const BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::Standard_MAX;
const int BidRequest_Geo_Coordinate::Standard_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Geo_Coordinate::kStandardFieldNumber;
const int BidRequest_Geo_Coordinate::kLatitudeFieldNumber;
const int BidRequest_Geo_Coordinate::kLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Geo_Coordinate::BidRequest_Geo_Coordinate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Geo.Coordinate)
}

void BidRequest_Geo_Coordinate::InitAsDefaultInstance() {
}

BidRequest_Geo_Coordinate::BidRequest_Geo_Coordinate(const BidRequest_Geo_Coordinate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Geo.Coordinate)
}

void BidRequest_Geo_Coordinate::SharedCtor() {
  _cached_size_ = 0;
  standard_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo_Coordinate::~BidRequest_Geo_Coordinate() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Geo.Coordinate)
  SharedDtor();
}

void BidRequest_Geo_Coordinate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Geo_Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo_Coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_Coordinate_descriptor_;
}

const BidRequest_Geo_Coordinate& BidRequest_Geo_Coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Geo_Coordinate* BidRequest_Geo_Coordinate::default_instance_ = NULL;

BidRequest_Geo_Coordinate* BidRequest_Geo_Coordinate::New(::google::protobuf::Arena* arena) const {
  BidRequest_Geo_Coordinate* n = new BidRequest_Geo_Coordinate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Geo_Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Geo.Coordinate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Geo_Coordinate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Geo_Coordinate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(standard_, longitude_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Geo_Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Geo.Coordinate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.baidu.BidRequest.Geo.Coordinate.Standard standard = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_Geo_Coordinate_Standard_IsValid(value)) {
            set_standard(static_cast< ::protocol::baidu::BidRequest_Geo_Coordinate_Standard >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_latitude;
        break;
      }

      // optional float latitude = 2;
      case 2: {
        if (tag == 21) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_longitude;
        break;
      }

      // optional float longitude = 3;
      case 3: {
        if (tag == 29) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Geo.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Geo.Coordinate)
  return false;
#undef DO_
}

void BidRequest_Geo_Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Geo.Coordinate)
  // optional .protocol.baidu.BidRequest.Geo.Coordinate.Standard standard = 1;
  if (has_standard()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->standard(), output);
  }

  // optional float latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->latitude(), output);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Geo.Coordinate)
}

::google::protobuf::uint8* BidRequest_Geo_Coordinate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Geo.Coordinate)
  // optional .protocol.baidu.BidRequest.Geo.Coordinate.Standard standard = 1;
  if (has_standard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->standard(), target);
  }

  // optional float latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->latitude(), target);
  }

  // optional float longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Geo.Coordinate)
  return target;
}

int BidRequest_Geo_Coordinate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Geo.Coordinate)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .protocol.baidu.BidRequest.Geo.Coordinate.Standard standard = 1;
    if (has_standard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->standard());
    }

    // optional float latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo_Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Geo.Coordinate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Geo_Coordinate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Geo_Coordinate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Geo.Coordinate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Geo.Coordinate)
    MergeFrom(*source);
  }
}

void BidRequest_Geo_Coordinate::MergeFrom(const BidRequest_Geo_Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Geo.Coordinate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_standard()) {
      set_standard(from.standard());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Geo_Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Geo.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo_Coordinate::CopyFrom(const BidRequest_Geo_Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Geo.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo_Coordinate::IsInitialized() const {

  return true;
}

void BidRequest_Geo_Coordinate::Swap(BidRequest_Geo_Coordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Geo_Coordinate::InternalSwap(BidRequest_Geo_Coordinate* other) {
  std::swap(standard_, other->standard_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Geo_Coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_Coordinate_descriptor_;
  metadata.reflection = BidRequest_Geo_Coordinate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Geo_UserLocation::kProvinceFieldNumber;
const int BidRequest_Geo_UserLocation::kCityFieldNumber;
const int BidRequest_Geo_UserLocation::kDistrictFieldNumber;
const int BidRequest_Geo_UserLocation::kStreetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Geo_UserLocation::BidRequest_Geo_UserLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Geo.UserLocation)
}

void BidRequest_Geo_UserLocation::InitAsDefaultInstance() {
}

BidRequest_Geo_UserLocation::BidRequest_Geo_UserLocation(const BidRequest_Geo_UserLocation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Geo.UserLocation)
}

void BidRequest_Geo_UserLocation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo_UserLocation::~BidRequest_Geo_UserLocation() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Geo.UserLocation)
  SharedDtor();
}

void BidRequest_Geo_UserLocation::SharedDtor() {
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Geo_UserLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo_UserLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_UserLocation_descriptor_;
}

const BidRequest_Geo_UserLocation& BidRequest_Geo_UserLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Geo_UserLocation* BidRequest_Geo_UserLocation::default_instance_ = NULL;

BidRequest_Geo_UserLocation* BidRequest_Geo_UserLocation::New(::google::protobuf::Arena* arena) const {
  BidRequest_Geo_UserLocation* n = new BidRequest_Geo_UserLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Geo_UserLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Geo.UserLocation)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_province()) {
      province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_city()) {
      city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_district()) {
      district_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_street()) {
      street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Geo_UserLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Geo.UserLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Geo.UserLocation.province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // optional string city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Geo.UserLocation.city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_district;
        break;
      }

      // optional string district = 3;
      case 3: {
        if (tag == 26) {
         parse_district:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->district().data(), this->district().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Geo.UserLocation.district");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_street;
        break;
      }

      // optional string street = 4;
      case 4: {
        if (tag == 34) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Geo.UserLocation.street");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Geo.UserLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Geo.UserLocation)
  return false;
#undef DO_
}

void BidRequest_Geo_UserLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Geo.UserLocation)
  // optional string province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Geo.UserLocation.province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->province(), output);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Geo.UserLocation.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city(), output);
  }

  // optional string district = 3;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Geo.UserLocation.district");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->district(), output);
  }

  // optional string street = 4;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Geo.UserLocation.street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->street(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Geo.UserLocation)
}

::google::protobuf::uint8* BidRequest_Geo_UserLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Geo.UserLocation)
  // optional string province = 1;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Geo.UserLocation.province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->province(), target);
  }

  // optional string city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Geo.UserLocation.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }

  // optional string district = 3;
  if (has_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->district().data(), this->district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Geo.UserLocation.district");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->district(), target);
  }

  // optional string street = 4;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Geo.UserLocation.street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->street(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Geo.UserLocation)
  return target;
}

int BidRequest_Geo_UserLocation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Geo.UserLocation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string district = 3;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->district());
    }

    // optional string street = 4;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo_UserLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Geo.UserLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Geo_UserLocation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Geo_UserLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Geo.UserLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Geo.UserLocation)
    MergeFrom(*source);
  }
}

void BidRequest_Geo_UserLocation::MergeFrom(const BidRequest_Geo_UserLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Geo.UserLocation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (from.has_city()) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (from.has_district()) {
      set_has_district();
      district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.district_);
    }
    if (from.has_street()) {
      set_has_street();
      street_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.street_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Geo_UserLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Geo.UserLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo_UserLocation::CopyFrom(const BidRequest_Geo_UserLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Geo.UserLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo_UserLocation::IsInitialized() const {

  return true;
}

void BidRequest_Geo_UserLocation::Swap(BidRequest_Geo_UserLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Geo_UserLocation::InternalSwap(BidRequest_Geo_UserLocation* other) {
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  district_.Swap(&other->district_);
  street_.Swap(&other->street_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Geo_UserLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_UserLocation_descriptor_;
  metadata.reflection = BidRequest_Geo_UserLocation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Geo::kUserCoordinateFieldNumber;
const int BidRequest_Geo::kUserLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Geo::BidRequest_Geo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Geo)
}

void BidRequest_Geo::InitAsDefaultInstance() {
  user_location_ = const_cast< ::protocol::baidu::BidRequest_Geo_UserLocation*>(&::protocol::baidu::BidRequest_Geo_UserLocation::default_instance());
}

BidRequest_Geo::BidRequest_Geo(const BidRequest_Geo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Geo)
}

void BidRequest_Geo::SharedCtor() {
  _cached_size_ = 0;
  user_location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo::~BidRequest_Geo() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Geo)
  SharedDtor();
}

void BidRequest_Geo::SharedDtor() {
  if (this != default_instance_) {
    delete user_location_;
  }
}

void BidRequest_Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_descriptor_;
}

const BidRequest_Geo& BidRequest_Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Geo* BidRequest_Geo::default_instance_ = NULL;

BidRequest_Geo* BidRequest_Geo::New(::google::protobuf::Arena* arena) const {
  BidRequest_Geo* n = new BidRequest_Geo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Geo)
  if (has_user_location()) {
    if (user_location_ != NULL) user_location_->::protocol::baidu::BidRequest_Geo_UserLocation::Clear();
  }
  user_coordinate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.baidu.BidRequest.Geo.Coordinate user_coordinate = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_coordinate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_coordinate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_user_coordinate;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_user_location;
        break;
      }

      // optional .protocol.baidu.BidRequest.Geo.UserLocation user_location = 2;
      case 2: {
        if (tag == 18) {
         parse_user_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Geo)
  return false;
#undef DO_
}

void BidRequest_Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Geo)
  // repeated .protocol.baidu.BidRequest.Geo.Coordinate user_coordinate = 1;
  for (unsigned int i = 0, n = this->user_coordinate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_coordinate(i), output);
  }

  // optional .protocol.baidu.BidRequest.Geo.UserLocation user_location = 2;
  if (has_user_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Geo)
}

::google::protobuf::uint8* BidRequest_Geo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Geo)
  // repeated .protocol.baidu.BidRequest.Geo.Coordinate user_coordinate = 1;
  for (unsigned int i = 0, n = this->user_coordinate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->user_coordinate(i), false, target);
  }

  // optional .protocol.baidu.BidRequest.Geo.UserLocation user_location = 2;
  if (has_user_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_location_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Geo)
  return target;
}

int BidRequest_Geo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Geo)
  int total_size = 0;

  // optional .protocol.baidu.BidRequest.Geo.UserLocation user_location = 2;
  if (has_user_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_location_);
  }

  // repeated .protocol.baidu.BidRequest.Geo.Coordinate user_coordinate = 1;
  total_size += 1 * this->user_coordinate_size();
  for (int i = 0; i < this->user_coordinate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_coordinate(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Geo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Geo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Geo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Geo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Geo)
    MergeFrom(*source);
  }
}

void BidRequest_Geo::MergeFrom(const BidRequest_Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Geo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  user_coordinate_.MergeFrom(from.user_coordinate_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user_location()) {
      mutable_user_location()->::protocol::baidu::BidRequest_Geo_UserLocation::MergeFrom(from.user_location());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Geo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo::CopyFrom(const BidRequest_Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo::IsInitialized() const {

  return true;
}

void BidRequest_Geo::Swap(BidRequest_Geo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Geo::InternalSwap(BidRequest_Geo* other) {
  user_coordinate_.UnsafeArenaSwap(&other->user_coordinate_);
  std::swap(user_location_, other->user_location_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_descriptor_;
  metadata.reflection = BidRequest_Geo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileDeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileDeviceType_descriptor_;
}
bool BidRequest_Mobile_MobileDeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::UNKNOWN_DEVICE;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::HIGHEND_PHONE;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::TABLET;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::MobileDeviceType_MIN;
const BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::MobileDeviceType_MAX;
const int BidRequest_Mobile::MobileDeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_OS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_OS_descriptor_;
}
bool BidRequest_Mobile_OS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_OS BidRequest_Mobile::UNKNOWN_OS;
const BidRequest_Mobile_OS BidRequest_Mobile::IOS;
const BidRequest_Mobile_OS BidRequest_Mobile::ANDROID;
const BidRequest_Mobile_OS BidRequest_Mobile::WINDOWS_PHONE;
const BidRequest_Mobile_OS BidRequest_Mobile::OS_MIN;
const BidRequest_Mobile_OS BidRequest_Mobile::OS_MAX;
const int BidRequest_Mobile::OS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_WirelessNetworkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_WirelessNetworkType_descriptor_;
}
bool BidRequest_Mobile_WirelessNetworkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::UNKNOWN_NETWORK;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::WIFI;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::MOBILE_2G;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::MOBILE_3G;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::MOBILE_4G;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::WirelessNetworkType_MIN;
const BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::WirelessNetworkType_MAX;
const int BidRequest_Mobile::WirelessNetworkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileID_IDType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileID_IDType_descriptor_;
}
bool BidRequest_Mobile_MobileID_IDType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::UNKNOWN;
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::IMEI;
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::MAC;
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::IDType_MIN;
const BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::IDType_MAX;
const int BidRequest_Mobile_MobileID::IDType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_MobileID::kTypeFieldNumber;
const int BidRequest_Mobile_MobileID::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_MobileID::BidRequest_Mobile_MobileID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Mobile.MobileID)
}

void BidRequest_Mobile_MobileID::InitAsDefaultInstance() {
}

BidRequest_Mobile_MobileID::BidRequest_Mobile_MobileID(const BidRequest_Mobile_MobileID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Mobile.MobileID)
}

void BidRequest_Mobile_MobileID::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_MobileID::~BidRequest_Mobile_MobileID() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Mobile.MobileID)
  SharedDtor();
}

void BidRequest_Mobile_MobileID::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_MobileID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_MobileID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileID_descriptor_;
}

const BidRequest_Mobile_MobileID& BidRequest_Mobile_MobileID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_MobileID* BidRequest_Mobile_MobileID::default_instance_ = NULL;

BidRequest_Mobile_MobileID* BidRequest_Mobile_MobileID::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_MobileID* n = new BidRequest_Mobile_MobileID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_MobileID::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Mobile.MobileID)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 0;
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_MobileID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Mobile.MobileID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.baidu.BidRequest.Mobile.MobileID.IDType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_Mobile_MobileID_IDType_IsValid(value)) {
            set_type(static_cast< ::protocol::baidu::BidRequest_Mobile_MobileID_IDType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Mobile.MobileID.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Mobile.MobileID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Mobile.MobileID)
  return false;
#undef DO_
}

void BidRequest_Mobile_MobileID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Mobile.MobileID)
  // optional .protocol.baidu.BidRequest.Mobile.MobileID.IDType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.MobileID.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Mobile.MobileID)
}

::google::protobuf::uint8* BidRequest_Mobile_MobileID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Mobile.MobileID)
  // optional .protocol.baidu.BidRequest.Mobile.MobileID.IDType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.MobileID.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Mobile.MobileID)
  return target;
}

int BidRequest_Mobile_MobileID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Mobile.MobileID)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.baidu.BidRequest.Mobile.MobileID.IDType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_MobileID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Mobile.MobileID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_MobileID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_MobileID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Mobile.MobileID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Mobile.MobileID)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_MobileID::MergeFrom(const BidRequest_Mobile_MobileID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Mobile.MobileID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_MobileID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Mobile.MobileID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_MobileID::CopyFrom(const BidRequest_Mobile_MobileID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Mobile.MobileID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_MobileID::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_MobileID::Swap(BidRequest_Mobile_MobileID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_MobileID::InternalSwap(BidRequest_Mobile_MobileID* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_MobileID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_MobileID_descriptor_;
  metadata.reflection = BidRequest_Mobile_MobileID_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMajorFieldNumber;
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMinorFieldNumber;
const int BidRequest_Mobile_DeviceOsVersion::kOsVersionMicroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_DeviceOsVersion::BidRequest_Mobile_DeviceOsVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
}

void BidRequest_Mobile_DeviceOsVersion::InitAsDefaultInstance() {
}

BidRequest_Mobile_DeviceOsVersion::BidRequest_Mobile_DeviceOsVersion(const BidRequest_Mobile_DeviceOsVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
}

void BidRequest_Mobile_DeviceOsVersion::SharedCtor() {
  _cached_size_ = 0;
  os_version_major_ = 0;
  os_version_minor_ = 0;
  os_version_micro_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_DeviceOsVersion::~BidRequest_Mobile_DeviceOsVersion() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  SharedDtor();
}

void BidRequest_Mobile_DeviceOsVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_DeviceOsVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_DeviceOsVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_DeviceOsVersion_descriptor_;
}

const BidRequest_Mobile_DeviceOsVersion& BidRequest_Mobile_DeviceOsVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile_DeviceOsVersion::default_instance_ = NULL;

BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile_DeviceOsVersion::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_DeviceOsVersion* n = new BidRequest_Mobile_DeviceOsVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_DeviceOsVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Mobile_DeviceOsVersion, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile_DeviceOsVersion*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(os_version_major_, os_version_micro_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_DeviceOsVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 os_version_major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_major_)));
          set_has_os_version_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_os_version_minor;
        break;
      }

      // optional int32 os_version_minor = 2;
      case 2: {
        if (tag == 16) {
         parse_os_version_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_minor_)));
          set_has_os_version_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_os_version_micro;
        break;
      }

      // optional int32 os_version_micro = 3;
      case 3: {
        if (tag == 24) {
         parse_os_version_micro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_version_micro_)));
          set_has_os_version_micro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  return false;
#undef DO_
}

void BidRequest_Mobile_DeviceOsVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  // optional int32 os_version_major = 1;
  if (has_os_version_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->os_version_major(), output);
  }

  // optional int32 os_version_minor = 2;
  if (has_os_version_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->os_version_minor(), output);
  }

  // optional int32 os_version_micro = 3;
  if (has_os_version_micro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->os_version_micro(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
}

::google::protobuf::uint8* BidRequest_Mobile_DeviceOsVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  // optional int32 os_version_major = 1;
  if (has_os_version_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->os_version_major(), target);
  }

  // optional int32 os_version_minor = 2;
  if (has_os_version_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->os_version_minor(), target);
  }

  // optional int32 os_version_micro = 3;
  if (has_os_version_micro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->os_version_micro(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  return target;
}

int BidRequest_Mobile_DeviceOsVersion::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 os_version_major = 1;
    if (has_os_version_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_major());
    }

    // optional int32 os_version_minor = 2;
    if (has_os_version_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_minor());
    }

    // optional int32 os_version_micro = 3;
    if (has_os_version_micro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_version_micro());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_DeviceOsVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_DeviceOsVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_DeviceOsVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_DeviceOsVersion::MergeFrom(const BidRequest_Mobile_DeviceOsVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_version_major()) {
      set_os_version_major(from.os_version_major());
    }
    if (from.has_os_version_minor()) {
      set_os_version_minor(from.os_version_minor());
    }
    if (from.has_os_version_micro()) {
      set_os_version_micro(from.os_version_micro());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_DeviceOsVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_DeviceOsVersion::CopyFrom(const BidRequest_Mobile_DeviceOsVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Mobile.DeviceOsVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_DeviceOsVersion::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_DeviceOsVersion::Swap(BidRequest_Mobile_DeviceOsVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_DeviceOsVersion::InternalSwap(BidRequest_Mobile_DeviceOsVersion* other) {
  std::swap(os_version_major_, other->os_version_major_);
  std::swap(os_version_minor_, other->os_version_minor_);
  std::swap(os_version_micro_, other->os_version_micro_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_DeviceOsVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_DeviceOsVersion_descriptor_;
  metadata.reflection = BidRequest_Mobile_DeviceOsVersion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_ForAdvertisingID_IDType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_ForAdvertisingID_IDType_descriptor_;
}
bool BidRequest_Mobile_ForAdvertisingID_IDType_IsValid(int value) {
  switch(value) {
    case 0:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::UNKNOWN;
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::ANDROID_ID;
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::IDFA;
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::IDType_MIN;
const BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::IDType_MAX;
const int BidRequest_Mobile_ForAdvertisingID::IDType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_ForAdvertisingID::kTypeFieldNumber;
const int BidRequest_Mobile_ForAdvertisingID::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_ForAdvertisingID::BidRequest_Mobile_ForAdvertisingID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
}

void BidRequest_Mobile_ForAdvertisingID::InitAsDefaultInstance() {
}

BidRequest_Mobile_ForAdvertisingID::BidRequest_Mobile_ForAdvertisingID(const BidRequest_Mobile_ForAdvertisingID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
}

void BidRequest_Mobile_ForAdvertisingID::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_ForAdvertisingID::~BidRequest_Mobile_ForAdvertisingID() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  SharedDtor();
}

void BidRequest_Mobile_ForAdvertisingID::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_ForAdvertisingID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_ForAdvertisingID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_ForAdvertisingID_descriptor_;
}

const BidRequest_Mobile_ForAdvertisingID& BidRequest_Mobile_ForAdvertisingID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_ForAdvertisingID* BidRequest_Mobile_ForAdvertisingID::default_instance_ = NULL;

BidRequest_Mobile_ForAdvertisingID* BidRequest_Mobile_ForAdvertisingID::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_ForAdvertisingID* n = new BidRequest_Mobile_ForAdvertisingID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_ForAdvertisingID::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 0;
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_ForAdvertisingID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.baidu.BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_Mobile_ForAdvertisingID_IDType_IsValid(value)) {
            set_type(static_cast< ::protocol::baidu::BidRequest_Mobile_ForAdvertisingID_IDType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (tag == 18) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  return false;
#undef DO_
}

void BidRequest_Mobile_ForAdvertisingID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  // optional .protocol.baidu.BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
}

::google::protobuf::uint8* BidRequest_Mobile_ForAdvertisingID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  // optional .protocol.baidu.BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  return target;
}

int BidRequest_Mobile_ForAdvertisingID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.baidu.BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_ForAdvertisingID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_ForAdvertisingID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_ForAdvertisingID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_ForAdvertisingID::MergeFrom(const BidRequest_Mobile_ForAdvertisingID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_ForAdvertisingID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_ForAdvertisingID::CopyFrom(const BidRequest_Mobile_ForAdvertisingID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Mobile.ForAdvertisingID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_ForAdvertisingID::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_ForAdvertisingID::Swap(BidRequest_Mobile_ForAdvertisingID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_ForAdvertisingID::InternalSwap(BidRequest_Mobile_ForAdvertisingID* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_ForAdvertisingID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_ForAdvertisingID_descriptor_;
  metadata.reflection = BidRequest_Mobile_ForAdvertisingID_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Mobile_MobileApp_AppInteractionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileApp_AppInteractionType_descriptor_;
}
bool BidRequest_Mobile_MobileApp_AppInteractionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::TELEPHONE;
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::DOWNLOAD;
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::DEEPLINK;
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::AppInteractionType_MIN;
const BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::AppInteractionType_MAX;
const int BidRequest_Mobile_MobileApp::AppInteractionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile_MobileApp::kAppIdFieldNumber;
const int BidRequest_Mobile_MobileApp::kAppBundleIdFieldNumber;
const int BidRequest_Mobile_MobileApp::kAppCategoryFieldNumber;
const int BidRequest_Mobile_MobileApp::kAppPublisherIdFieldNumber;
const int BidRequest_Mobile_MobileApp::kAppInteractionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile_MobileApp::BidRequest_Mobile_MobileApp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Mobile.MobileApp)
}

void BidRequest_Mobile_MobileApp::InitAsDefaultInstance() {
}

BidRequest_Mobile_MobileApp::BidRequest_Mobile_MobileApp(const BidRequest_Mobile_MobileApp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Mobile.MobileApp)
}

void BidRequest_Mobile_MobileApp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_bundle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_category_ = 0;
  app_publisher_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile_MobileApp::~BidRequest_Mobile_MobileApp() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Mobile.MobileApp)
  SharedDtor();
}

void BidRequest_Mobile_MobileApp::SharedDtor() {
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_bundle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Mobile_MobileApp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile_MobileApp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_MobileApp_descriptor_;
}

const BidRequest_Mobile_MobileApp& BidRequest_Mobile_MobileApp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile_MobileApp* BidRequest_Mobile_MobileApp::default_instance_ = NULL;

BidRequest_Mobile_MobileApp* BidRequest_Mobile_MobileApp::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile_MobileApp* n = new BidRequest_Mobile_MobileApp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile_MobileApp::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Mobile.MobileApp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Mobile_MobileApp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile_MobileApp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(app_category_, app_publisher_id_);
    if (has_app_id()) {
      app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_app_bundle_id()) {
      app_bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  app_interaction_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile_MobileApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Mobile.MobileApp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string app_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Mobile.MobileApp.app_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_app_bundle_id;
        break;
      }

      // optional string app_bundle_id = 2;
      case 2: {
        if (tag == 18) {
         parse_app_bundle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_bundle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_bundle_id().data(), this->app_bundle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_app_category;
        break;
      }

      // optional int32 app_category = 3;
      case 3: {
        if (tag == 24) {
         parse_app_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_category_)));
          set_has_app_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_app_publisher_id;
        break;
      }

      // optional int32 app_publisher_id = 4;
      case 4: {
        if (tag == 32) {
         parse_app_publisher_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_publisher_id_)));
          set_has_app_publisher_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_app_interaction_type;
        break;
      }

      // repeated .protocol.baidu.BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
      case 5: {
        if (tag == 40) {
         parse_app_interaction_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType_IsValid(value)) {
            add_app_interaction_type(static_cast< ::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_app_interaction_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_app_interaction_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Mobile.MobileApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Mobile.MobileApp)
  return false;
#undef DO_
}

void BidRequest_Mobile_MobileApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Mobile.MobileApp)
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.MobileApp.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // optional string app_bundle_id = 2;
  if (has_app_bundle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_bundle_id().data(), this->app_bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_bundle_id(), output);
  }

  // optional int32 app_category = 3;
  if (has_app_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->app_category(), output);
  }

  // optional int32 app_publisher_id = 4;
  if (has_app_publisher_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->app_publisher_id(), output);
  }

  // repeated .protocol.baidu.BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
  for (int i = 0; i < this->app_interaction_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->app_interaction_type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Mobile.MobileApp)
}

::google::protobuf::uint8* BidRequest_Mobile_MobileApp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Mobile.MobileApp)
  // optional string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.MobileApp.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // optional string app_bundle_id = 2;
  if (has_app_bundle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_bundle_id().data(), this->app_bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_bundle_id(), target);
  }

  // optional int32 app_category = 3;
  if (has_app_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->app_category(), target);
  }

  // optional int32 app_publisher_id = 4;
  if (has_app_publisher_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->app_publisher_id(), target);
  }

  // repeated .protocol.baidu.BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
  for (int i = 0; i < this->app_interaction_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->app_interaction_type(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Mobile.MobileApp)
  return target;
}

int BidRequest_Mobile_MobileApp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Mobile.MobileApp)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }

    // optional string app_bundle_id = 2;
    if (has_app_bundle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_bundle_id());
    }

    // optional int32 app_category = 3;
    if (has_app_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_category());
    }

    // optional int32 app_publisher_id = 4;
    if (has_app_publisher_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_publisher_id());
    }

  }
  // repeated .protocol.baidu.BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->app_interaction_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->app_interaction_type(i));
    }
    total_size += 1 * this->app_interaction_type_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile_MobileApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Mobile.MobileApp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile_MobileApp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile_MobileApp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Mobile.MobileApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Mobile.MobileApp)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile_MobileApp::MergeFrom(const BidRequest_Mobile_MobileApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Mobile.MobileApp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  app_interaction_type_.MergeFrom(from.app_interaction_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_has_app_id();
      app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
    }
    if (from.has_app_bundle_id()) {
      set_has_app_bundle_id();
      app_bundle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_bundle_id_);
    }
    if (from.has_app_category()) {
      set_app_category(from.app_category());
    }
    if (from.has_app_publisher_id()) {
      set_app_publisher_id(from.app_publisher_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile_MobileApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Mobile.MobileApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile_MobileApp::CopyFrom(const BidRequest_Mobile_MobileApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Mobile.MobileApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile_MobileApp::IsInitialized() const {

  return true;
}

void BidRequest_Mobile_MobileApp::Swap(BidRequest_Mobile_MobileApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile_MobileApp::InternalSwap(BidRequest_Mobile_MobileApp* other) {
  app_id_.Swap(&other->app_id_);
  app_bundle_id_.Swap(&other->app_bundle_id_);
  std::swap(app_category_, other->app_category_);
  std::swap(app_publisher_id_, other->app_publisher_id_);
  app_interaction_type_.UnsafeArenaSwap(&other->app_interaction_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile_MobileApp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_MobileApp_descriptor_;
  metadata.reflection = BidRequest_Mobile_MobileApp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Mobile::kDEPRECATEDDeviceIdFieldNumber;
const int BidRequest_Mobile::kIdFieldNumber;
const int BidRequest_Mobile::kDeviceTypeFieldNumber;
const int BidRequest_Mobile::kPlatformFieldNumber;
const int BidRequest_Mobile::kOsVersionFieldNumber;
const int BidRequest_Mobile::kBrandFieldNumber;
const int BidRequest_Mobile::kModelFieldNumber;
const int BidRequest_Mobile::kScreenWidthFieldNumber;
const int BidRequest_Mobile::kScreenHeightFieldNumber;
const int BidRequest_Mobile::kScreenDensityFieldNumber;
const int BidRequest_Mobile::kCarrierIdFieldNumber;
const int BidRequest_Mobile::kWirelessNetworkTypeFieldNumber;
const int BidRequest_Mobile::kDEPRECATEDForAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kForAdvertisingIdFieldNumber;
const int BidRequest_Mobile::kMobileAppFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Mobile::BidRequest_Mobile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Mobile)
}

void BidRequest_Mobile::InitAsDefaultInstance() {
  os_version_ = const_cast< ::protocol::baidu::BidRequest_Mobile_DeviceOsVersion*>(&::protocol::baidu::BidRequest_Mobile_DeviceOsVersion::default_instance());
  mobile_app_ = const_cast< ::protocol::baidu::BidRequest_Mobile_MobileApp*>(&::protocol::baidu::BidRequest_Mobile_MobileApp::default_instance());
}

BidRequest_Mobile::BidRequest_Mobile(const BidRequest_Mobile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Mobile)
}

void BidRequest_Mobile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deprecated_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
  platform_ = 0;
  os_version_ = NULL;
  brand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screen_width_ = 0;
  screen_height_ = 0;
  screen_density_ = 0;
  carrier_id_ = GOOGLE_LONGLONG(0);
  wireless_network_type_ = 0;
  deprecated_for_advertising_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_app_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Mobile::~BidRequest_Mobile() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Mobile)
  SharedDtor();
}

void BidRequest_Mobile::SharedDtor() {
  deprecated_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deprecated_for_advertising_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete os_version_;
    delete mobile_app_;
  }
}

void BidRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Mobile_descriptor_;
}

const BidRequest_Mobile& BidRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Mobile* BidRequest_Mobile::default_instance_ = NULL;

BidRequest_Mobile* BidRequest_Mobile::New(::google::protobuf::Arena* arena) const {
  BidRequest_Mobile* n = new BidRequest_Mobile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Mobile::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Mobile)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Mobile, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Mobile*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(device_type_, platform_);
    if (has_deprecated_device_id()) {
      deprecated_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_os_version()) {
      if (os_version_ != NULL) os_version_->::protocol::baidu::BidRequest_Mobile_DeviceOsVersion::Clear();
    }
    if (has_brand()) {
      brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    screen_width_ = 0;
  }
  if (_has_bits_[8 / 32] & 24320u) {
    ZR_(screen_height_, wireless_network_type_);
    if (has_deprecated_for_advertising_id()) {
      deprecated_for_advertising_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mobile_app()) {
      if (mobile_app_ != NULL) mobile_app_->::protocol::baidu::BidRequest_Mobile_MobileApp::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  id_.Clear();
  for_advertising_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Mobile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DEPRECATED_device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_device_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_device_id().data(), this->deprecated_device_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_type;
        break;
      }

      // optional .protocol.baidu.BidRequest.Mobile.MobileDeviceType device_type = 2;
      case 2: {
        if (tag == 16) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_Mobile_MobileDeviceType_IsValid(value)) {
            set_device_type(static_cast< ::protocol::baidu::BidRequest_Mobile_MobileDeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_platform;
        break;
      }

      // optional .protocol.baidu.BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
      case 3: {
        if (tag == 24) {
         parse_platform:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_Mobile_OS_IsValid(value)) {
            set_platform(static_cast< ::protocol::baidu::BidRequest_Mobile_OS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_os_version;
        break;
      }

      // optional .protocol.baidu.BidRequest.Mobile.DeviceOsVersion os_version = 4;
      case 4: {
        if (tag == 34) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_os_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_brand;
        break;
      }

      // optional string brand = 5;
      case 5: {
        if (tag == 42) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Mobile.brand");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_model;
        break;
      }

      // optional string model = 6;
      case 6: {
        if (tag == 50) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Mobile.model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_screen_width;
        break;
      }

      // optional int32 screen_width = 7;
      case 7: {
        if (tag == 56) {
         parse_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
          set_has_screen_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_screen_height;
        break;
      }

      // optional int32 screen_height = 8;
      case 8: {
        if (tag == 64) {
         parse_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
          set_has_screen_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_carrier_id;
        break;
      }

      // optional int64 carrier_id = 9;
      case 9: {
        if (tag == 72) {
         parse_carrier_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrier_id_)));
          set_has_carrier_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_wireless_network_type;
        break;
      }

      // optional .protocol.baidu.BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
      case 10: {
        if (tag == 80) {
         parse_wireless_network_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_Mobile_WirelessNetworkType_IsValid(value)) {
            set_wireless_network_type(static_cast< ::protocol::baidu::BidRequest_Mobile_WirelessNetworkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_DEPRECATED_for_advertising_id;
        break;
      }

      // optional string DEPRECATED_for_advertising_id = 11;
      case 11: {
        if (tag == 90) {
         parse_DEPRECATED_for_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_for_advertising_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deprecated_for_advertising_id().data(), this->deprecated_for_advertising_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mobile_app;
        break;
      }

      // optional .protocol.baidu.BidRequest.Mobile.MobileApp mobile_app = 12;
      case 12: {
        if (tag == 98) {
         parse_mobile_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_id;
        break;
      }

      // repeated .protocol.baidu.BidRequest.Mobile.MobileID id = 13;
      case 13: {
        if (tag == 106) {
         parse_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_id;
        if (input->ExpectTag(114)) goto parse_loop_for_advertising_id;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .protocol.baidu.BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_for_advertising_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_for_advertising_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_for_advertising_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(125)) goto parse_screen_density;
        break;
      }

      // optional float screen_density = 15;
      case 15: {
        if (tag == 125) {
         parse_screen_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_density_)));
          set_has_screen_density();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Mobile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Mobile)
  return false;
#undef DO_
}

void BidRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Mobile)
  // optional string DEPRECATED_device_id = 1;
  if (has_deprecated_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_device_id().data(), this->deprecated_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deprecated_device_id(), output);
  }

  // optional .protocol.baidu.BidRequest.Mobile.MobileDeviceType device_type = 2;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_type(), output);
  }

  // optional .protocol.baidu.BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->platform(), output);
  }

  // optional .protocol.baidu.BidRequest.Mobile.DeviceOsVersion os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->os_version_, output);
  }

  // optional string brand = 5;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.brand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->brand(), output);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->model(), output);
  }

  // optional int32 screen_width = 7;
  if (has_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->screen_width(), output);
  }

  // optional int32 screen_height = 8;
  if (has_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->screen_height(), output);
  }

  // optional int64 carrier_id = 9;
  if (has_carrier_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->carrier_id(), output);
  }

  // optional .protocol.baidu.BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
  if (has_wireless_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->wireless_network_type(), output);
  }

  // optional string DEPRECATED_for_advertising_id = 11;
  if (has_deprecated_for_advertising_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_for_advertising_id().data(), this->deprecated_for_advertising_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->deprecated_for_advertising_id(), output);
  }

  // optional .protocol.baidu.BidRequest.Mobile.MobileApp mobile_app = 12;
  if (has_mobile_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->mobile_app_, output);
  }

  // repeated .protocol.baidu.BidRequest.Mobile.MobileID id = 13;
  for (unsigned int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->id(i), output);
  }

  // repeated .protocol.baidu.BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
  for (unsigned int i = 0, n = this->for_advertising_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->for_advertising_id(i), output);
  }

  // optional float screen_density = 15;
  if (has_screen_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->screen_density(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Mobile)
}

::google::protobuf::uint8* BidRequest_Mobile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Mobile)
  // optional string DEPRECATED_device_id = 1;
  if (has_deprecated_device_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_device_id().data(), this->deprecated_device_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deprecated_device_id(), target);
  }

  // optional .protocol.baidu.BidRequest.Mobile.MobileDeviceType device_type = 2;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_type(), target);
  }

  // optional .protocol.baidu.BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
  if (has_platform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->platform(), target);
  }

  // optional .protocol.baidu.BidRequest.Mobile.DeviceOsVersion os_version = 4;
  if (has_os_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->os_version_, false, target);
  }

  // optional string brand = 5;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.brand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->brand(), target);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->model(), target);
  }

  // optional int32 screen_width = 7;
  if (has_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->screen_width(), target);
  }

  // optional int32 screen_height = 8;
  if (has_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->screen_height(), target);
  }

  // optional int64 carrier_id = 9;
  if (has_carrier_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->carrier_id(), target);
  }

  // optional .protocol.baidu.BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
  if (has_wireless_network_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->wireless_network_type(), target);
  }

  // optional string DEPRECATED_for_advertising_id = 11;
  if (has_deprecated_for_advertising_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deprecated_for_advertising_id().data(), this->deprecated_for_advertising_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->deprecated_for_advertising_id(), target);
  }

  // optional .protocol.baidu.BidRequest.Mobile.MobileApp mobile_app = 12;
  if (has_mobile_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->mobile_app_, false, target);
  }

  // repeated .protocol.baidu.BidRequest.Mobile.MobileID id = 13;
  for (unsigned int i = 0, n = this->id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->id(i), false, target);
  }

  // repeated .protocol.baidu.BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
  for (unsigned int i = 0, n = this->for_advertising_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->for_advertising_id(i), false, target);
  }

  // optional float screen_density = 15;
  if (has_screen_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->screen_density(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Mobile)
  return target;
}

int BidRequest_Mobile::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Mobile)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 253u) {
    // optional string DEPRECATED_device_id = 1;
    if (has_deprecated_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_device_id());
    }

    // optional .protocol.baidu.BidRequest.Mobile.MobileDeviceType device_type = 2;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

    // optional .protocol.baidu.BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .protocol.baidu.BidRequest.Mobile.DeviceOsVersion os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->os_version_);
    }

    // optional string brand = 5;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 6;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional int32 screen_width = 7;
    if (has_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_width());
    }

  }
  if (_has_bits_[8 / 32] & 24320u) {
    // optional int32 screen_height = 8;
    if (has_screen_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_height());
    }

    // optional float screen_density = 15;
    if (has_screen_density()) {
      total_size += 1 + 4;
    }

    // optional int64 carrier_id = 9;
    if (has_carrier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrier_id());
    }

    // optional .protocol.baidu.BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
    if (has_wireless_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wireless_network_type());
    }

    // optional string DEPRECATED_for_advertising_id = 11;
    if (has_deprecated_for_advertising_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deprecated_for_advertising_id());
    }

    // optional .protocol.baidu.BidRequest.Mobile.MobileApp mobile_app = 12;
    if (has_mobile_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mobile_app_);
    }

  }
  // repeated .protocol.baidu.BidRequest.Mobile.MobileID id = 13;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id(i));
  }

  // repeated .protocol.baidu.BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
  total_size += 1 * this->for_advertising_id_size();
  for (int i = 0; i < this->for_advertising_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->for_advertising_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Mobile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Mobile* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Mobile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Mobile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Mobile)
    MergeFrom(*source);
  }
}

void BidRequest_Mobile::MergeFrom(const BidRequest_Mobile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Mobile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  id_.MergeFrom(from.id_);
  for_advertising_id_.MergeFrom(from.for_advertising_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deprecated_device_id()) {
      set_has_deprecated_device_id();
      deprecated_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_device_id_);
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_os_version()) {
      mutable_os_version()->::protocol::baidu::BidRequest_Mobile_DeviceOsVersion::MergeFrom(from.os_version());
    }
    if (from.has_brand()) {
      set_has_brand();
      brand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.brand_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_screen_width()) {
      set_screen_width(from.screen_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_screen_height()) {
      set_screen_height(from.screen_height());
    }
    if (from.has_screen_density()) {
      set_screen_density(from.screen_density());
    }
    if (from.has_carrier_id()) {
      set_carrier_id(from.carrier_id());
    }
    if (from.has_wireless_network_type()) {
      set_wireless_network_type(from.wireless_network_type());
    }
    if (from.has_deprecated_for_advertising_id()) {
      set_has_deprecated_for_advertising_id();
      deprecated_for_advertising_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deprecated_for_advertising_id_);
    }
    if (from.has_mobile_app()) {
      mutable_mobile_app()->::protocol::baidu::BidRequest_Mobile_MobileApp::MergeFrom(from.mobile_app());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Mobile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Mobile::CopyFrom(const BidRequest_Mobile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Mobile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Mobile::IsInitialized() const {

  return true;
}

void BidRequest_Mobile::Swap(BidRequest_Mobile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Mobile::InternalSwap(BidRequest_Mobile* other) {
  deprecated_device_id_.Swap(&other->deprecated_device_id_);
  id_.UnsafeArenaSwap(&other->id_);
  std::swap(device_type_, other->device_type_);
  std::swap(platform_, other->platform_);
  std::swap(os_version_, other->os_version_);
  brand_.Swap(&other->brand_);
  model_.Swap(&other->model_);
  std::swap(screen_width_, other->screen_width_);
  std::swap(screen_height_, other->screen_height_);
  std::swap(screen_density_, other->screen_density_);
  std::swap(carrier_id_, other->carrier_id_);
  std::swap(wireless_network_type_, other->wireless_network_type_);
  deprecated_for_advertising_id_.Swap(&other->deprecated_for_advertising_id_);
  for_advertising_id_.UnsafeArenaSwap(&other->for_advertising_id_);
  std::swap(mobile_app_, other->mobile_app_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Mobile_descriptor_;
  metadata.reflection = BidRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Video::kTitleFieldNumber;
const int BidRequest_Video::kTagsFieldNumber;
const int BidRequest_Video::kContentLengthFieldNumber;
const int BidRequest_Video::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Video::BidRequest_Video()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.Video)
}

void BidRequest_Video::InitAsDefaultInstance() {
}

BidRequest_Video::BidRequest_Video(const BidRequest_Video& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.Video)
}

void BidRequest_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Video::~BidRequest_Video() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.Video)
  SharedDtor();
}

void BidRequest_Video::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Video_descriptor_;
}

const BidRequest_Video& BidRequest_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Video* BidRequest_Video::default_instance_ = NULL;

BidRequest_Video* BidRequest_Video::New(::google::protobuf::Arena* arena) const {
  BidRequest_Video* n = new BidRequest_Video;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Video::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.Video)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    content_length_ = 0;
  }
  tags_.Clear();
  channel_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Video.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.Video.tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        if (input->ExpectTag(24)) goto parse_content_length;
        break;
      }

      // optional int32 content_length = 3;
      case 3: {
        if (tag == 24) {
         parse_content_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_length_)));
          set_has_content_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        break;
      }

      // repeated int64 channel_id = 4;
      case 4: {
        if (tag == 32) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_channel_id())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_channel_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.Video)
  return false;
#undef DO_
}

void BidRequest_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.Video)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Video.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Video.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  // optional int32 content_length = 3;
  if (has_content_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->content_length(), output);
  }

  // repeated int64 channel_id = 4;
  for (int i = 0; i < this->channel_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->channel_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.Video)
}

::google::protobuf::uint8* BidRequest_Video::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.Video)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Video.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.Video.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tags(i), target);
  }

  // optional int32 content_length = 3;
  if (has_content_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->content_length(), target);
  }

  // repeated int64 channel_id = 4;
  for (int i = 0; i < this->channel_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->channel_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.Video)
  return target;
}

int BidRequest_Video::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.Video)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 content_length = 3;
    if (has_content_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_length());
    }

  }
  // repeated string tags = 2;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated int64 channel_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->channel_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->channel_id(i));
    }
    total_size += 1 * this->channel_id_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Video::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.Video)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Video* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Video>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.Video)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.Video)
    MergeFrom(*source);
  }
}

void BidRequest_Video::MergeFrom(const BidRequest_Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.Video)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tags_.MergeFrom(from.tags_);
  channel_id_.MergeFrom(from.channel_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_content_length()) {
      set_content_length(from.content_length());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Video::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Video::CopyFrom(const BidRequest_Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Video::IsInitialized() const {

  return true;
}

void BidRequest_Video::Swap(BidRequest_Video* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Video::InternalSwap(BidRequest_Video* other) {
  title_.Swap(&other->title_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(content_length_, other->content_length_);
  channel_id_.UnsafeArenaSwap(&other->channel_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Video_descriptor_;
  metadata.reflection = BidRequest_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_CreativeDescType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_CreativeDescType_descriptor_;
}
bool BidRequest_AdSlot_CreativeDescType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdSlot_CreativeDescType BidRequest_AdSlot::STATIC_CREATIVE;
const BidRequest_AdSlot_CreativeDescType BidRequest_AdSlot::DYNAMIC_CREATIVE;
const BidRequest_AdSlot_CreativeDescType BidRequest_AdSlot::CreativeDescType_MIN;
const BidRequest_AdSlot_CreativeDescType BidRequest_AdSlot::CreativeDescType_MAX;
const int BidRequest_AdSlot::CreativeDescType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_AdSlotLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_AdSlotLevel_descriptor_;
}
bool BidRequest_AdSlot_AdSlotLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdSlot_AdSlotLevel BidRequest_AdSlot::UNKNOWN_ADB_LEVEL;
const BidRequest_AdSlot_AdSlotLevel BidRequest_AdSlot::TOP;
const BidRequest_AdSlot_AdSlotLevel BidRequest_AdSlot::MED;
const BidRequest_AdSlot_AdSlotLevel BidRequest_AdSlot::TAIL;
const BidRequest_AdSlot_AdSlotLevel BidRequest_AdSlot::LOW;
const BidRequest_AdSlot_AdSlotLevel BidRequest_AdSlot::AdSlotLevel_MIN;
const BidRequest_AdSlot_AdSlotLevel BidRequest_AdSlot::AdSlotLevel_MAX;
const int BidRequest_AdSlot::AdSlotLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_VideoInfo::kMaxVideoDurationFieldNumber;
const int BidRequest_AdSlot_VideoInfo::kMinVideoDurationFieldNumber;
const int BidRequest_AdSlot_VideoInfo::kVideoStartDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_VideoInfo::BidRequest_AdSlot_VideoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.VideoInfo)
}

void BidRequest_AdSlot_VideoInfo::InitAsDefaultInstance() {
}

BidRequest_AdSlot_VideoInfo::BidRequest_AdSlot_VideoInfo(const BidRequest_AdSlot_VideoInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.VideoInfo)
}

void BidRequest_AdSlot_VideoInfo::SharedCtor() {
  _cached_size_ = 0;
  max_video_duration_ = 0;
  min_video_duration_ = 0;
  video_start_delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_VideoInfo::~BidRequest_AdSlot_VideoInfo() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  SharedDtor();
}

void BidRequest_AdSlot_VideoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_VideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_VideoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_VideoInfo_descriptor_;
}

const BidRequest_AdSlot_VideoInfo& BidRequest_AdSlot_VideoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_VideoInfo* BidRequest_AdSlot_VideoInfo::default_instance_ = NULL;

BidRequest_AdSlot_VideoInfo* BidRequest_AdSlot_VideoInfo::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_VideoInfo* n = new BidRequest_AdSlot_VideoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_VideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_AdSlot_VideoInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdSlot_VideoInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_video_duration_, video_start_delay_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_VideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_video_duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_video_duration_)));
          set_has_max_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_video_duration;
        break;
      }

      // optional int32 min_video_duration = 2;
      case 2: {
        if (tag == 16) {
         parse_min_video_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_video_duration_)));
          set_has_min_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_video_start_delay;
        break;
      }

      // optional int32 video_start_delay = 3;
      case 3: {
        if (tag == 24) {
         parse_video_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_start_delay_)));
          set_has_video_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  return false;
#undef DO_
}

void BidRequest_AdSlot_VideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  // optional int32 max_video_duration = 1;
  if (has_max_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_video_duration(), output);
  }

  // optional int32 min_video_duration = 2;
  if (has_min_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_video_duration(), output);
  }

  // optional int32 video_start_delay = 3;
  if (has_video_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->video_start_delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.VideoInfo)
}

::google::protobuf::uint8* BidRequest_AdSlot_VideoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  // optional int32 max_video_duration = 1;
  if (has_max_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_video_duration(), target);
  }

  // optional int32 min_video_duration = 2;
  if (has_min_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_video_duration(), target);
  }

  // optional int32 video_start_delay = 3;
  if (has_video_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->video_start_delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  return target;
}

int BidRequest_AdSlot_VideoInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 max_video_duration = 1;
    if (has_max_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_video_duration());
    }

    // optional int32 min_video_duration = 2;
    if (has_min_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_video_duration());
    }

    // optional int32 video_start_delay = 3;
    if (has_video_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->video_start_delay());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_VideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_VideoInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_VideoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.VideoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.VideoInfo)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_VideoInfo::MergeFrom(const BidRequest_AdSlot_VideoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_video_duration()) {
      set_max_video_duration(from.max_video_duration());
    }
    if (from.has_min_video_duration()) {
      set_min_video_duration(from.min_video_duration());
    }
    if (from.has_video_start_delay()) {
      set_video_start_delay(from.video_start_delay());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_VideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_VideoInfo::CopyFrom(const BidRequest_AdSlot_VideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_VideoInfo::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_VideoInfo::Swap(BidRequest_AdSlot_VideoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_VideoInfo::InternalSwap(BidRequest_AdSlot_VideoInfo* other) {
  std::swap(max_video_duration_, other->max_video_duration_);
  std::swap(min_video_duration_, other->min_video_duration_);
  std::swap(video_start_delay_, other->video_start_delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_VideoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_VideoInfo_descriptor_;
  metadata.reflection = BidRequest_AdSlot_VideoInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::kTextFieldNumber;
const int BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::kPctr1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::InitAsDefaultInstance() {
}

BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword(const BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pctr1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::~BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  SharedDtor();
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_descriptor_;
}

const BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword& BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword* BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::default_instance_ = NULL;

BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword* BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword* n = new BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pctr1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_pctr1;
        break;
      }

      // optional float pctr1 = 2;
      case 2: {
        if (tag == 21) {
         parse_pctr1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pctr1_)));
          set_has_pctr1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  return false;
#undef DO_
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional float pctr1 = 2;
  if (has_pctr1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pctr1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
}

::google::protobuf::uint8* BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  // optional string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional float pctr1 = 2;
  if (has_pctr1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pctr1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  return target;
}

int BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional float pctr1 = 2;
    if (has_pctr1()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::MergeFrom(const BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_pctr1()) {
      set_pctr1(from.pctr1());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::CopyFrom(const BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::Swap(BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::InternalSwap(BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword* other) {
  text_.Swap(&other->text_);
  std::swap(pctr1_, other->pctr1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_descriptor_;
  metadata.reflection = BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_LinkUnitInfo::kStyleTypeFieldNumber;
const int BidRequest_AdSlot_LinkUnitInfo::kReqKeywordNumFieldNumber;
const int BidRequest_AdSlot_LinkUnitInfo::kProposedKeywordFieldNumber;
const int BidRequest_AdSlot_LinkUnitInfo::kKeywordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_LinkUnitInfo::BidRequest_AdSlot_LinkUnitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
}

void BidRequest_AdSlot_LinkUnitInfo::InitAsDefaultInstance() {
}

BidRequest_AdSlot_LinkUnitInfo::BidRequest_AdSlot_LinkUnitInfo(const BidRequest_AdSlot_LinkUnitInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
}

void BidRequest_AdSlot_LinkUnitInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_keyword_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_LinkUnitInfo::~BidRequest_AdSlot_LinkUnitInfo() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  SharedDtor();
}

void BidRequest_AdSlot_LinkUnitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_LinkUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_LinkUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_LinkUnitInfo_descriptor_;
}

const BidRequest_AdSlot_LinkUnitInfo& BidRequest_AdSlot_LinkUnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_LinkUnitInfo* BidRequest_AdSlot_LinkUnitInfo::default_instance_ = NULL;

BidRequest_AdSlot_LinkUnitInfo* BidRequest_AdSlot_LinkUnitInfo::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_LinkUnitInfo* n = new BidRequest_AdSlot_LinkUnitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_LinkUnitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  req_keyword_num_ = 0;
  style_type_.Clear();
  proposed_keyword_.Clear();
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_LinkUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 style_type = 1;
      case 1: {
        if (tag == 8) {
         parse_style_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_style_type())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_style_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_style_type;
        if (input->ExpectTag(16)) goto parse_req_keyword_num;
        break;
      }

      // optional int32 req_keyword_num = 2;
      case 2: {
        if (tag == 16) {
         parse_req_keyword_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_keyword_num_)));
          set_has_req_keyword_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proposed_keyword;
        break;
      }

      // repeated string proposed_keyword = 3;
      case 3: {
        if (tag == 26) {
         parse_proposed_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_proposed_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proposed_keyword(this->proposed_keyword_size() - 1).data(),
            this->proposed_keyword(this->proposed_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proposed_keyword;
        if (input->ExpectTag(34)) goto parse_keywords;
        break;
      }

      // repeated .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword keywords = 4;
      case 4: {
        if (tag == 34) {
         parse_keywords:
          DO_(input->IncrementRecursionDepth());
         parse_loop_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keywords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_keywords;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  return false;
#undef DO_
}

void BidRequest_AdSlot_LinkUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  // repeated int32 style_type = 1;
  for (int i = 0; i < this->style_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->style_type(i), output);
  }

  // optional int32 req_keyword_num = 2;
  if (has_req_keyword_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->req_keyword_num(), output);
  }

  // repeated string proposed_keyword = 3;
  for (int i = 0; i < this->proposed_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposed_keyword(i).data(), this->proposed_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->proposed_keyword(i), output);
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword keywords = 4;
  for (unsigned int i = 0, n = this->keywords_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->keywords(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
}

::google::protobuf::uint8* BidRequest_AdSlot_LinkUnitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  // repeated int32 style_type = 1;
  for (int i = 0; i < this->style_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->style_type(i), target);
  }

  // optional int32 req_keyword_num = 2;
  if (has_req_keyword_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->req_keyword_num(), target);
  }

  // repeated string proposed_keyword = 3;
  for (int i = 0; i < this->proposed_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proposed_keyword(i).data(), this->proposed_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->proposed_keyword(i), target);
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword keywords = 4;
  for (unsigned int i = 0, n = this->keywords_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->keywords(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  return target;
}

int BidRequest_AdSlot_LinkUnitInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  int total_size = 0;

  // optional int32 req_keyword_num = 2;
  if (has_req_keyword_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->req_keyword_num());
  }

  // repeated int32 style_type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->style_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->style_type(i));
    }
    total_size += 1 * this->style_type_size() + data_size;
  }

  // repeated string proposed_keyword = 3;
  total_size += 1 * this->proposed_keyword_size();
  for (int i = 0; i < this->proposed_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->proposed_keyword(i));
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword keywords = 4;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keywords(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_LinkUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_LinkUnitInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_LinkUnitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_LinkUnitInfo::MergeFrom(const BidRequest_AdSlot_LinkUnitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  style_type_.MergeFrom(from.style_type_);
  proposed_keyword_.MergeFrom(from.proposed_keyword_);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_req_keyword_num()) {
      set_req_keyword_num(from.req_keyword_num());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_LinkUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_LinkUnitInfo::CopyFrom(const BidRequest_AdSlot_LinkUnitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_LinkUnitInfo::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_LinkUnitInfo::Swap(BidRequest_AdSlot_LinkUnitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_LinkUnitInfo::InternalSwap(BidRequest_AdSlot_LinkUnitInfo* other) {
  style_type_.UnsafeArenaSwap(&other->style_type_);
  std::swap(req_keyword_num_, other->req_keyword_num_);
  proposed_keyword_.UnsafeArenaSwap(&other->proposed_keyword_);
  keywords_.UnsafeArenaSwap(&other->keywords_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_LinkUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_LinkUnitInfo_descriptor_;
  metadata.reflection = BidRequest_AdSlot_LinkUnitInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::kOrderIdFieldNumber;
const int BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::kFixedCpmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::InitAsDefaultInstance() {
}

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder(const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fixed_cpm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::~BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  SharedDtor();
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SharedDtor() {
  order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_;
}

const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::default_instance_ = NULL;

BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* n = new BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_order_id()) {
      order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    fixed_cpm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string order_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fixed_cpm;
        break;
      }

      // optional int64 fixed_cpm = 2;
      case 2: {
        if (tag == 16) {
         parse_fixed_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fixed_cpm_)));
          set_has_fixed_cpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  return false;
#undef DO_
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->order_id(), output);
  }

  // optional int64 fixed_cpm = 2;
  if (has_fixed_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fixed_cpm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
}

::google::protobuf::uint8* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  // optional string order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->order_id(), target);
  }

  // optional int64 fixed_cpm = 2;
  if (has_fixed_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fixed_cpm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  return target;
}

int BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional int64 fixed_cpm = 2;
    if (has_fixed_cpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fixed_cpm());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::MergeFrom(const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_has_order_id();
      order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_id_);
    }
    if (from.has_fixed_cpm()) {
      set_fixed_cpm(from.fixed_cpm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::CopyFrom(const BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::Swap(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::InternalSwap(BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* other) {
  order_id_.Swap(&other->order_id_);
  std::swap(fixed_cpm_, other->fixed_cpm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_descriptor_;
  metadata.reflection = BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_PreferredOrderInfo::kPreferredOrdersFieldNumber;
const int BidRequest_AdSlot_PreferredOrderInfo::kAllowAuctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_PreferredOrderInfo::BidRequest_AdSlot_PreferredOrderInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
}

void BidRequest_AdSlot_PreferredOrderInfo::InitAsDefaultInstance() {
}

BidRequest_AdSlot_PreferredOrderInfo::BidRequest_AdSlot_PreferredOrderInfo(const BidRequest_AdSlot_PreferredOrderInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
}

void BidRequest_AdSlot_PreferredOrderInfo::SharedCtor() {
  _cached_size_ = 0;
  allow_auction_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_PreferredOrderInfo::~BidRequest_AdSlot_PreferredOrderInfo() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  SharedDtor();
}

void BidRequest_AdSlot_PreferredOrderInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_PreferredOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_PreferredOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_PreferredOrderInfo_descriptor_;
}

const BidRequest_AdSlot_PreferredOrderInfo& BidRequest_AdSlot_PreferredOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_PreferredOrderInfo* BidRequest_AdSlot_PreferredOrderInfo::default_instance_ = NULL;

BidRequest_AdSlot_PreferredOrderInfo* BidRequest_AdSlot_PreferredOrderInfo::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_PreferredOrderInfo* n = new BidRequest_AdSlot_PreferredOrderInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_PreferredOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  allow_auction_ = true;
  preferred_orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_PreferredOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_preferred_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_preferred_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_preferred_orders;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_allow_auction;
        break;
      }

      // optional bool allow_auction = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_allow_auction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_auction_)));
          set_has_allow_auction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  return false;
#undef DO_
}

void BidRequest_AdSlot_PreferredOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  // repeated .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
  for (unsigned int i = 0, n = this->preferred_orders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->preferred_orders(i), output);
  }

  // optional bool allow_auction = 2 [default = true];
  if (has_allow_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_auction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
}

::google::protobuf::uint8* BidRequest_AdSlot_PreferredOrderInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  // repeated .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
  for (unsigned int i = 0, n = this->preferred_orders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->preferred_orders(i), false, target);
  }

  // optional bool allow_auction = 2 [default = true];
  if (has_allow_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_auction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  return target;
}

int BidRequest_AdSlot_PreferredOrderInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  int total_size = 0;

  // optional bool allow_auction = 2 [default = true];
  if (has_allow_auction()) {
    total_size += 1 + 1;
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
  total_size += 1 * this->preferred_orders_size();
  for (int i = 0; i < this->preferred_orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preferred_orders(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_PreferredOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_PreferredOrderInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_PreferredOrderInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_PreferredOrderInfo::MergeFrom(const BidRequest_AdSlot_PreferredOrderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  preferred_orders_.MergeFrom(from.preferred_orders_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_allow_auction()) {
      set_allow_auction(from.allow_auction());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_PreferredOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_PreferredOrderInfo::CopyFrom(const BidRequest_AdSlot_PreferredOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_PreferredOrderInfo::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_PreferredOrderInfo::Swap(BidRequest_AdSlot_PreferredOrderInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_PreferredOrderInfo::InternalSwap(BidRequest_AdSlot_PreferredOrderInfo* other) {
  preferred_orders_.UnsafeArenaSwap(&other->preferred_orders_);
  std::swap(allow_auction_, other->allow_auction_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_PreferredOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_PreferredOrderInfo_descriptor_;
  metadata.reflection = BidRequest_AdSlot_PreferredOrderInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType_descriptor_;
}
bool BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType BidRequest_AdSlot_GuaranteedOrder_Charge::CHARGE_GD_CPM;
const BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType BidRequest_AdSlot_GuaranteedOrder_Charge::ChargeType_MIN;
const BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType BidRequest_AdSlot_GuaranteedOrder_Charge::ChargeType_MAX;
const int BidRequest_AdSlot_GuaranteedOrder_Charge::ChargeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_GuaranteedOrder_Charge::kPriceFieldNumber;
const int BidRequest_AdSlot_GuaranteedOrder_Charge::kChargeModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_GuaranteedOrder_Charge::BidRequest_AdSlot_GuaranteedOrder_Charge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::InitAsDefaultInstance() {
}

BidRequest_AdSlot_GuaranteedOrder_Charge::BidRequest_AdSlot_GuaranteedOrder_Charge(const BidRequest_AdSlot_GuaranteedOrder_Charge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  charge_mode_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_GuaranteedOrder_Charge::~BidRequest_AdSlot_GuaranteedOrder_Charge() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  SharedDtor();
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_GuaranteedOrder_Charge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_GuaranteedOrder_Charge_descriptor_;
}

const BidRequest_AdSlot_GuaranteedOrder_Charge& BidRequest_AdSlot_GuaranteedOrder_Charge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_GuaranteedOrder_Charge* BidRequest_AdSlot_GuaranteedOrder_Charge::default_instance_ = NULL;

BidRequest_AdSlot_GuaranteedOrder_Charge* BidRequest_AdSlot_GuaranteedOrder_Charge::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_GuaranteedOrder_Charge* n = new BidRequest_AdSlot_GuaranteedOrder_Charge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  if (_has_bits_[0 / 32] & 3u) {
    price_ = 0;
    charge_mode_ = 2;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_GuaranteedOrder_Charge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 price = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charge_mode;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.ChargeType charge_mode = 2 [default = CHARGE_GD_CPM];
      case 2: {
        if (tag == 16) {
         parse_charge_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType_IsValid(value)) {
            set_charge_mode(static_cast< ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  return false;
#undef DO_
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  // optional int32 price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->price(), output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.ChargeType charge_mode = 2 [default = CHARGE_GD_CPM];
  if (has_charge_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->charge_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
}

::google::protobuf::uint8* BidRequest_AdSlot_GuaranteedOrder_Charge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  // optional int32 price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->price(), target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.ChargeType charge_mode = 2 [default = CHARGE_GD_CPM];
  if (has_charge_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->charge_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  return target;
}

int BidRequest_AdSlot_GuaranteedOrder_Charge::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.ChargeType charge_mode = 2 [default = CHARGE_GD_CPM];
    if (has_charge_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charge_mode());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_GuaranteedOrder_Charge* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_GuaranteedOrder_Charge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::MergeFrom(const BidRequest_AdSlot_GuaranteedOrder_Charge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_charge_mode()) {
      set_charge_mode(from.charge_mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::CopyFrom(const BidRequest_AdSlot_GuaranteedOrder_Charge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_GuaranteedOrder_Charge::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_GuaranteedOrder_Charge::Swap(BidRequest_AdSlot_GuaranteedOrder_Charge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_GuaranteedOrder_Charge::InternalSwap(BidRequest_AdSlot_GuaranteedOrder_Charge* other) {
  std::swap(price_, other->price_);
  std::swap(charge_mode_, other->charge_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_GuaranteedOrder_Charge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_GuaranteedOrder_Charge_descriptor_;
  metadata.reflection = BidRequest_AdSlot_GuaranteedOrder_Charge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_GuaranteedOrder::kOrderIdFieldNumber;
const int BidRequest_AdSlot_GuaranteedOrder::kChargeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_GuaranteedOrder::BidRequest_AdSlot_GuaranteedOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
}

void BidRequest_AdSlot_GuaranteedOrder::InitAsDefaultInstance() {
  charge_ = const_cast< ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge*>(&::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge::default_instance());
}

BidRequest_AdSlot_GuaranteedOrder::BidRequest_AdSlot_GuaranteedOrder(const BidRequest_AdSlot_GuaranteedOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
}

void BidRequest_AdSlot_GuaranteedOrder::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = 0u;
  charge_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_GuaranteedOrder::~BidRequest_AdSlot_GuaranteedOrder() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  SharedDtor();
}

void BidRequest_AdSlot_GuaranteedOrder::SharedDtor() {
  if (this != default_instance_) {
    delete charge_;
  }
}

void BidRequest_AdSlot_GuaranteedOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_GuaranteedOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_GuaranteedOrder_descriptor_;
}

const BidRequest_AdSlot_GuaranteedOrder& BidRequest_AdSlot_GuaranteedOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_GuaranteedOrder* BidRequest_AdSlot_GuaranteedOrder::default_instance_ = NULL;

BidRequest_AdSlot_GuaranteedOrder* BidRequest_AdSlot_GuaranteedOrder::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_GuaranteedOrder* n = new BidRequest_AdSlot_GuaranteedOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_GuaranteedOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  if (_has_bits_[0 / 32] & 3u) {
    order_id_ = 0u;
    if (has_charge()) {
      if (charge_ != NULL) charge_->::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_GuaranteedOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 order_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charge;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge charge = 2;
      case 2: {
        if (tag == 18) {
         parse_charge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  return false;
#undef DO_
}

void BidRequest_AdSlot_GuaranteedOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  // optional uint32 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order_id(), output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge charge = 2;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->charge_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
}

::google::protobuf::uint8* BidRequest_AdSlot_GuaranteedOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  // optional uint32 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order_id(), target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge charge = 2;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->charge_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  return target;
}

int BidRequest_AdSlot_GuaranteedOrder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge charge = 2;
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->charge_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_GuaranteedOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_GuaranteedOrder* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_GuaranteedOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_GuaranteedOrder::MergeFrom(const BidRequest_AdSlot_GuaranteedOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_charge()) {
      mutable_charge()->::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge::MergeFrom(from.charge());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_GuaranteedOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_GuaranteedOrder::CopyFrom(const BidRequest_AdSlot_GuaranteedOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_GuaranteedOrder::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_GuaranteedOrder::Swap(BidRequest_AdSlot_GuaranteedOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_GuaranteedOrder::InternalSwap(BidRequest_AdSlot_GuaranteedOrder* other) {
  std::swap(order_id_, other->order_id_);
  std::swap(charge_, other->charge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_GuaranteedOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_GuaranteedOrder_descriptor_;
  metadata.reflection = BidRequest_AdSlot_GuaranteedOrder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_ExpandCreativeInfo_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_ExpandCreativeInfo_ActionType_descriptor_;
}
bool BidRequest_AdSlot_ExpandCreativeInfo_ActionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::HOVER;
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::CLICK;
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::LOAD;
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::ActionType_MIN;
const BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::ActionType_MAX;
const int BidRequest_AdSlot_ExpandCreativeInfo::ActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_ExpandCreativeInfo_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_ExpandCreativeInfo_Direction_descriptor_;
}
bool BidRequest_AdSlot_ExpandCreativeInfo_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_NONE;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_UP;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_DOWN;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_LEFT;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::EXPAND_RIGHT;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::Direction_MIN;
const BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::Direction_MAX;
const int BidRequest_AdSlot_ExpandCreativeInfo::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandActionTypeFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandDirectionFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandCreativeTypeFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandWidthFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandHeightFieldNumber;
const int BidRequest_AdSlot_ExpandCreativeInfo::kExpandDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_ExpandCreativeInfo::BidRequest_AdSlot_ExpandCreativeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
}

void BidRequest_AdSlot_ExpandCreativeInfo::InitAsDefaultInstance() {
}

BidRequest_AdSlot_ExpandCreativeInfo::BidRequest_AdSlot_ExpandCreativeInfo(const BidRequest_AdSlot_ExpandCreativeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
}

void BidRequest_AdSlot_ExpandCreativeInfo::SharedCtor() {
  _cached_size_ = 0;
  expand_direction_ = 0;
  expand_width_ = 0;
  expand_height_ = 0;
  expand_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_ExpandCreativeInfo::~BidRequest_AdSlot_ExpandCreativeInfo() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  SharedDtor();
}

void BidRequest_AdSlot_ExpandCreativeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_ExpandCreativeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_ExpandCreativeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_ExpandCreativeInfo_descriptor_;
}

const BidRequest_AdSlot_ExpandCreativeInfo& BidRequest_AdSlot_ExpandCreativeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_ExpandCreativeInfo* BidRequest_AdSlot_ExpandCreativeInfo::default_instance_ = NULL;

BidRequest_AdSlot_ExpandCreativeInfo* BidRequest_AdSlot_ExpandCreativeInfo::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_ExpandCreativeInfo* n = new BidRequest_AdSlot_ExpandCreativeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_ExpandCreativeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_AdSlot_ExpandCreativeInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdSlot_ExpandCreativeInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(expand_direction_, expand_duration_);

#undef ZR_HELPER_
#undef ZR_

  expand_action_type_.Clear();
  expand_creative_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_ExpandCreativeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
      case 1: {
        if (tag == 8) {
         parse_expand_action_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType_IsValid(value)) {
            add_expand_action_type(static_cast< ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_expand_action_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_expand_action_type;
        if (input->ExpectTag(16)) goto parse_expand_direction;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
      case 2: {
        if (tag == 16) {
         parse_expand_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_Direction_IsValid(value)) {
            set_expand_direction(static_cast< ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_expand_creative_type;
        break;
      }

      // repeated int32 expand_creative_type = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_expand_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_expand_creative_type())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_expand_creative_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expand_width;
        break;
      }

      // optional int32 expand_width = 4;
      case 4: {
        if (tag == 32) {
         parse_expand_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_width_)));
          set_has_expand_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expand_height;
        break;
      }

      // optional int32 expand_height = 5;
      case 5: {
        if (tag == 40) {
         parse_expand_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_height_)));
          set_has_expand_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_expand_duration;
        break;
      }

      // optional int32 expand_duration = 6;
      case 6: {
        if (tag == 48) {
         parse_expand_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expand_duration_)));
          set_has_expand_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  return false;
#undef DO_
}

void BidRequest_AdSlot_ExpandCreativeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  // repeated .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
  for (int i = 0; i < this->expand_action_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->expand_action_type(i), output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
  if (has_expand_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->expand_direction(), output);
  }

  // repeated int32 expand_creative_type = 3 [packed = true];
  if (this->expand_creative_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_expand_creative_type_cached_byte_size_);
  }
  for (int i = 0; i < this->expand_creative_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->expand_creative_type(i), output);
  }

  // optional int32 expand_width = 4;
  if (has_expand_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->expand_width(), output);
  }

  // optional int32 expand_height = 5;
  if (has_expand_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->expand_height(), output);
  }

  // optional int32 expand_duration = 6;
  if (has_expand_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->expand_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
}

::google::protobuf::uint8* BidRequest_AdSlot_ExpandCreativeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  // repeated .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
  for (int i = 0; i < this->expand_action_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->expand_action_type(i), target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
  if (has_expand_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->expand_direction(), target);
  }

  // repeated int32 expand_creative_type = 3 [packed = true];
  if (this->expand_creative_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _expand_creative_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->expand_creative_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->expand_creative_type(i), target);
  }

  // optional int32 expand_width = 4;
  if (has_expand_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->expand_width(), target);
  }

  // optional int32 expand_height = 5;
  if (has_expand_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->expand_height(), target);
  }

  // optional int32 expand_duration = 6;
  if (has_expand_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->expand_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  return target;
}

int BidRequest_AdSlot_ExpandCreativeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 58u) {
    // optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
    if (has_expand_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expand_direction());
    }

    // optional int32 expand_width = 4;
    if (has_expand_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_width());
    }

    // optional int32 expand_height = 5;
    if (has_expand_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_height());
    }

    // optional int32 expand_duration = 6;
    if (has_expand_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expand_duration());
    }

  }
  // repeated .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->expand_action_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->expand_action_type(i));
    }
    total_size += 1 * this->expand_action_type_size() + data_size;
  }

  // repeated int32 expand_creative_type = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->expand_creative_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->expand_creative_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _expand_creative_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_ExpandCreativeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_ExpandCreativeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_ExpandCreativeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_ExpandCreativeInfo::MergeFrom(const BidRequest_AdSlot_ExpandCreativeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  expand_action_type_.MergeFrom(from.expand_action_type_);
  expand_creative_type_.MergeFrom(from.expand_creative_type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_expand_direction()) {
      set_expand_direction(from.expand_direction());
    }
    if (from.has_expand_width()) {
      set_expand_width(from.expand_width());
    }
    if (from.has_expand_height()) {
      set_expand_height(from.expand_height());
    }
    if (from.has_expand_duration()) {
      set_expand_duration(from.expand_duration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_ExpandCreativeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_ExpandCreativeInfo::CopyFrom(const BidRequest_AdSlot_ExpandCreativeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_ExpandCreativeInfo::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_ExpandCreativeInfo::Swap(BidRequest_AdSlot_ExpandCreativeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_ExpandCreativeInfo::InternalSwap(BidRequest_AdSlot_ExpandCreativeInfo* other) {
  expand_action_type_.UnsafeArenaSwap(&other->expand_action_type_);
  std::swap(expand_direction_, other->expand_direction_);
  expand_creative_type_.UnsafeArenaSwap(&other->expand_creative_type_);
  std::swap(expand_width_, other->expand_width_);
  std::swap(expand_height_, other->expand_height_);
  std::swap(expand_duration_, other->expand_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_ExpandCreativeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_ExpandCreativeInfo_descriptor_;
  metadata.reflection = BidRequest_AdSlot_ExpandCreativeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_AdSlot_NativeAdParam_Fields_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_NativeAdParam_Fields_descriptor_;
}
bool BidRequest_AdSlot_NativeAdParam_Fields_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AdSlot_NativeAdParam_Fields BidRequest_AdSlot_NativeAdParam::TITLE;
const BidRequest_AdSlot_NativeAdParam_Fields BidRequest_AdSlot_NativeAdParam::DESC;
const BidRequest_AdSlot_NativeAdParam_Fields BidRequest_AdSlot_NativeAdParam::IMAGE;
const BidRequest_AdSlot_NativeAdParam_Fields BidRequest_AdSlot_NativeAdParam::LOGOICON;
const BidRequest_AdSlot_NativeAdParam_Fields BidRequest_AdSlot_NativeAdParam::APPSIZE;
const BidRequest_AdSlot_NativeAdParam_Fields BidRequest_AdSlot_NativeAdParam::Fields_MIN;
const BidRequest_AdSlot_NativeAdParam_Fields BidRequest_AdSlot_NativeAdParam::Fields_MAX;
const int BidRequest_AdSlot_NativeAdParam::Fields_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_NativeAdParam_ImageEle::kWidthFieldNumber;
const int BidRequest_AdSlot_NativeAdParam_ImageEle::kHeightFieldNumber;
const int BidRequest_AdSlot_NativeAdParam_ImageEle::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_NativeAdParam_ImageEle::BidRequest_AdSlot_NativeAdParam_ImageEle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::InitAsDefaultInstance() {
}

BidRequest_AdSlot_NativeAdParam_ImageEle::BidRequest_AdSlot_NativeAdParam_ImageEle(const BidRequest_AdSlot_NativeAdParam_ImageEle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  shape_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_NativeAdParam_ImageEle::~BidRequest_AdSlot_NativeAdParam_ImageEle() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  SharedDtor();
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_NativeAdParam_ImageEle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_NativeAdParam_ImageEle_descriptor_;
}

const BidRequest_AdSlot_NativeAdParam_ImageEle& BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_NativeAdParam_ImageEle* BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance_ = NULL;

BidRequest_AdSlot_NativeAdParam_ImageEle* BidRequest_AdSlot_NativeAdParam_ImageEle::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_NativeAdParam_ImageEle* n = new BidRequest_AdSlot_NativeAdParam_ImageEle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_AdSlot_NativeAdParam_ImageEle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdSlot_NativeAdParam_ImageEle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, shape_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_NativeAdParam_ImageEle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shape;
        break;
      }

      // optional int32 shape = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shape_)));
          set_has_shape();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  return false;
#undef DO_
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  // optional int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional int32 shape = 3 [default = 0];
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shape(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
}

::google::protobuf::uint8* BidRequest_AdSlot_NativeAdParam_ImageEle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  // optional int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional int32 shape = 3 [default = 0];
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shape(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  return target;
}

int BidRequest_AdSlot_NativeAdParam_ImageEle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 shape = 3 [default = 0];
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shape());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_NativeAdParam_ImageEle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_NativeAdParam_ImageEle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::MergeFrom(const BidRequest_AdSlot_NativeAdParam_ImageEle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_shape()) {
      set_shape(from.shape());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::CopyFrom(const BidRequest_AdSlot_NativeAdParam_ImageEle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_NativeAdParam_ImageEle::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_NativeAdParam_ImageEle::Swap(BidRequest_AdSlot_NativeAdParam_ImageEle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::InternalSwap(BidRequest_AdSlot_NativeAdParam_ImageEle* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(shape_, other->shape_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_NativeAdParam_ImageEle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_NativeAdParam_ImageEle_descriptor_;
  metadata.reflection = BidRequest_AdSlot_NativeAdParam_ImageEle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot_NativeAdParam::kRequiredFieldsFieldNumber;
const int BidRequest_AdSlot_NativeAdParam::kTitleMaxLengthFieldNumber;
const int BidRequest_AdSlot_NativeAdParam::kDescMaxLengthFieldNumber;
const int BidRequest_AdSlot_NativeAdParam::kLogoIconFieldNumber;
const int BidRequest_AdSlot_NativeAdParam::kImageFieldNumber;
const int BidRequest_AdSlot_NativeAdParam::kImageNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot_NativeAdParam::BidRequest_AdSlot_NativeAdParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
}

void BidRequest_AdSlot_NativeAdParam::InitAsDefaultInstance() {
  logo_icon_ = const_cast< ::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle*>(&::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance());
  image_ = const_cast< ::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle*>(&::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle::default_instance());
}

BidRequest_AdSlot_NativeAdParam::BidRequest_AdSlot_NativeAdParam(const BidRequest_AdSlot_NativeAdParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
}

void BidRequest_AdSlot_NativeAdParam::SharedCtor() {
  _cached_size_ = 0;
  title_max_length_ = 0;
  desc_max_length_ = 0;
  logo_icon_ = NULL;
  image_ = NULL;
  image_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot_NativeAdParam::~BidRequest_AdSlot_NativeAdParam() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  SharedDtor();
}

void BidRequest_AdSlot_NativeAdParam::SharedDtor() {
  if (this != default_instance_) {
    delete logo_icon_;
    delete image_;
  }
}

void BidRequest_AdSlot_NativeAdParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot_NativeAdParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_NativeAdParam_descriptor_;
}

const BidRequest_AdSlot_NativeAdParam& BidRequest_AdSlot_NativeAdParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot_NativeAdParam* BidRequest_AdSlot_NativeAdParam::default_instance_ = NULL;

BidRequest_AdSlot_NativeAdParam* BidRequest_AdSlot_NativeAdParam::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot_NativeAdParam* n = new BidRequest_AdSlot_NativeAdParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot_NativeAdParam::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_AdSlot_NativeAdParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdSlot_NativeAdParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 62u) {
    ZR_(title_max_length_, desc_max_length_);
    if (has_logo_icon()) {
      if (logo_icon_ != NULL) logo_icon_->::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle::Clear();
    }
    image_num_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  required_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot_NativeAdParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 required_fields = 1;
      case 1: {
        if (tag == 8) {
         parse_required_fields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_required_fields())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_required_fields())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_required_fields;
        if (input->ExpectTag(16)) goto parse_title_max_length;
        break;
      }

      // optional int32 title_max_length = 2;
      case 2: {
        if (tag == 16) {
         parse_title_max_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_max_length_)));
          set_has_title_max_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_desc_max_length;
        break;
      }

      // optional int32 desc_max_length = 3;
      case 3: {
        if (tag == 24) {
         parse_desc_max_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desc_max_length_)));
          set_has_desc_max_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_logo_icon;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle logo_icon = 4;
      case 4: {
        if (tag == 34) {
         parse_logo_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logo_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle image = 5;
      case 5: {
        if (tag == 42) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_image_num;
        break;
      }

      // optional int32 image_num = 6;
      case 6: {
        if (tag == 48) {
         parse_image_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_num_)));
          set_has_image_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  return false;
#undef DO_
}

void BidRequest_AdSlot_NativeAdParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  // repeated int64 required_fields = 1;
  for (int i = 0; i < this->required_fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->required_fields(i), output);
  }

  // optional int32 title_max_length = 2;
  if (has_title_max_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->title_max_length(), output);
  }

  // optional int32 desc_max_length = 3;
  if (has_desc_max_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->desc_max_length(), output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle logo_icon = 4;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->logo_icon_, output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle image = 5;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->image_, output);
  }

  // optional int32 image_num = 6;
  if (has_image_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->image_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
}

::google::protobuf::uint8* BidRequest_AdSlot_NativeAdParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  // repeated int64 required_fields = 1;
  for (int i = 0; i < this->required_fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->required_fields(i), target);
  }

  // optional int32 title_max_length = 2;
  if (has_title_max_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->title_max_length(), target);
  }

  // optional int32 desc_max_length = 3;
  if (has_desc_max_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->desc_max_length(), target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle logo_icon = 4;
  if (has_logo_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->logo_icon_, false, target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle image = 5;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->image_, false, target);
  }

  // optional int32 image_num = 6;
  if (has_image_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->image_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  return target;
}

int BidRequest_AdSlot_NativeAdParam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 62u) {
    // optional int32 title_max_length = 2;
    if (has_title_max_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title_max_length());
    }

    // optional int32 desc_max_length = 3;
    if (has_desc_max_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desc_max_length());
    }

    // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle logo_icon = 4;
    if (has_logo_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logo_icon_);
    }

    // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle image = 5;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_);
    }

    // optional int32 image_num = 6;
    if (has_image_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_num());
    }

  }
  // repeated int64 required_fields = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->required_fields_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->required_fields(i));
    }
    total_size += 1 * this->required_fields_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot_NativeAdParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot_NativeAdParam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot_NativeAdParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot_NativeAdParam::MergeFrom(const BidRequest_AdSlot_NativeAdParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  required_fields_.MergeFrom(from.required_fields_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_title_max_length()) {
      set_title_max_length(from.title_max_length());
    }
    if (from.has_desc_max_length()) {
      set_desc_max_length(from.desc_max_length());
    }
    if (from.has_logo_icon()) {
      mutable_logo_icon()->::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle::MergeFrom(from.logo_icon());
    }
    if (from.has_image()) {
      mutable_image()->::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle::MergeFrom(from.image());
    }
    if (from.has_image_num()) {
      set_image_num(from.image_num());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot_NativeAdParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot_NativeAdParam::CopyFrom(const BidRequest_AdSlot_NativeAdParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot.NativeAdParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot_NativeAdParam::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot_NativeAdParam::Swap(BidRequest_AdSlot_NativeAdParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot_NativeAdParam::InternalSwap(BidRequest_AdSlot_NativeAdParam* other) {
  required_fields_.UnsafeArenaSwap(&other->required_fields_);
  std::swap(title_max_length_, other->title_max_length_);
  std::swap(desc_max_length_, other->desc_max_length_);
  std::swap(logo_icon_, other->logo_icon_);
  std::swap(image_, other->image_);
  std::swap(image_num_, other->image_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot_NativeAdParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_NativeAdParam_descriptor_;
  metadata.reflection = BidRequest_AdSlot_NativeAdParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_AdSlot::kAdBlockKeyFieldNumber;
const int BidRequest_AdSlot::kSequenceIdFieldNumber;
const int BidRequest_AdSlot::kAdslotTypeFieldNumber;
const int BidRequest_AdSlot::kWidthFieldNumber;
const int BidRequest_AdSlot::kHeightFieldNumber;
const int BidRequest_AdSlot::kActualWidthFieldNumber;
const int BidRequest_AdSlot::kActualHeightFieldNumber;
const int BidRequest_AdSlot::kSlotVisibilityFieldNumber;
const int BidRequest_AdSlot::kCreativeTypeFieldNumber;
const int BidRequest_AdSlot::kCreativeDescTypeFieldNumber;
const int BidRequest_AdSlot::kExcludedLandingPageUrlFieldNumber;
const int BidRequest_AdSlot::kPublisherSettingsListIdFieldNumber;
const int BidRequest_AdSlot::kMinimumCpmFieldNumber;
const int BidRequest_AdSlot::kMaxVideoDurationFieldNumber;
const int BidRequest_AdSlot::kMinVideoDurationFieldNumber;
const int BidRequest_AdSlot::kVideoStartDelayFieldNumber;
const int BidRequest_AdSlot::kVideoInfoFieldNumber;
const int BidRequest_AdSlot::kLinkUnitInfoFieldNumber;
const int BidRequest_AdSlot::kPreferredOrderInfoFieldNumber;
const int BidRequest_AdSlot::kGuaranteedOrdersFieldNumber;
const int BidRequest_AdSlot::kExpandCreativeInfoFieldNumber;
const int BidRequest_AdSlot::kAdslotLevelFieldNumber;
const int BidRequest_AdSlot::kAllowedNonNativeadFieldNumber;
const int BidRequest_AdSlot::kNativeadParamFieldNumber;
const int BidRequest_AdSlot::kSecureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_AdSlot::BidRequest_AdSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest.AdSlot)
}

void BidRequest_AdSlot::InitAsDefaultInstance() {
  video_info_ = const_cast< ::protocol::baidu::BidRequest_AdSlot_VideoInfo*>(&::protocol::baidu::BidRequest_AdSlot_VideoInfo::default_instance());
  link_unit_info_ = const_cast< ::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo*>(&::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo::default_instance());
  preferred_order_info_ = const_cast< ::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo*>(&::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo::default_instance());
  expand_creative_info_ = const_cast< ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo*>(&::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo::default_instance());
  nativead_param_ = const_cast< ::protocol::baidu::BidRequest_AdSlot_NativeAdParam*>(&::protocol::baidu::BidRequest_AdSlot_NativeAdParam::default_instance());
}

BidRequest_AdSlot::BidRequest_AdSlot(const BidRequest_AdSlot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest.AdSlot)
}

void BidRequest_AdSlot::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ad_block_key_ = GOOGLE_ULONGLONG(0);
  sequence_id_ = 0;
  adslot_type_ = 0;
  width_ = 0;
  height_ = 0;
  actual_width_ = 0;
  actual_height_ = 0;
  slot_visibility_ = 0;
  minimum_cpm_ = 0;
  max_video_duration_ = 0;
  min_video_duration_ = 0;
  video_start_delay_ = 0;
  video_info_ = NULL;
  link_unit_info_ = NULL;
  preferred_order_info_ = NULL;
  expand_creative_info_ = NULL;
  adslot_level_ = 0;
  allowed_non_nativead_ = true;
  nativead_param_ = NULL;
  secure_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_AdSlot::~BidRequest_AdSlot() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest.AdSlot)
  SharedDtor();
}

void BidRequest_AdSlot::SharedDtor() {
  if (this != default_instance_) {
    delete video_info_;
    delete link_unit_info_;
    delete preferred_order_info_;
    delete expand_creative_info_;
    delete nativead_param_;
  }
}

void BidRequest_AdSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_AdSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AdSlot_descriptor_;
}

const BidRequest_AdSlot& BidRequest_AdSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_AdSlot* BidRequest_AdSlot::default_instance_ = NULL;

BidRequest_AdSlot* BidRequest_AdSlot::New(::google::protobuf::Arena* arena) const {
  BidRequest_AdSlot* n = new BidRequest_AdSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_AdSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest.AdSlot)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_AdSlot, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_AdSlot*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ad_block_key_, actual_height_);
    slot_visibility_ = 0;
  }
  if (_has_bits_[8 / 32] & 61440u) {
    ZR_(max_video_duration_, min_video_duration_);
    minimum_cpm_ = 0;
    video_start_delay_ = 0;
  }
  if (_has_bits_[16 / 32] & 16187392u) {
    if (has_video_info()) {
      if (video_info_ != NULL) video_info_->::protocol::baidu::BidRequest_AdSlot_VideoInfo::Clear();
    }
    if (has_link_unit_info()) {
      if (link_unit_info_ != NULL) link_unit_info_->::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo::Clear();
    }
    if (has_preferred_order_info()) {
      if (preferred_order_info_ != NULL) preferred_order_info_->::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo::Clear();
    }
    if (has_expand_creative_info()) {
      if (expand_creative_info_ != NULL) expand_creative_info_->::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo::Clear();
    }
    adslot_level_ = 0;
    allowed_non_nativead_ = true;
    if (has_nativead_param()) {
      if (nativead_param_ != NULL) nativead_param_->::protocol::baidu::BidRequest_AdSlot_NativeAdParam::Clear();
    }
  }
  secure_ = false;

#undef ZR_HELPER_
#undef ZR_

  creative_type_.Clear();
  creative_desc_type_.Clear();
  excluded_landing_page_url_.Clear();
  publisher_settings_list_id_.Clear();
  guaranteed_orders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_AdSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest.AdSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ad_block_key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ad_block_key_)));
          set_has_ad_block_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_id;
        break;
      }

      // optional int32 sequence_id = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adslot_type;
        break;
      }

      // optional int32 adslot_type = 3;
      case 3: {
        if (tag == 24) {
         parse_adslot_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adslot_type_)));
          set_has_adslot_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (tag == 40) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_slot_visibility;
        break;
      }

      // optional int32 slot_visibility = 6;
      case 6: {
        if (tag == 48) {
         parse_slot_visibility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_visibility_)));
          set_has_slot_visibility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_creative_type;
        break;
      }

      // repeated int32 creative_type = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_creative_type())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58, input, this->mutable_creative_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_excluded_landing_page_url;
        break;
      }

      // repeated string excluded_landing_page_url = 8;
      case 8: {
        if (tag == 66) {
         parse_excluded_landing_page_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_landing_page_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excluded_landing_page_url(this->excluded_landing_page_url_size() - 1).data(),
            this->excluded_landing_page_url(this->excluded_landing_page_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_excluded_landing_page_url;
        if (input->ExpectTag(72)) goto parse_minimum_cpm;
        break;
      }

      // optional int32 minimum_cpm = 9;
      case 9: {
        if (tag == 72) {
         parse_minimum_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minimum_cpm_)));
          set_has_minimum_cpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_max_video_duration;
        break;
      }

      // optional int32 max_video_duration = 10;
      case 10: {
        if (tag == 80) {
         parse_max_video_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_video_duration_)));
          set_has_max_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_min_video_duration;
        break;
      }

      // optional int32 min_video_duration = 11;
      case 11: {
        if (tag == 88) {
         parse_min_video_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_video_duration_)));
          set_has_min_video_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_video_start_delay;
        break;
      }

      // optional int32 video_start_delay = 12;
      case 12: {
        if (tag == 96) {
         parse_video_start_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_start_delay_)));
          set_has_video_start_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_preferred_order_info;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
      case 13: {
        if (tag == 106) {
         parse_preferred_order_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preferred_order_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_publisher_settings_list_id;
        break;
      }

      // repeated fixed64 publisher_settings_list_id = 14;
      case 14: {
        if (tag == 113) {
         parse_publisher_settings_list_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 113, input, this->mutable_publisher_settings_list_id())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_publisher_settings_list_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_publisher_settings_list_id;
        if (input->ExpectTag(122)) goto parse_video_info;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.VideoInfo video_info = 15;
      case 15: {
        if (tag == 122) {
         parse_video_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_link_unit_info;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
      case 16: {
        if (tag == 130) {
         parse_link_unit_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_unit_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_expand_creative_info;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
      case 17: {
        if (tag == 138) {
         parse_expand_creative_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expand_creative_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_actual_width;
        break;
      }

      // optional int32 actual_width = 18;
      case 18: {
        if (tag == 144) {
         parse_actual_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actual_width_)));
          set_has_actual_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_actual_height;
        break;
      }

      // optional int32 actual_height = 19;
      case 19: {
        if (tag == 152) {
         parse_actual_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actual_height_)));
          set_has_actual_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_guaranteed_orders;
        break;
      }

      // repeated .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder guaranteed_orders = 20;
      case 20: {
        if (tag == 162) {
         parse_guaranteed_orders:
          DO_(input->IncrementRecursionDepth());
         parse_loop_guaranteed_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_guaranteed_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_guaranteed_orders;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(168)) goto parse_adslot_level;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.AdSlotLevel adslot_level = 21 [default = UNKNOWN_ADB_LEVEL];
      case 21: {
        if (tag == 168) {
         parse_adslot_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_AdSlot_AdSlotLevel_IsValid(value)) {
            set_adslot_level(static_cast< ::protocol::baidu::BidRequest_AdSlot_AdSlotLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_creative_desc_type;
        break;
      }

      // repeated .protocol.baidu.BidRequest.AdSlot.CreativeDescType creative_desc_type = 22;
      case 22: {
        if (tag == 176) {
         parse_creative_desc_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_AdSlot_CreativeDescType_IsValid(value)) {
            add_creative_desc_type(static_cast< ::protocol::baidu::BidRequest_AdSlot_CreativeDescType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else if (tag == 178) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 22,
                 ::protocol::baidu::BidRequest_AdSlot_CreativeDescType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_creative_desc_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_creative_desc_type;
        if (input->ExpectTag(184)) goto parse_allowed_non_nativead;
        break;
      }

      // optional bool allowed_non_nativead = 23 [default = true];
      case 23: {
        if (tag == 184) {
         parse_allowed_non_nativead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowed_non_nativead_)));
          set_has_allowed_non_nativead();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_nativead_param;
        break;
      }

      // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam nativead_param = 24;
      case 24: {
        if (tag == 194) {
         parse_nativead_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nativead_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_secure;
        break;
      }

      // optional bool secure = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest.AdSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest.AdSlot)
  return false;
#undef DO_
}

void BidRequest_AdSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest.AdSlot)
  // optional uint64 ad_block_key = 1;
  if (has_ad_block_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ad_block_key(), output);
  }

  // optional int32 sequence_id = 2;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence_id(), output);
  }

  // optional int32 adslot_type = 3;
  if (has_adslot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adslot_type(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional int32 slot_visibility = 6;
  if (has_slot_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slot_visibility(), output);
  }

  // repeated int32 creative_type = 7 [packed = true];
  if (this->creative_type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_creative_type_cached_byte_size_);
  }
  for (int i = 0; i < this->creative_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->creative_type(i), output);
  }

  // repeated string excluded_landing_page_url = 8;
  for (int i = 0; i < this->excluded_landing_page_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_landing_page_url(i).data(), this->excluded_landing_page_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->excluded_landing_page_url(i), output);
  }

  // optional int32 minimum_cpm = 9;
  if (has_minimum_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->minimum_cpm(), output);
  }

  // optional int32 max_video_duration = 10;
  if (has_max_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_video_duration(), output);
  }

  // optional int32 min_video_duration = 11;
  if (has_min_video_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->min_video_duration(), output);
  }

  // optional int32 video_start_delay = 12;
  if (has_video_start_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->video_start_delay(), output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
  if (has_preferred_order_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->preferred_order_info_, output);
  }

  // repeated fixed64 publisher_settings_list_id = 14;
  for (int i = 0; i < this->publisher_settings_list_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      14, this->publisher_settings_list_id(i), output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.VideoInfo video_info = 15;
  if (has_video_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->video_info_, output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
  if (has_link_unit_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->link_unit_info_, output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
  if (has_expand_creative_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->expand_creative_info_, output);
  }

  // optional int32 actual_width = 18;
  if (has_actual_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->actual_width(), output);
  }

  // optional int32 actual_height = 19;
  if (has_actual_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->actual_height(), output);
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder guaranteed_orders = 20;
  for (unsigned int i = 0, n = this->guaranteed_orders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->guaranteed_orders(i), output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.AdSlotLevel adslot_level = 21 [default = UNKNOWN_ADB_LEVEL];
  if (has_adslot_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->adslot_level(), output);
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.CreativeDescType creative_desc_type = 22;
  for (int i = 0; i < this->creative_desc_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->creative_desc_type(i), output);
  }

  // optional bool allowed_non_nativead = 23 [default = true];
  if (has_allowed_non_nativead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->allowed_non_nativead(), output);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam nativead_param = 24;
  if (has_nativead_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->nativead_param_, output);
  }

  // optional bool secure = 25 [default = false];
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->secure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest.AdSlot)
}

::google::protobuf::uint8* BidRequest_AdSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest.AdSlot)
  // optional uint64 ad_block_key = 1;
  if (has_ad_block_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ad_block_key(), target);
  }

  // optional int32 sequence_id = 2;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence_id(), target);
  }

  // optional int32 adslot_type = 3;
  if (has_adslot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adslot_type(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // optional int32 slot_visibility = 6;
  if (has_slot_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slot_visibility(), target);
  }

  // repeated int32 creative_type = 7 [packed = true];
  if (this->creative_type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _creative_type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->creative_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->creative_type(i), target);
  }

  // repeated string excluded_landing_page_url = 8;
  for (int i = 0; i < this->excluded_landing_page_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_landing_page_url(i).data(), this->excluded_landing_page_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->excluded_landing_page_url(i), target);
  }

  // optional int32 minimum_cpm = 9;
  if (has_minimum_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->minimum_cpm(), target);
  }

  // optional int32 max_video_duration = 10;
  if (has_max_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->max_video_duration(), target);
  }

  // optional int32 min_video_duration = 11;
  if (has_min_video_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->min_video_duration(), target);
  }

  // optional int32 video_start_delay = 12;
  if (has_video_start_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->video_start_delay(), target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
  if (has_preferred_order_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->preferred_order_info_, false, target);
  }

  // repeated fixed64 publisher_settings_list_id = 14;
  for (int i = 0; i < this->publisher_settings_list_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(14, this->publisher_settings_list_id(i), target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.VideoInfo video_info = 15;
  if (has_video_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->video_info_, false, target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
  if (has_link_unit_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->link_unit_info_, false, target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
  if (has_expand_creative_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->expand_creative_info_, false, target);
  }

  // optional int32 actual_width = 18;
  if (has_actual_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->actual_width(), target);
  }

  // optional int32 actual_height = 19;
  if (has_actual_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->actual_height(), target);
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder guaranteed_orders = 20;
  for (unsigned int i = 0, n = this->guaranteed_orders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->guaranteed_orders(i), false, target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.AdSlotLevel adslot_level = 21 [default = UNKNOWN_ADB_LEVEL];
  if (has_adslot_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->adslot_level(), target);
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.CreativeDescType creative_desc_type = 22;
  for (int i = 0; i < this->creative_desc_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->creative_desc_type(i), target);
  }

  // optional bool allowed_non_nativead = 23 [default = true];
  if (has_allowed_non_nativead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->allowed_non_nativead(), target);
  }

  // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam nativead_param = 24;
  if (has_nativead_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->nativead_param_, false, target);
  }

  // optional bool secure = 25 [default = false];
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->secure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest.AdSlot)
  return target;
}

int BidRequest_AdSlot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest.AdSlot)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 ad_block_key = 1;
    if (has_ad_block_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ad_block_key());
    }

    // optional int32 sequence_id = 2;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_id());
    }

    // optional int32 adslot_type = 3;
    if (has_adslot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adslot_type());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 actual_width = 18;
    if (has_actual_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actual_width());
    }

    // optional int32 actual_height = 19;
    if (has_actual_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actual_height());
    }

    // optional int32 slot_visibility = 6;
    if (has_slot_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_visibility());
    }

  }
  if (_has_bits_[12 / 32] & 61440u) {
    // optional int32 minimum_cpm = 9;
    if (has_minimum_cpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minimum_cpm());
    }

    // optional int32 max_video_duration = 10;
    if (has_max_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_video_duration());
    }

    // optional int32 min_video_duration = 11;
    if (has_min_video_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_video_duration());
    }

    // optional int32 video_start_delay = 12;
    if (has_video_start_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->video_start_delay());
    }

  }
  if (_has_bits_[16 / 32] & 16187392u) {
    // optional .protocol.baidu.BidRequest.AdSlot.VideoInfo video_info = 15;
    if (has_video_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_info_);
    }

    // optional .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
    if (has_link_unit_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->link_unit_info_);
    }

    // optional .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
    if (has_preferred_order_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preferred_order_info_);
    }

    // optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
    if (has_expand_creative_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->expand_creative_info_);
    }

    // optional .protocol.baidu.BidRequest.AdSlot.AdSlotLevel adslot_level = 21 [default = UNKNOWN_ADB_LEVEL];
    if (has_adslot_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adslot_level());
    }

    // optional bool allowed_non_nativead = 23 [default = true];
    if (has_allowed_non_nativead()) {
      total_size += 2 + 1;
    }

    // optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam nativead_param = 24;
    if (has_nativead_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nativead_param_);
    }

  }
  // optional bool secure = 25 [default = false];
  if (has_secure()) {
    total_size += 2 + 1;
  }

  // repeated int32 creative_type = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->creative_type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _creative_type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.CreativeDescType creative_desc_type = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_desc_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->creative_desc_type(i));
    }
    total_size += 2 * this->creative_desc_type_size() + data_size;
  }

  // repeated string excluded_landing_page_url = 8;
  total_size += 1 * this->excluded_landing_page_url_size();
  for (int i = 0; i < this->excluded_landing_page_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_landing_page_url(i));
  }

  // repeated fixed64 publisher_settings_list_id = 14;
  {
    int data_size = 0;
    data_size = 8 * this->publisher_settings_list_id_size();
    total_size += 1 * this->publisher_settings_list_id_size() + data_size;
  }

  // repeated .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder guaranteed_orders = 20;
  total_size += 2 * this->guaranteed_orders_size();
  for (int i = 0; i < this->guaranteed_orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guaranteed_orders(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_AdSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest.AdSlot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_AdSlot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_AdSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest.AdSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest.AdSlot)
    MergeFrom(*source);
  }
}

void BidRequest_AdSlot::MergeFrom(const BidRequest_AdSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest.AdSlot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  creative_type_.MergeFrom(from.creative_type_);
  creative_desc_type_.MergeFrom(from.creative_desc_type_);
  excluded_landing_page_url_.MergeFrom(from.excluded_landing_page_url_);
  publisher_settings_list_id_.MergeFrom(from.publisher_settings_list_id_);
  guaranteed_orders_.MergeFrom(from.guaranteed_orders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ad_block_key()) {
      set_ad_block_key(from.ad_block_key());
    }
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_adslot_type()) {
      set_adslot_type(from.adslot_type());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_actual_width()) {
      set_actual_width(from.actual_width());
    }
    if (from.has_actual_height()) {
      set_actual_height(from.actual_height());
    }
    if (from.has_slot_visibility()) {
      set_slot_visibility(from.slot_visibility());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_minimum_cpm()) {
      set_minimum_cpm(from.minimum_cpm());
    }
    if (from.has_max_video_duration()) {
      set_max_video_duration(from.max_video_duration());
    }
    if (from.has_min_video_duration()) {
      set_min_video_duration(from.min_video_duration());
    }
    if (from.has_video_start_delay()) {
      set_video_start_delay(from.video_start_delay());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_video_info()) {
      mutable_video_info()->::protocol::baidu::BidRequest_AdSlot_VideoInfo::MergeFrom(from.video_info());
    }
    if (from.has_link_unit_info()) {
      mutable_link_unit_info()->::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo::MergeFrom(from.link_unit_info());
    }
    if (from.has_preferred_order_info()) {
      mutable_preferred_order_info()->::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo::MergeFrom(from.preferred_order_info());
    }
    if (from.has_expand_creative_info()) {
      mutable_expand_creative_info()->::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo::MergeFrom(from.expand_creative_info());
    }
    if (from.has_adslot_level()) {
      set_adslot_level(from.adslot_level());
    }
    if (from.has_allowed_non_nativead()) {
      set_allowed_non_nativead(from.allowed_non_nativead());
    }
    if (from.has_nativead_param()) {
      mutable_nativead_param()->::protocol::baidu::BidRequest_AdSlot_NativeAdParam::MergeFrom(from.nativead_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_secure()) {
      set_secure(from.secure());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_AdSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest.AdSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_AdSlot::CopyFrom(const BidRequest_AdSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest.AdSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_AdSlot::IsInitialized() const {

  return true;
}

void BidRequest_AdSlot::Swap(BidRequest_AdSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_AdSlot::InternalSwap(BidRequest_AdSlot* other) {
  std::swap(ad_block_key_, other->ad_block_key_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(adslot_type_, other->adslot_type_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(actual_width_, other->actual_width_);
  std::swap(actual_height_, other->actual_height_);
  std::swap(slot_visibility_, other->slot_visibility_);
  creative_type_.UnsafeArenaSwap(&other->creative_type_);
  creative_desc_type_.UnsafeArenaSwap(&other->creative_desc_type_);
  excluded_landing_page_url_.UnsafeArenaSwap(&other->excluded_landing_page_url_);
  publisher_settings_list_id_.UnsafeArenaSwap(&other->publisher_settings_list_id_);
  std::swap(minimum_cpm_, other->minimum_cpm_);
  std::swap(max_video_duration_, other->max_video_duration_);
  std::swap(min_video_duration_, other->min_video_duration_);
  std::swap(video_start_delay_, other->video_start_delay_);
  std::swap(video_info_, other->video_info_);
  std::swap(link_unit_info_, other->link_unit_info_);
  std::swap(preferred_order_info_, other->preferred_order_info_);
  guaranteed_orders_.UnsafeArenaSwap(&other->guaranteed_orders_);
  std::swap(expand_creative_info_, other->expand_creative_info_);
  std::swap(adslot_level_, other->adslot_level_);
  std::swap(allowed_non_nativead_, other->allowed_non_nativead_);
  std::swap(nativead_param_, other->nativead_param_);
  std::swap(secure_, other->secure_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_AdSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_AdSlot_descriptor_;
  metadata.reflection = BidRequest_AdSlot_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest::kIdFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kUserAgentFieldNumber;
const int BidRequest::kBaiduUserIdFieldNumber;
const int BidRequest::kBaiduUserIdVersionFieldNumber;
const int BidRequest::kBaiduIdListFieldNumber;
const int BidRequest::kBuyerUserIdFieldNumber;
const int BidRequest::kUserCategoryFieldNumber;
const int BidRequest::kCustomizedUserTagFieldNumber;
const int BidRequest::kGenderFieldNumber;
const int BidRequest::kDetectedLanguageFieldNumber;
const int BidRequest::kFlashVersionFieldNumber;
const int BidRequest::kUserGeoInfoFieldNumber;
const int BidRequest::kUrlFieldNumber;
const int BidRequest::kRefererFieldNumber;
const int BidRequest::kSiteCategoryFieldNumber;
const int BidRequest::kSiteQualityFieldNumber;
const int BidRequest::kPageTypeFieldNumber;
const int BidRequest::kPageKeywordFieldNumber;
const int BidRequest::kPageQualityFieldNumber;
const int BidRequest::kPageVerticalFieldNumber;
const int BidRequest::kExcludedProductCategoryFieldNumber;
const int BidRequest::kMobileFieldNumber;
const int BidRequest::kVideoFieldNumber;
const int BidRequest::kAdslotFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kIsPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest::BidRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  customized_user_tag_ = const_cast< ::protocol::baidu::BidRequest_CustomizedUserTag*>(&::protocol::baidu::BidRequest_CustomizedUserTag::default_instance());
  user_geo_info_ = const_cast< ::protocol::baidu::BidRequest_Geo*>(&::protocol::baidu::BidRequest_Geo::default_instance());
  mobile_ = const_cast< ::protocol::baidu::BidRequest_Mobile*>(&::protocol::baidu::BidRequest_Mobile::default_instance());
  video_ = const_cast< ::protocol::baidu::BidRequest_Video*>(&::protocol::baidu::BidRequest_Video::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baidu_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baidu_user_id_version_ = 0;
  buyer_user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customized_user_tag_ = NULL;
  gender_ = 0;
  detected_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flash_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_geo_info_ = NULL;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_category_ = 0;
  site_quality_ = 0;
  page_type_ = 0;
  page_quality_ = 0;
  page_vertical_ = 0;
  mobile_ = NULL;
  video_ = NULL;
  is_test_ = false;
  is_ping_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baidu_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyer_user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  detected_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flash_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete customized_user_tag_;
    delete user_geo_info_;
    delete mobile_;
    delete video_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New(::google::protobuf::Arena* arena) const {
  BidRequest* n = new BidRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 95u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_agent()) {
      user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_baidu_user_id()) {
      baidu_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    baidu_user_id_version_ = 0;
    if (has_buyer_user_id()) {
      buyer_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_customized_user_tag()) {
      if (customized_user_tag_ != NULL) customized_user_tag_->::protocol::baidu::BidRequest_CustomizedUserTag::Clear();
    }
    gender_ = 0;
    if (has_detected_language()) {
      detected_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_flash_version()) {
      flash_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_geo_info()) {
      if (user_geo_info_ != NULL) user_geo_info_->::protocol::baidu::BidRequest_Geo::Clear();
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_referer()) {
      referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    site_category_ = 0;
  }
  if (_has_bits_[16 / 32] & 14352384u) {
    ZR_(page_type_, page_quality_);
    site_quality_ = 0;
    page_vertical_ = 0;
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::protocol::baidu::BidRequest_Mobile::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::protocol::baidu::BidRequest_Video::Clear();
    }
  }
  ZR_(is_test_, is_ping_);

#undef ZR_HELPER_
#undef ZR_

  baidu_id_list_.Clear();
  user_category_.Clear();
  page_keyword_.Clear();
  excluded_product_category_.Clear();
  adslot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 3;
      case 3: {
        if (tag == 26) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.user_agent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_baidu_user_id;
        break;
      }

      // optional string baidu_user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_baidu_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baidu_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->baidu_user_id().data(), this->baidu_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.baidu_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_baidu_user_id_version;
        break;
      }

      // optional int32 baidu_user_id_version = 5;
      case 5: {
        if (tag == 40) {
         parse_baidu_user_id_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baidu_user_id_version_)));
          set_has_baidu_user_id_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_user_category;
        break;
      }

      // repeated int64 user_category = 6;
      case 6: {
        if (tag == 48) {
         parse_user_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_user_category())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_user_category;
        if (input->ExpectTag(56)) goto parse_gender;
        break;
      }

      // optional .protocol.baidu.BidRequest.Gender gender = 7;
      case 7: {
        if (tag == 56) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::baidu::BidRequest_Gender_IsValid(value)) {
            set_gender(static_cast< ::protocol::baidu::BidRequest_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_baidu_id_list;
        break;
      }

      // repeated .protocol.baidu.BidRequest.BaiduId baidu_id_list = 8;
      case 8: {
        if (tag == 66) {
         parse_baidu_id_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_baidu_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_baidu_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_baidu_id_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_detected_language;
        break;
      }

      // optional string detected_language = 9;
      case 9: {
        if (tag == 74) {
         parse_detected_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detected_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detected_language().data(), this->detected_language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.detected_language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_flash_version;
        break;
      }

      // optional string flash_version = 10;
      case 10: {
        if (tag == 82) {
         parse_flash_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flash_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flash_version().data(), this->flash_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.flash_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_url;
        break;
      }

      // optional string url = 11;
      case 11: {
        if (tag == 90) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_referer;
        break;
      }

      // optional string referer = 12;
      case 12: {
        if (tag == 98) {
         parse_referer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->referer().data(), this->referer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.referer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_site_category;
        break;
      }

      // optional int32 site_category = 13;
      case 13: {
        if (tag == 104) {
         parse_site_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &site_category_)));
          set_has_site_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_site_quality;
        break;
      }

      // optional int32 site_quality = 14;
      case 14: {
        if (tag == 112) {
         parse_site_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &site_quality_)));
          set_has_site_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_page_type;
        break;
      }

      // optional int32 page_type = 15;
      case 15: {
        if (tag == 120) {
         parse_page_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_type_)));
          set_has_page_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_page_keyword;
        break;
      }

      // repeated string page_keyword = 17;
      case 17: {
        if (tag == 138) {
         parse_page_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page_keyword(this->page_keyword_size() - 1).data(),
            this->page_keyword(this->page_keyword_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.page_keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_page_keyword;
        if (input->ExpectTag(144)) goto parse_page_quality;
        break;
      }

      // optional int32 page_quality = 18;
      case 18: {
        if (tag == 144) {
         parse_page_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_quality_)));
          set_has_page_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_excluded_product_category;
        break;
      }

      // repeated int32 excluded_product_category = 19 [packed = true];
      case 19: {
        if (tag == 154) {
         parse_excluded_product_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excluded_product_category())));
        } else if (tag == 152) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 154, input, this->mutable_excluded_product_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_adslot;
        break;
      }

      // repeated .protocol.baidu.BidRequest.AdSlot adslot = 20;
      case 20: {
        if (tag == 162) {
         parse_adslot:
          DO_(input->IncrementRecursionDepth());
         parse_loop_adslot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adslot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_loop_adslot;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(168)) goto parse_page_vertical;
        break;
      }

      // optional int32 page_vertical = 21;
      case 21: {
        if (tag == 168) {
         parse_page_vertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_vertical_)));
          set_has_page_vertical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_is_test;
        break;
      }

      // optional bool is_test = 26 [default = false];
      case 26: {
        if (tag == 208) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_is_ping;
        break;
      }

      // optional bool is_ping = 27 [default = false];
      case 27: {
        if (tag == 216) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_user_geo_info;
        break;
      }

      // optional .protocol.baidu.BidRequest.Geo user_geo_info = 28;
      case 28: {
        if (tag == 226) {
         parse_user_geo_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_geo_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_mobile;
        break;
      }

      // optional .protocol.baidu.BidRequest.Mobile mobile = 29;
      case 29: {
        if (tag == 234) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_video;
        break;
      }

      // optional .protocol.baidu.BidRequest.Video video = 30;
      case 30: {
        if (tag == 242) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_customized_user_tag;
        break;
      }

      // optional .protocol.baidu.BidRequest.CustomizedUserTag customized_user_tag = 31;
      case 31: {
        if (tag == 250) {
         parse_customized_user_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customized_user_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_buyer_user_id;
        break;
      }

      // optional string buyer_user_id = 32;
      case 32: {
        if (tag == 258) {
         parse_buyer_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyer_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyer_user_id().data(), this->buyer_user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidRequest.buyer_user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_agent(), output);
  }

  // optional string baidu_user_id = 4;
  if (has_baidu_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baidu_user_id().data(), this->baidu_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.baidu_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->baidu_user_id(), output);
  }

  // optional int32 baidu_user_id_version = 5;
  if (has_baidu_user_id_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->baidu_user_id_version(), output);
  }

  // repeated int64 user_category = 6;
  for (int i = 0; i < this->user_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->user_category(i), output);
  }

  // optional .protocol.baidu.BidRequest.Gender gender = 7;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->gender(), output);
  }

  // repeated .protocol.baidu.BidRequest.BaiduId baidu_id_list = 8;
  for (unsigned int i = 0, n = this->baidu_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->baidu_id_list(i), output);
  }

  // optional string detected_language = 9;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.detected_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->detected_language(), output);
  }

  // optional string flash_version = 10;
  if (has_flash_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flash_version().data(), this->flash_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.flash_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->flash_version(), output);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->url(), output);
  }

  // optional string referer = 12;
  if (has_referer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referer().data(), this->referer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.referer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->referer(), output);
  }

  // optional int32 site_category = 13;
  if (has_site_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->site_category(), output);
  }

  // optional int32 site_quality = 14;
  if (has_site_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->site_quality(), output);
  }

  // optional int32 page_type = 15;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->page_type(), output);
  }

  // repeated string page_keyword = 17;
  for (int i = 0; i < this->page_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_keyword(i).data(), this->page_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.page_keyword");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->page_keyword(i), output);
  }

  // optional int32 page_quality = 18;
  if (has_page_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->page_quality(), output);
  }

  // repeated int32 excluded_product_category = 19 [packed = true];
  if (this->excluded_product_category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(19, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excluded_product_category_cached_byte_size_);
  }
  for (int i = 0; i < this->excluded_product_category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->excluded_product_category(i), output);
  }

  // repeated .protocol.baidu.BidRequest.AdSlot adslot = 20;
  for (unsigned int i = 0, n = this->adslot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->adslot(i), output);
  }

  // optional int32 page_vertical = 21;
  if (has_page_vertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->page_vertical(), output);
  }

  // optional bool is_test = 26 [default = false];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_test(), output);
  }

  // optional bool is_ping = 27 [default = false];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_ping(), output);
  }

  // optional .protocol.baidu.BidRequest.Geo user_geo_info = 28;
  if (has_user_geo_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->user_geo_info_, output);
  }

  // optional .protocol.baidu.BidRequest.Mobile mobile = 29;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->mobile_, output);
  }

  // optional .protocol.baidu.BidRequest.Video video = 30;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->video_, output);
  }

  // optional .protocol.baidu.BidRequest.CustomizedUserTag customized_user_tag = 31;
  if (has_customized_user_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->customized_user_tag_, output);
  }

  // optional string buyer_user_id = 32;
  if (has_buyer_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_user_id().data(), this->buyer_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.buyer_user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->buyer_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidRequest)
}

::google::protobuf::uint8* BidRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_agent(), target);
  }

  // optional string baidu_user_id = 4;
  if (has_baidu_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->baidu_user_id().data(), this->baidu_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.baidu_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->baidu_user_id(), target);
  }

  // optional int32 baidu_user_id_version = 5;
  if (has_baidu_user_id_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->baidu_user_id_version(), target);
  }

  // repeated int64 user_category = 6;
  for (int i = 0; i < this->user_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->user_category(i), target);
  }

  // optional .protocol.baidu.BidRequest.Gender gender = 7;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->gender(), target);
  }

  // repeated .protocol.baidu.BidRequest.BaiduId baidu_id_list = 8;
  for (unsigned int i = 0, n = this->baidu_id_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->baidu_id_list(i), false, target);
  }

  // optional string detected_language = 9;
  if (has_detected_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detected_language().data(), this->detected_language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.detected_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->detected_language(), target);
  }

  // optional string flash_version = 10;
  if (has_flash_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flash_version().data(), this->flash_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.flash_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->flash_version(), target);
  }

  // optional string url = 11;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->url(), target);
  }

  // optional string referer = 12;
  if (has_referer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->referer().data(), this->referer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.referer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->referer(), target);
  }

  // optional int32 site_category = 13;
  if (has_site_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->site_category(), target);
  }

  // optional int32 site_quality = 14;
  if (has_site_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->site_quality(), target);
  }

  // optional int32 page_type = 15;
  if (has_page_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->page_type(), target);
  }

  // repeated string page_keyword = 17;
  for (int i = 0; i < this->page_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page_keyword(i).data(), this->page_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.page_keyword");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->page_keyword(i), target);
  }

  // optional int32 page_quality = 18;
  if (has_page_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->page_quality(), target);
  }

  // repeated int32 excluded_product_category = 19 [packed = true];
  if (this->excluded_product_category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _excluded_product_category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->excluded_product_category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excluded_product_category(i), target);
  }

  // repeated .protocol.baidu.BidRequest.AdSlot adslot = 20;
  for (unsigned int i = 0, n = this->adslot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->adslot(i), false, target);
  }

  // optional int32 page_vertical = 21;
  if (has_page_vertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->page_vertical(), target);
  }

  // optional bool is_test = 26 [default = false];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_test(), target);
  }

  // optional bool is_ping = 27 [default = false];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_ping(), target);
  }

  // optional .protocol.baidu.BidRequest.Geo user_geo_info = 28;
  if (has_user_geo_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->user_geo_info_, false, target);
  }

  // optional .protocol.baidu.BidRequest.Mobile mobile = 29;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->mobile_, false, target);
  }

  // optional .protocol.baidu.BidRequest.Video video = 30;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->video_, false, target);
  }

  // optional .protocol.baidu.BidRequest.CustomizedUserTag customized_user_tag = 31;
  if (has_customized_user_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->customized_user_tag_, false, target);
  }

  // optional string buyer_user_id = 32;
  if (has_buyer_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyer_user_id().data(), this->buyer_user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidRequest.buyer_user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->buyer_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidRequest)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 94u) {
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string user_agent = 3;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional string baidu_user_id = 4;
    if (has_baidu_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baidu_user_id());
    }

    // optional int32 baidu_user_id_version = 5;
    if (has_baidu_user_id_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baidu_user_id_version());
    }

    // optional string buyer_user_id = 32;
    if (has_buyer_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyer_user_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .protocol.baidu.BidRequest.CustomizedUserTag customized_user_tag = 31;
    if (has_customized_user_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->customized_user_tag_);
    }

    // optional .protocol.baidu.BidRequest.Gender gender = 7;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional string detected_language = 9;
    if (has_detected_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detected_language());
    }

    // optional string flash_version = 10;
    if (has_flash_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flash_version());
    }

    // optional .protocol.baidu.BidRequest.Geo user_geo_info = 28;
    if (has_user_geo_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_geo_info_);
    }

    // optional string url = 11;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string referer = 12;
    if (has_referer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referer());
    }

    // optional int32 site_category = 13;
    if (has_site_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->site_category());
    }

  }
  if (_has_bits_[16 / 32] & 14352384u) {
    // optional int32 site_quality = 14;
    if (has_site_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->site_quality());
    }

    // optional int32 page_type = 15;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_type());
    }

    // optional int32 page_quality = 18;
    if (has_page_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_quality());
    }

    // optional int32 page_vertical = 21;
    if (has_page_vertical()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_vertical());
    }

    // optional .protocol.baidu.BidRequest.Mobile mobile = 29;
    if (has_mobile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mobile_);
    }

    // optional .protocol.baidu.BidRequest.Video video = 30;
    if (has_video()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_);
    }

  }
  if (_has_bits_[25 / 32] & 100663296u) {
    // optional bool is_test = 26 [default = false];
    if (has_is_test()) {
      total_size += 2 + 1;
    }

    // optional bool is_ping = 27 [default = false];
    if (has_is_ping()) {
      total_size += 2 + 1;
    }

  }
  // repeated .protocol.baidu.BidRequest.BaiduId baidu_id_list = 8;
  total_size += 1 * this->baidu_id_list_size();
  for (int i = 0; i < this->baidu_id_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baidu_id_list(i));
  }

  // repeated int64 user_category = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_category(i));
    }
    total_size += 1 * this->user_category_size() + data_size;
  }

  // repeated string page_keyword = 17;
  total_size += 2 * this->page_keyword_size();
  for (int i = 0; i < this->page_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_keyword(i));
  }

  // repeated int32 excluded_product_category = 19 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->excluded_product_category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->excluded_product_category(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _excluded_product_category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .protocol.baidu.BidRequest.AdSlot adslot = 20;
  total_size += 2 * this->adslot_size();
  for (int i = 0; i < this->adslot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adslot(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidRequest)
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  baidu_id_list_.MergeFrom(from.baidu_id_list_);
  user_category_.MergeFrom(from.user_category_);
  page_keyword_.MergeFrom(from.page_keyword_);
  excluded_product_category_.MergeFrom(from.excluded_product_category_);
  adslot_.MergeFrom(from.adslot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_user_agent()) {
      set_has_user_agent();
      user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
    }
    if (from.has_baidu_user_id()) {
      set_has_baidu_user_id();
      baidu_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.baidu_user_id_);
    }
    if (from.has_baidu_user_id_version()) {
      set_baidu_user_id_version(from.baidu_user_id_version());
    }
    if (from.has_buyer_user_id()) {
      set_has_buyer_user_id();
      buyer_user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyer_user_id_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_customized_user_tag()) {
      mutable_customized_user_tag()->::protocol::baidu::BidRequest_CustomizedUserTag::MergeFrom(from.customized_user_tag());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_detected_language()) {
      set_has_detected_language();
      detected_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.detected_language_);
    }
    if (from.has_flash_version()) {
      set_has_flash_version();
      flash_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flash_version_);
    }
    if (from.has_user_geo_info()) {
      mutable_user_geo_info()->::protocol::baidu::BidRequest_Geo::MergeFrom(from.user_geo_info());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_referer()) {
      set_has_referer();
      referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
    }
    if (from.has_site_category()) {
      set_site_category(from.site_category());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_site_quality()) {
      set_site_quality(from.site_quality());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
    if (from.has_page_quality()) {
      set_page_quality(from.page_quality());
    }
    if (from.has_page_vertical()) {
      set_page_vertical(from.page_vertical());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::protocol::baidu::BidRequest_Mobile::MergeFrom(from.mobile());
    }
    if (from.has_video()) {
      mutable_video()->::protocol::baidu::BidRequest_Video::MergeFrom(from.video());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest::InternalSwap(BidRequest* other) {
  id_.Swap(&other->id_);
  ip_.Swap(&other->ip_);
  user_agent_.Swap(&other->user_agent_);
  baidu_user_id_.Swap(&other->baidu_user_id_);
  std::swap(baidu_user_id_version_, other->baidu_user_id_version_);
  baidu_id_list_.UnsafeArenaSwap(&other->baidu_id_list_);
  buyer_user_id_.Swap(&other->buyer_user_id_);
  user_category_.UnsafeArenaSwap(&other->user_category_);
  std::swap(customized_user_tag_, other->customized_user_tag_);
  std::swap(gender_, other->gender_);
  detected_language_.Swap(&other->detected_language_);
  flash_version_.Swap(&other->flash_version_);
  std::swap(user_geo_info_, other->user_geo_info_);
  url_.Swap(&other->url_);
  referer_.Swap(&other->referer_);
  std::swap(site_category_, other->site_category_);
  std::swap(site_quality_, other->site_quality_);
  std::swap(page_type_, other->page_type_);
  page_keyword_.UnsafeArenaSwap(&other->page_keyword_);
  std::swap(page_quality_, other->page_quality_);
  std::swap(page_vertical_, other->page_vertical_);
  excluded_product_category_.UnsafeArenaSwap(&other->excluded_product_category_);
  std::swap(mobile_, other->mobile_);
  std::swap(video_, other->video_);
  adslot_.UnsafeArenaSwap(&other->adslot_);
  std::swap(is_test_, other->is_test_);
  std::swap(is_ping_, other->is_ping_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidRequest_BaiduId

// optional string baidu_user_id = 1;
bool BidRequest_BaiduId::has_baidu_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_BaiduId::set_has_baidu_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_BaiduId::clear_has_baidu_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_BaiduId::clear_baidu_user_id() {
  baidu_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_baidu_user_id();
}
 const ::std::string& BidRequest_BaiduId::baidu_user_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.BaiduId.baidu_user_id)
  return baidu_user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_BaiduId::set_baidu_user_id(const ::std::string& value) {
  set_has_baidu_user_id();
  baidu_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.BaiduId.baidu_user_id)
}
 void BidRequest_BaiduId::set_baidu_user_id(const char* value) {
  set_has_baidu_user_id();
  baidu_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.BaiduId.baidu_user_id)
}
 void BidRequest_BaiduId::set_baidu_user_id(const char* value, size_t size) {
  set_has_baidu_user_id();
  baidu_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.BaiduId.baidu_user_id)
}
 ::std::string* BidRequest_BaiduId::mutable_baidu_user_id() {
  set_has_baidu_user_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.BaiduId.baidu_user_id)
  return baidu_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_BaiduId::release_baidu_user_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.BaiduId.baidu_user_id)
  clear_has_baidu_user_id();
  return baidu_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_BaiduId::set_allocated_baidu_user_id(::std::string* baidu_user_id) {
  if (baidu_user_id != NULL) {
    set_has_baidu_user_id();
  } else {
    clear_has_baidu_user_id();
  }
  baidu_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baidu_user_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.BaiduId.baidu_user_id)
}

// optional int32 baidu_user_id_version = 2;
bool BidRequest_BaiduId::has_baidu_user_id_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_BaiduId::set_has_baidu_user_id_version() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_BaiduId::clear_has_baidu_user_id_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_BaiduId::clear_baidu_user_id_version() {
  baidu_user_id_version_ = 0;
  clear_has_baidu_user_id_version();
}
 ::google::protobuf::int32 BidRequest_BaiduId::baidu_user_id_version() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.BaiduId.baidu_user_id_version)
  return baidu_user_id_version_;
}
 void BidRequest_BaiduId::set_baidu_user_id_version(::google::protobuf::int32 value) {
  set_has_baidu_user_id_version();
  baidu_user_id_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.BaiduId.baidu_user_id_version)
}

// -------------------------------------------------------------------

// BidRequest_CustomizedUserTag_AmsTag

// optional uint64 tag_id = 1;
bool BidRequest_CustomizedUserTag_AmsTag::has_tag_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_CustomizedUserTag_AmsTag::set_has_tag_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_CustomizedUserTag_AmsTag::clear_has_tag_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_CustomizedUserTag_AmsTag::clear_tag_id() {
  tag_id_ = GOOGLE_ULONGLONG(0);
  clear_has_tag_id();
}
 ::google::protobuf::uint64 BidRequest_CustomizedUserTag_AmsTag::tag_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag.tag_id)
  return tag_id_;
}
 void BidRequest_CustomizedUserTag_AmsTag::set_tag_id(::google::protobuf::uint64 value) {
  set_has_tag_id();
  tag_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.CustomizedUserTag.AmsTag.tag_id)
}

// -------------------------------------------------------------------

// BidRequest_CustomizedUserTag

// repeated .protocol.baidu.BidRequest.CustomizedUserTag.AmsTag ams_tag_list = 1;
int BidRequest_CustomizedUserTag::ams_tag_list_size() const {
  return ams_tag_list_.size();
}
void BidRequest_CustomizedUserTag::clear_ams_tag_list() {
  ams_tag_list_.Clear();
}
const ::protocol::baidu::BidRequest_CustomizedUserTag_AmsTag& BidRequest_CustomizedUserTag::ams_tag_list(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.CustomizedUserTag.ams_tag_list)
  return ams_tag_list_.Get(index);
}
::protocol::baidu::BidRequest_CustomizedUserTag_AmsTag* BidRequest_CustomizedUserTag::mutable_ams_tag_list(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.CustomizedUserTag.ams_tag_list)
  return ams_tag_list_.Mutable(index);
}
::protocol::baidu::BidRequest_CustomizedUserTag_AmsTag* BidRequest_CustomizedUserTag::add_ams_tag_list() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.CustomizedUserTag.ams_tag_list)
  return ams_tag_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_CustomizedUserTag_AmsTag >*
BidRequest_CustomizedUserTag::mutable_ams_tag_list() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.CustomizedUserTag.ams_tag_list)
  return &ams_tag_list_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_CustomizedUserTag_AmsTag >&
BidRequest_CustomizedUserTag::ams_tag_list() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.CustomizedUserTag.ams_tag_list)
  return ams_tag_list_;
}

// -------------------------------------------------------------------

// BidRequest_Geo_Coordinate

// optional .protocol.baidu.BidRequest.Geo.Coordinate.Standard standard = 1;
bool BidRequest_Geo_Coordinate::has_standard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Geo_Coordinate::set_has_standard() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Geo_Coordinate::clear_has_standard() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Geo_Coordinate::clear_standard() {
  standard_ = 0;
  clear_has_standard();
}
 ::protocol::baidu::BidRequest_Geo_Coordinate_Standard BidRequest_Geo_Coordinate::standard() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.Coordinate.standard)
  return static_cast< ::protocol::baidu::BidRequest_Geo_Coordinate_Standard >(standard_);
}
 void BidRequest_Geo_Coordinate::set_standard(::protocol::baidu::BidRequest_Geo_Coordinate_Standard value) {
  assert(::protocol::baidu::BidRequest_Geo_Coordinate_Standard_IsValid(value));
  set_has_standard();
  standard_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Geo.Coordinate.standard)
}

// optional float latitude = 2;
bool BidRequest_Geo_Coordinate::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Geo_Coordinate::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Geo_Coordinate::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Geo_Coordinate::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 float BidRequest_Geo_Coordinate::latitude() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.Coordinate.latitude)
  return latitude_;
}
 void BidRequest_Geo_Coordinate::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Geo.Coordinate.latitude)
}

// optional float longitude = 3;
bool BidRequest_Geo_Coordinate::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Geo_Coordinate::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Geo_Coordinate::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Geo_Coordinate::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 float BidRequest_Geo_Coordinate::longitude() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.Coordinate.longitude)
  return longitude_;
}
 void BidRequest_Geo_Coordinate::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Geo.Coordinate.longitude)
}

// -------------------------------------------------------------------

// BidRequest_Geo_UserLocation

// optional string province = 1;
bool BidRequest_Geo_UserLocation::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Geo_UserLocation::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Geo_UserLocation::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Geo_UserLocation::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
 const ::std::string& BidRequest_Geo_UserLocation::province() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.UserLocation.province)
  return province_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo_UserLocation::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Geo.UserLocation.province)
}
 void BidRequest_Geo_UserLocation::set_province(const char* value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Geo.UserLocation.province)
}
 void BidRequest_Geo_UserLocation::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Geo.UserLocation.province)
}
 ::std::string* BidRequest_Geo_UserLocation::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Geo.UserLocation.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo_UserLocation::release_province() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Geo.UserLocation.province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo_UserLocation::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Geo.UserLocation.province)
}

// optional string city = 2;
bool BidRequest_Geo_UserLocation::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Geo_UserLocation::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Geo_UserLocation::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Geo_UserLocation::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
 const ::std::string& BidRequest_Geo_UserLocation::city() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.UserLocation.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo_UserLocation::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Geo.UserLocation.city)
}
 void BidRequest_Geo_UserLocation::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Geo.UserLocation.city)
}
 void BidRequest_Geo_UserLocation::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Geo.UserLocation.city)
}
 ::std::string* BidRequest_Geo_UserLocation::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Geo.UserLocation.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo_UserLocation::release_city() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Geo.UserLocation.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo_UserLocation::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Geo.UserLocation.city)
}

// optional string district = 3;
bool BidRequest_Geo_UserLocation::has_district() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Geo_UserLocation::set_has_district() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Geo_UserLocation::clear_has_district() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Geo_UserLocation::clear_district() {
  district_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district();
}
 const ::std::string& BidRequest_Geo_UserLocation::district() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.UserLocation.district)
  return district_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo_UserLocation::set_district(const ::std::string& value) {
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Geo.UserLocation.district)
}
 void BidRequest_Geo_UserLocation::set_district(const char* value) {
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Geo.UserLocation.district)
}
 void BidRequest_Geo_UserLocation::set_district(const char* value, size_t size) {
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Geo.UserLocation.district)
}
 ::std::string* BidRequest_Geo_UserLocation::mutable_district() {
  set_has_district();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Geo.UserLocation.district)
  return district_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo_UserLocation::release_district() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Geo.UserLocation.district)
  clear_has_district();
  return district_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo_UserLocation::set_allocated_district(::std::string* district) {
  if (district != NULL) {
    set_has_district();
  } else {
    clear_has_district();
  }
  district_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Geo.UserLocation.district)
}

// optional string street = 4;
bool BidRequest_Geo_UserLocation::has_street() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Geo_UserLocation::set_has_street() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Geo_UserLocation::clear_has_street() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Geo_UserLocation::clear_street() {
  street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street();
}
 const ::std::string& BidRequest_Geo_UserLocation::street() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.UserLocation.street)
  return street_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo_UserLocation::set_street(const ::std::string& value) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Geo.UserLocation.street)
}
 void BidRequest_Geo_UserLocation::set_street(const char* value) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Geo.UserLocation.street)
}
 void BidRequest_Geo_UserLocation::set_street(const char* value, size_t size) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Geo.UserLocation.street)
}
 ::std::string* BidRequest_Geo_UserLocation::mutable_street() {
  set_has_street();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Geo.UserLocation.street)
  return street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo_UserLocation::release_street() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Geo.UserLocation.street)
  clear_has_street();
  return street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo_UserLocation::set_allocated_street(::std::string* street) {
  if (street != NULL) {
    set_has_street();
  } else {
    clear_has_street();
  }
  street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Geo.UserLocation.street)
}

// -------------------------------------------------------------------

// BidRequest_Geo

// repeated .protocol.baidu.BidRequest.Geo.Coordinate user_coordinate = 1;
int BidRequest_Geo::user_coordinate_size() const {
  return user_coordinate_.size();
}
void BidRequest_Geo::clear_user_coordinate() {
  user_coordinate_.Clear();
}
const ::protocol::baidu::BidRequest_Geo_Coordinate& BidRequest_Geo::user_coordinate(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.user_coordinate)
  return user_coordinate_.Get(index);
}
::protocol::baidu::BidRequest_Geo_Coordinate* BidRequest_Geo::mutable_user_coordinate(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Geo.user_coordinate)
  return user_coordinate_.Mutable(index);
}
::protocol::baidu::BidRequest_Geo_Coordinate* BidRequest_Geo::add_user_coordinate() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.Geo.user_coordinate)
  return user_coordinate_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_Geo_Coordinate >*
BidRequest_Geo::mutable_user_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.Geo.user_coordinate)
  return &user_coordinate_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_Geo_Coordinate >&
BidRequest_Geo::user_coordinate() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.Geo.user_coordinate)
  return user_coordinate_;
}

// optional .protocol.baidu.BidRequest.Geo.UserLocation user_location = 2;
bool BidRequest_Geo::has_user_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Geo::set_has_user_location() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Geo::clear_has_user_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Geo::clear_user_location() {
  if (user_location_ != NULL) user_location_->::protocol::baidu::BidRequest_Geo_UserLocation::Clear();
  clear_has_user_location();
}
const ::protocol::baidu::BidRequest_Geo_UserLocation& BidRequest_Geo::user_location() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Geo.user_location)
  return user_location_ != NULL ? *user_location_ : *default_instance_->user_location_;
}
::protocol::baidu::BidRequest_Geo_UserLocation* BidRequest_Geo::mutable_user_location() {
  set_has_user_location();
  if (user_location_ == NULL) {
    user_location_ = new ::protocol::baidu::BidRequest_Geo_UserLocation;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Geo.user_location)
  return user_location_;
}
::protocol::baidu::BidRequest_Geo_UserLocation* BidRequest_Geo::release_user_location() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Geo.user_location)
  clear_has_user_location();
  ::protocol::baidu::BidRequest_Geo_UserLocation* temp = user_location_;
  user_location_ = NULL;
  return temp;
}
void BidRequest_Geo::set_allocated_user_location(::protocol::baidu::BidRequest_Geo_UserLocation* user_location) {
  delete user_location_;
  user_location_ = user_location;
  if (user_location) {
    set_has_user_location();
  } else {
    clear_has_user_location();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Geo.user_location)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_MobileID

// optional .protocol.baidu.BidRequest.Mobile.MobileID.IDType type = 1;
bool BidRequest_Mobile_MobileID::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_MobileID::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_MobileID::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_MobileID::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::protocol::baidu::BidRequest_Mobile_MobileID_IDType BidRequest_Mobile_MobileID::type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.MobileID.type)
  return static_cast< ::protocol::baidu::BidRequest_Mobile_MobileID_IDType >(type_);
}
 void BidRequest_Mobile_MobileID::set_type(::protocol::baidu::BidRequest_Mobile_MobileID_IDType value) {
  assert(::protocol::baidu::BidRequest_Mobile_MobileID_IDType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.MobileID.type)
}

// optional string id = 2;
bool BidRequest_Mobile_MobileID::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile_MobileID::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile_MobileID::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile_MobileID::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Mobile_MobileID::id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.MobileID.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_MobileID::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.MobileID.id)
}
 void BidRequest_Mobile_MobileID::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Mobile.MobileID.id)
}
 void BidRequest_Mobile_MobileID::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Mobile.MobileID.id)
}
 ::std::string* BidRequest_Mobile_MobileID::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.MobileID.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_MobileID::release_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.MobileID.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_MobileID::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.MobileID.id)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_DeviceOsVersion

// optional int32 os_version_major = 1;
bool BidRequest_Mobile_DeviceOsVersion::has_os_version_major() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_major() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_major() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_os_version_major() {
  os_version_major_ = 0;
  clear_has_os_version_major();
}
 ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_major() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.DeviceOsVersion.os_version_major)
  return os_version_major_;
}
 void BidRequest_Mobile_DeviceOsVersion::set_os_version_major(::google::protobuf::int32 value) {
  set_has_os_version_major();
  os_version_major_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.DeviceOsVersion.os_version_major)
}

// optional int32 os_version_minor = 2;
bool BidRequest_Mobile_DeviceOsVersion::has_os_version_minor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_minor() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_minor() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_os_version_minor() {
  os_version_minor_ = 0;
  clear_has_os_version_minor();
}
 ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_minor() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.DeviceOsVersion.os_version_minor)
  return os_version_minor_;
}
 void BidRequest_Mobile_DeviceOsVersion::set_os_version_minor(::google::protobuf::int32 value) {
  set_has_os_version_minor();
  os_version_minor_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.DeviceOsVersion.os_version_minor)
}

// optional int32 os_version_micro = 3;
bool BidRequest_Mobile_DeviceOsVersion::has_os_version_micro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Mobile_DeviceOsVersion::set_has_os_version_micro() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_has_os_version_micro() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Mobile_DeviceOsVersion::clear_os_version_micro() {
  os_version_micro_ = 0;
  clear_has_os_version_micro();
}
 ::google::protobuf::int32 BidRequest_Mobile_DeviceOsVersion::os_version_micro() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.DeviceOsVersion.os_version_micro)
  return os_version_micro_;
}
 void BidRequest_Mobile_DeviceOsVersion::set_os_version_micro(::google::protobuf::int32 value) {
  set_has_os_version_micro();
  os_version_micro_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.DeviceOsVersion.os_version_micro)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_ForAdvertisingID

// optional .protocol.baidu.BidRequest.Mobile.ForAdvertisingID.IDType type = 1;
bool BidRequest_Mobile_ForAdvertisingID::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_ForAdvertisingID::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_ForAdvertisingID::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_ForAdvertisingID::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::protocol::baidu::BidRequest_Mobile_ForAdvertisingID_IDType BidRequest_Mobile_ForAdvertisingID::type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.type)
  return static_cast< ::protocol::baidu::BidRequest_Mobile_ForAdvertisingID_IDType >(type_);
}
 void BidRequest_Mobile_ForAdvertisingID::set_type(::protocol::baidu::BidRequest_Mobile_ForAdvertisingID_IDType value) {
  assert(::protocol::baidu::BidRequest_Mobile_ForAdvertisingID_IDType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.type)
}

// optional string id = 2;
bool BidRequest_Mobile_ForAdvertisingID::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile_ForAdvertisingID::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile_ForAdvertisingID::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile_ForAdvertisingID::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Mobile_ForAdvertisingID::id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_ForAdvertisingID::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id)
}
 void BidRequest_Mobile_ForAdvertisingID::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id)
}
 void BidRequest_Mobile_ForAdvertisingID::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id)
}
 ::std::string* BidRequest_Mobile_ForAdvertisingID::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_ForAdvertisingID::release_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_ForAdvertisingID::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.ForAdvertisingID.id)
}

// -------------------------------------------------------------------

// BidRequest_Mobile_MobileApp

// optional string app_id = 1;
bool BidRequest_Mobile_MobileApp::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile_MobileApp::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile_MobileApp::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile_MobileApp::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_id();
}
 const ::std::string& BidRequest_Mobile_MobileApp::app_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.MobileApp.app_id)
  return app_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_MobileApp::set_app_id(const ::std::string& value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.MobileApp.app_id)
}
 void BidRequest_Mobile_MobileApp::set_app_id(const char* value) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Mobile.MobileApp.app_id)
}
 void BidRequest_Mobile_MobileApp::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Mobile.MobileApp.app_id)
}
 ::std::string* BidRequest_Mobile_MobileApp::mutable_app_id() {
  set_has_app_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.MobileApp.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_MobileApp::release_app_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.MobileApp.app_id)
  clear_has_app_id();
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_MobileApp::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    set_has_app_id();
  } else {
    clear_has_app_id();
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.MobileApp.app_id)
}

// optional string app_bundle_id = 2;
bool BidRequest_Mobile_MobileApp::has_app_bundle_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Mobile_MobileApp::set_has_app_bundle_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Mobile_MobileApp::clear_has_app_bundle_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Mobile_MobileApp::clear_app_bundle_id() {
  app_bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_bundle_id();
}
 const ::std::string& BidRequest_Mobile_MobileApp::app_bundle_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id)
  return app_bundle_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_MobileApp::set_app_bundle_id(const ::std::string& value) {
  set_has_app_bundle_id();
  app_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id)
}
 void BidRequest_Mobile_MobileApp::set_app_bundle_id(const char* value) {
  set_has_app_bundle_id();
  app_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id)
}
 void BidRequest_Mobile_MobileApp::set_app_bundle_id(const char* value, size_t size) {
  set_has_app_bundle_id();
  app_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id)
}
 ::std::string* BidRequest_Mobile_MobileApp::mutable_app_bundle_id() {
  set_has_app_bundle_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id)
  return app_bundle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile_MobileApp::release_app_bundle_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id)
  clear_has_app_bundle_id();
  return app_bundle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile_MobileApp::set_allocated_app_bundle_id(::std::string* app_bundle_id) {
  if (app_bundle_id != NULL) {
    set_has_app_bundle_id();
  } else {
    clear_has_app_bundle_id();
  }
  app_bundle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_bundle_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.MobileApp.app_bundle_id)
}

// optional int32 app_category = 3;
bool BidRequest_Mobile_MobileApp::has_app_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Mobile_MobileApp::set_has_app_category() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Mobile_MobileApp::clear_has_app_category() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Mobile_MobileApp::clear_app_category() {
  app_category_ = 0;
  clear_has_app_category();
}
 ::google::protobuf::int32 BidRequest_Mobile_MobileApp::app_category() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.MobileApp.app_category)
  return app_category_;
}
 void BidRequest_Mobile_MobileApp::set_app_category(::google::protobuf::int32 value) {
  set_has_app_category();
  app_category_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.MobileApp.app_category)
}

// optional int32 app_publisher_id = 4;
bool BidRequest_Mobile_MobileApp::has_app_publisher_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Mobile_MobileApp::set_has_app_publisher_id() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Mobile_MobileApp::clear_has_app_publisher_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Mobile_MobileApp::clear_app_publisher_id() {
  app_publisher_id_ = 0;
  clear_has_app_publisher_id();
}
 ::google::protobuf::int32 BidRequest_Mobile_MobileApp::app_publisher_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.MobileApp.app_publisher_id)
  return app_publisher_id_;
}
 void BidRequest_Mobile_MobileApp::set_app_publisher_id(::google::protobuf::int32 value) {
  set_has_app_publisher_id();
  app_publisher_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.MobileApp.app_publisher_id)
}

// repeated .protocol.baidu.BidRequest.Mobile.MobileApp.AppInteractionType app_interaction_type = 5;
int BidRequest_Mobile_MobileApp::app_interaction_type_size() const {
  return app_interaction_type_.size();
}
void BidRequest_Mobile_MobileApp::clear_app_interaction_type() {
  app_interaction_type_.Clear();
}
 ::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType BidRequest_Mobile_MobileApp::app_interaction_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.MobileApp.app_interaction_type)
  return static_cast< ::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType >(app_interaction_type_.Get(index));
}
 void BidRequest_Mobile_MobileApp::set_app_interaction_type(int index, ::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType value) {
  assert(::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType_IsValid(value));
  app_interaction_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.MobileApp.app_interaction_type)
}
 void BidRequest_Mobile_MobileApp::add_app_interaction_type(::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType value) {
  assert(::protocol::baidu::BidRequest_Mobile_MobileApp_AppInteractionType_IsValid(value));
  app_interaction_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.Mobile.MobileApp.app_interaction_type)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Mobile_MobileApp::app_interaction_type() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.Mobile.MobileApp.app_interaction_type)
  return app_interaction_type_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Mobile_MobileApp::mutable_app_interaction_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.Mobile.MobileApp.app_interaction_type)
  return &app_interaction_type_;
}

// -------------------------------------------------------------------

// BidRequest_Mobile

// optional string DEPRECATED_device_id = 1;
bool BidRequest_Mobile::has_deprecated_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Mobile::set_has_deprecated_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Mobile::clear_has_deprecated_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Mobile::clear_deprecated_device_id() {
  deprecated_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_device_id();
}
 const ::std::string& BidRequest_Mobile::deprecated_device_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id)
  return deprecated_device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_deprecated_device_id(const ::std::string& value) {
  set_has_deprecated_device_id();
  deprecated_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id)
}
 void BidRequest_Mobile::set_deprecated_device_id(const char* value) {
  set_has_deprecated_device_id();
  deprecated_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id)
}
 void BidRequest_Mobile::set_deprecated_device_id(const char* value, size_t size) {
  set_has_deprecated_device_id();
  deprecated_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id)
}
 ::std::string* BidRequest_Mobile::mutable_deprecated_device_id() {
  set_has_deprecated_device_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id)
  return deprecated_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_deprecated_device_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id)
  clear_has_deprecated_device_id();
  return deprecated_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_deprecated_device_id(::std::string* deprecated_device_id) {
  if (deprecated_device_id != NULL) {
    set_has_deprecated_device_id();
  } else {
    clear_has_deprecated_device_id();
  }
  deprecated_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_device_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.DEPRECATED_device_id)
}

// repeated .protocol.baidu.BidRequest.Mobile.MobileID id = 13;
int BidRequest_Mobile::id_size() const {
  return id_.size();
}
void BidRequest_Mobile::clear_id() {
  id_.Clear();
}
const ::protocol::baidu::BidRequest_Mobile_MobileID& BidRequest_Mobile::id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.id)
  return id_.Get(index);
}
::protocol::baidu::BidRequest_Mobile_MobileID* BidRequest_Mobile::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.id)
  return id_.Mutable(index);
}
::protocol::baidu::BidRequest_Mobile_MobileID* BidRequest_Mobile::add_id() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.Mobile.id)
  return id_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_Mobile_MobileID >*
BidRequest_Mobile::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.Mobile.id)
  return &id_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_Mobile_MobileID >&
BidRequest_Mobile::id() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.Mobile.id)
  return id_;
}

// optional .protocol.baidu.BidRequest.Mobile.MobileDeviceType device_type = 2;
bool BidRequest_Mobile::has_device_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Mobile::set_has_device_type() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Mobile::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Mobile::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
 ::protocol::baidu::BidRequest_Mobile_MobileDeviceType BidRequest_Mobile::device_type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.device_type)
  return static_cast< ::protocol::baidu::BidRequest_Mobile_MobileDeviceType >(device_type_);
}
 void BidRequest_Mobile::set_device_type(::protocol::baidu::BidRequest_Mobile_MobileDeviceType value) {
  assert(::protocol::baidu::BidRequest_Mobile_MobileDeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.device_type)
}

// optional .protocol.baidu.BidRequest.Mobile.OS platform = 3 [default = UNKNOWN_OS];
bool BidRequest_Mobile::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Mobile::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Mobile::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Mobile::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
 ::protocol::baidu::BidRequest_Mobile_OS BidRequest_Mobile::platform() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.platform)
  return static_cast< ::protocol::baidu::BidRequest_Mobile_OS >(platform_);
}
 void BidRequest_Mobile::set_platform(::protocol::baidu::BidRequest_Mobile_OS value) {
  assert(::protocol::baidu::BidRequest_Mobile_OS_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.platform)
}

// optional .protocol.baidu.BidRequest.Mobile.DeviceOsVersion os_version = 4;
bool BidRequest_Mobile::has_os_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Mobile::set_has_os_version() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Mobile::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Mobile::clear_os_version() {
  if (os_version_ != NULL) os_version_->::protocol::baidu::BidRequest_Mobile_DeviceOsVersion::Clear();
  clear_has_os_version();
}
const ::protocol::baidu::BidRequest_Mobile_DeviceOsVersion& BidRequest_Mobile::os_version() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.os_version)
  return os_version_ != NULL ? *os_version_ : *default_instance_->os_version_;
}
::protocol::baidu::BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == NULL) {
    os_version_ = new ::protocol::baidu::BidRequest_Mobile_DeviceOsVersion;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.os_version)
  return os_version_;
}
::protocol::baidu::BidRequest_Mobile_DeviceOsVersion* BidRequest_Mobile::release_os_version() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.os_version)
  clear_has_os_version();
  ::protocol::baidu::BidRequest_Mobile_DeviceOsVersion* temp = os_version_;
  os_version_ = NULL;
  return temp;
}
void BidRequest_Mobile::set_allocated_os_version(::protocol::baidu::BidRequest_Mobile_DeviceOsVersion* os_version) {
  delete os_version_;
  os_version_ = os_version;
  if (os_version) {
    set_has_os_version();
  } else {
    clear_has_os_version();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.os_version)
}

// optional string brand = 5;
bool BidRequest_Mobile::has_brand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Mobile::set_has_brand() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Mobile::clear_has_brand() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Mobile::clear_brand() {
  brand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_brand();
}
 const ::std::string& BidRequest_Mobile::brand() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.brand)
  return brand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_brand(const ::std::string& value) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.brand)
}
 void BidRequest_Mobile::set_brand(const char* value) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Mobile.brand)
}
 void BidRequest_Mobile::set_brand(const char* value, size_t size) {
  set_has_brand();
  brand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Mobile.brand)
}
 ::std::string* BidRequest_Mobile::mutable_brand() {
  set_has_brand();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.brand)
  return brand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_brand() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.brand)
  clear_has_brand();
  return brand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_brand(::std::string* brand) {
  if (brand != NULL) {
    set_has_brand();
  } else {
    clear_has_brand();
  }
  brand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brand);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.brand)
}

// optional string model = 6;
bool BidRequest_Mobile::has_model() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Mobile::set_has_model() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Mobile::clear_has_model() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Mobile::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& BidRequest_Mobile::model() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.model)
}
 void BidRequest_Mobile::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Mobile.model)
}
 void BidRequest_Mobile::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Mobile.model)
}
 ::std::string* BidRequest_Mobile::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_model() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.model)
}

// optional int32 screen_width = 7;
bool BidRequest_Mobile::has_screen_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Mobile::set_has_screen_width() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Mobile::clear_has_screen_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Mobile::clear_screen_width() {
  screen_width_ = 0;
  clear_has_screen_width();
}
 ::google::protobuf::int32 BidRequest_Mobile::screen_width() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.screen_width)
  return screen_width_;
}
 void BidRequest_Mobile::set_screen_width(::google::protobuf::int32 value) {
  set_has_screen_width();
  screen_width_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.screen_width)
}

// optional int32 screen_height = 8;
bool BidRequest_Mobile::has_screen_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Mobile::set_has_screen_height() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Mobile::clear_has_screen_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Mobile::clear_screen_height() {
  screen_height_ = 0;
  clear_has_screen_height();
}
 ::google::protobuf::int32 BidRequest_Mobile::screen_height() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.screen_height)
  return screen_height_;
}
 void BidRequest_Mobile::set_screen_height(::google::protobuf::int32 value) {
  set_has_screen_height();
  screen_height_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.screen_height)
}

// optional float screen_density = 15;
bool BidRequest_Mobile::has_screen_density() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Mobile::set_has_screen_density() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Mobile::clear_has_screen_density() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Mobile::clear_screen_density() {
  screen_density_ = 0;
  clear_has_screen_density();
}
 float BidRequest_Mobile::screen_density() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.screen_density)
  return screen_density_;
}
 void BidRequest_Mobile::set_screen_density(float value) {
  set_has_screen_density();
  screen_density_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.screen_density)
}

// optional int64 carrier_id = 9;
bool BidRequest_Mobile::has_carrier_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest_Mobile::set_has_carrier_id() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest_Mobile::clear_has_carrier_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest_Mobile::clear_carrier_id() {
  carrier_id_ = GOOGLE_LONGLONG(0);
  clear_has_carrier_id();
}
 ::google::protobuf::int64 BidRequest_Mobile::carrier_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.carrier_id)
  return carrier_id_;
}
 void BidRequest_Mobile::set_carrier_id(::google::protobuf::int64 value) {
  set_has_carrier_id();
  carrier_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.carrier_id)
}

// optional .protocol.baidu.BidRequest.Mobile.WirelessNetworkType wireless_network_type = 10;
bool BidRequest_Mobile::has_wireless_network_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Mobile::set_has_wireless_network_type() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Mobile::clear_has_wireless_network_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Mobile::clear_wireless_network_type() {
  wireless_network_type_ = 0;
  clear_has_wireless_network_type();
}
 ::protocol::baidu::BidRequest_Mobile_WirelessNetworkType BidRequest_Mobile::wireless_network_type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.wireless_network_type)
  return static_cast< ::protocol::baidu::BidRequest_Mobile_WirelessNetworkType >(wireless_network_type_);
}
 void BidRequest_Mobile::set_wireless_network_type(::protocol::baidu::BidRequest_Mobile_WirelessNetworkType value) {
  assert(::protocol::baidu::BidRequest_Mobile_WirelessNetworkType_IsValid(value));
  set_has_wireless_network_type();
  wireless_network_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.wireless_network_type)
}

// optional string DEPRECATED_for_advertising_id = 11;
bool BidRequest_Mobile::has_deprecated_for_advertising_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_Mobile::set_has_deprecated_for_advertising_id() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_Mobile::clear_has_deprecated_for_advertising_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_Mobile::clear_deprecated_for_advertising_id() {
  deprecated_for_advertising_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deprecated_for_advertising_id();
}
 const ::std::string& BidRequest_Mobile::deprecated_for_advertising_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id)
  return deprecated_for_advertising_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_deprecated_for_advertising_id(const ::std::string& value) {
  set_has_deprecated_for_advertising_id();
  deprecated_for_advertising_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id)
}
 void BidRequest_Mobile::set_deprecated_for_advertising_id(const char* value) {
  set_has_deprecated_for_advertising_id();
  deprecated_for_advertising_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id)
}
 void BidRequest_Mobile::set_deprecated_for_advertising_id(const char* value, size_t size) {
  set_has_deprecated_for_advertising_id();
  deprecated_for_advertising_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id)
}
 ::std::string* BidRequest_Mobile::mutable_deprecated_for_advertising_id() {
  set_has_deprecated_for_advertising_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id)
  return deprecated_for_advertising_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Mobile::release_deprecated_for_advertising_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id)
  clear_has_deprecated_for_advertising_id();
  return deprecated_for_advertising_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Mobile::set_allocated_deprecated_for_advertising_id(::std::string* deprecated_for_advertising_id) {
  if (deprecated_for_advertising_id != NULL) {
    set_has_deprecated_for_advertising_id();
  } else {
    clear_has_deprecated_for_advertising_id();
  }
  deprecated_for_advertising_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deprecated_for_advertising_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.DEPRECATED_for_advertising_id)
}

// repeated .protocol.baidu.BidRequest.Mobile.ForAdvertisingID for_advertising_id = 14;
int BidRequest_Mobile::for_advertising_id_size() const {
  return for_advertising_id_.size();
}
void BidRequest_Mobile::clear_for_advertising_id() {
  for_advertising_id_.Clear();
}
const ::protocol::baidu::BidRequest_Mobile_ForAdvertisingID& BidRequest_Mobile::for_advertising_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.for_advertising_id)
  return for_advertising_id_.Get(index);
}
::protocol::baidu::BidRequest_Mobile_ForAdvertisingID* BidRequest_Mobile::mutable_for_advertising_id(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.for_advertising_id)
  return for_advertising_id_.Mutable(index);
}
::protocol::baidu::BidRequest_Mobile_ForAdvertisingID* BidRequest_Mobile::add_for_advertising_id() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.Mobile.for_advertising_id)
  return for_advertising_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_Mobile_ForAdvertisingID >*
BidRequest_Mobile::mutable_for_advertising_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.Mobile.for_advertising_id)
  return &for_advertising_id_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_Mobile_ForAdvertisingID >&
BidRequest_Mobile::for_advertising_id() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.Mobile.for_advertising_id)
  return for_advertising_id_;
}

// optional .protocol.baidu.BidRequest.Mobile.MobileApp mobile_app = 12;
bool BidRequest_Mobile::has_mobile_app() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest_Mobile::set_has_mobile_app() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest_Mobile::clear_has_mobile_app() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest_Mobile::clear_mobile_app() {
  if (mobile_app_ != NULL) mobile_app_->::protocol::baidu::BidRequest_Mobile_MobileApp::Clear();
  clear_has_mobile_app();
}
const ::protocol::baidu::BidRequest_Mobile_MobileApp& BidRequest_Mobile::mobile_app() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Mobile.mobile_app)
  return mobile_app_ != NULL ? *mobile_app_ : *default_instance_->mobile_app_;
}
::protocol::baidu::BidRequest_Mobile_MobileApp* BidRequest_Mobile::mutable_mobile_app() {
  set_has_mobile_app();
  if (mobile_app_ == NULL) {
    mobile_app_ = new ::protocol::baidu::BidRequest_Mobile_MobileApp;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Mobile.mobile_app)
  return mobile_app_;
}
::protocol::baidu::BidRequest_Mobile_MobileApp* BidRequest_Mobile::release_mobile_app() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Mobile.mobile_app)
  clear_has_mobile_app();
  ::protocol::baidu::BidRequest_Mobile_MobileApp* temp = mobile_app_;
  mobile_app_ = NULL;
  return temp;
}
void BidRequest_Mobile::set_allocated_mobile_app(::protocol::baidu::BidRequest_Mobile_MobileApp* mobile_app) {
  delete mobile_app_;
  mobile_app_ = mobile_app;
  if (mobile_app) {
    set_has_mobile_app();
  } else {
    clear_has_mobile_app();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Mobile.mobile_app)
}

// -------------------------------------------------------------------

// BidRequest_Video

// optional string title = 1;
bool BidRequest_Video::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Video::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Video::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Video::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& BidRequest_Video::title() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Video.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Video::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Video.title)
}
 void BidRequest_Video::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Video.title)
}
 void BidRequest_Video::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Video.title)
}
 ::std::string* BidRequest_Video::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Video.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Video::release_title() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.Video.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Video::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.Video.title)
}

// repeated string tags = 2;
int BidRequest_Video::tags_size() const {
  return tags_.size();
}
void BidRequest_Video::clear_tags() {
  tags_.Clear();
}
 const ::std::string& BidRequest_Video::tags(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Video.tags)
  return tags_.Get(index);
}
 ::std::string* BidRequest_Video::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.Video.tags)
  return tags_.Mutable(index);
}
 void BidRequest_Video::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Video.tags)
  tags_.Mutable(index)->assign(value);
}
 void BidRequest_Video::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.Video.tags)
}
 void BidRequest_Video::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.Video.tags)
}
 ::std::string* BidRequest_Video::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:protocol.baidu.BidRequest.Video.tags)
  return tags_.Add();
}
 void BidRequest_Video::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.Video.tags)
}
 void BidRequest_Video::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.baidu.BidRequest.Video.tags)
}
 void BidRequest_Video::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.baidu.BidRequest.Video.tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Video::tags() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.Video.tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Video::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.Video.tags)
  return &tags_;
}

// optional int32 content_length = 3;
bool BidRequest_Video::has_content_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Video::set_has_content_length() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Video::clear_has_content_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Video::clear_content_length() {
  content_length_ = 0;
  clear_has_content_length();
}
 ::google::protobuf::int32 BidRequest_Video::content_length() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Video.content_length)
  return content_length_;
}
 void BidRequest_Video::set_content_length(::google::protobuf::int32 value) {
  set_has_content_length();
  content_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Video.content_length)
}

// repeated int64 channel_id = 4;
int BidRequest_Video::channel_id_size() const {
  return channel_id_.size();
}
void BidRequest_Video::clear_channel_id() {
  channel_id_.Clear();
}
 ::google::protobuf::int64 BidRequest_Video::channel_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.Video.channel_id)
  return channel_id_.Get(index);
}
 void BidRequest_Video::set_channel_id(int index, ::google::protobuf::int64 value) {
  channel_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.Video.channel_id)
}
 void BidRequest_Video::add_channel_id(::google::protobuf::int64 value) {
  channel_id_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.Video.channel_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest_Video::channel_id() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.Video.channel_id)
  return channel_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest_Video::mutable_channel_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.Video.channel_id)
  return &channel_id_;
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_VideoInfo

// optional int32 max_video_duration = 1;
bool BidRequest_AdSlot_VideoInfo::has_max_video_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot_VideoInfo::set_has_max_video_duration() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot_VideoInfo::clear_has_max_video_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot_VideoInfo::clear_max_video_duration() {
  max_video_duration_ = 0;
  clear_has_max_video_duration();
}
 ::google::protobuf::int32 BidRequest_AdSlot_VideoInfo::max_video_duration() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.VideoInfo.max_video_duration)
  return max_video_duration_;
}
 void BidRequest_AdSlot_VideoInfo::set_max_video_duration(::google::protobuf::int32 value) {
  set_has_max_video_duration();
  max_video_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.VideoInfo.max_video_duration)
}

// optional int32 min_video_duration = 2;
bool BidRequest_AdSlot_VideoInfo::has_min_video_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_VideoInfo::set_has_min_video_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_VideoInfo::clear_has_min_video_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_VideoInfo::clear_min_video_duration() {
  min_video_duration_ = 0;
  clear_has_min_video_duration();
}
 ::google::protobuf::int32 BidRequest_AdSlot_VideoInfo::min_video_duration() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.VideoInfo.min_video_duration)
  return min_video_duration_;
}
 void BidRequest_AdSlot_VideoInfo::set_min_video_duration(::google::protobuf::int32 value) {
  set_has_min_video_duration();
  min_video_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.VideoInfo.min_video_duration)
}

// optional int32 video_start_delay = 3;
bool BidRequest_AdSlot_VideoInfo::has_video_start_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_AdSlot_VideoInfo::set_has_video_start_delay() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_AdSlot_VideoInfo::clear_has_video_start_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_AdSlot_VideoInfo::clear_video_start_delay() {
  video_start_delay_ = 0;
  clear_has_video_start_delay();
}
 ::google::protobuf::int32 BidRequest_AdSlot_VideoInfo::video_start_delay() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.VideoInfo.video_start_delay)
  return video_start_delay_;
}
 void BidRequest_AdSlot_VideoInfo::set_video_start_delay(::google::protobuf::int32 value) {
  set_has_video_start_delay();
  video_start_delay_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.VideoInfo.video_start_delay)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword

// optional string text = 1;
bool BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::text() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text)
}
 void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text)
}
 void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text)
}
 ::std::string* BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::release_text() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.text)
}

// optional float pctr1 = 2;
bool BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::has_pctr1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::set_has_pctr1() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::clear_has_pctr1() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::clear_pctr1() {
  pctr1_ = 0;
  clear_has_pctr1();
}
 float BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::pctr1() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.pctr1)
  return pctr1_;
}
 void BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword::set_pctr1(float value) {
  set_has_pctr1();
  pctr1_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword.pctr1)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_LinkUnitInfo

// repeated int32 style_type = 1;
int BidRequest_AdSlot_LinkUnitInfo::style_type_size() const {
  return style_type_.size();
}
void BidRequest_AdSlot_LinkUnitInfo::clear_style_type() {
  style_type_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot_LinkUnitInfo::style_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.style_type)
  return style_type_.Get(index);
}
 void BidRequest_AdSlot_LinkUnitInfo::set_style_type(int index, ::google::protobuf::int32 value) {
  style_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.style_type)
}
 void BidRequest_AdSlot_LinkUnitInfo::add_style_type(::google::protobuf::int32 value) {
  style_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.style_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot_LinkUnitInfo::style_type() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.style_type)
  return style_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot_LinkUnitInfo::mutable_style_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.style_type)
  return &style_type_;
}

// optional int32 req_keyword_num = 2;
bool BidRequest_AdSlot_LinkUnitInfo::has_req_keyword_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_LinkUnitInfo::set_has_req_keyword_num() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_LinkUnitInfo::clear_has_req_keyword_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_LinkUnitInfo::clear_req_keyword_num() {
  req_keyword_num_ = 0;
  clear_has_req_keyword_num();
}
 ::google::protobuf::int32 BidRequest_AdSlot_LinkUnitInfo::req_keyword_num() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.req_keyword_num)
  return req_keyword_num_;
}
 void BidRequest_AdSlot_LinkUnitInfo::set_req_keyword_num(::google::protobuf::int32 value) {
  set_has_req_keyword_num();
  req_keyword_num_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.req_keyword_num)
}

// repeated string proposed_keyword = 3;
int BidRequest_AdSlot_LinkUnitInfo::proposed_keyword_size() const {
  return proposed_keyword_.size();
}
void BidRequest_AdSlot_LinkUnitInfo::clear_proposed_keyword() {
  proposed_keyword_.Clear();
}
 const ::std::string& BidRequest_AdSlot_LinkUnitInfo::proposed_keyword(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
  return proposed_keyword_.Get(index);
}
 ::std::string* BidRequest_AdSlot_LinkUnitInfo::mutable_proposed_keyword(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
  return proposed_keyword_.Mutable(index);
}
 void BidRequest_AdSlot_LinkUnitInfo::set_proposed_keyword(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
  proposed_keyword_.Mutable(index)->assign(value);
}
 void BidRequest_AdSlot_LinkUnitInfo::set_proposed_keyword(int index, const char* value) {
  proposed_keyword_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
}
 void BidRequest_AdSlot_LinkUnitInfo::set_proposed_keyword(int index, const char* value, size_t size) {
  proposed_keyword_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
}
 ::std::string* BidRequest_AdSlot_LinkUnitInfo::add_proposed_keyword() {
  // @@protoc_insertion_point(field_add_mutable:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
  return proposed_keyword_.Add();
}
 void BidRequest_AdSlot_LinkUnitInfo::add_proposed_keyword(const ::std::string& value) {
  proposed_keyword_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
}
 void BidRequest_AdSlot_LinkUnitInfo::add_proposed_keyword(const char* value) {
  proposed_keyword_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
}
 void BidRequest_AdSlot_LinkUnitInfo::add_proposed_keyword(const char* value, size_t size) {
  proposed_keyword_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot_LinkUnitInfo::proposed_keyword() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
  return proposed_keyword_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot_LinkUnitInfo::mutable_proposed_keyword() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.proposed_keyword)
  return &proposed_keyword_;
}

// repeated .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.ProposedKeyword keywords = 4;
int BidRequest_AdSlot_LinkUnitInfo::keywords_size() const {
  return keywords_.size();
}
void BidRequest_AdSlot_LinkUnitInfo::clear_keywords() {
  keywords_.Clear();
}
const ::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword& BidRequest_AdSlot_LinkUnitInfo::keywords(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.keywords)
  return keywords_.Get(index);
}
::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword* BidRequest_AdSlot_LinkUnitInfo::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.keywords)
  return keywords_.Mutable(index);
}
::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword* BidRequest_AdSlot_LinkUnitInfo::add_keywords() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.keywords)
  return keywords_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword >*
BidRequest_AdSlot_LinkUnitInfo::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.keywords)
  return &keywords_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo_ProposedKeyword >&
BidRequest_AdSlot_LinkUnitInfo::keywords() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.LinkUnitInfo.keywords)
  return keywords_;
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder

// optional string order_id = 1;
bool BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::clear_order_id() {
  order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_order_id();
}
 const ::std::string& BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::order_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id)
  return order_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::set_order_id(const ::std::string& value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id)
}
 void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::set_order_id(const char* value) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id)
}
 void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id)
}
 ::std::string* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::mutable_order_id() {
  set_has_order_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id)
  return order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::release_order_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id)
  clear_has_order_id();
  return order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::set_allocated_order_id(::std::string* order_id) {
  if (order_id != NULL) {
    set_has_order_id();
  } else {
    clear_has_order_id();
  }
  order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.order_id)
}

// optional int64 fixed_cpm = 2;
bool BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::has_fixed_cpm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::set_has_fixed_cpm() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::clear_has_fixed_cpm() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::clear_fixed_cpm() {
  fixed_cpm_ = GOOGLE_LONGLONG(0);
  clear_has_fixed_cpm();
}
 ::google::protobuf::int64 BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::fixed_cpm() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.fixed_cpm)
  return fixed_cpm_;
}
 void BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder::set_fixed_cpm(::google::protobuf::int64 value) {
  set_has_fixed_cpm();
  fixed_cpm_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder.fixed_cpm)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_PreferredOrderInfo

// repeated .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.PreferredOrder preferred_orders = 1;
int BidRequest_AdSlot_PreferredOrderInfo::preferred_orders_size() const {
  return preferred_orders_.size();
}
void BidRequest_AdSlot_PreferredOrderInfo::clear_preferred_orders() {
  preferred_orders_.Clear();
}
const ::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder& BidRequest_AdSlot_PreferredOrderInfo::preferred_orders(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.preferred_orders)
  return preferred_orders_.Get(index);
}
::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* BidRequest_AdSlot_PreferredOrderInfo::mutable_preferred_orders(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.preferred_orders)
  return preferred_orders_.Mutable(index);
}
::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder* BidRequest_AdSlot_PreferredOrderInfo::add_preferred_orders() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.preferred_orders)
  return preferred_orders_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder >*
BidRequest_AdSlot_PreferredOrderInfo::mutable_preferred_orders() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.preferred_orders)
  return &preferred_orders_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo_PreferredOrder >&
BidRequest_AdSlot_PreferredOrderInfo::preferred_orders() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.preferred_orders)
  return preferred_orders_;
}

// optional bool allow_auction = 2 [default = true];
bool BidRequest_AdSlot_PreferredOrderInfo::has_allow_auction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_PreferredOrderInfo::set_has_allow_auction() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_PreferredOrderInfo::clear_has_allow_auction() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_PreferredOrderInfo::clear_allow_auction() {
  allow_auction_ = true;
  clear_has_allow_auction();
}
 bool BidRequest_AdSlot_PreferredOrderInfo::allow_auction() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.allow_auction)
  return allow_auction_;
}
 void BidRequest_AdSlot_PreferredOrderInfo::set_allow_auction(bool value) {
  set_has_allow_auction();
  allow_auction_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo.allow_auction)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_GuaranteedOrder_Charge

// optional int32 price = 1;
bool BidRequest_AdSlot_GuaranteedOrder_Charge::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot_GuaranteedOrder_Charge::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot_GuaranteedOrder_Charge::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot_GuaranteedOrder_Charge::clear_price() {
  price_ = 0;
  clear_has_price();
}
 ::google::protobuf::int32 BidRequest_AdSlot_GuaranteedOrder_Charge::price() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.price)
  return price_;
}
 void BidRequest_AdSlot_GuaranteedOrder_Charge::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.price)
}

// optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.ChargeType charge_mode = 2 [default = CHARGE_GD_CPM];
bool BidRequest_AdSlot_GuaranteedOrder_Charge::has_charge_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_GuaranteedOrder_Charge::set_has_charge_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_GuaranteedOrder_Charge::clear_has_charge_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_GuaranteedOrder_Charge::clear_charge_mode() {
  charge_mode_ = 2;
  clear_has_charge_mode();
}
 ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType BidRequest_AdSlot_GuaranteedOrder_Charge::charge_mode() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.charge_mode)
  return static_cast< ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType >(charge_mode_);
}
 void BidRequest_AdSlot_GuaranteedOrder_Charge::set_charge_mode(::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType value) {
  assert(::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge_ChargeType_IsValid(value));
  set_has_charge_mode();
  charge_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge.charge_mode)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_GuaranteedOrder

// optional uint32 order_id = 1;
bool BidRequest_AdSlot_GuaranteedOrder::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot_GuaranteedOrder::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot_GuaranteedOrder::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot_GuaranteedOrder::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
 ::google::protobuf::uint32 BidRequest_AdSlot_GuaranteedOrder::order_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.order_id)
  return order_id_;
}
 void BidRequest_AdSlot_GuaranteedOrder::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.order_id)
}

// optional .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.Charge charge = 2;
bool BidRequest_AdSlot_GuaranteedOrder::has_charge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_GuaranteedOrder::set_has_charge() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_GuaranteedOrder::clear_has_charge() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_GuaranteedOrder::clear_charge() {
  if (charge_ != NULL) charge_->::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge::Clear();
  clear_has_charge();
}
const ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge& BidRequest_AdSlot_GuaranteedOrder::charge() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.charge)
  return charge_ != NULL ? *charge_ : *default_instance_->charge_;
}
::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge* BidRequest_AdSlot_GuaranteedOrder::mutable_charge() {
  set_has_charge();
  if (charge_ == NULL) {
    charge_ = new ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.charge)
  return charge_;
}
::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge* BidRequest_AdSlot_GuaranteedOrder::release_charge() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.charge)
  clear_has_charge();
  ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge* temp = charge_;
  charge_ = NULL;
  return temp;
}
void BidRequest_AdSlot_GuaranteedOrder::set_allocated_charge(::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder_Charge* charge) {
  delete charge_;
  charge_ = charge;
  if (charge) {
    set_has_charge();
  } else {
    clear_has_charge();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.GuaranteedOrder.charge)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_ExpandCreativeInfo

// repeated .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.ActionType expand_action_type = 1;
int BidRequest_AdSlot_ExpandCreativeInfo::expand_action_type_size() const {
  return expand_action_type_.size();
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_expand_action_type() {
  expand_action_type_.Clear();
}
 ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType BidRequest_AdSlot_ExpandCreativeInfo::expand_action_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_action_type)
  return static_cast< ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType >(expand_action_type_.Get(index));
}
 void BidRequest_AdSlot_ExpandCreativeInfo::set_expand_action_type(int index, ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType value) {
  assert(::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType_IsValid(value));
  expand_action_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_action_type)
}
 void BidRequest_AdSlot_ExpandCreativeInfo::add_expand_action_type(::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType value) {
  assert(::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_ActionType_IsValid(value));
  expand_action_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_action_type)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_AdSlot_ExpandCreativeInfo::expand_action_type() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_action_type)
  return expand_action_type_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_AdSlot_ExpandCreativeInfo::mutable_expand_action_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_action_type)
  return &expand_action_type_;
}

// optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.Direction expand_direction = 2;
bool BidRequest_AdSlot_ExpandCreativeInfo::has_expand_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_ExpandCreativeInfo::set_has_expand_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_has_expand_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_expand_direction() {
  expand_direction_ = 0;
  clear_has_expand_direction();
}
 ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_Direction BidRequest_AdSlot_ExpandCreativeInfo::expand_direction() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_direction)
  return static_cast< ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_Direction >(expand_direction_);
}
 void BidRequest_AdSlot_ExpandCreativeInfo::set_expand_direction(::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_Direction value) {
  assert(::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo_Direction_IsValid(value));
  set_has_expand_direction();
  expand_direction_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_direction)
}

// repeated int32 expand_creative_type = 3 [packed = true];
int BidRequest_AdSlot_ExpandCreativeInfo::expand_creative_type_size() const {
  return expand_creative_type_.size();
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_expand_creative_type() {
  expand_creative_type_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot_ExpandCreativeInfo::expand_creative_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_creative_type)
  return expand_creative_type_.Get(index);
}
 void BidRequest_AdSlot_ExpandCreativeInfo::set_expand_creative_type(int index, ::google::protobuf::int32 value) {
  expand_creative_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_creative_type)
}
 void BidRequest_AdSlot_ExpandCreativeInfo::add_expand_creative_type(::google::protobuf::int32 value) {
  expand_creative_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_creative_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot_ExpandCreativeInfo::expand_creative_type() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_creative_type)
  return expand_creative_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot_ExpandCreativeInfo::mutable_expand_creative_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_creative_type)
  return &expand_creative_type_;
}

// optional int32 expand_width = 4;
bool BidRequest_AdSlot_ExpandCreativeInfo::has_expand_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_AdSlot_ExpandCreativeInfo::set_has_expand_width() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_has_expand_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_expand_width() {
  expand_width_ = 0;
  clear_has_expand_width();
}
 ::google::protobuf::int32 BidRequest_AdSlot_ExpandCreativeInfo::expand_width() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_width)
  return expand_width_;
}
 void BidRequest_AdSlot_ExpandCreativeInfo::set_expand_width(::google::protobuf::int32 value) {
  set_has_expand_width();
  expand_width_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_width)
}

// optional int32 expand_height = 5;
bool BidRequest_AdSlot_ExpandCreativeInfo::has_expand_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_AdSlot_ExpandCreativeInfo::set_has_expand_height() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_has_expand_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_expand_height() {
  expand_height_ = 0;
  clear_has_expand_height();
}
 ::google::protobuf::int32 BidRequest_AdSlot_ExpandCreativeInfo::expand_height() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_height)
  return expand_height_;
}
 void BidRequest_AdSlot_ExpandCreativeInfo::set_expand_height(::google::protobuf::int32 value) {
  set_has_expand_height();
  expand_height_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_height)
}

// optional int32 expand_duration = 6;
bool BidRequest_AdSlot_ExpandCreativeInfo::has_expand_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_AdSlot_ExpandCreativeInfo::set_has_expand_duration() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_has_expand_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_AdSlot_ExpandCreativeInfo::clear_expand_duration() {
  expand_duration_ = 0;
  clear_has_expand_duration();
}
 ::google::protobuf::int32 BidRequest_AdSlot_ExpandCreativeInfo::expand_duration() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_duration)
  return expand_duration_;
}
 void BidRequest_AdSlot_ExpandCreativeInfo::set_expand_duration(::google::protobuf::int32 value) {
  set_has_expand_duration();
  expand_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo.expand_duration)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_NativeAdParam_ImageEle

// optional int32 width = 1;
bool BidRequest_AdSlot_NativeAdParam_ImageEle::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 BidRequest_AdSlot_NativeAdParam_ImageEle::width() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle.width)
  return width_;
}
 void BidRequest_AdSlot_NativeAdParam_ImageEle::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle.width)
}

// optional int32 height = 2;
bool BidRequest_AdSlot_NativeAdParam_ImageEle::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 BidRequest_AdSlot_NativeAdParam_ImageEle::height() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle.height)
  return height_;
}
 void BidRequest_AdSlot_NativeAdParam_ImageEle::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle.height)
}

// optional int32 shape = 3 [default = 0];
bool BidRequest_AdSlot_NativeAdParam_ImageEle::has_shape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::set_has_shape() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::clear_has_shape() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_AdSlot_NativeAdParam_ImageEle::clear_shape() {
  shape_ = 0;
  clear_has_shape();
}
 ::google::protobuf::int32 BidRequest_AdSlot_NativeAdParam_ImageEle::shape() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle.shape)
  return shape_;
}
 void BidRequest_AdSlot_NativeAdParam_ImageEle::set_shape(::google::protobuf::int32 value) {
  set_has_shape();
  shape_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle.shape)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot_NativeAdParam

// repeated int64 required_fields = 1;
int BidRequest_AdSlot_NativeAdParam::required_fields_size() const {
  return required_fields_.size();
}
void BidRequest_AdSlot_NativeAdParam::clear_required_fields() {
  required_fields_.Clear();
}
 ::google::protobuf::int64 BidRequest_AdSlot_NativeAdParam::required_fields(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.required_fields)
  return required_fields_.Get(index);
}
 void BidRequest_AdSlot_NativeAdParam::set_required_fields(int index, ::google::protobuf::int64 value) {
  required_fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.NativeAdParam.required_fields)
}
 void BidRequest_AdSlot_NativeAdParam::add_required_fields(::google::protobuf::int64 value) {
  required_fields_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.NativeAdParam.required_fields)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest_AdSlot_NativeAdParam::required_fields() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.NativeAdParam.required_fields)
  return required_fields_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest_AdSlot_NativeAdParam::mutable_required_fields() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.NativeAdParam.required_fields)
  return &required_fields_;
}

// optional int32 title_max_length = 2;
bool BidRequest_AdSlot_NativeAdParam::has_title_max_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot_NativeAdParam::set_has_title_max_length() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot_NativeAdParam::clear_has_title_max_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot_NativeAdParam::clear_title_max_length() {
  title_max_length_ = 0;
  clear_has_title_max_length();
}
 ::google::protobuf::int32 BidRequest_AdSlot_NativeAdParam::title_max_length() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.title_max_length)
  return title_max_length_;
}
 void BidRequest_AdSlot_NativeAdParam::set_title_max_length(::google::protobuf::int32 value) {
  set_has_title_max_length();
  title_max_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.NativeAdParam.title_max_length)
}

// optional int32 desc_max_length = 3;
bool BidRequest_AdSlot_NativeAdParam::has_desc_max_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_AdSlot_NativeAdParam::set_has_desc_max_length() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_AdSlot_NativeAdParam::clear_has_desc_max_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_AdSlot_NativeAdParam::clear_desc_max_length() {
  desc_max_length_ = 0;
  clear_has_desc_max_length();
}
 ::google::protobuf::int32 BidRequest_AdSlot_NativeAdParam::desc_max_length() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.desc_max_length)
  return desc_max_length_;
}
 void BidRequest_AdSlot_NativeAdParam::set_desc_max_length(::google::protobuf::int32 value) {
  set_has_desc_max_length();
  desc_max_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.NativeAdParam.desc_max_length)
}

// optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle logo_icon = 4;
bool BidRequest_AdSlot_NativeAdParam::has_logo_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_AdSlot_NativeAdParam::set_has_logo_icon() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_AdSlot_NativeAdParam::clear_has_logo_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_AdSlot_NativeAdParam::clear_logo_icon() {
  if (logo_icon_ != NULL) logo_icon_->::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle::Clear();
  clear_has_logo_icon();
}
const ::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle& BidRequest_AdSlot_NativeAdParam::logo_icon() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.logo_icon)
  return logo_icon_ != NULL ? *logo_icon_ : *default_instance_->logo_icon_;
}
::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle* BidRequest_AdSlot_NativeAdParam::mutable_logo_icon() {
  set_has_logo_icon();
  if (logo_icon_ == NULL) {
    logo_icon_ = new ::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.NativeAdParam.logo_icon)
  return logo_icon_;
}
::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle* BidRequest_AdSlot_NativeAdParam::release_logo_icon() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.NativeAdParam.logo_icon)
  clear_has_logo_icon();
  ::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle* temp = logo_icon_;
  logo_icon_ = NULL;
  return temp;
}
void BidRequest_AdSlot_NativeAdParam::set_allocated_logo_icon(::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle* logo_icon) {
  delete logo_icon_;
  logo_icon_ = logo_icon;
  if (logo_icon) {
    set_has_logo_icon();
  } else {
    clear_has_logo_icon();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.NativeAdParam.logo_icon)
}

// optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam.ImageEle image = 5;
bool BidRequest_AdSlot_NativeAdParam::has_image() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_AdSlot_NativeAdParam::set_has_image() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_AdSlot_NativeAdParam::clear_has_image() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_AdSlot_NativeAdParam::clear_image() {
  if (image_ != NULL) image_->::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle::Clear();
  clear_has_image();
}
const ::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle& BidRequest_AdSlot_NativeAdParam::image() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle* BidRequest_AdSlot_NativeAdParam::mutable_image() {
  set_has_image();
  if (image_ == NULL) {
    image_ = new ::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.NativeAdParam.image)
  return image_;
}
::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle* BidRequest_AdSlot_NativeAdParam::release_image() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.NativeAdParam.image)
  clear_has_image();
  ::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle* temp = image_;
  image_ = NULL;
  return temp;
}
void BidRequest_AdSlot_NativeAdParam::set_allocated_image(::protocol::baidu::BidRequest_AdSlot_NativeAdParam_ImageEle* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.NativeAdParam.image)
}

// optional int32 image_num = 6;
bool BidRequest_AdSlot_NativeAdParam::has_image_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_AdSlot_NativeAdParam::set_has_image_num() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_AdSlot_NativeAdParam::clear_has_image_num() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_AdSlot_NativeAdParam::clear_image_num() {
  image_num_ = 0;
  clear_has_image_num();
}
 ::google::protobuf::int32 BidRequest_AdSlot_NativeAdParam::image_num() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.NativeAdParam.image_num)
  return image_num_;
}
 void BidRequest_AdSlot_NativeAdParam::set_image_num(::google::protobuf::int32 value) {
  set_has_image_num();
  image_num_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.NativeAdParam.image_num)
}

// -------------------------------------------------------------------

// BidRequest_AdSlot

// optional uint64 ad_block_key = 1;
bool BidRequest_AdSlot::has_ad_block_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_AdSlot::set_has_ad_block_key() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_AdSlot::clear_has_ad_block_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_AdSlot::clear_ad_block_key() {
  ad_block_key_ = GOOGLE_ULONGLONG(0);
  clear_has_ad_block_key();
}
 ::google::protobuf::uint64 BidRequest_AdSlot::ad_block_key() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.ad_block_key)
  return ad_block_key_;
}
 void BidRequest_AdSlot::set_ad_block_key(::google::protobuf::uint64 value) {
  set_has_ad_block_key();
  ad_block_key_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.ad_block_key)
}

// optional int32 sequence_id = 2;
bool BidRequest_AdSlot::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_AdSlot::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_AdSlot::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_AdSlot::clear_sequence_id() {
  sequence_id_ = 0;
  clear_has_sequence_id();
}
 ::google::protobuf::int32 BidRequest_AdSlot::sequence_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.sequence_id)
  return sequence_id_;
}
 void BidRequest_AdSlot::set_sequence_id(::google::protobuf::int32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.sequence_id)
}

// optional int32 adslot_type = 3;
bool BidRequest_AdSlot::has_adslot_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_AdSlot::set_has_adslot_type() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_AdSlot::clear_has_adslot_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_AdSlot::clear_adslot_type() {
  adslot_type_ = 0;
  clear_has_adslot_type();
}
 ::google::protobuf::int32 BidRequest_AdSlot::adslot_type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.adslot_type)
  return adslot_type_;
}
 void BidRequest_AdSlot::set_adslot_type(::google::protobuf::int32 value) {
  set_has_adslot_type();
  adslot_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.adslot_type)
}

// optional int32 width = 4;
bool BidRequest_AdSlot::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_AdSlot::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_AdSlot::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_AdSlot::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 BidRequest_AdSlot::width() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.width)
  return width_;
}
 void BidRequest_AdSlot::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.width)
}

// optional int32 height = 5;
bool BidRequest_AdSlot::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_AdSlot::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_AdSlot::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_AdSlot::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 BidRequest_AdSlot::height() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.height)
  return height_;
}
 void BidRequest_AdSlot::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.height)
}

// optional int32 actual_width = 18;
bool BidRequest_AdSlot::has_actual_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_AdSlot::set_has_actual_width() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_AdSlot::clear_has_actual_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_AdSlot::clear_actual_width() {
  actual_width_ = 0;
  clear_has_actual_width();
}
 ::google::protobuf::int32 BidRequest_AdSlot::actual_width() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.actual_width)
  return actual_width_;
}
 void BidRequest_AdSlot::set_actual_width(::google::protobuf::int32 value) {
  set_has_actual_width();
  actual_width_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.actual_width)
}

// optional int32 actual_height = 19;
bool BidRequest_AdSlot::has_actual_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_AdSlot::set_has_actual_height() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_AdSlot::clear_has_actual_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_AdSlot::clear_actual_height() {
  actual_height_ = 0;
  clear_has_actual_height();
}
 ::google::protobuf::int32 BidRequest_AdSlot::actual_height() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.actual_height)
  return actual_height_;
}
 void BidRequest_AdSlot::set_actual_height(::google::protobuf::int32 value) {
  set_has_actual_height();
  actual_height_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.actual_height)
}

// optional int32 slot_visibility = 6;
bool BidRequest_AdSlot::has_slot_visibility() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_AdSlot::set_has_slot_visibility() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_AdSlot::clear_has_slot_visibility() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_AdSlot::clear_slot_visibility() {
  slot_visibility_ = 0;
  clear_has_slot_visibility();
}
 ::google::protobuf::int32 BidRequest_AdSlot::slot_visibility() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.slot_visibility)
  return slot_visibility_;
}
 void BidRequest_AdSlot::set_slot_visibility(::google::protobuf::int32 value) {
  set_has_slot_visibility();
  slot_visibility_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.slot_visibility)
}

// repeated int32 creative_type = 7 [packed = true];
int BidRequest_AdSlot::creative_type_size() const {
  return creative_type_.size();
}
void BidRequest_AdSlot::clear_creative_type() {
  creative_type_.Clear();
}
 ::google::protobuf::int32 BidRequest_AdSlot::creative_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.creative_type)
  return creative_type_.Get(index);
}
 void BidRequest_AdSlot::set_creative_type(int index, ::google::protobuf::int32 value) {
  creative_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.creative_type)
}
 void BidRequest_AdSlot::add_creative_type(::google::protobuf::int32 value) {
  creative_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.creative_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_AdSlot::creative_type() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.creative_type)
  return creative_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_AdSlot::mutable_creative_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.creative_type)
  return &creative_type_;
}

// repeated .protocol.baidu.BidRequest.AdSlot.CreativeDescType creative_desc_type = 22;
int BidRequest_AdSlot::creative_desc_type_size() const {
  return creative_desc_type_.size();
}
void BidRequest_AdSlot::clear_creative_desc_type() {
  creative_desc_type_.Clear();
}
 ::protocol::baidu::BidRequest_AdSlot_CreativeDescType BidRequest_AdSlot::creative_desc_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.creative_desc_type)
  return static_cast< ::protocol::baidu::BidRequest_AdSlot_CreativeDescType >(creative_desc_type_.Get(index));
}
 void BidRequest_AdSlot::set_creative_desc_type(int index, ::protocol::baidu::BidRequest_AdSlot_CreativeDescType value) {
  assert(::protocol::baidu::BidRequest_AdSlot_CreativeDescType_IsValid(value));
  creative_desc_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.creative_desc_type)
}
 void BidRequest_AdSlot::add_creative_desc_type(::protocol::baidu::BidRequest_AdSlot_CreativeDescType value) {
  assert(::protocol::baidu::BidRequest_AdSlot_CreativeDescType_IsValid(value));
  creative_desc_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.creative_desc_type)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_AdSlot::creative_desc_type() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.creative_desc_type)
  return creative_desc_type_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_AdSlot::mutable_creative_desc_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.creative_desc_type)
  return &creative_desc_type_;
}

// repeated string excluded_landing_page_url = 8;
int BidRequest_AdSlot::excluded_landing_page_url_size() const {
  return excluded_landing_page_url_.size();
}
void BidRequest_AdSlot::clear_excluded_landing_page_url() {
  excluded_landing_page_url_.Clear();
}
 const ::std::string& BidRequest_AdSlot::excluded_landing_page_url(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
  return excluded_landing_page_url_.Get(index);
}
 ::std::string* BidRequest_AdSlot::mutable_excluded_landing_page_url(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
  return excluded_landing_page_url_.Mutable(index);
}
 void BidRequest_AdSlot::set_excluded_landing_page_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
  excluded_landing_page_url_.Mutable(index)->assign(value);
}
 void BidRequest_AdSlot::set_excluded_landing_page_url(int index, const char* value) {
  excluded_landing_page_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
}
 void BidRequest_AdSlot::set_excluded_landing_page_url(int index, const char* value, size_t size) {
  excluded_landing_page_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
}
 ::std::string* BidRequest_AdSlot::add_excluded_landing_page_url() {
  // @@protoc_insertion_point(field_add_mutable:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
  return excluded_landing_page_url_.Add();
}
 void BidRequest_AdSlot::add_excluded_landing_page_url(const ::std::string& value) {
  excluded_landing_page_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
}
 void BidRequest_AdSlot::add_excluded_landing_page_url(const char* value) {
  excluded_landing_page_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
}
 void BidRequest_AdSlot::add_excluded_landing_page_url(const char* value, size_t size) {
  excluded_landing_page_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_AdSlot::excluded_landing_page_url() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
  return excluded_landing_page_url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_AdSlot::mutable_excluded_landing_page_url() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.excluded_landing_page_url)
  return &excluded_landing_page_url_;
}

// repeated fixed64 publisher_settings_list_id = 14;
int BidRequest_AdSlot::publisher_settings_list_id_size() const {
  return publisher_settings_list_id_.size();
}
void BidRequest_AdSlot::clear_publisher_settings_list_id() {
  publisher_settings_list_id_.Clear();
}
 ::google::protobuf::uint64 BidRequest_AdSlot::publisher_settings_list_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.publisher_settings_list_id)
  return publisher_settings_list_id_.Get(index);
}
 void BidRequest_AdSlot::set_publisher_settings_list_id(int index, ::google::protobuf::uint64 value) {
  publisher_settings_list_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.publisher_settings_list_id)
}
 void BidRequest_AdSlot::add_publisher_settings_list_id(::google::protobuf::uint64 value) {
  publisher_settings_list_id_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.publisher_settings_list_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BidRequest_AdSlot::publisher_settings_list_id() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.publisher_settings_list_id)
  return publisher_settings_list_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BidRequest_AdSlot::mutable_publisher_settings_list_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.publisher_settings_list_id)
  return &publisher_settings_list_id_;
}

// optional int32 minimum_cpm = 9;
bool BidRequest_AdSlot::has_minimum_cpm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_AdSlot::set_has_minimum_cpm() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_AdSlot::clear_has_minimum_cpm() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_AdSlot::clear_minimum_cpm() {
  minimum_cpm_ = 0;
  clear_has_minimum_cpm();
}
 ::google::protobuf::int32 BidRequest_AdSlot::minimum_cpm() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.minimum_cpm)
  return minimum_cpm_;
}
 void BidRequest_AdSlot::set_minimum_cpm(::google::protobuf::int32 value) {
  set_has_minimum_cpm();
  minimum_cpm_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.minimum_cpm)
}

// optional int32 max_video_duration = 10;
bool BidRequest_AdSlot::has_max_video_duration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_AdSlot::set_has_max_video_duration() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_AdSlot::clear_has_max_video_duration() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_AdSlot::clear_max_video_duration() {
  max_video_duration_ = 0;
  clear_has_max_video_duration();
}
 ::google::protobuf::int32 BidRequest_AdSlot::max_video_duration() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.max_video_duration)
  return max_video_duration_;
}
 void BidRequest_AdSlot::set_max_video_duration(::google::protobuf::int32 value) {
  set_has_max_video_duration();
  max_video_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.max_video_duration)
}

// optional int32 min_video_duration = 11;
bool BidRequest_AdSlot::has_min_video_duration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest_AdSlot::set_has_min_video_duration() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest_AdSlot::clear_has_min_video_duration() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest_AdSlot::clear_min_video_duration() {
  min_video_duration_ = 0;
  clear_has_min_video_duration();
}
 ::google::protobuf::int32 BidRequest_AdSlot::min_video_duration() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.min_video_duration)
  return min_video_duration_;
}
 void BidRequest_AdSlot::set_min_video_duration(::google::protobuf::int32 value) {
  set_has_min_video_duration();
  min_video_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.min_video_duration)
}

// optional int32 video_start_delay = 12;
bool BidRequest_AdSlot::has_video_start_delay() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest_AdSlot::set_has_video_start_delay() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest_AdSlot::clear_has_video_start_delay() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest_AdSlot::clear_video_start_delay() {
  video_start_delay_ = 0;
  clear_has_video_start_delay();
}
 ::google::protobuf::int32 BidRequest_AdSlot::video_start_delay() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.video_start_delay)
  return video_start_delay_;
}
 void BidRequest_AdSlot::set_video_start_delay(::google::protobuf::int32 value) {
  set_has_video_start_delay();
  video_start_delay_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.video_start_delay)
}

// optional .protocol.baidu.BidRequest.AdSlot.VideoInfo video_info = 15;
bool BidRequest_AdSlot::has_video_info() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest_AdSlot::set_has_video_info() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest_AdSlot::clear_has_video_info() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest_AdSlot::clear_video_info() {
  if (video_info_ != NULL) video_info_->::protocol::baidu::BidRequest_AdSlot_VideoInfo::Clear();
  clear_has_video_info();
}
const ::protocol::baidu::BidRequest_AdSlot_VideoInfo& BidRequest_AdSlot::video_info() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.video_info)
  return video_info_ != NULL ? *video_info_ : *default_instance_->video_info_;
}
::protocol::baidu::BidRequest_AdSlot_VideoInfo* BidRequest_AdSlot::mutable_video_info() {
  set_has_video_info();
  if (video_info_ == NULL) {
    video_info_ = new ::protocol::baidu::BidRequest_AdSlot_VideoInfo;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.video_info)
  return video_info_;
}
::protocol::baidu::BidRequest_AdSlot_VideoInfo* BidRequest_AdSlot::release_video_info() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.video_info)
  clear_has_video_info();
  ::protocol::baidu::BidRequest_AdSlot_VideoInfo* temp = video_info_;
  video_info_ = NULL;
  return temp;
}
void BidRequest_AdSlot::set_allocated_video_info(::protocol::baidu::BidRequest_AdSlot_VideoInfo* video_info) {
  delete video_info_;
  video_info_ = video_info;
  if (video_info) {
    set_has_video_info();
  } else {
    clear_has_video_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.video_info)
}

// optional .protocol.baidu.BidRequest.AdSlot.LinkUnitInfo link_unit_info = 16;
bool BidRequest_AdSlot::has_link_unit_info() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BidRequest_AdSlot::set_has_link_unit_info() {
  _has_bits_[0] |= 0x00020000u;
}
void BidRequest_AdSlot::clear_has_link_unit_info() {
  _has_bits_[0] &= ~0x00020000u;
}
void BidRequest_AdSlot::clear_link_unit_info() {
  if (link_unit_info_ != NULL) link_unit_info_->::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo::Clear();
  clear_has_link_unit_info();
}
const ::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo& BidRequest_AdSlot::link_unit_info() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.link_unit_info)
  return link_unit_info_ != NULL ? *link_unit_info_ : *default_instance_->link_unit_info_;
}
::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo* BidRequest_AdSlot::mutable_link_unit_info() {
  set_has_link_unit_info();
  if (link_unit_info_ == NULL) {
    link_unit_info_ = new ::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.link_unit_info)
  return link_unit_info_;
}
::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo* BidRequest_AdSlot::release_link_unit_info() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.link_unit_info)
  clear_has_link_unit_info();
  ::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo* temp = link_unit_info_;
  link_unit_info_ = NULL;
  return temp;
}
void BidRequest_AdSlot::set_allocated_link_unit_info(::protocol::baidu::BidRequest_AdSlot_LinkUnitInfo* link_unit_info) {
  delete link_unit_info_;
  link_unit_info_ = link_unit_info;
  if (link_unit_info) {
    set_has_link_unit_info();
  } else {
    clear_has_link_unit_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.link_unit_info)
}

// optional .protocol.baidu.BidRequest.AdSlot.PreferredOrderInfo preferred_order_info = 13;
bool BidRequest_AdSlot::has_preferred_order_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void BidRequest_AdSlot::set_has_preferred_order_info() {
  _has_bits_[0] |= 0x00040000u;
}
void BidRequest_AdSlot::clear_has_preferred_order_info() {
  _has_bits_[0] &= ~0x00040000u;
}
void BidRequest_AdSlot::clear_preferred_order_info() {
  if (preferred_order_info_ != NULL) preferred_order_info_->::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo::Clear();
  clear_has_preferred_order_info();
}
const ::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo& BidRequest_AdSlot::preferred_order_info() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.preferred_order_info)
  return preferred_order_info_ != NULL ? *preferred_order_info_ : *default_instance_->preferred_order_info_;
}
::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo* BidRequest_AdSlot::mutable_preferred_order_info() {
  set_has_preferred_order_info();
  if (preferred_order_info_ == NULL) {
    preferred_order_info_ = new ::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.preferred_order_info)
  return preferred_order_info_;
}
::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo* BidRequest_AdSlot::release_preferred_order_info() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.preferred_order_info)
  clear_has_preferred_order_info();
  ::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo* temp = preferred_order_info_;
  preferred_order_info_ = NULL;
  return temp;
}
void BidRequest_AdSlot::set_allocated_preferred_order_info(::protocol::baidu::BidRequest_AdSlot_PreferredOrderInfo* preferred_order_info) {
  delete preferred_order_info_;
  preferred_order_info_ = preferred_order_info;
  if (preferred_order_info) {
    set_has_preferred_order_info();
  } else {
    clear_has_preferred_order_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.preferred_order_info)
}

// repeated .protocol.baidu.BidRequest.AdSlot.GuaranteedOrder guaranteed_orders = 20;
int BidRequest_AdSlot::guaranteed_orders_size() const {
  return guaranteed_orders_.size();
}
void BidRequest_AdSlot::clear_guaranteed_orders() {
  guaranteed_orders_.Clear();
}
const ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder& BidRequest_AdSlot::guaranteed_orders(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.guaranteed_orders)
  return guaranteed_orders_.Get(index);
}
::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder* BidRequest_AdSlot::mutable_guaranteed_orders(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.guaranteed_orders)
  return guaranteed_orders_.Mutable(index);
}
::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder* BidRequest_AdSlot::add_guaranteed_orders() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.AdSlot.guaranteed_orders)
  return guaranteed_orders_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder >*
BidRequest_AdSlot::mutable_guaranteed_orders() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.AdSlot.guaranteed_orders)
  return &guaranteed_orders_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_AdSlot_GuaranteedOrder >&
BidRequest_AdSlot::guaranteed_orders() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.AdSlot.guaranteed_orders)
  return guaranteed_orders_;
}

// optional .protocol.baidu.BidRequest.AdSlot.ExpandCreativeInfo expand_creative_info = 17;
bool BidRequest_AdSlot::has_expand_creative_info() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void BidRequest_AdSlot::set_has_expand_creative_info() {
  _has_bits_[0] |= 0x00100000u;
}
void BidRequest_AdSlot::clear_has_expand_creative_info() {
  _has_bits_[0] &= ~0x00100000u;
}
void BidRequest_AdSlot::clear_expand_creative_info() {
  if (expand_creative_info_ != NULL) expand_creative_info_->::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo::Clear();
  clear_has_expand_creative_info();
}
const ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo& BidRequest_AdSlot::expand_creative_info() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.expand_creative_info)
  return expand_creative_info_ != NULL ? *expand_creative_info_ : *default_instance_->expand_creative_info_;
}
::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo* BidRequest_AdSlot::mutable_expand_creative_info() {
  set_has_expand_creative_info();
  if (expand_creative_info_ == NULL) {
    expand_creative_info_ = new ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.expand_creative_info)
  return expand_creative_info_;
}
::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo* BidRequest_AdSlot::release_expand_creative_info() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.expand_creative_info)
  clear_has_expand_creative_info();
  ::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo* temp = expand_creative_info_;
  expand_creative_info_ = NULL;
  return temp;
}
void BidRequest_AdSlot::set_allocated_expand_creative_info(::protocol::baidu::BidRequest_AdSlot_ExpandCreativeInfo* expand_creative_info) {
  delete expand_creative_info_;
  expand_creative_info_ = expand_creative_info;
  if (expand_creative_info) {
    set_has_expand_creative_info();
  } else {
    clear_has_expand_creative_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.expand_creative_info)
}

// optional .protocol.baidu.BidRequest.AdSlot.AdSlotLevel adslot_level = 21 [default = UNKNOWN_ADB_LEVEL];
bool BidRequest_AdSlot::has_adslot_level() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void BidRequest_AdSlot::set_has_adslot_level() {
  _has_bits_[0] |= 0x00200000u;
}
void BidRequest_AdSlot::clear_has_adslot_level() {
  _has_bits_[0] &= ~0x00200000u;
}
void BidRequest_AdSlot::clear_adslot_level() {
  adslot_level_ = 0;
  clear_has_adslot_level();
}
 ::protocol::baidu::BidRequest_AdSlot_AdSlotLevel BidRequest_AdSlot::adslot_level() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.adslot_level)
  return static_cast< ::protocol::baidu::BidRequest_AdSlot_AdSlotLevel >(adslot_level_);
}
 void BidRequest_AdSlot::set_adslot_level(::protocol::baidu::BidRequest_AdSlot_AdSlotLevel value) {
  assert(::protocol::baidu::BidRequest_AdSlot_AdSlotLevel_IsValid(value));
  set_has_adslot_level();
  adslot_level_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.adslot_level)
}

// optional bool allowed_non_nativead = 23 [default = true];
bool BidRequest_AdSlot::has_allowed_non_nativead() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void BidRequest_AdSlot::set_has_allowed_non_nativead() {
  _has_bits_[0] |= 0x00400000u;
}
void BidRequest_AdSlot::clear_has_allowed_non_nativead() {
  _has_bits_[0] &= ~0x00400000u;
}
void BidRequest_AdSlot::clear_allowed_non_nativead() {
  allowed_non_nativead_ = true;
  clear_has_allowed_non_nativead();
}
 bool BidRequest_AdSlot::allowed_non_nativead() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.allowed_non_nativead)
  return allowed_non_nativead_;
}
 void BidRequest_AdSlot::set_allowed_non_nativead(bool value) {
  set_has_allowed_non_nativead();
  allowed_non_nativead_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.allowed_non_nativead)
}

// optional .protocol.baidu.BidRequest.AdSlot.NativeAdParam nativead_param = 24;
bool BidRequest_AdSlot::has_nativead_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void BidRequest_AdSlot::set_has_nativead_param() {
  _has_bits_[0] |= 0x00800000u;
}
void BidRequest_AdSlot::clear_has_nativead_param() {
  _has_bits_[0] &= ~0x00800000u;
}
void BidRequest_AdSlot::clear_nativead_param() {
  if (nativead_param_ != NULL) nativead_param_->::protocol::baidu::BidRequest_AdSlot_NativeAdParam::Clear();
  clear_has_nativead_param();
}
const ::protocol::baidu::BidRequest_AdSlot_NativeAdParam& BidRequest_AdSlot::nativead_param() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.nativead_param)
  return nativead_param_ != NULL ? *nativead_param_ : *default_instance_->nativead_param_;
}
::protocol::baidu::BidRequest_AdSlot_NativeAdParam* BidRequest_AdSlot::mutable_nativead_param() {
  set_has_nativead_param();
  if (nativead_param_ == NULL) {
    nativead_param_ = new ::protocol::baidu::BidRequest_AdSlot_NativeAdParam;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.AdSlot.nativead_param)
  return nativead_param_;
}
::protocol::baidu::BidRequest_AdSlot_NativeAdParam* BidRequest_AdSlot::release_nativead_param() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.AdSlot.nativead_param)
  clear_has_nativead_param();
  ::protocol::baidu::BidRequest_AdSlot_NativeAdParam* temp = nativead_param_;
  nativead_param_ = NULL;
  return temp;
}
void BidRequest_AdSlot::set_allocated_nativead_param(::protocol::baidu::BidRequest_AdSlot_NativeAdParam* nativead_param) {
  delete nativead_param_;
  nativead_param_ = nativead_param;
  if (nativead_param) {
    set_has_nativead_param();
  } else {
    clear_has_nativead_param();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.AdSlot.nativead_param)
}

// optional bool secure = 25 [default = false];
bool BidRequest_AdSlot::has_secure() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void BidRequest_AdSlot::set_has_secure() {
  _has_bits_[0] |= 0x01000000u;
}
void BidRequest_AdSlot::clear_has_secure() {
  _has_bits_[0] &= ~0x01000000u;
}
void BidRequest_AdSlot::clear_secure() {
  secure_ = false;
  clear_has_secure();
}
 bool BidRequest_AdSlot::secure() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.AdSlot.secure)
  return secure_;
}
 void BidRequest_AdSlot::set_secure(bool value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.AdSlot.secure)
}

// -------------------------------------------------------------------

// BidRequest

// required string id = 1;
bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest::id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.id)
}
 void BidRequest::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.id)
}
 void BidRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.id)
}
 ::std::string* BidRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.id)
}

// optional string ip = 2;
bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& BidRequest::ip() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.ip)
}
 void BidRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.ip)
}
 void BidRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.ip)
}
 ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.ip)
}

// optional string user_agent = 3;
bool BidRequest::has_user_agent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest::set_has_user_agent() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_agent();
}
 const ::std::string& BidRequest::user_agent() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.user_agent)
  return user_agent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.user_agent)
}
 void BidRequest::set_user_agent(const char* value) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.user_agent)
}
 void BidRequest::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  user_agent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.user_agent)
}
 ::std::string* BidRequest::mutable_user_agent() {
  set_has_user_agent();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.user_agent)
  return user_agent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_user_agent() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.user_agent)
  clear_has_user_agent();
  return user_agent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent != NULL) {
    set_has_user_agent();
  } else {
    clear_has_user_agent();
  }
  user_agent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.user_agent)
}

// optional string baidu_user_id = 4;
bool BidRequest::has_baidu_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest::set_has_baidu_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest::clear_has_baidu_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest::clear_baidu_user_id() {
  baidu_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_baidu_user_id();
}
 const ::std::string& BidRequest::baidu_user_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.baidu_user_id)
  return baidu_user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_baidu_user_id(const ::std::string& value) {
  set_has_baidu_user_id();
  baidu_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.baidu_user_id)
}
 void BidRequest::set_baidu_user_id(const char* value) {
  set_has_baidu_user_id();
  baidu_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.baidu_user_id)
}
 void BidRequest::set_baidu_user_id(const char* value, size_t size) {
  set_has_baidu_user_id();
  baidu_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.baidu_user_id)
}
 ::std::string* BidRequest::mutable_baidu_user_id() {
  set_has_baidu_user_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.baidu_user_id)
  return baidu_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_baidu_user_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.baidu_user_id)
  clear_has_baidu_user_id();
  return baidu_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_baidu_user_id(::std::string* baidu_user_id) {
  if (baidu_user_id != NULL) {
    set_has_baidu_user_id();
  } else {
    clear_has_baidu_user_id();
  }
  baidu_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baidu_user_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.baidu_user_id)
}

// optional int32 baidu_user_id_version = 5;
bool BidRequest::has_baidu_user_id_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest::set_has_baidu_user_id_version() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest::clear_has_baidu_user_id_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest::clear_baidu_user_id_version() {
  baidu_user_id_version_ = 0;
  clear_has_baidu_user_id_version();
}
 ::google::protobuf::int32 BidRequest::baidu_user_id_version() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.baidu_user_id_version)
  return baidu_user_id_version_;
}
 void BidRequest::set_baidu_user_id_version(::google::protobuf::int32 value) {
  set_has_baidu_user_id_version();
  baidu_user_id_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.baidu_user_id_version)
}

// repeated .protocol.baidu.BidRequest.BaiduId baidu_id_list = 8;
int BidRequest::baidu_id_list_size() const {
  return baidu_id_list_.size();
}
void BidRequest::clear_baidu_id_list() {
  baidu_id_list_.Clear();
}
const ::protocol::baidu::BidRequest_BaiduId& BidRequest::baidu_id_list(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.baidu_id_list)
  return baidu_id_list_.Get(index);
}
::protocol::baidu::BidRequest_BaiduId* BidRequest::mutable_baidu_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.baidu_id_list)
  return baidu_id_list_.Mutable(index);
}
::protocol::baidu::BidRequest_BaiduId* BidRequest::add_baidu_id_list() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.baidu_id_list)
  return baidu_id_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_BaiduId >*
BidRequest::mutable_baidu_id_list() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.baidu_id_list)
  return &baidu_id_list_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_BaiduId >&
BidRequest::baidu_id_list() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.baidu_id_list)
  return baidu_id_list_;
}

// optional string buyer_user_id = 32;
bool BidRequest::has_buyer_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest::set_has_buyer_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest::clear_has_buyer_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest::clear_buyer_user_id() {
  buyer_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyer_user_id();
}
 const ::std::string& BidRequest::buyer_user_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.buyer_user_id)
  return buyer_user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_buyer_user_id(const ::std::string& value) {
  set_has_buyer_user_id();
  buyer_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.buyer_user_id)
}
 void BidRequest::set_buyer_user_id(const char* value) {
  set_has_buyer_user_id();
  buyer_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.buyer_user_id)
}
 void BidRequest::set_buyer_user_id(const char* value, size_t size) {
  set_has_buyer_user_id();
  buyer_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.buyer_user_id)
}
 ::std::string* BidRequest::mutable_buyer_user_id() {
  set_has_buyer_user_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.buyer_user_id)
  return buyer_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_buyer_user_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.buyer_user_id)
  clear_has_buyer_user_id();
  return buyer_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_buyer_user_id(::std::string* buyer_user_id) {
  if (buyer_user_id != NULL) {
    set_has_buyer_user_id();
  } else {
    clear_has_buyer_user_id();
  }
  buyer_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyer_user_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.buyer_user_id)
}

// repeated int64 user_category = 6;
int BidRequest::user_category_size() const {
  return user_category_.size();
}
void BidRequest::clear_user_category() {
  user_category_.Clear();
}
 ::google::protobuf::int64 BidRequest::user_category(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.user_category)
  return user_category_.Get(index);
}
 void BidRequest::set_user_category(int index, ::google::protobuf::int64 value) {
  user_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.user_category)
}
 void BidRequest::add_user_category(::google::protobuf::int64 value) {
  user_category_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.user_category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest::user_category() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.user_category)
  return user_category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest::mutable_user_category() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.user_category)
  return &user_category_;
}

// optional .protocol.baidu.BidRequest.CustomizedUserTag customized_user_tag = 31;
bool BidRequest::has_customized_user_tag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest::set_has_customized_user_tag() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest::clear_has_customized_user_tag() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest::clear_customized_user_tag() {
  if (customized_user_tag_ != NULL) customized_user_tag_->::protocol::baidu::BidRequest_CustomizedUserTag::Clear();
  clear_has_customized_user_tag();
}
const ::protocol::baidu::BidRequest_CustomizedUserTag& BidRequest::customized_user_tag() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.customized_user_tag)
  return customized_user_tag_ != NULL ? *customized_user_tag_ : *default_instance_->customized_user_tag_;
}
::protocol::baidu::BidRequest_CustomizedUserTag* BidRequest::mutable_customized_user_tag() {
  set_has_customized_user_tag();
  if (customized_user_tag_ == NULL) {
    customized_user_tag_ = new ::protocol::baidu::BidRequest_CustomizedUserTag;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.customized_user_tag)
  return customized_user_tag_;
}
::protocol::baidu::BidRequest_CustomizedUserTag* BidRequest::release_customized_user_tag() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.customized_user_tag)
  clear_has_customized_user_tag();
  ::protocol::baidu::BidRequest_CustomizedUserTag* temp = customized_user_tag_;
  customized_user_tag_ = NULL;
  return temp;
}
void BidRequest::set_allocated_customized_user_tag(::protocol::baidu::BidRequest_CustomizedUserTag* customized_user_tag) {
  delete customized_user_tag_;
  customized_user_tag_ = customized_user_tag;
  if (customized_user_tag) {
    set_has_customized_user_tag();
  } else {
    clear_has_customized_user_tag();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.customized_user_tag)
}

// optional .protocol.baidu.BidRequest.Gender gender = 7;
bool BidRequest::has_gender() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest::set_has_gender() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest::clear_has_gender() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
 ::protocol::baidu::BidRequest_Gender BidRequest::gender() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.gender)
  return static_cast< ::protocol::baidu::BidRequest_Gender >(gender_);
}
 void BidRequest::set_gender(::protocol::baidu::BidRequest_Gender value) {
  assert(::protocol::baidu::BidRequest_Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.gender)
}

// optional string detected_language = 9;
bool BidRequest::has_detected_language() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest::set_has_detected_language() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest::clear_has_detected_language() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest::clear_detected_language() {
  detected_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_detected_language();
}
 const ::std::string& BidRequest::detected_language() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.detected_language)
  return detected_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_detected_language(const ::std::string& value) {
  set_has_detected_language();
  detected_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.detected_language)
}
 void BidRequest::set_detected_language(const char* value) {
  set_has_detected_language();
  detected_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.detected_language)
}
 void BidRequest::set_detected_language(const char* value, size_t size) {
  set_has_detected_language();
  detected_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.detected_language)
}
 ::std::string* BidRequest::mutable_detected_language() {
  set_has_detected_language();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.detected_language)
  return detected_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_detected_language() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.detected_language)
  clear_has_detected_language();
  return detected_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_detected_language(::std::string* detected_language) {
  if (detected_language != NULL) {
    set_has_detected_language();
  } else {
    clear_has_detected_language();
  }
  detected_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detected_language);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.detected_language)
}

// optional string flash_version = 10;
bool BidRequest::has_flash_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest::set_has_flash_version() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest::clear_has_flash_version() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest::clear_flash_version() {
  flash_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_flash_version();
}
 const ::std::string& BidRequest::flash_version() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.flash_version)
  return flash_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_flash_version(const ::std::string& value) {
  set_has_flash_version();
  flash_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.flash_version)
}
 void BidRequest::set_flash_version(const char* value) {
  set_has_flash_version();
  flash_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.flash_version)
}
 void BidRequest::set_flash_version(const char* value, size_t size) {
  set_has_flash_version();
  flash_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.flash_version)
}
 ::std::string* BidRequest::mutable_flash_version() {
  set_has_flash_version();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.flash_version)
  return flash_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_flash_version() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.flash_version)
  clear_has_flash_version();
  return flash_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_flash_version(::std::string* flash_version) {
  if (flash_version != NULL) {
    set_has_flash_version();
  } else {
    clear_has_flash_version();
  }
  flash_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flash_version);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.flash_version)
}

// optional .protocol.baidu.BidRequest.Geo user_geo_info = 28;
bool BidRequest::has_user_geo_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest::set_has_user_geo_info() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest::clear_has_user_geo_info() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest::clear_user_geo_info() {
  if (user_geo_info_ != NULL) user_geo_info_->::protocol::baidu::BidRequest_Geo::Clear();
  clear_has_user_geo_info();
}
const ::protocol::baidu::BidRequest_Geo& BidRequest::user_geo_info() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.user_geo_info)
  return user_geo_info_ != NULL ? *user_geo_info_ : *default_instance_->user_geo_info_;
}
::protocol::baidu::BidRequest_Geo* BidRequest::mutable_user_geo_info() {
  set_has_user_geo_info();
  if (user_geo_info_ == NULL) {
    user_geo_info_ = new ::protocol::baidu::BidRequest_Geo;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.user_geo_info)
  return user_geo_info_;
}
::protocol::baidu::BidRequest_Geo* BidRequest::release_user_geo_info() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.user_geo_info)
  clear_has_user_geo_info();
  ::protocol::baidu::BidRequest_Geo* temp = user_geo_info_;
  user_geo_info_ = NULL;
  return temp;
}
void BidRequest::set_allocated_user_geo_info(::protocol::baidu::BidRequest_Geo* user_geo_info) {
  delete user_geo_info_;
  user_geo_info_ = user_geo_info;
  if (user_geo_info) {
    set_has_user_geo_info();
  } else {
    clear_has_user_geo_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.user_geo_info)
}

// optional string url = 11;
bool BidRequest::has_url() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest::set_has_url() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& BidRequest::url() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.url)
}
 void BidRequest::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.url)
}
 void BidRequest::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.url)
}
 ::std::string* BidRequest::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_url() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.url)
}

// optional string referer = 12;
bool BidRequest::has_referer() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest::set_has_referer() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest::clear_has_referer() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest::clear_referer() {
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_referer();
}
 const ::std::string& BidRequest::referer() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.referer)
  return referer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_referer(const ::std::string& value) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.referer)
}
 void BidRequest::set_referer(const char* value) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.referer)
}
 void BidRequest::set_referer(const char* value, size_t size) {
  set_has_referer();
  referer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.referer)
}
 ::std::string* BidRequest::mutable_referer() {
  set_has_referer();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.referer)
  return referer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_referer() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.referer)
  clear_has_referer();
  return referer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_referer(::std::string* referer) {
  if (referer != NULL) {
    set_has_referer();
  } else {
    clear_has_referer();
  }
  referer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referer);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.referer)
}

// optional int32 site_category = 13;
bool BidRequest::has_site_category() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest::set_has_site_category() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest::clear_has_site_category() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest::clear_site_category() {
  site_category_ = 0;
  clear_has_site_category();
}
 ::google::protobuf::int32 BidRequest::site_category() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.site_category)
  return site_category_;
}
 void BidRequest::set_site_category(::google::protobuf::int32 value) {
  set_has_site_category();
  site_category_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.site_category)
}

// optional int32 site_quality = 14;
bool BidRequest::has_site_quality() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest::set_has_site_quality() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest::clear_has_site_quality() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest::clear_site_quality() {
  site_quality_ = 0;
  clear_has_site_quality();
}
 ::google::protobuf::int32 BidRequest::site_quality() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.site_quality)
  return site_quality_;
}
 void BidRequest::set_site_quality(::google::protobuf::int32 value) {
  set_has_site_quality();
  site_quality_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.site_quality)
}

// optional int32 page_type = 15;
bool BidRequest::has_page_type() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BidRequest::set_has_page_type() {
  _has_bits_[0] |= 0x00020000u;
}
void BidRequest::clear_has_page_type() {
  _has_bits_[0] &= ~0x00020000u;
}
void BidRequest::clear_page_type() {
  page_type_ = 0;
  clear_has_page_type();
}
 ::google::protobuf::int32 BidRequest::page_type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.page_type)
  return page_type_;
}
 void BidRequest::set_page_type(::google::protobuf::int32 value) {
  set_has_page_type();
  page_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.page_type)
}

// repeated string page_keyword = 17;
int BidRequest::page_keyword_size() const {
  return page_keyword_.size();
}
void BidRequest::clear_page_keyword() {
  page_keyword_.Clear();
}
 const ::std::string& BidRequest::page_keyword(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.page_keyword)
  return page_keyword_.Get(index);
}
 ::std::string* BidRequest::mutable_page_keyword(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.page_keyword)
  return page_keyword_.Mutable(index);
}
 void BidRequest::set_page_keyword(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.page_keyword)
  page_keyword_.Mutable(index)->assign(value);
}
 void BidRequest::set_page_keyword(int index, const char* value) {
  page_keyword_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidRequest.page_keyword)
}
 void BidRequest::set_page_keyword(int index, const char* value, size_t size) {
  page_keyword_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidRequest.page_keyword)
}
 ::std::string* BidRequest::add_page_keyword() {
  // @@protoc_insertion_point(field_add_mutable:protocol.baidu.BidRequest.page_keyword)
  return page_keyword_.Add();
}
 void BidRequest::add_page_keyword(const ::std::string& value) {
  page_keyword_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.page_keyword)
}
 void BidRequest::add_page_keyword(const char* value) {
  page_keyword_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.baidu.BidRequest.page_keyword)
}
 void BidRequest::add_page_keyword(const char* value, size_t size) {
  page_keyword_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.baidu.BidRequest.page_keyword)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::page_keyword() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.page_keyword)
  return page_keyword_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_page_keyword() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.page_keyword)
  return &page_keyword_;
}

// optional int32 page_quality = 18;
bool BidRequest::has_page_quality() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BidRequest::set_has_page_quality() {
  _has_bits_[0] |= 0x00080000u;
}
void BidRequest::clear_has_page_quality() {
  _has_bits_[0] &= ~0x00080000u;
}
void BidRequest::clear_page_quality() {
  page_quality_ = 0;
  clear_has_page_quality();
}
 ::google::protobuf::int32 BidRequest::page_quality() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.page_quality)
  return page_quality_;
}
 void BidRequest::set_page_quality(::google::protobuf::int32 value) {
  set_has_page_quality();
  page_quality_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.page_quality)
}

// optional int32 page_vertical = 21;
bool BidRequest::has_page_vertical() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void BidRequest::set_has_page_vertical() {
  _has_bits_[0] |= 0x00100000u;
}
void BidRequest::clear_has_page_vertical() {
  _has_bits_[0] &= ~0x00100000u;
}
void BidRequest::clear_page_vertical() {
  page_vertical_ = 0;
  clear_has_page_vertical();
}
 ::google::protobuf::int32 BidRequest::page_vertical() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.page_vertical)
  return page_vertical_;
}
 void BidRequest::set_page_vertical(::google::protobuf::int32 value) {
  set_has_page_vertical();
  page_vertical_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.page_vertical)
}

// repeated int32 excluded_product_category = 19 [packed = true];
int BidRequest::excluded_product_category_size() const {
  return excluded_product_category_.size();
}
void BidRequest::clear_excluded_product_category() {
  excluded_product_category_.Clear();
}
 ::google::protobuf::int32 BidRequest::excluded_product_category(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.excluded_product_category)
  return excluded_product_category_.Get(index);
}
 void BidRequest::set_excluded_product_category(int index, ::google::protobuf::int32 value) {
  excluded_product_category_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.excluded_product_category)
}
 void BidRequest::add_excluded_product_category(::google::protobuf::int32 value) {
  excluded_product_category_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.excluded_product_category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest::excluded_product_category() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.excluded_product_category)
  return excluded_product_category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest::mutable_excluded_product_category() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.excluded_product_category)
  return &excluded_product_category_;
}

// optional .protocol.baidu.BidRequest.Mobile mobile = 29;
bool BidRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void BidRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00400000u;
}
void BidRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00400000u;
}
void BidRequest::clear_mobile() {
  if (mobile_ != NULL) mobile_->::protocol::baidu::BidRequest_Mobile::Clear();
  clear_has_mobile();
}
const ::protocol::baidu::BidRequest_Mobile& BidRequest::mobile() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.mobile)
  return mobile_ != NULL ? *mobile_ : *default_instance_->mobile_;
}
::protocol::baidu::BidRequest_Mobile* BidRequest::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == NULL) {
    mobile_ = new ::protocol::baidu::BidRequest_Mobile;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.mobile)
  return mobile_;
}
::protocol::baidu::BidRequest_Mobile* BidRequest::release_mobile() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.mobile)
  clear_has_mobile();
  ::protocol::baidu::BidRequest_Mobile* temp = mobile_;
  mobile_ = NULL;
  return temp;
}
void BidRequest::set_allocated_mobile(::protocol::baidu::BidRequest_Mobile* mobile) {
  delete mobile_;
  mobile_ = mobile;
  if (mobile) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.mobile)
}

// optional .protocol.baidu.BidRequest.Video video = 30;
bool BidRequest::has_video() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void BidRequest::set_has_video() {
  _has_bits_[0] |= 0x00800000u;
}
void BidRequest::clear_has_video() {
  _has_bits_[0] &= ~0x00800000u;
}
void BidRequest::clear_video() {
  if (video_ != NULL) video_->::protocol::baidu::BidRequest_Video::Clear();
  clear_has_video();
}
const ::protocol::baidu::BidRequest_Video& BidRequest::video() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
::protocol::baidu::BidRequest_Video* BidRequest::mutable_video() {
  set_has_video();
  if (video_ == NULL) {
    video_ = new ::protocol::baidu::BidRequest_Video;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.video)
  return video_;
}
::protocol::baidu::BidRequest_Video* BidRequest::release_video() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidRequest.video)
  clear_has_video();
  ::protocol::baidu::BidRequest_Video* temp = video_;
  video_ = NULL;
  return temp;
}
void BidRequest::set_allocated_video(::protocol::baidu::BidRequest_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidRequest.video)
}

// repeated .protocol.baidu.BidRequest.AdSlot adslot = 20;
int BidRequest::adslot_size() const {
  return adslot_.size();
}
void BidRequest::clear_adslot() {
  adslot_.Clear();
}
const ::protocol::baidu::BidRequest_AdSlot& BidRequest::adslot(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.adslot)
  return adslot_.Get(index);
}
::protocol::baidu::BidRequest_AdSlot* BidRequest::mutable_adslot(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidRequest.adslot)
  return adslot_.Mutable(index);
}
::protocol::baidu::BidRequest_AdSlot* BidRequest::add_adslot() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidRequest.adslot)
  return adslot_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_AdSlot >*
BidRequest::mutable_adslot() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidRequest.adslot)
  return &adslot_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidRequest_AdSlot >&
BidRequest::adslot() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidRequest.adslot)
  return adslot_;
}

// optional bool is_test = 26 [default = false];
bool BidRequest::has_is_test() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void BidRequest::set_has_is_test() {
  _has_bits_[0] |= 0x02000000u;
}
void BidRequest::clear_has_is_test() {
  _has_bits_[0] &= ~0x02000000u;
}
void BidRequest::clear_is_test() {
  is_test_ = false;
  clear_has_is_test();
}
 bool BidRequest::is_test() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.is_test)
  return is_test_;
}
 void BidRequest::set_is_test(bool value) {
  set_has_is_test();
  is_test_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.is_test)
}

// optional bool is_ping = 27 [default = false];
bool BidRequest::has_is_ping() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void BidRequest::set_has_is_ping() {
  _has_bits_[0] |= 0x04000000u;
}
void BidRequest::clear_has_is_ping() {
  _has_bits_[0] &= ~0x04000000u;
}
void BidRequest::clear_is_ping() {
  is_ping_ = false;
  clear_has_is_ping();
}
 bool BidRequest::is_ping() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidRequest.is_ping)
  return is_ping_;
}
 void BidRequest::set_is_ping(bool value) {
  set_has_is_ping();
  is_ping_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidRequest.is_ping)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad_LinkUnitKeyword::kKeywordFieldNumber;
const int BidResponse_Ad_LinkUnitKeyword::kSelectedStyleTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad_LinkUnitKeyword::BidResponse_Ad_LinkUnitKeyword()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
}

void BidResponse_Ad_LinkUnitKeyword::InitAsDefaultInstance() {
}

BidResponse_Ad_LinkUnitKeyword::BidResponse_Ad_LinkUnitKeyword(const BidResponse_Ad_LinkUnitKeyword& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
}

void BidResponse_Ad_LinkUnitKeyword::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  keyword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_LinkUnitKeyword::~BidResponse_Ad_LinkUnitKeyword() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  SharedDtor();
}

void BidResponse_Ad_LinkUnitKeyword::SharedDtor() {
  keyword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_LinkUnitKeyword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_LinkUnitKeyword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_LinkUnitKeyword_descriptor_;
}

const BidResponse_Ad_LinkUnitKeyword& BidResponse_Ad_LinkUnitKeyword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_LinkUnitKeyword* BidResponse_Ad_LinkUnitKeyword::default_instance_ = NULL;

BidResponse_Ad_LinkUnitKeyword* BidResponse_Ad_LinkUnitKeyword::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad_LinkUnitKeyword* n = new BidResponse_Ad_LinkUnitKeyword;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad_LinkUnitKeyword::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  if (has_keyword()) {
    keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  selected_style_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad_LinkUnitKeyword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string keyword = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyword().data(), this->keyword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_selected_style_type;
        break;
      }

      // repeated int32 selected_style_type = 2;
      case 2: {
        if (tag == 16) {
         parse_selected_style_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_selected_style_type())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_selected_style_type())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_selected_style_type;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  return false;
#undef DO_
}

void BidResponse_Ad_LinkUnitKeyword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  // optional string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->keyword(), output);
  }

  // repeated int32 selected_style_type = 2;
  for (int i = 0; i < this->selected_style_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->selected_style_type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
}

::google::protobuf::uint8* BidResponse_Ad_LinkUnitKeyword::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  // optional string keyword = 1;
  if (has_keyword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyword().data(), this->keyword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->keyword(), target);
  }

  // repeated int32 selected_style_type = 2;
  for (int i = 0; i < this->selected_style_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->selected_style_type(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  return target;
}

int BidResponse_Ad_LinkUnitKeyword::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  int total_size = 0;

  // optional string keyword = 1;
  if (has_keyword()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyword());
  }

  // repeated int32 selected_style_type = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->selected_style_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->selected_style_type(i));
    }
    total_size += 1 * this->selected_style_type_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_LinkUnitKeyword::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_Ad_LinkUnitKeyword* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad_LinkUnitKeyword>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
    MergeFrom(*source);
  }
}

void BidResponse_Ad_LinkUnitKeyword::MergeFrom(const BidResponse_Ad_LinkUnitKeyword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  selected_style_type_.MergeFrom(from.selected_style_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyword()) {
      set_has_keyword();
      keyword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyword_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad_LinkUnitKeyword::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_LinkUnitKeyword::CopyFrom(const BidResponse_Ad_LinkUnitKeyword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidResponse.Ad.LinkUnitKeyword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_LinkUnitKeyword::IsInitialized() const {

  return true;
}

void BidResponse_Ad_LinkUnitKeyword::Swap(BidResponse_Ad_LinkUnitKeyword* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad_LinkUnitKeyword::InternalSwap(BidResponse_Ad_LinkUnitKeyword* other) {
  keyword_.Swap(&other->keyword_);
  selected_style_type_.UnsafeArenaSwap(&other->selected_style_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ad_LinkUnitKeyword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_LinkUnitKeyword_descriptor_;
  metadata.reflection = BidResponse_Ad_LinkUnitKeyword_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad_ExpandCreativeInfo::kCreativeWidthFieldNumber;
const int BidResponse_Ad_ExpandCreativeInfo::kCreativeHeightFieldNumber;
const int BidResponse_Ad_ExpandCreativeInfo::kCreativeLandingPageFieldNumber;
const int BidResponse_Ad_ExpandCreativeInfo::kCreativeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad_ExpandCreativeInfo::BidResponse_Ad_ExpandCreativeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
}

void BidResponse_Ad_ExpandCreativeInfo::InitAsDefaultInstance() {
}

BidResponse_Ad_ExpandCreativeInfo::BidResponse_Ad_ExpandCreativeInfo(const BidResponse_Ad_ExpandCreativeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
}

void BidResponse_Ad_ExpandCreativeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  creative_width_ = 0;
  creative_height_ = 0;
  creative_landing_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creative_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_ExpandCreativeInfo::~BidResponse_Ad_ExpandCreativeInfo() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  SharedDtor();
}

void BidResponse_Ad_ExpandCreativeInfo::SharedDtor() {
  creative_landing_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_ExpandCreativeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_ExpandCreativeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_ExpandCreativeInfo_descriptor_;
}

const BidResponse_Ad_ExpandCreativeInfo& BidResponse_Ad_ExpandCreativeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_ExpandCreativeInfo* BidResponse_Ad_ExpandCreativeInfo::default_instance_ = NULL;

BidResponse_Ad_ExpandCreativeInfo* BidResponse_Ad_ExpandCreativeInfo::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad_ExpandCreativeInfo* n = new BidResponse_Ad_ExpandCreativeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad_ExpandCreativeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse_Ad_ExpandCreativeInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_Ad_ExpandCreativeInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(creative_width_, creative_height_);
    if (has_creative_landing_page()) {
      creative_landing_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    creative_type_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad_ExpandCreativeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 creative_width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_width_)));
          set_has_creative_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creative_height;
        break;
      }

      // optional int32 creative_height = 2;
      case 2: {
        if (tag == 16) {
         parse_creative_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_height_)));
          set_has_creative_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creative_landing_page;
        break;
      }

      // optional string creative_landing_page = 3;
      case 3: {
        if (tag == 26) {
         parse_creative_landing_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_landing_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->creative_landing_page().data(), this->creative_landing_page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_creative_type;
        break;
      }

      // optional int32 creative_type = 4;
      case 4: {
        if (tag == 32) {
         parse_creative_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &creative_type_)));
          set_has_creative_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  return false;
#undef DO_
}

void BidResponse_Ad_ExpandCreativeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  // optional int32 creative_width = 1;
  if (has_creative_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->creative_width(), output);
  }

  // optional int32 creative_height = 2;
  if (has_creative_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->creative_height(), output);
  }

  // optional string creative_landing_page = 3;
  if (has_creative_landing_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_landing_page().data(), this->creative_landing_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creative_landing_page(), output);
  }

  // optional int32 creative_type = 4;
  if (has_creative_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->creative_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
}

::google::protobuf::uint8* BidResponse_Ad_ExpandCreativeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  // optional int32 creative_width = 1;
  if (has_creative_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->creative_width(), target);
  }

  // optional int32 creative_height = 2;
  if (has_creative_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->creative_height(), target);
  }

  // optional string creative_landing_page = 3;
  if (has_creative_landing_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->creative_landing_page().data(), this->creative_landing_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creative_landing_page(), target);
  }

  // optional int32 creative_type = 4;
  if (has_creative_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->creative_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  return target;
}

int BidResponse_Ad_ExpandCreativeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 creative_width = 1;
    if (has_creative_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_width());
    }

    // optional int32 creative_height = 2;
    if (has_creative_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_height());
    }

    // optional string creative_landing_page = 3;
    if (has_creative_landing_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_landing_page());
    }

    // optional int32 creative_type = 4;
    if (has_creative_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->creative_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_ExpandCreativeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_Ad_ExpandCreativeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad_ExpandCreativeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
    MergeFrom(*source);
  }
}

void BidResponse_Ad_ExpandCreativeInfo::MergeFrom(const BidResponse_Ad_ExpandCreativeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creative_width()) {
      set_creative_width(from.creative_width());
    }
    if (from.has_creative_height()) {
      set_creative_height(from.creative_height());
    }
    if (from.has_creative_landing_page()) {
      set_has_creative_landing_page();
      creative_landing_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creative_landing_page_);
    }
    if (from.has_creative_type()) {
      set_creative_type(from.creative_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad_ExpandCreativeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_ExpandCreativeInfo::CopyFrom(const BidResponse_Ad_ExpandCreativeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_ExpandCreativeInfo::IsInitialized() const {

  return true;
}

void BidResponse_Ad_ExpandCreativeInfo::Swap(BidResponse_Ad_ExpandCreativeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad_ExpandCreativeInfo::InternalSwap(BidResponse_Ad_ExpandCreativeInfo* other) {
  std::swap(creative_width_, other->creative_width_);
  std::swap(creative_height_, other->creative_height_);
  creative_landing_page_.Swap(&other->creative_landing_page_);
  std::swap(creative_type_, other->creative_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ad_ExpandCreativeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_ExpandCreativeInfo_descriptor_;
  metadata.reflection = BidResponse_Ad_ExpandCreativeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad_DeeplinkInfo::kDeeplinkUrlFieldNumber;
const int BidResponse_Ad_DeeplinkInfo::kAppVersionFieldNumber;
const int BidResponse_Ad_DeeplinkInfo::kFallbackUrlFieldNumber;
const int BidResponse_Ad_DeeplinkInfo::kFallbackTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad_DeeplinkInfo::BidResponse_Ad_DeeplinkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
}

void BidResponse_Ad_DeeplinkInfo::InitAsDefaultInstance() {
}

BidResponse_Ad_DeeplinkInfo::BidResponse_Ad_DeeplinkInfo(const BidResponse_Ad_DeeplinkInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
}

void BidResponse_Ad_DeeplinkInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deeplink_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_version_ = 0u;
  fallback_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fallback_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_DeeplinkInfo::~BidResponse_Ad_DeeplinkInfo() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  SharedDtor();
}

void BidResponse_Ad_DeeplinkInfo::SharedDtor() {
  deeplink_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fallback_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_DeeplinkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_DeeplinkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_DeeplinkInfo_descriptor_;
}

const BidResponse_Ad_DeeplinkInfo& BidResponse_Ad_DeeplinkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_DeeplinkInfo* BidResponse_Ad_DeeplinkInfo::default_instance_ = NULL;

BidResponse_Ad_DeeplinkInfo* BidResponse_Ad_DeeplinkInfo::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad_DeeplinkInfo* n = new BidResponse_Ad_DeeplinkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad_DeeplinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse_Ad_DeeplinkInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_Ad_DeeplinkInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(app_version_, fallback_type_);
    if (has_deeplink_url()) {
      deeplink_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fallback_url()) {
      fallback_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad_DeeplinkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deeplink_url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deeplink_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deeplink_url().data(), this->deeplink_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_app_version;
        break;
      }

      // optional uint32 app_version = 2;
      case 2: {
        if (tag == 16) {
         parse_app_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_version_)));
          set_has_app_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fallback_url;
        break;
      }

      // optional string fallback_url = 3;
      case 3: {
        if (tag == 26) {
         parse_fallback_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fallback_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fallback_url().data(), this->fallback_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fallback_type;
        break;
      }

      // optional uint32 fallback_type = 4;
      case 4: {
        if (tag == 32) {
         parse_fallback_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fallback_type_)));
          set_has_fallback_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  return false;
#undef DO_
}

void BidResponse_Ad_DeeplinkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  // optional string deeplink_url = 1;
  if (has_deeplink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deeplink_url().data(), this->deeplink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deeplink_url(), output);
  }

  // optional uint32 app_version = 2;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_version(), output);
  }

  // optional string fallback_url = 3;
  if (has_fallback_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fallback_url().data(), this->fallback_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fallback_url(), output);
  }

  // optional uint32 fallback_type = 4;
  if (has_fallback_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fallback_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
}

::google::protobuf::uint8* BidResponse_Ad_DeeplinkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  // optional string deeplink_url = 1;
  if (has_deeplink_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deeplink_url().data(), this->deeplink_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deeplink_url(), target);
  }

  // optional uint32 app_version = 2;
  if (has_app_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_version(), target);
  }

  // optional string fallback_url = 3;
  if (has_fallback_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fallback_url().data(), this->fallback_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fallback_url(), target);
  }

  // optional uint32 fallback_type = 4;
  if (has_fallback_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fallback_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  return target;
}

int BidResponse_Ad_DeeplinkInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string deeplink_url = 1;
    if (has_deeplink_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deeplink_url());
    }

    // optional uint32 app_version = 2;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_version());
    }

    // optional string fallback_url = 3;
    if (has_fallback_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fallback_url());
    }

    // optional uint32 fallback_type = 4;
    if (has_fallback_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fallback_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_DeeplinkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_Ad_DeeplinkInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad_DeeplinkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
    MergeFrom(*source);
  }
}

void BidResponse_Ad_DeeplinkInfo::MergeFrom(const BidResponse_Ad_DeeplinkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deeplink_url()) {
      set_has_deeplink_url();
      deeplink_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deeplink_url_);
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
    if (from.has_fallback_url()) {
      set_has_fallback_url();
      fallback_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fallback_url_);
    }
    if (from.has_fallback_type()) {
      set_fallback_type(from.fallback_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad_DeeplinkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_DeeplinkInfo::CopyFrom(const BidResponse_Ad_DeeplinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidResponse.Ad.DeeplinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_DeeplinkInfo::IsInitialized() const {

  return true;
}

void BidResponse_Ad_DeeplinkInfo::Swap(BidResponse_Ad_DeeplinkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad_DeeplinkInfo::InternalSwap(BidResponse_Ad_DeeplinkInfo* other) {
  deeplink_url_.Swap(&other->deeplink_url_);
  std::swap(app_version_, other->app_version_);
  fallback_url_.Swap(&other->fallback_url_);
  std::swap(fallback_type_, other->fallback_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ad_DeeplinkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_DeeplinkInfo_descriptor_;
  metadata.reflection = BidResponse_Ad_DeeplinkInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad_NativeAd_Image::kUrlFieldNumber;
const int BidResponse_Ad_NativeAd_Image::kWidthFieldNumber;
const int BidResponse_Ad_NativeAd_Image::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad_NativeAd_Image::BidResponse_Ad_NativeAd_Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidResponse.Ad.NativeAd.Image)
}

void BidResponse_Ad_NativeAd_Image::InitAsDefaultInstance() {
}

BidResponse_Ad_NativeAd_Image::BidResponse_Ad_NativeAd_Image(const BidResponse_Ad_NativeAd_Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidResponse.Ad.NativeAd.Image)
}

void BidResponse_Ad_NativeAd_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_NativeAd_Image::~BidResponse_Ad_NativeAd_Image() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  SharedDtor();
}

void BidResponse_Ad_NativeAd_Image::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse_Ad_NativeAd_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_NativeAd_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_NativeAd_Image_descriptor_;
}

const BidResponse_Ad_NativeAd_Image& BidResponse_Ad_NativeAd_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd_Image::default_instance_ = NULL;

BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd_Image::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad_NativeAd_Image* n = new BidResponse_Ad_NativeAd_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad_NativeAd_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse_Ad_NativeAd_Image, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_Ad_NativeAd_Image*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(width_, height_);
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad_NativeAd_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.NativeAd.Image.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  return false;
#undef DO_
}

void BidResponse_Ad_NativeAd_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.NativeAd.Image.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidResponse.Ad.NativeAd.Image)
}

::google::protobuf::uint8* BidResponse_Ad_NativeAd_Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.NativeAd.Image.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  return target;
}

int BidResponse_Ad_NativeAd_Image::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_NativeAd_Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_Ad_NativeAd_Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad_NativeAd_Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidResponse.Ad.NativeAd.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidResponse.Ad.NativeAd.Image)
    MergeFrom(*source);
  }
}

void BidResponse_Ad_NativeAd_Image::MergeFrom(const BidResponse_Ad_NativeAd_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad_NativeAd_Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_NativeAd_Image::CopyFrom(const BidResponse_Ad_NativeAd_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidResponse.Ad.NativeAd.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_NativeAd_Image::IsInitialized() const {

  return true;
}

void BidResponse_Ad_NativeAd_Image::Swap(BidResponse_Ad_NativeAd_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad_NativeAd_Image::InternalSwap(BidResponse_Ad_NativeAd_Image* other) {
  url_.Swap(&other->url_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ad_NativeAd_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_NativeAd_Image_descriptor_;
  metadata.reflection = BidResponse_Ad_NativeAd_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad_NativeAd::kTitleFieldNumber;
const int BidResponse_Ad_NativeAd::kDescFieldNumber;
const int BidResponse_Ad_NativeAd::kImageFieldNumber;
const int BidResponse_Ad_NativeAd::kLogoIconFieldNumber;
const int BidResponse_Ad_NativeAd::kAppSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad_NativeAd::BidResponse_Ad_NativeAd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidResponse.Ad.NativeAd)
}

void BidResponse_Ad_NativeAd::InitAsDefaultInstance() {
  logo_icon_ = const_cast< ::protocol::baidu::BidResponse_Ad_NativeAd_Image*>(&::protocol::baidu::BidResponse_Ad_NativeAd_Image::default_instance());
}

BidResponse_Ad_NativeAd::BidResponse_Ad_NativeAd(const BidResponse_Ad_NativeAd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidResponse.Ad.NativeAd)
}

void BidResponse_Ad_NativeAd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_icon_ = NULL;
  app_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad_NativeAd::~BidResponse_Ad_NativeAd() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidResponse.Ad.NativeAd)
  SharedDtor();
}

void BidResponse_Ad_NativeAd::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete logo_icon_;
  }
}

void BidResponse_Ad_NativeAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad_NativeAd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_NativeAd_descriptor_;
}

const BidResponse_Ad_NativeAd& BidResponse_Ad_NativeAd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad_NativeAd* BidResponse_Ad_NativeAd::default_instance_ = NULL;

BidResponse_Ad_NativeAd* BidResponse_Ad_NativeAd::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad_NativeAd* n = new BidResponse_Ad_NativeAd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad_NativeAd::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidResponse.Ad.NativeAd)
  if (_has_bits_[0 / 32] & 27u) {
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_logo_icon()) {
      if (logo_icon_ != NULL) logo_icon_->::protocol::baidu::BidResponse_Ad_NativeAd_Image::Clear();
    }
    app_size_ = 0;
  }
  image_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad_NativeAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidResponse.Ad.NativeAd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional bytes desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_image;
        break;
      }

      // repeated .protocol.baidu.BidResponse.Ad.NativeAd.Image image = 3;
      case 3: {
        if (tag == 26) {
         parse_image:
          DO_(input->IncrementRecursionDepth());
         parse_loop_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_image;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_logo_icon;
        break;
      }

      // optional .protocol.baidu.BidResponse.Ad.NativeAd.Image logo_icon = 4;
      case 4: {
        if (tag == 34) {
         parse_logo_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logo_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_app_size;
        break;
      }

      // optional int32 app_size = 5;
      case 5: {
        if (tag == 40) {
         parse_app_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_size_)));
          set_has_app_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidResponse.Ad.NativeAd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidResponse.Ad.NativeAd)
  return false;
#undef DO_
}

void BidResponse_Ad_NativeAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidResponse.Ad.NativeAd)
  // optional bytes title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->title(), output);
  }

  // optional bytes desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->desc(), output);
  }

  // repeated .protocol.baidu.BidResponse.Ad.NativeAd.Image image = 3;
  for (unsigned int i = 0, n = this->image_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->image(i), output);
  }

  // optional .protocol.baidu.BidResponse.Ad.NativeAd.Image logo_icon = 4;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->logo_icon_, output);
  }

  // optional int32 app_size = 5;
  if (has_app_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->app_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidResponse.Ad.NativeAd)
}

::google::protobuf::uint8* BidResponse_Ad_NativeAd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidResponse.Ad.NativeAd)
  // optional bytes title = 1;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->title(), target);
  }

  // optional bytes desc = 2;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->desc(), target);
  }

  // repeated .protocol.baidu.BidResponse.Ad.NativeAd.Image image = 3;
  for (unsigned int i = 0, n = this->image_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->image(i), false, target);
  }

  // optional .protocol.baidu.BidResponse.Ad.NativeAd.Image logo_icon = 4;
  if (has_logo_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->logo_icon_, false, target);
  }

  // optional int32 app_size = 5;
  if (has_app_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->app_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidResponse.Ad.NativeAd)
  return target;
}

int BidResponse_Ad_NativeAd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidResponse.Ad.NativeAd)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 27u) {
    // optional bytes title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }

    // optional bytes desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

    // optional .protocol.baidu.BidResponse.Ad.NativeAd.Image logo_icon = 4;
    if (has_logo_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->logo_icon_);
    }

    // optional int32 app_size = 5;
    if (has_app_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_size());
    }

  }
  // repeated .protocol.baidu.BidResponse.Ad.NativeAd.Image image = 3;
  total_size += 1 * this->image_size();
  for (int i = 0; i < this->image_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->image(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad_NativeAd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidResponse.Ad.NativeAd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_Ad_NativeAd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad_NativeAd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidResponse.Ad.NativeAd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidResponse.Ad.NativeAd)
    MergeFrom(*source);
  }
}

void BidResponse_Ad_NativeAd::MergeFrom(const BidResponse_Ad_NativeAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidResponse.Ad.NativeAd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  image_.MergeFrom(from.image_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (from.has_logo_icon()) {
      mutable_logo_icon()->::protocol::baidu::BidResponse_Ad_NativeAd_Image::MergeFrom(from.logo_icon());
    }
    if (from.has_app_size()) {
      set_app_size(from.app_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad_NativeAd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidResponse.Ad.NativeAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad_NativeAd::CopyFrom(const BidResponse_Ad_NativeAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidResponse.Ad.NativeAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad_NativeAd::IsInitialized() const {

  return true;
}

void BidResponse_Ad_NativeAd::Swap(BidResponse_Ad_NativeAd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad_NativeAd::InternalSwap(BidResponse_Ad_NativeAd* other) {
  title_.Swap(&other->title_);
  desc_.Swap(&other->desc_);
  image_.UnsafeArenaSwap(&other->image_);
  std::swap(logo_icon_, other->logo_icon_);
  std::swap(app_size_, other->app_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_Ad_NativeAd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_NativeAd_descriptor_;
  metadata.reflection = BidResponse_Ad_NativeAd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_Ad::kSequenceIdFieldNumber;
const int BidResponse_Ad::kCreativeIdFieldNumber;
const int BidResponse_Ad::kHtmlSnippetFieldNumber;
const int BidResponse_Ad::kLinkUnitKeywordFieldNumber;
const int BidResponse_Ad::kExpandCreativeInfoFieldNumber;
const int BidResponse_Ad::kAdvertiserIdFieldNumber;
const int BidResponse_Ad::kWidthFieldNumber;
const int BidResponse_Ad::kHeightFieldNumber;
const int BidResponse_Ad::kCategoryFieldNumber;
const int BidResponse_Ad::kTypeFieldNumber;
const int BidResponse_Ad::kLandingPageFieldNumber;
const int BidResponse_Ad::kTargetUrlFieldNumber;
const int BidResponse_Ad::kMonitorUrlsFieldNumber;
const int BidResponse_Ad::kMaxCpmFieldNumber;
const int BidResponse_Ad::kExtdataFieldNumber;
const int BidResponse_Ad::kIsCookieMatchingFieldNumber;
const int BidResponse_Ad::kPreferredOrderIdFieldNumber;
const int BidResponse_Ad::kGuaranteedOrderIdFieldNumber;
const int BidResponse_Ad::kDeeplinkInfoFieldNumber;
const int BidResponse_Ad::kNativeAdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_Ad::BidResponse_Ad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidResponse.Ad)
}

void BidResponse_Ad::InitAsDefaultInstance() {
  link_unit_keyword_ = const_cast< ::protocol::baidu::BidResponse_Ad_LinkUnitKeyword*>(&::protocol::baidu::BidResponse_Ad_LinkUnitKeyword::default_instance());
  expand_creative_info_ = const_cast< ::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo*>(&::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo::default_instance());
  deeplink_info_ = const_cast< ::protocol::baidu::BidResponse_Ad_DeeplinkInfo*>(&::protocol::baidu::BidResponse_Ad_DeeplinkInfo::default_instance());
  native_ad_ = const_cast< ::protocol::baidu::BidResponse_Ad_NativeAd*>(&::protocol::baidu::BidResponse_Ad_NativeAd::default_instance());
}

BidResponse_Ad::BidResponse_Ad(const BidResponse_Ad& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidResponse.Ad)
}

void BidResponse_Ad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_id_ = 0;
  creative_id_ = GOOGLE_LONGLONG(0);
  html_snippet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_unit_keyword_ = NULL;
  expand_creative_info_ = NULL;
  advertiser_id_ = GOOGLE_ULONGLONG(0);
  width_ = 0;
  height_ = 0;
  category_ = 0;
  type_ = 0;
  landing_page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_cpm_ = 0;
  extdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_cookie_matching_ = false;
  preferred_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guaranteed_order_id_ = 0u;
  deeplink_info_ = NULL;
  native_ad_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Ad::~BidResponse_Ad() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidResponse.Ad)
  SharedDtor();
}

void BidResponse_Ad::SharedDtor() {
  html_snippet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  landing_page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete link_unit_keyword_;
    delete expand_creative_info_;
    delete deeplink_info_;
    delete native_ad_;
  }
}

void BidResponse_Ad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Ad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Ad_descriptor_;
}

const BidResponse_Ad& BidResponse_Ad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_Ad* BidResponse_Ad::default_instance_ = NULL;

BidResponse_Ad* BidResponse_Ad::New(::google::protobuf::Arena* arena) const {
  BidResponse_Ad* n = new BidResponse_Ad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_Ad::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidResponse.Ad)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse_Ad, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_Ad*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(sequence_id_, width_);
    ZR_(advertiser_id_, height_);
    creative_id_ = GOOGLE_LONGLONG(0);
    if (has_html_snippet()) {
      html_snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_link_unit_keyword()) {
      if (link_unit_keyword_ != NULL) link_unit_keyword_->::protocol::baidu::BidResponse_Ad_LinkUnitKeyword::Clear();
    }
    if (has_expand_creative_info()) {
      if (expand_creative_info_ != NULL) expand_creative_info_->::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 59136u) {
    ZR_(type_, max_cpm_);
    category_ = 0;
    if (has_landing_page()) {
      landing_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_extdata()) {
      extdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_cookie_matching_ = false;
  }
  if (_has_bits_[16 / 32] & 983040u) {
    if (has_preferred_order_id()) {
      preferred_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    guaranteed_order_id_ = 0u;
    if (has_deeplink_info()) {
      if (deeplink_info_ != NULL) deeplink_info_->::protocol::baidu::BidResponse_Ad_DeeplinkInfo::Clear();
    }
    if (has_native_ad()) {
      if (native_ad_ != NULL) native_ad_->::protocol::baidu::BidResponse_Ad_NativeAd::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  target_url_.Clear();
  monitor_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_Ad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidResponse.Ad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_id_)));
          set_has_sequence_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_creative_id;
        break;
      }

      // optional int64 creative_id = 2;
      case 2: {
        if (tag == 16) {
         parse_creative_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creative_id_)));
          set_has_creative_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_cpm;
        break;
      }

      // optional int32 max_cpm = 3;
      case 3: {
        if (tag == 24) {
         parse_max_cpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cpm_)));
          set_has_max_cpm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_extdata;
        break;
      }

      // optional string extdata = 5;
      case 5: {
        if (tag == 42) {
         parse_extdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extdata().data(), this->extdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.extdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_cookie_matching;
        break;
      }

      // optional bool is_cookie_matching = 6;
      case 6: {
        if (tag == 48) {
         parse_is_cookie_matching:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cookie_matching_)));
          set_has_is_cookie_matching();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_html_snippet;
        break;
      }

      // optional string html_snippet = 7;
      case 7: {
        if (tag == 58) {
         parse_html_snippet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_html_snippet()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->html_snippet().data(), this->html_snippet().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.html_snippet");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_advertiser_id;
        break;
      }

      // optional uint64 advertiser_id = 8;
      case 8: {
        if (tag == 64) {
         parse_advertiser_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &advertiser_id_)));
          set_has_advertiser_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_width;
        break;
      }

      // optional int32 width = 9;
      case 9: {
        if (tag == 72) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // optional int32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_category;
        break;
      }

      // optional int32 category = 11;
      case 11: {
        if (tag == 88) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional int32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_landing_page;
        break;
      }

      // optional string landing_page = 13;
      case 13: {
        if (tag == 106) {
         parse_landing_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landing_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->landing_page().data(), this->landing_page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.landing_page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_target_url;
        break;
      }

      // repeated string target_url = 14;
      case 14: {
        if (tag == 114) {
         parse_target_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_target_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_url(this->target_url_size() - 1).data(),
            this->target_url(this->target_url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.target_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_target_url;
        if (input->ExpectTag(122)) goto parse_preferred_order_id;
        break;
      }

      // optional string preferred_order_id = 15;
      case 15: {
        if (tag == 122) {
         parse_preferred_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_order_id().data(), this->preferred_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.preferred_order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_monitor_urls;
        break;
      }

      // repeated string monitor_urls = 17;
      case 17: {
        if (tag == 138) {
         parse_monitor_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_monitor_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->monitor_urls(this->monitor_urls_size() - 1).data(),
            this->monitor_urls(this->monitor_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.Ad.monitor_urls");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_monitor_urls;
        if (input->ExpectTag(146)) goto parse_link_unit_keyword;
        break;
      }

      // optional .protocol.baidu.BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
      case 18: {
        if (tag == 146) {
         parse_link_unit_keyword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_unit_keyword()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_expand_creative_info;
        break;
      }

      // optional .protocol.baidu.BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
      case 19: {
        if (tag == 154) {
         parse_expand_creative_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expand_creative_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_guaranteed_order_id;
        break;
      }

      // optional uint32 guaranteed_order_id = 20;
      case 20: {
        if (tag == 160) {
         parse_guaranteed_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guaranteed_order_id_)));
          set_has_guaranteed_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_deeplink_info;
        break;
      }

      // optional .protocol.baidu.BidResponse.Ad.DeeplinkInfo deeplink_info = 21;
      case 21: {
        if (tag == 170) {
         parse_deeplink_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deeplink_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_native_ad;
        break;
      }

      // optional .protocol.baidu.BidResponse.Ad.NativeAd native_ad = 22;
      case 22: {
        if (tag == 178) {
         parse_native_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native_ad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidResponse.Ad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidResponse.Ad)
  return false;
#undef DO_
}

void BidResponse_Ad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidResponse.Ad)
  // optional int32 sequence_id = 1;
  if (has_sequence_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_id(), output);
  }

  // optional int64 creative_id = 2;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->creative_id(), output);
  }

  // optional int32 max_cpm = 3;
  if (has_max_cpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_cpm(), output);
  }

  // optional string extdata = 5;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.extdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->extdata(), output);
  }

  // optional bool is_cookie_matching = 6;
  if (has_is_cookie_matching()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_cookie_matching(), output);
  }

  // optional string html_snippet = 7;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.html_snippet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->html_snippet(), output);
  }

  // optional uint64 advertiser_id = 8;
  if (has_advertiser_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->advertiser_id(), output);
  }

  // optional int32 width = 9;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->width(), output);
  }

  // optional int32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->height(), output);
  }

  // optional int32 category = 11;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->category(), output);
  }

  // optional int32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->type(), output);
  }

  // optional string landing_page = 13;
  if (has_landing_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->landing_page().data(), this->landing_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.landing_page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->landing_page(), output);
  }

  // repeated string target_url = 14;
  for (int i = 0; i < this->target_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url(i).data(), this->target_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.target_url");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->target_url(i), output);
  }

  // optional string preferred_order_id = 15;
  if (has_preferred_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_order_id().data(), this->preferred_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.preferred_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->preferred_order_id(), output);
  }

  // repeated string monitor_urls = 17;
  for (int i = 0; i < this->monitor_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_urls(i).data(), this->monitor_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.monitor_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->monitor_urls(i), output);
  }

  // optional .protocol.baidu.BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
  if (has_link_unit_keyword()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->link_unit_keyword_, output);
  }

  // optional .protocol.baidu.BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
  if (has_expand_creative_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->expand_creative_info_, output);
  }

  // optional uint32 guaranteed_order_id = 20;
  if (has_guaranteed_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->guaranteed_order_id(), output);
  }

  // optional .protocol.baidu.BidResponse.Ad.DeeplinkInfo deeplink_info = 21;
  if (has_deeplink_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->deeplink_info_, output);
  }

  // optional .protocol.baidu.BidResponse.Ad.NativeAd native_ad = 22;
  if (has_native_ad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->native_ad_, output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidResponse.Ad)
}

::google::protobuf::uint8* BidResponse_Ad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidResponse.Ad)
  // optional int32 sequence_id = 1;
  if (has_sequence_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_id(), target);
  }

  // optional int64 creative_id = 2;
  if (has_creative_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->creative_id(), target);
  }

  // optional int32 max_cpm = 3;
  if (has_max_cpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_cpm(), target);
  }

  // optional string extdata = 5;
  if (has_extdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extdata().data(), this->extdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.extdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extdata(), target);
  }

  // optional bool is_cookie_matching = 6;
  if (has_is_cookie_matching()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_cookie_matching(), target);
  }

  // optional string html_snippet = 7;
  if (has_html_snippet()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->html_snippet().data(), this->html_snippet().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.html_snippet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->html_snippet(), target);
  }

  // optional uint64 advertiser_id = 8;
  if (has_advertiser_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->advertiser_id(), target);
  }

  // optional int32 width = 9;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->width(), target);
  }

  // optional int32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->height(), target);
  }

  // optional int32 category = 11;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->category(), target);
  }

  // optional int32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->type(), target);
  }

  // optional string landing_page = 13;
  if (has_landing_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->landing_page().data(), this->landing_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.landing_page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->landing_page(), target);
  }

  // repeated string target_url = 14;
  for (int i = 0; i < this->target_url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_url(i).data(), this->target_url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.target_url");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->target_url(i), target);
  }

  // optional string preferred_order_id = 15;
  if (has_preferred_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_order_id().data(), this->preferred_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.preferred_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->preferred_order_id(), target);
  }

  // repeated string monitor_urls = 17;
  for (int i = 0; i < this->monitor_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->monitor_urls(i).data(), this->monitor_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.Ad.monitor_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->monitor_urls(i), target);
  }

  // optional .protocol.baidu.BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
  if (has_link_unit_keyword()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->link_unit_keyword_, false, target);
  }

  // optional .protocol.baidu.BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
  if (has_expand_creative_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->expand_creative_info_, false, target);
  }

  // optional uint32 guaranteed_order_id = 20;
  if (has_guaranteed_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->guaranteed_order_id(), target);
  }

  // optional .protocol.baidu.BidResponse.Ad.DeeplinkInfo deeplink_info = 21;
  if (has_deeplink_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->deeplink_info_, false, target);
  }

  // optional .protocol.baidu.BidResponse.Ad.NativeAd native_ad = 22;
  if (has_native_ad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->native_ad_, false, target);
  }

  // Extension range [100, 200)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 200, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidResponse.Ad)
  return target;
}

int BidResponse_Ad::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidResponse.Ad)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 sequence_id = 1;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_id());
    }

    // optional int64 creative_id = 2;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->creative_id());
    }

    // optional string html_snippet = 7;
    if (has_html_snippet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->html_snippet());
    }

    // optional .protocol.baidu.BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
    if (has_link_unit_keyword()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->link_unit_keyword_);
    }

    // optional .protocol.baidu.BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
    if (has_expand_creative_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->expand_creative_info_);
    }

    // optional uint64 advertiser_id = 8;
    if (has_advertiser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->advertiser_id());
    }

    // optional int32 width = 9;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & 59136u) {
    // optional int32 category = 11;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional int32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string landing_page = 13;
    if (has_landing_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->landing_page());
    }

    // optional int32 max_cpm = 3;
    if (has_max_cpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cpm());
    }

    // optional string extdata = 5;
    if (has_extdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extdata());
    }

    // optional bool is_cookie_matching = 6;
    if (has_is_cookie_matching()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional string preferred_order_id = 15;
    if (has_preferred_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_order_id());
    }

    // optional uint32 guaranteed_order_id = 20;
    if (has_guaranteed_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guaranteed_order_id());
    }

    // optional .protocol.baidu.BidResponse.Ad.DeeplinkInfo deeplink_info = 21;
    if (has_deeplink_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->deeplink_info_);
    }

    // optional .protocol.baidu.BidResponse.Ad.NativeAd native_ad = 22;
    if (has_native_ad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->native_ad_);
    }

  }
  // repeated string target_url = 14;
  total_size += 1 * this->target_url_size();
  for (int i = 0; i < this->target_url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->target_url(i));
  }

  // repeated string monitor_urls = 17;
  total_size += 2 * this->monitor_urls_size();
  for (int i = 0; i < this->monitor_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->monitor_urls(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Ad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidResponse.Ad)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_Ad* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_Ad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidResponse.Ad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidResponse.Ad)
    MergeFrom(*source);
  }
}

void BidResponse_Ad::MergeFrom(const BidResponse_Ad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidResponse.Ad)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  target_url_.MergeFrom(from.target_url_);
  monitor_urls_.MergeFrom(from.monitor_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_id()) {
      set_sequence_id(from.sequence_id());
    }
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_html_snippet()) {
      set_has_html_snippet();
      html_snippet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.html_snippet_);
    }
    if (from.has_link_unit_keyword()) {
      mutable_link_unit_keyword()->::protocol::baidu::BidResponse_Ad_LinkUnitKeyword::MergeFrom(from.link_unit_keyword());
    }
    if (from.has_expand_creative_info()) {
      mutable_expand_creative_info()->::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo::MergeFrom(from.expand_creative_info());
    }
    if (from.has_advertiser_id()) {
      set_advertiser_id(from.advertiser_id());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_landing_page()) {
      set_has_landing_page();
      landing_page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landing_page_);
    }
    if (from.has_max_cpm()) {
      set_max_cpm(from.max_cpm());
    }
    if (from.has_extdata()) {
      set_has_extdata();
      extdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extdata_);
    }
    if (from.has_is_cookie_matching()) {
      set_is_cookie_matching(from.is_cookie_matching());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_preferred_order_id()) {
      set_has_preferred_order_id();
      preferred_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_order_id_);
    }
    if (from.has_guaranteed_order_id()) {
      set_guaranteed_order_id(from.guaranteed_order_id());
    }
    if (from.has_deeplink_info()) {
      mutable_deeplink_info()->::protocol::baidu::BidResponse_Ad_DeeplinkInfo::MergeFrom(from.deeplink_info());
    }
    if (from.has_native_ad()) {
      mutable_native_ad()->::protocol::baidu::BidResponse_Ad_NativeAd::MergeFrom(from.native_ad());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_Ad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidResponse.Ad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Ad::CopyFrom(const BidResponse_Ad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidResponse.Ad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Ad::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse_Ad::Swap(BidResponse_Ad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_Ad::InternalSwap(BidResponse_Ad* other) {
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(creative_id_, other->creative_id_);
  html_snippet_.Swap(&other->html_snippet_);
  std::swap(link_unit_keyword_, other->link_unit_keyword_);
  std::swap(expand_creative_info_, other->expand_creative_info_);
  std::swap(advertiser_id_, other->advertiser_id_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(category_, other->category_);
  std::swap(type_, other->type_);
  landing_page_.Swap(&other->landing_page_);
  target_url_.UnsafeArenaSwap(&other->target_url_);
  monitor_urls_.UnsafeArenaSwap(&other->monitor_urls_);
  std::swap(max_cpm_, other->max_cpm_);
  extdata_.Swap(&other->extdata_);
  std::swap(is_cookie_matching_, other->is_cookie_matching_);
  preferred_order_id_.Swap(&other->preferred_order_id_);
  std::swap(guaranteed_order_id_, other->guaranteed_order_id_);
  std::swap(deeplink_info_, other->deeplink_info_);
  std::swap(native_ad_, other->native_ad_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidResponse_Ad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Ad_descriptor_;
  metadata.reflection = BidResponse_Ad_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse::kIdFieldNumber;
const int BidResponse::kAdFieldNumber;
const int BidResponse::kDebugStringFieldNumber;
const int BidResponse::kProcessingTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse::BidResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.baidu.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.baidu.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processing_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:protocol.baidu.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_baidu_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New(::google::protobuf::Arena* arena) const {
  BidResponse* n = new BidResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.baidu.BidResponse)
  if (_has_bits_[0 / 32] & 13u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_debug_string()) {
      debug_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    processing_time_ms_ = 0;
  }
  ad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.baidu.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ad;
        break;
      }

      // repeated .protocol.baidu.BidResponse.Ad ad = 2;
      case 2: {
        if (tag == 18) {
         parse_ad:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_ad;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_debug_string;
        break;
      }

      // optional string debug_string = 3;
      case 3: {
        if (tag == 26) {
         parse_debug_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_string().data(), this->debug_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.baidu.BidResponse.debug_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_processing_time_ms;
        break;
      }

      // optional int32 processing_time_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.baidu.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.baidu.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.baidu.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .protocol.baidu.BidResponse.Ad ad = 2;
  for (unsigned int i = 0, n = this->ad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ad(i), output);
  }

  // optional string debug_string = 3;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.debug_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->debug_string(), output);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->processing_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.baidu.BidResponse)
}

::google::protobuf::uint8* BidResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.baidu.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .protocol.baidu.BidResponse.Ad ad = 2;
  for (unsigned int i = 0, n = this->ad_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ad(i), false, target);
  }

  // optional string debug_string = 3;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.baidu.BidResponse.debug_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug_string(), target);
  }

  // optional int32 processing_time_ms = 4;
  if (has_processing_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->processing_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.baidu.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.baidu.BidResponse)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional string debug_string = 3;
    if (has_debug_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_string());
    }

    // optional int32 processing_time_ms = 4;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processing_time_ms());
    }

  }
  // repeated .protocol.baidu.BidResponse.Ad ad = 2;
  total_size += 1 * this->ad_size();
  for (int i = 0; i < this->ad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ad(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.baidu.BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.baidu.BidResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.baidu.BidResponse)
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.baidu.BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  ad_.MergeFrom(from.ad_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_debug_string()) {
      set_has_debug_string();
      debug_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_string_);
    }
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.baidu.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.baidu.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ad())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse::InternalSwap(BidResponse* other) {
  id_.Swap(&other->id_);
  ad_.UnsafeArenaSwap(&other->ad_);
  debug_string_.Swap(&other->debug_string_);
  std::swap(processing_time_ms_, other->processing_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidResponse_Ad_LinkUnitKeyword

// optional string keyword = 1;
bool BidResponse_Ad_LinkUnitKeyword::has_keyword() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad_LinkUnitKeyword::set_has_keyword() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad_LinkUnitKeyword::clear_has_keyword() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad_LinkUnitKeyword::clear_keyword() {
  keyword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyword();
}
 const ::std::string& BidResponse_Ad_LinkUnitKeyword::keyword() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword)
  return keyword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_LinkUnitKeyword::set_keyword(const ::std::string& value) {
  set_has_keyword();
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword)
}
 void BidResponse_Ad_LinkUnitKeyword::set_keyword(const char* value) {
  set_has_keyword();
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword)
}
 void BidResponse_Ad_LinkUnitKeyword::set_keyword(const char* value, size_t size) {
  set_has_keyword();
  keyword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword)
}
 ::std::string* BidResponse_Ad_LinkUnitKeyword::mutable_keyword() {
  set_has_keyword();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword)
  return keyword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_LinkUnitKeyword::release_keyword() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword)
  clear_has_keyword();
  return keyword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_LinkUnitKeyword::set_allocated_keyword(::std::string* keyword) {
  if (keyword != NULL) {
    set_has_keyword();
  } else {
    clear_has_keyword();
  }
  keyword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyword);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.keyword)
}

// repeated int32 selected_style_type = 2;
int BidResponse_Ad_LinkUnitKeyword::selected_style_type_size() const {
  return selected_style_type_.size();
}
void BidResponse_Ad_LinkUnitKeyword::clear_selected_style_type() {
  selected_style_type_.Clear();
}
 ::google::protobuf::int32 BidResponse_Ad_LinkUnitKeyword::selected_style_type(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.selected_style_type)
  return selected_style_type_.Get(index);
}
 void BidResponse_Ad_LinkUnitKeyword::set_selected_style_type(int index, ::google::protobuf::int32 value) {
  selected_style_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.selected_style_type)
}
 void BidResponse_Ad_LinkUnitKeyword::add_selected_style_type(::google::protobuf::int32 value) {
  selected_style_type_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.selected_style_type)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidResponse_Ad_LinkUnitKeyword::selected_style_type() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.selected_style_type)
  return selected_style_type_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidResponse_Ad_LinkUnitKeyword::mutable_selected_style_type() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidResponse.Ad.LinkUnitKeyword.selected_style_type)
  return &selected_style_type_;
}

// -------------------------------------------------------------------

// BidResponse_Ad_ExpandCreativeInfo

// optional int32 creative_width = 1;
bool BidResponse_Ad_ExpandCreativeInfo::has_creative_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad_ExpandCreativeInfo::set_has_creative_width() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad_ExpandCreativeInfo::clear_has_creative_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad_ExpandCreativeInfo::clear_creative_width() {
  creative_width_ = 0;
  clear_has_creative_width();
}
 ::google::protobuf::int32 BidResponse_Ad_ExpandCreativeInfo::creative_width() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_width)
  return creative_width_;
}
 void BidResponse_Ad_ExpandCreativeInfo::set_creative_width(::google::protobuf::int32 value) {
  set_has_creative_width();
  creative_width_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_width)
}

// optional int32 creative_height = 2;
bool BidResponse_Ad_ExpandCreativeInfo::has_creative_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ad_ExpandCreativeInfo::set_has_creative_height() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ad_ExpandCreativeInfo::clear_has_creative_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ad_ExpandCreativeInfo::clear_creative_height() {
  creative_height_ = 0;
  clear_has_creative_height();
}
 ::google::protobuf::int32 BidResponse_Ad_ExpandCreativeInfo::creative_height() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_height)
  return creative_height_;
}
 void BidResponse_Ad_ExpandCreativeInfo::set_creative_height(::google::protobuf::int32 value) {
  set_has_creative_height();
  creative_height_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_height)
}

// optional string creative_landing_page = 3;
bool BidResponse_Ad_ExpandCreativeInfo::has_creative_landing_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_Ad_ExpandCreativeInfo::set_has_creative_landing_page() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_Ad_ExpandCreativeInfo::clear_has_creative_landing_page() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_Ad_ExpandCreativeInfo::clear_creative_landing_page() {
  creative_landing_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_creative_landing_page();
}
 const ::std::string& BidResponse_Ad_ExpandCreativeInfo::creative_landing_page() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page)
  return creative_landing_page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_ExpandCreativeInfo::set_creative_landing_page(const ::std::string& value) {
  set_has_creative_landing_page();
  creative_landing_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page)
}
 void BidResponse_Ad_ExpandCreativeInfo::set_creative_landing_page(const char* value) {
  set_has_creative_landing_page();
  creative_landing_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page)
}
 void BidResponse_Ad_ExpandCreativeInfo::set_creative_landing_page(const char* value, size_t size) {
  set_has_creative_landing_page();
  creative_landing_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page)
}
 ::std::string* BidResponse_Ad_ExpandCreativeInfo::mutable_creative_landing_page() {
  set_has_creative_landing_page();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page)
  return creative_landing_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_ExpandCreativeInfo::release_creative_landing_page() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page)
  clear_has_creative_landing_page();
  return creative_landing_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_ExpandCreativeInfo::set_allocated_creative_landing_page(::std::string* creative_landing_page) {
  if (creative_landing_page != NULL) {
    set_has_creative_landing_page();
  } else {
    clear_has_creative_landing_page();
  }
  creative_landing_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creative_landing_page);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_landing_page)
}

// optional int32 creative_type = 4;
bool BidResponse_Ad_ExpandCreativeInfo::has_creative_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_Ad_ExpandCreativeInfo::set_has_creative_type() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_Ad_ExpandCreativeInfo::clear_has_creative_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_Ad_ExpandCreativeInfo::clear_creative_type() {
  creative_type_ = 0;
  clear_has_creative_type();
}
 ::google::protobuf::int32 BidResponse_Ad_ExpandCreativeInfo::creative_type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_type)
  return creative_type_;
}
 void BidResponse_Ad_ExpandCreativeInfo::set_creative_type(::google::protobuf::int32 value) {
  set_has_creative_type();
  creative_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.ExpandCreativeInfo.creative_type)
}

// -------------------------------------------------------------------

// BidResponse_Ad_DeeplinkInfo

// optional string deeplink_url = 1;
bool BidResponse_Ad_DeeplinkInfo::has_deeplink_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad_DeeplinkInfo::set_has_deeplink_url() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad_DeeplinkInfo::clear_has_deeplink_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad_DeeplinkInfo::clear_deeplink_url() {
  deeplink_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deeplink_url();
}
 const ::std::string& BidResponse_Ad_DeeplinkInfo::deeplink_url() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url)
  return deeplink_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_DeeplinkInfo::set_deeplink_url(const ::std::string& value) {
  set_has_deeplink_url();
  deeplink_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url)
}
 void BidResponse_Ad_DeeplinkInfo::set_deeplink_url(const char* value) {
  set_has_deeplink_url();
  deeplink_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url)
}
 void BidResponse_Ad_DeeplinkInfo::set_deeplink_url(const char* value, size_t size) {
  set_has_deeplink_url();
  deeplink_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url)
}
 ::std::string* BidResponse_Ad_DeeplinkInfo::mutable_deeplink_url() {
  set_has_deeplink_url();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url)
  return deeplink_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_DeeplinkInfo::release_deeplink_url() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url)
  clear_has_deeplink_url();
  return deeplink_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_DeeplinkInfo::set_allocated_deeplink_url(::std::string* deeplink_url) {
  if (deeplink_url != NULL) {
    set_has_deeplink_url();
  } else {
    clear_has_deeplink_url();
  }
  deeplink_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deeplink_url);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.DeeplinkInfo.deeplink_url)
}

// optional uint32 app_version = 2;
bool BidResponse_Ad_DeeplinkInfo::has_app_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ad_DeeplinkInfo::set_has_app_version() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ad_DeeplinkInfo::clear_has_app_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ad_DeeplinkInfo::clear_app_version() {
  app_version_ = 0u;
  clear_has_app_version();
}
 ::google::protobuf::uint32 BidResponse_Ad_DeeplinkInfo::app_version() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.DeeplinkInfo.app_version)
  return app_version_;
}
 void BidResponse_Ad_DeeplinkInfo::set_app_version(::google::protobuf::uint32 value) {
  set_has_app_version();
  app_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.DeeplinkInfo.app_version)
}

// optional string fallback_url = 3;
bool BidResponse_Ad_DeeplinkInfo::has_fallback_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_Ad_DeeplinkInfo::set_has_fallback_url() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_Ad_DeeplinkInfo::clear_has_fallback_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_Ad_DeeplinkInfo::clear_fallback_url() {
  fallback_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fallback_url();
}
 const ::std::string& BidResponse_Ad_DeeplinkInfo::fallback_url() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url)
  return fallback_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_DeeplinkInfo::set_fallback_url(const ::std::string& value) {
  set_has_fallback_url();
  fallback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url)
}
 void BidResponse_Ad_DeeplinkInfo::set_fallback_url(const char* value) {
  set_has_fallback_url();
  fallback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url)
}
 void BidResponse_Ad_DeeplinkInfo::set_fallback_url(const char* value, size_t size) {
  set_has_fallback_url();
  fallback_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url)
}
 ::std::string* BidResponse_Ad_DeeplinkInfo::mutable_fallback_url() {
  set_has_fallback_url();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url)
  return fallback_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_DeeplinkInfo::release_fallback_url() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url)
  clear_has_fallback_url();
  return fallback_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_DeeplinkInfo::set_allocated_fallback_url(::std::string* fallback_url) {
  if (fallback_url != NULL) {
    set_has_fallback_url();
  } else {
    clear_has_fallback_url();
  }
  fallback_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fallback_url);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_url)
}

// optional uint32 fallback_type = 4;
bool BidResponse_Ad_DeeplinkInfo::has_fallback_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_Ad_DeeplinkInfo::set_has_fallback_type() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_Ad_DeeplinkInfo::clear_has_fallback_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_Ad_DeeplinkInfo::clear_fallback_type() {
  fallback_type_ = 0u;
  clear_has_fallback_type();
}
 ::google::protobuf::uint32 BidResponse_Ad_DeeplinkInfo::fallback_type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_type)
  return fallback_type_;
}
 void BidResponse_Ad_DeeplinkInfo::set_fallback_type(::google::protobuf::uint32 value) {
  set_has_fallback_type();
  fallback_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.DeeplinkInfo.fallback_type)
}

// -------------------------------------------------------------------

// BidResponse_Ad_NativeAd_Image

// optional string url = 1;
bool BidResponse_Ad_NativeAd_Image::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad_NativeAd_Image::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad_NativeAd_Image::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad_NativeAd_Image::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& BidResponse_Ad_NativeAd_Image::url() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.NativeAd.Image.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_NativeAd_Image::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.NativeAd.Image.url)
}
 void BidResponse_Ad_NativeAd_Image::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.NativeAd.Image.url)
}
 void BidResponse_Ad_NativeAd_Image::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.NativeAd.Image.url)
}
 ::std::string* BidResponse_Ad_NativeAd_Image::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.NativeAd.Image.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_NativeAd_Image::release_url() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.NativeAd.Image.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_NativeAd_Image::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.NativeAd.Image.url)
}

// optional int32 width = 2;
bool BidResponse_Ad_NativeAd_Image::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ad_NativeAd_Image::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ad_NativeAd_Image::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ad_NativeAd_Image::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 BidResponse_Ad_NativeAd_Image::width() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.NativeAd.Image.width)
  return width_;
}
 void BidResponse_Ad_NativeAd_Image::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.NativeAd.Image.width)
}

// optional int32 height = 3;
bool BidResponse_Ad_NativeAd_Image::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_Ad_NativeAd_Image::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_Ad_NativeAd_Image::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_Ad_NativeAd_Image::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 BidResponse_Ad_NativeAd_Image::height() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.NativeAd.Image.height)
  return height_;
}
 void BidResponse_Ad_NativeAd_Image::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.NativeAd.Image.height)
}

// -------------------------------------------------------------------

// BidResponse_Ad_NativeAd

// optional bytes title = 1;
bool BidResponse_Ad_NativeAd::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad_NativeAd::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad_NativeAd::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad_NativeAd::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& BidResponse_Ad_NativeAd::title() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.NativeAd.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_NativeAd::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.NativeAd.title)
}
 void BidResponse_Ad_NativeAd::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.NativeAd.title)
}
 void BidResponse_Ad_NativeAd::set_title(const void* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.NativeAd.title)
}
 ::std::string* BidResponse_Ad_NativeAd::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.NativeAd.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_NativeAd::release_title() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.NativeAd.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_NativeAd::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.NativeAd.title)
}

// optional bytes desc = 2;
bool BidResponse_Ad_NativeAd::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ad_NativeAd::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ad_NativeAd::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ad_NativeAd::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
 const ::std::string& BidResponse_Ad_NativeAd::desc() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.NativeAd.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_NativeAd::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.NativeAd.desc)
}
 void BidResponse_Ad_NativeAd::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.NativeAd.desc)
}
 void BidResponse_Ad_NativeAd::set_desc(const void* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.NativeAd.desc)
}
 ::std::string* BidResponse_Ad_NativeAd::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.NativeAd.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad_NativeAd::release_desc() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.NativeAd.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad_NativeAd::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.NativeAd.desc)
}

// repeated .protocol.baidu.BidResponse.Ad.NativeAd.Image image = 3;
int BidResponse_Ad_NativeAd::image_size() const {
  return image_.size();
}
void BidResponse_Ad_NativeAd::clear_image() {
  image_.Clear();
}
const ::protocol::baidu::BidResponse_Ad_NativeAd_Image& BidResponse_Ad_NativeAd::image(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.NativeAd.image)
  return image_.Get(index);
}
::protocol::baidu::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.NativeAd.image)
  return image_.Mutable(index);
}
::protocol::baidu::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::add_image() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidResponse.Ad.NativeAd.image)
  return image_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidResponse_Ad_NativeAd_Image >*
BidResponse_Ad_NativeAd::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidResponse.Ad.NativeAd.image)
  return &image_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidResponse_Ad_NativeAd_Image >&
BidResponse_Ad_NativeAd::image() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidResponse.Ad.NativeAd.image)
  return image_;
}

// optional .protocol.baidu.BidResponse.Ad.NativeAd.Image logo_icon = 4;
bool BidResponse_Ad_NativeAd::has_logo_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_Ad_NativeAd::set_has_logo_icon() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_Ad_NativeAd::clear_has_logo_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_Ad_NativeAd::clear_logo_icon() {
  if (logo_icon_ != NULL) logo_icon_->::protocol::baidu::BidResponse_Ad_NativeAd_Image::Clear();
  clear_has_logo_icon();
}
const ::protocol::baidu::BidResponse_Ad_NativeAd_Image& BidResponse_Ad_NativeAd::logo_icon() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.NativeAd.logo_icon)
  return logo_icon_ != NULL ? *logo_icon_ : *default_instance_->logo_icon_;
}
::protocol::baidu::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::mutable_logo_icon() {
  set_has_logo_icon();
  if (logo_icon_ == NULL) {
    logo_icon_ = new ::protocol::baidu::BidResponse_Ad_NativeAd_Image;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.NativeAd.logo_icon)
  return logo_icon_;
}
::protocol::baidu::BidResponse_Ad_NativeAd_Image* BidResponse_Ad_NativeAd::release_logo_icon() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.NativeAd.logo_icon)
  clear_has_logo_icon();
  ::protocol::baidu::BidResponse_Ad_NativeAd_Image* temp = logo_icon_;
  logo_icon_ = NULL;
  return temp;
}
void BidResponse_Ad_NativeAd::set_allocated_logo_icon(::protocol::baidu::BidResponse_Ad_NativeAd_Image* logo_icon) {
  delete logo_icon_;
  logo_icon_ = logo_icon;
  if (logo_icon) {
    set_has_logo_icon();
  } else {
    clear_has_logo_icon();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.NativeAd.logo_icon)
}

// optional int32 app_size = 5;
bool BidResponse_Ad_NativeAd::has_app_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse_Ad_NativeAd::set_has_app_size() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse_Ad_NativeAd::clear_has_app_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse_Ad_NativeAd::clear_app_size() {
  app_size_ = 0;
  clear_has_app_size();
}
 ::google::protobuf::int32 BidResponse_Ad_NativeAd::app_size() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.NativeAd.app_size)
  return app_size_;
}
 void BidResponse_Ad_NativeAd::set_app_size(::google::protobuf::int32 value) {
  set_has_app_size();
  app_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.NativeAd.app_size)
}

// -------------------------------------------------------------------

// BidResponse_Ad

// optional int32 sequence_id = 1;
bool BidResponse_Ad::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_Ad::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_Ad::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_Ad::clear_sequence_id() {
  sequence_id_ = 0;
  clear_has_sequence_id();
}
 ::google::protobuf::int32 BidResponse_Ad::sequence_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.sequence_id)
  return sequence_id_;
}
 void BidResponse_Ad::set_sequence_id(::google::protobuf::int32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.sequence_id)
}

// optional int64 creative_id = 2;
bool BidResponse_Ad::has_creative_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_Ad::set_has_creative_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_Ad::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_Ad::clear_creative_id() {
  creative_id_ = GOOGLE_LONGLONG(0);
  clear_has_creative_id();
}
 ::google::protobuf::int64 BidResponse_Ad::creative_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.creative_id)
  return creative_id_;
}
 void BidResponse_Ad::set_creative_id(::google::protobuf::int64 value) {
  set_has_creative_id();
  creative_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.creative_id)
}

// optional string html_snippet = 7;
bool BidResponse_Ad::has_html_snippet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_Ad::set_has_html_snippet() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_Ad::clear_has_html_snippet() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_Ad::clear_html_snippet() {
  html_snippet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_html_snippet();
}
 const ::std::string& BidResponse_Ad::html_snippet() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.html_snippet)
  return html_snippet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_html_snippet(const ::std::string& value) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.html_snippet)
}
 void BidResponse_Ad::set_html_snippet(const char* value) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.html_snippet)
}
 void BidResponse_Ad::set_html_snippet(const char* value, size_t size) {
  set_has_html_snippet();
  html_snippet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.html_snippet)
}
 ::std::string* BidResponse_Ad::mutable_html_snippet() {
  set_has_html_snippet();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.html_snippet)
  return html_snippet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_html_snippet() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.html_snippet)
  clear_has_html_snippet();
  return html_snippet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_html_snippet(::std::string* html_snippet) {
  if (html_snippet != NULL) {
    set_has_html_snippet();
  } else {
    clear_has_html_snippet();
  }
  html_snippet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), html_snippet);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.html_snippet)
}

// optional .protocol.baidu.BidResponse.Ad.LinkUnitKeyword link_unit_keyword = 18;
bool BidResponse_Ad::has_link_unit_keyword() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_Ad::set_has_link_unit_keyword() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_Ad::clear_has_link_unit_keyword() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_Ad::clear_link_unit_keyword() {
  if (link_unit_keyword_ != NULL) link_unit_keyword_->::protocol::baidu::BidResponse_Ad_LinkUnitKeyword::Clear();
  clear_has_link_unit_keyword();
}
const ::protocol::baidu::BidResponse_Ad_LinkUnitKeyword& BidResponse_Ad::link_unit_keyword() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.link_unit_keyword)
  return link_unit_keyword_ != NULL ? *link_unit_keyword_ : *default_instance_->link_unit_keyword_;
}
::protocol::baidu::BidResponse_Ad_LinkUnitKeyword* BidResponse_Ad::mutable_link_unit_keyword() {
  set_has_link_unit_keyword();
  if (link_unit_keyword_ == NULL) {
    link_unit_keyword_ = new ::protocol::baidu::BidResponse_Ad_LinkUnitKeyword;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.link_unit_keyword)
  return link_unit_keyword_;
}
::protocol::baidu::BidResponse_Ad_LinkUnitKeyword* BidResponse_Ad::release_link_unit_keyword() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.link_unit_keyword)
  clear_has_link_unit_keyword();
  ::protocol::baidu::BidResponse_Ad_LinkUnitKeyword* temp = link_unit_keyword_;
  link_unit_keyword_ = NULL;
  return temp;
}
void BidResponse_Ad::set_allocated_link_unit_keyword(::protocol::baidu::BidResponse_Ad_LinkUnitKeyword* link_unit_keyword) {
  delete link_unit_keyword_;
  link_unit_keyword_ = link_unit_keyword;
  if (link_unit_keyword) {
    set_has_link_unit_keyword();
  } else {
    clear_has_link_unit_keyword();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.link_unit_keyword)
}

// optional .protocol.baidu.BidResponse.Ad.ExpandCreativeInfo expand_creative_info = 19;
bool BidResponse_Ad::has_expand_creative_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse_Ad::set_has_expand_creative_info() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse_Ad::clear_has_expand_creative_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse_Ad::clear_expand_creative_info() {
  if (expand_creative_info_ != NULL) expand_creative_info_->::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo::Clear();
  clear_has_expand_creative_info();
}
const ::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo& BidResponse_Ad::expand_creative_info() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.expand_creative_info)
  return expand_creative_info_ != NULL ? *expand_creative_info_ : *default_instance_->expand_creative_info_;
}
::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo* BidResponse_Ad::mutable_expand_creative_info() {
  set_has_expand_creative_info();
  if (expand_creative_info_ == NULL) {
    expand_creative_info_ = new ::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.expand_creative_info)
  return expand_creative_info_;
}
::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo* BidResponse_Ad::release_expand_creative_info() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.expand_creative_info)
  clear_has_expand_creative_info();
  ::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo* temp = expand_creative_info_;
  expand_creative_info_ = NULL;
  return temp;
}
void BidResponse_Ad::set_allocated_expand_creative_info(::protocol::baidu::BidResponse_Ad_ExpandCreativeInfo* expand_creative_info) {
  delete expand_creative_info_;
  expand_creative_info_ = expand_creative_info;
  if (expand_creative_info) {
    set_has_expand_creative_info();
  } else {
    clear_has_expand_creative_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.expand_creative_info)
}

// optional uint64 advertiser_id = 8;
bool BidResponse_Ad::has_advertiser_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidResponse_Ad::set_has_advertiser_id() {
  _has_bits_[0] |= 0x00000020u;
}
void BidResponse_Ad::clear_has_advertiser_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidResponse_Ad::clear_advertiser_id() {
  advertiser_id_ = GOOGLE_ULONGLONG(0);
  clear_has_advertiser_id();
}
 ::google::protobuf::uint64 BidResponse_Ad::advertiser_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.advertiser_id)
  return advertiser_id_;
}
 void BidResponse_Ad::set_advertiser_id(::google::protobuf::uint64 value) {
  set_has_advertiser_id();
  advertiser_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.advertiser_id)
}

// optional int32 width = 9;
bool BidResponse_Ad::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidResponse_Ad::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void BidResponse_Ad::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidResponse_Ad::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 BidResponse_Ad::width() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.width)
  return width_;
}
 void BidResponse_Ad::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.width)
}

// optional int32 height = 10;
bool BidResponse_Ad::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidResponse_Ad::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void BidResponse_Ad::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidResponse_Ad::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 BidResponse_Ad::height() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.height)
  return height_;
}
 void BidResponse_Ad::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.height)
}

// optional int32 category = 11;
bool BidResponse_Ad::has_category() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidResponse_Ad::set_has_category() {
  _has_bits_[0] |= 0x00000100u;
}
void BidResponse_Ad::clear_has_category() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidResponse_Ad::clear_category() {
  category_ = 0;
  clear_has_category();
}
 ::google::protobuf::int32 BidResponse_Ad::category() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.category)
  return category_;
}
 void BidResponse_Ad::set_category(::google::protobuf::int32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.category)
}

// optional int32 type = 12;
bool BidResponse_Ad::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidResponse_Ad::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
void BidResponse_Ad::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidResponse_Ad::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 BidResponse_Ad::type() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.type)
  return type_;
}
 void BidResponse_Ad::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.type)
}

// optional string landing_page = 13;
bool BidResponse_Ad::has_landing_page() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidResponse_Ad::set_has_landing_page() {
  _has_bits_[0] |= 0x00000400u;
}
void BidResponse_Ad::clear_has_landing_page() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidResponse_Ad::clear_landing_page() {
  landing_page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_landing_page();
}
 const ::std::string& BidResponse_Ad::landing_page() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.landing_page)
  return landing_page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_landing_page(const ::std::string& value) {
  set_has_landing_page();
  landing_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.landing_page)
}
 void BidResponse_Ad::set_landing_page(const char* value) {
  set_has_landing_page();
  landing_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.landing_page)
}
 void BidResponse_Ad::set_landing_page(const char* value, size_t size) {
  set_has_landing_page();
  landing_page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.landing_page)
}
 ::std::string* BidResponse_Ad::mutable_landing_page() {
  set_has_landing_page();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.landing_page)
  return landing_page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_landing_page() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.landing_page)
  clear_has_landing_page();
  return landing_page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_landing_page(::std::string* landing_page) {
  if (landing_page != NULL) {
    set_has_landing_page();
  } else {
    clear_has_landing_page();
  }
  landing_page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), landing_page);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.landing_page)
}

// repeated string target_url = 14;
int BidResponse_Ad::target_url_size() const {
  return target_url_.size();
}
void BidResponse_Ad::clear_target_url() {
  target_url_.Clear();
}
 const ::std::string& BidResponse_Ad::target_url(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.target_url)
  return target_url_.Get(index);
}
 ::std::string* BidResponse_Ad::mutable_target_url(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.target_url)
  return target_url_.Mutable(index);
}
 void BidResponse_Ad::set_target_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.target_url)
  target_url_.Mutable(index)->assign(value);
}
 void BidResponse_Ad::set_target_url(int index, const char* value) {
  target_url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.target_url)
}
 void BidResponse_Ad::set_target_url(int index, const char* value, size_t size) {
  target_url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.target_url)
}
 ::std::string* BidResponse_Ad::add_target_url() {
  // @@protoc_insertion_point(field_add_mutable:protocol.baidu.BidResponse.Ad.target_url)
  return target_url_.Add();
}
 void BidResponse_Ad::add_target_url(const ::std::string& value) {
  target_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidResponse.Ad.target_url)
}
 void BidResponse_Ad::add_target_url(const char* value) {
  target_url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.baidu.BidResponse.Ad.target_url)
}
 void BidResponse_Ad::add_target_url(const char* value, size_t size) {
  target_url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.baidu.BidResponse.Ad.target_url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ad::target_url() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidResponse.Ad.target_url)
  return target_url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ad::mutable_target_url() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidResponse.Ad.target_url)
  return &target_url_;
}

// repeated string monitor_urls = 17;
int BidResponse_Ad::monitor_urls_size() const {
  return monitor_urls_.size();
}
void BidResponse_Ad::clear_monitor_urls() {
  monitor_urls_.Clear();
}
 const ::std::string& BidResponse_Ad::monitor_urls(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.monitor_urls)
  return monitor_urls_.Get(index);
}
 ::std::string* BidResponse_Ad::mutable_monitor_urls(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.monitor_urls)
  return monitor_urls_.Mutable(index);
}
 void BidResponse_Ad::set_monitor_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.monitor_urls)
  monitor_urls_.Mutable(index)->assign(value);
}
 void BidResponse_Ad::set_monitor_urls(int index, const char* value) {
  monitor_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.monitor_urls)
}
 void BidResponse_Ad::set_monitor_urls(int index, const char* value, size_t size) {
  monitor_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.monitor_urls)
}
 ::std::string* BidResponse_Ad::add_monitor_urls() {
  // @@protoc_insertion_point(field_add_mutable:protocol.baidu.BidResponse.Ad.monitor_urls)
  return monitor_urls_.Add();
}
 void BidResponse_Ad::add_monitor_urls(const ::std::string& value) {
  monitor_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.baidu.BidResponse.Ad.monitor_urls)
}
 void BidResponse_Ad::add_monitor_urls(const char* value) {
  monitor_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.baidu.BidResponse.Ad.monitor_urls)
}
 void BidResponse_Ad::add_monitor_urls(const char* value, size_t size) {
  monitor_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.baidu.BidResponse.Ad.monitor_urls)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_Ad::monitor_urls() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidResponse.Ad.monitor_urls)
  return monitor_urls_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_Ad::mutable_monitor_urls() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidResponse.Ad.monitor_urls)
  return &monitor_urls_;
}

// optional int32 max_cpm = 3;
bool BidResponse_Ad::has_max_cpm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidResponse_Ad::set_has_max_cpm() {
  _has_bits_[0] |= 0x00002000u;
}
void BidResponse_Ad::clear_has_max_cpm() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidResponse_Ad::clear_max_cpm() {
  max_cpm_ = 0;
  clear_has_max_cpm();
}
 ::google::protobuf::int32 BidResponse_Ad::max_cpm() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.max_cpm)
  return max_cpm_;
}
 void BidResponse_Ad::set_max_cpm(::google::protobuf::int32 value) {
  set_has_max_cpm();
  max_cpm_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.max_cpm)
}

// optional string extdata = 5;
bool BidResponse_Ad::has_extdata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidResponse_Ad::set_has_extdata() {
  _has_bits_[0] |= 0x00004000u;
}
void BidResponse_Ad::clear_has_extdata() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidResponse_Ad::clear_extdata() {
  extdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_extdata();
}
 const ::std::string& BidResponse_Ad::extdata() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.extdata)
  return extdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_extdata(const ::std::string& value) {
  set_has_extdata();
  extdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.extdata)
}
 void BidResponse_Ad::set_extdata(const char* value) {
  set_has_extdata();
  extdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.extdata)
}
 void BidResponse_Ad::set_extdata(const char* value, size_t size) {
  set_has_extdata();
  extdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.extdata)
}
 ::std::string* BidResponse_Ad::mutable_extdata() {
  set_has_extdata();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.extdata)
  return extdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_extdata() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.extdata)
  clear_has_extdata();
  return extdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_extdata(::std::string* extdata) {
  if (extdata != NULL) {
    set_has_extdata();
  } else {
    clear_has_extdata();
  }
  extdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extdata);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.extdata)
}

// optional bool is_cookie_matching = 6;
bool BidResponse_Ad::has_is_cookie_matching() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidResponse_Ad::set_has_is_cookie_matching() {
  _has_bits_[0] |= 0x00008000u;
}
void BidResponse_Ad::clear_has_is_cookie_matching() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidResponse_Ad::clear_is_cookie_matching() {
  is_cookie_matching_ = false;
  clear_has_is_cookie_matching();
}
 bool BidResponse_Ad::is_cookie_matching() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.is_cookie_matching)
  return is_cookie_matching_;
}
 void BidResponse_Ad::set_is_cookie_matching(bool value) {
  set_has_is_cookie_matching();
  is_cookie_matching_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.is_cookie_matching)
}

// optional string preferred_order_id = 15;
bool BidResponse_Ad::has_preferred_order_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidResponse_Ad::set_has_preferred_order_id() {
  _has_bits_[0] |= 0x00010000u;
}
void BidResponse_Ad::clear_has_preferred_order_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidResponse_Ad::clear_preferred_order_id() {
  preferred_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preferred_order_id();
}
 const ::std::string& BidResponse_Ad::preferred_order_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.preferred_order_id)
  return preferred_order_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_preferred_order_id(const ::std::string& value) {
  set_has_preferred_order_id();
  preferred_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.preferred_order_id)
}
 void BidResponse_Ad::set_preferred_order_id(const char* value) {
  set_has_preferred_order_id();
  preferred_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.Ad.preferred_order_id)
}
 void BidResponse_Ad::set_preferred_order_id(const char* value, size_t size) {
  set_has_preferred_order_id();
  preferred_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.Ad.preferred_order_id)
}
 ::std::string* BidResponse_Ad::mutable_preferred_order_id() {
  set_has_preferred_order_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.preferred_order_id)
  return preferred_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_Ad::release_preferred_order_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.preferred_order_id)
  clear_has_preferred_order_id();
  return preferred_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_Ad::set_allocated_preferred_order_id(::std::string* preferred_order_id) {
  if (preferred_order_id != NULL) {
    set_has_preferred_order_id();
  } else {
    clear_has_preferred_order_id();
  }
  preferred_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_order_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.preferred_order_id)
}

// optional uint32 guaranteed_order_id = 20;
bool BidResponse_Ad::has_guaranteed_order_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BidResponse_Ad::set_has_guaranteed_order_id() {
  _has_bits_[0] |= 0x00020000u;
}
void BidResponse_Ad::clear_has_guaranteed_order_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void BidResponse_Ad::clear_guaranteed_order_id() {
  guaranteed_order_id_ = 0u;
  clear_has_guaranteed_order_id();
}
 ::google::protobuf::uint32 BidResponse_Ad::guaranteed_order_id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.guaranteed_order_id)
  return guaranteed_order_id_;
}
 void BidResponse_Ad::set_guaranteed_order_id(::google::protobuf::uint32 value) {
  set_has_guaranteed_order_id();
  guaranteed_order_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.Ad.guaranteed_order_id)
}

// optional .protocol.baidu.BidResponse.Ad.DeeplinkInfo deeplink_info = 21;
bool BidResponse_Ad::has_deeplink_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void BidResponse_Ad::set_has_deeplink_info() {
  _has_bits_[0] |= 0x00040000u;
}
void BidResponse_Ad::clear_has_deeplink_info() {
  _has_bits_[0] &= ~0x00040000u;
}
void BidResponse_Ad::clear_deeplink_info() {
  if (deeplink_info_ != NULL) deeplink_info_->::protocol::baidu::BidResponse_Ad_DeeplinkInfo::Clear();
  clear_has_deeplink_info();
}
const ::protocol::baidu::BidResponse_Ad_DeeplinkInfo& BidResponse_Ad::deeplink_info() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.deeplink_info)
  return deeplink_info_ != NULL ? *deeplink_info_ : *default_instance_->deeplink_info_;
}
::protocol::baidu::BidResponse_Ad_DeeplinkInfo* BidResponse_Ad::mutable_deeplink_info() {
  set_has_deeplink_info();
  if (deeplink_info_ == NULL) {
    deeplink_info_ = new ::protocol::baidu::BidResponse_Ad_DeeplinkInfo;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.deeplink_info)
  return deeplink_info_;
}
::protocol::baidu::BidResponse_Ad_DeeplinkInfo* BidResponse_Ad::release_deeplink_info() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.deeplink_info)
  clear_has_deeplink_info();
  ::protocol::baidu::BidResponse_Ad_DeeplinkInfo* temp = deeplink_info_;
  deeplink_info_ = NULL;
  return temp;
}
void BidResponse_Ad::set_allocated_deeplink_info(::protocol::baidu::BidResponse_Ad_DeeplinkInfo* deeplink_info) {
  delete deeplink_info_;
  deeplink_info_ = deeplink_info;
  if (deeplink_info) {
    set_has_deeplink_info();
  } else {
    clear_has_deeplink_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.deeplink_info)
}

// optional .protocol.baidu.BidResponse.Ad.NativeAd native_ad = 22;
bool BidResponse_Ad::has_native_ad() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BidResponse_Ad::set_has_native_ad() {
  _has_bits_[0] |= 0x00080000u;
}
void BidResponse_Ad::clear_has_native_ad() {
  _has_bits_[0] &= ~0x00080000u;
}
void BidResponse_Ad::clear_native_ad() {
  if (native_ad_ != NULL) native_ad_->::protocol::baidu::BidResponse_Ad_NativeAd::Clear();
  clear_has_native_ad();
}
const ::protocol::baidu::BidResponse_Ad_NativeAd& BidResponse_Ad::native_ad() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.Ad.native_ad)
  return native_ad_ != NULL ? *native_ad_ : *default_instance_->native_ad_;
}
::protocol::baidu::BidResponse_Ad_NativeAd* BidResponse_Ad::mutable_native_ad() {
  set_has_native_ad();
  if (native_ad_ == NULL) {
    native_ad_ = new ::protocol::baidu::BidResponse_Ad_NativeAd;
  }
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.Ad.native_ad)
  return native_ad_;
}
::protocol::baidu::BidResponse_Ad_NativeAd* BidResponse_Ad::release_native_ad() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.Ad.native_ad)
  clear_has_native_ad();
  ::protocol::baidu::BidResponse_Ad_NativeAd* temp = native_ad_;
  native_ad_ = NULL;
  return temp;
}
void BidResponse_Ad::set_allocated_native_ad(::protocol::baidu::BidResponse_Ad_NativeAd* native_ad) {
  delete native_ad_;
  native_ad_ = native_ad;
  if (native_ad) {
    set_has_native_ad();
  } else {
    clear_has_native_ad();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.Ad.native_ad)
}

// -------------------------------------------------------------------

// BidResponse

// required string id = 1;
bool BidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.id)
}
 void BidResponse::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.id)
}
 void BidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.id)
}
 ::std::string* BidResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_id() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.id)
}

// repeated .protocol.baidu.BidResponse.Ad ad = 2;
int BidResponse::ad_size() const {
  return ad_.size();
}
void BidResponse::clear_ad() {
  ad_.Clear();
}
const ::protocol::baidu::BidResponse_Ad& BidResponse::ad(int index) const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.ad)
  return ad_.Get(index);
}
::protocol::baidu::BidResponse_Ad* BidResponse::mutable_ad(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.ad)
  return ad_.Mutable(index);
}
::protocol::baidu::BidResponse_Ad* BidResponse::add_ad() {
  // @@protoc_insertion_point(field_add:protocol.baidu.BidResponse.ad)
  return ad_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidResponse_Ad >*
BidResponse::mutable_ad() {
  // @@protoc_insertion_point(field_mutable_list:protocol.baidu.BidResponse.ad)
  return &ad_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::baidu::BidResponse_Ad >&
BidResponse::ad() const {
  // @@protoc_insertion_point(field_list:protocol.baidu.BidResponse.ad)
  return ad_;
}

// optional string debug_string = 3;
bool BidResponse::has_debug_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse::set_has_debug_string() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse::clear_has_debug_string() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse::clear_debug_string() {
  debug_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug_string();
}
 const ::std::string& BidResponse::debug_string() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.debug_string)
  return debug_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_debug_string(const ::std::string& value) {
  set_has_debug_string();
  debug_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.debug_string)
}
 void BidResponse::set_debug_string(const char* value) {
  set_has_debug_string();
  debug_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.baidu.BidResponse.debug_string)
}
 void BidResponse::set_debug_string(const char* value, size_t size) {
  set_has_debug_string();
  debug_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.baidu.BidResponse.debug_string)
}
 ::std::string* BidResponse::mutable_debug_string() {
  set_has_debug_string();
  // @@protoc_insertion_point(field_mutable:protocol.baidu.BidResponse.debug_string)
  return debug_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_debug_string() {
  // @@protoc_insertion_point(field_release:protocol.baidu.BidResponse.debug_string)
  clear_has_debug_string();
  return debug_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_debug_string(::std::string* debug_string) {
  if (debug_string != NULL) {
    set_has_debug_string();
  } else {
    clear_has_debug_string();
  }
  debug_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_string);
  // @@protoc_insertion_point(field_set_allocated:protocol.baidu.BidResponse.debug_string)
}

// optional int32 processing_time_ms = 4;
bool BidResponse::has_processing_time_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse::set_has_processing_time_ms() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse::clear_has_processing_time_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse::clear_processing_time_ms() {
  processing_time_ms_ = 0;
  clear_has_processing_time_ms();
}
 ::google::protobuf::int32 BidResponse::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:protocol.baidu.BidResponse.processing_time_ms)
  return processing_time_ms_;
}
 void BidResponse::set_processing_time_ms(::google::protobuf::int32 value) {
  set_has_processing_time_ms();
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:protocol.baidu.BidResponse.processing_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::protocol::baidu::BidResponse_Ad,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  ad_status(kAdStatusFieldNumber, 0);

// @@protoc_insertion_point(namespace_scope)

}  // namespace baidu
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
