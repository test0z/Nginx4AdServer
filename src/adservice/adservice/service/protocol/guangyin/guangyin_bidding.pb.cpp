// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guangyin_bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "guangyin_bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scenario_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scenario_reflection_ = NULL;
const ::google::protobuf::Descriptor* Imp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Banner_reflection_ = NULL;
const ::google::protobuf::Descriptor* Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  App_reflection_ = NULL;
const ::google::protobuf::Descriptor* Publisher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Publisher_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bid_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScenarioType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdmType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NoBidReasonCodes_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_guangyin_5fbidding_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_guangyin_5fbidding_2eproto() {
  protobuf_AddDesc_guangyin_5fbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "guangyin_bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, imp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, wseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, scenario_),
  };
  BidRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _internal_metadata_),
      -1);
  Scenario_descriptor_ = file->message_type(1);
  static const int Scenario_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, info_),
  };
  Scenario_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Scenario_descriptor_,
      Scenario::default_instance_,
      Scenario_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, _has_bits_[0]),
      -1,
      -1,
      sizeof(Scenario),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenario, _internal_metadata_),
      -1);
  Imp_descriptor_ = file->message_type(2);
  static const int Imp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, bidfloor_),
  };
  Imp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Imp_descriptor_,
      Imp::default_instance_,
      Imp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Imp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imp, _internal_metadata_),
      -1);
  Banner_descriptor_ = file->message_type(3);
  static const int Banner_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, wmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, hmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, wmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, hmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, wtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, battr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, bwords_),
  };
  Banner_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Banner_descriptor_,
      Banner::default_instance_,
      Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, _has_bits_[0]),
      -1,
      -1,
      sizeof(Banner),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Banner, _internal_metadata_),
      -1);
  Site_descriptor_ = file->message_type(4);
  static const int Site_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, sectioncat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, pagecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, keywords_),
  };
  Site_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Site_descriptor_,
      Site::default_instance_,
      Site_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, _has_bits_[0]),
      -1,
      -1,
      sizeof(Site),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Site, _internal_metadata_),
      -1);
  App_descriptor_ = file->message_type(5);
  static const int App_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, storeurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, sectioncat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, pagecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, paid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, keywords_),
  };
  App_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      App_descriptor_,
      App::default_instance_,
      App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _has_bits_[0]),
      -1,
      -1,
      sizeof(App),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(App, _internal_metadata_),
      -1);
  Publisher_descriptor_ = file->message_type(6);
  static const int Publisher_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, slot_),
  };
  Publisher_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Publisher_descriptor_,
      Publisher::default_instance_,
      Publisher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, _has_bits_[0]),
      -1,
      -1,
      sizeof(Publisher),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publisher, _internal_metadata_),
      -1);
  Device_descriptor_ = file->message_type(7);
  static const int Device_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, make_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, hwv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, osv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, js_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, androidid_),
  };
  Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _has_bits_[0]),
      -1,
      -1,
      sizeof(Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _internal_metadata_),
      -1);
  Geo_descriptor_ = file->message_type(8);
  static const int Geo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, utcoffset_),
  };
  Geo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Geo_descriptor_,
      Geo::default_instance_,
      Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _has_bits_[0]),
      -1,
      -1,
      sizeof(Geo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Geo, _internal_metadata_),
      -1);
  User_descriptor_ = file->message_type(9);
  static const int User_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, yob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, geo_),
  };
  User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      -1,
      -1,
      sizeof(User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_),
      -1);
  BidResponse_descriptor_ = file->message_type(10);
  static const int BidResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seatbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, process_time_),
  };
  BidResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _internal_metadata_),
      -1);
  SeatBid_descriptor_ = file->message_type(11);
  static const int SeatBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, seat_),
  };
  SeatBid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeatBid_descriptor_,
      SeatBid::default_instance_,
      SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, _has_bits_[0]),
      -1,
      -1,
      sizeof(SeatBid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatBid, _internal_metadata_),
      -1);
  Bid_descriptor_ = file->message_type(12);
  static const int Bid_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, iurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, nurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, crid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, curl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, extiurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, admtype_),
  };
  Bid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Bid_descriptor_,
      Bid::default_instance_,
      Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _has_bits_[0]),
      -1,
      -1,
      sizeof(Bid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bid, _internal_metadata_),
      -1);
  ContentCategory_descriptor_ = file->enum_type(0);
  AdType_descriptor_ = file->enum_type(1);
  CreativeAttribute_descriptor_ = file->enum_type(2);
  AdPosition_descriptor_ = file->enum_type(3);
  ScenarioType_descriptor_ = file->enum_type(4);
  ConnectionType_descriptor_ = file->enum_type(5);
  LocationType_descriptor_ = file->enum_type(6);
  DeviceType_descriptor_ = file->enum_type(7);
  AdmType_descriptor_ = file->enum_type(8);
  NoBidReasonCodes_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_guangyin_5fbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Scenario_descriptor_, &Scenario::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Imp_descriptor_, &Imp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Banner_descriptor_, &Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Site_descriptor_, &Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      App_descriptor_, &App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Publisher_descriptor_, &Publisher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Geo_descriptor_, &Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeatBid_descriptor_, &SeatBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Bid_descriptor_, &Bid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_guangyin_5fbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete Scenario::default_instance_;
  delete Scenario_reflection_;
  delete Imp::default_instance_;
  delete Imp_reflection_;
  delete Banner::default_instance_;
  delete Banner_reflection_;
  delete Site::default_instance_;
  delete Site_reflection_;
  delete App::default_instance_;
  delete App_reflection_;
  delete Publisher::default_instance_;
  delete Publisher_reflection_;
  delete Device::default_instance_;
  delete Device_reflection_;
  delete Geo::default_instance_;
  delete Geo_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete SeatBid::default_instance_;
  delete SeatBid_reflection_;
  delete Bid::default_instance_;
  delete Bid_reflection_;
}

void protobuf_AddDesc_guangyin_5fbidding_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_guangyin_5fbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026guangyin_bidding.proto\"\333\001\n\nBidRequest\022"
    "\n\n\002id\030\001 \002(\t\022\021\n\003imp\030\002 \003(\0132\004.Imp\022\023\n\004site\030\003"
    " \001(\0132\005.Site\022\021\n\003app\030\004 \001(\0132\004.App\022\023\n\004user\030\005"
    " \001(\0132\005.User\022\027\n\006device\030\006 \001(\0132\007.Device\022\017\n\004"
    "test\030\007 \002(\005:\0010\022\014\n\004tmax\030\010 \002(\005\022\r\n\002at\030\t \002(\005:"
    "\0012\022\r\n\005wseat\030\n \003(\t\022\033\n\010scenario\030\013 \002(\0132\t.Sc"
    "enario\"5\n\010Scenario\022\033\n\004type\030\001 \002(\0162\r.Scena"
    "rioType\022\014\n\004info\030\002 \001(\t\"<\n\003Imp\022\n\n\002id\030\001 \002(\t"
    "\022\027\n\006banner\030\002 \002(\0132\007.Banner\022\020\n\010bidfloor\030\003 "
    "\002(\002\"\200\002\n\006Banner\022\n\n\002id\030\001 \002(\t\022\t\n\001w\030\002 \001(\005\022\t\n"
    "\001h\030\003 \001(\005\022\014\n\004wmax\030\004 \001(\005\022\014\n\004hmax\030\005 \001(\005\022\014\n\004"
    "wmin\030\006 \001(\005\022\014\n\004hmin\030\007 \001(\005\022\026\n\005btype\030\010 \003(\0162"
    "\007.AdType\022\026\n\005wtype\030\t \003(\0162\007.AdType\022!\n\005batt"
    "r\030\n \003(\0162\022.CreativeAttribute\022\030\n\003pos\030\013 \001(\016"
    "2\013.AdPosition\022\r\n\005mimes\030\014 \003(\t\022\020\n\010keywords"
    "\030\r \003(\t\022\016\n\006bwords\030\016 \003(\t\"\207\002\n\004Site\022\n\n\002id\030\001 "
    "\002(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\035\n\003cat"
    "\030\004 \003(\0162\020.ContentCategory\022$\n\nsectioncat\030\005"
    " \001(\0162\020.ContentCategory\022!\n\007pagecat\030\006 \001(\0162"
    "\020.ContentCategory\022\014\n\004page\030\007 \002(\t\022\013\n\003ref\030\010"
    " \001(\t\022\016\n\006search\030\t \003(\t\022\021\n\006mobile\030\n \002(\005:\0010\022"
    "\035\n\tpublisher\030\013 \002(\0132\n.Publisher\022\020\n\010keywor"
    "ds\030\014 \003(\t\"\205\002\n\003App\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \001"
    "(\t\022\016\n\006bundle\030\003 \002(\t\022\016\n\006domain\030\004 \001(\t\022\020\n\010st"
    "oreurl\030\005 \001(\t\022\035\n\003cat\030\006 \001(\0162\020.ContentCateg"
    "ory\022$\n\nsectioncat\030\007 \001(\0162\020.ContentCategor"
    "y\022!\n\007pagecat\030\010 \001(\0162\020.ContentCategory\022\013\n\003"
    "ver\030\t \001(\t\022\014\n\004paid\030\n \002(\005\022\035\n\tpublisher\030\013 \002"
    "(\0132\n.Publisher\022\020\n\010keywords\030\014 \003(\t\"p\n\tPubl"
    "isher\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\035\n\003cat\030\003"
    " \003(\0162\020.ContentCategory\022\016\n\006domain\030\004 \002(\t\022\014"
    "\n\004type\030\005 \001(\t\022\014\n\004slot\030\006 \001(\t\"\316\002\n\006Device\022\n\n"
    "\002ua\030\001 \002(\t\022\021\n\003geo\030\002 \001(\0132\004.Geo\022\n\n\002ip\030\003 \002(\t"
    "\022\037\n\ndevicetype\030\004 \002(\0162\013.DeviceType\022\014\n\004mak"
    "e\030\005 \001(\t\022\r\n\005model\030\006 \001(\t\022\013\n\003hwv\030\007 \001(\t\022\n\n\002o"
    "s\030\010 \001(\t\022\013\n\003osv\030\t \001(\t\022\t\n\001w\030\n \002(\005\022\t\n\001h\030\013 \002"
    "(\005\022\r\n\002js\030\014 \001(\005:\0010\022\020\n\010language\030\r \001(\t\0221\n\016c"
    "onnectiontype\030\016 \001(\0162\017.ConnectionType:\010ET"
    "HERNET\022\014\n\004imei\030\017 \001(\t\022\013\n\003mac\030\020 \001(\t\022\014\n\004idf"
    "a\030\021 \001(\t\022\017\n\007carrier\030\022 \001(\t\022\021\n\tandroidid\030\023 "
    "\001(\t\"\220\001\n\003Geo\022\013\n\003lat\030\001 \001(\002\022\013\n\003lon\030\002 \001(\002\022\033\n"
    "\004type\030\003 \002(\0162\r.LocationType\022\017\n\007country\030\004 "
    "\001(\t\022\020\n\010province\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\022\013\n\003z"
    "ip\030\007 \001(\t\022\024\n\tutcoffset\030\010 \001(\005:\0010\"T\n\004User\022\n"
    "\n\002id\030\001 \002(\t\022\013\n\003yob\030\003 \001(\005\022\016\n\006gender\030\004 \001(\t\022"
    "\020\n\010keywords\030\005 \003(\t\022\021\n\003geo\030\006 \001(\0132\004.Geo\"y\n\013"
    "BidResponse\022\n\n\002id\030\001 \002(\t\022\031\n\007seatbid\030\002 \003(\013"
    "2\010.SeatBid\022\r\n\005bidid\030\003 \002(\t\022\036\n\003nbr\030\004 \001(\0162\021"
    ".NoBidReasonCodes\022\024\n\014process_time\030\005 \001(\005\""
    "*\n\007SeatBid\022\021\n\003bid\030\001 \003(\0132\004.Bid\022\014\n\004seat\030\002 "
    "\002(\t\"\332\002\n\003Bid\022\n\n\002id\030\001 \002(\t\022\r\n\005impid\030\002 \002(\t\022\r"
    "\n\005price\030\003 \002(\002\022\013\n\003adm\030\004 \002(\t\022\017\n\007adomain\030\005 "
    "\002(\t\022\016\n\006bundle\030\006 \001(\t\022\014\n\004iurl\030\007 \002(\t\022\t\n\001w\030\010"
    " \002(\002\022\t\n\001h\030\t \002(\002\022\014\n\004adid\030\n \001(\t\022\014\n\004nurl\030\013 "
    "\001(\t\022\013\n\003cid\030\014 \001(\t\022\014\n\004crid\030\r \001(\t\022\035\n\003cat\030\016 "
    "\001(\0162\020.ContentCategory\022 \n\004attr\030\017 \001(\0162\022.Cr"
    "eativeAttribute\022\014\n\004curl\030\020 \002(\t\022\025\n\004type\030\021 "
    "\002(\0162\007.AdType\022\017\n\007extiurl\030\022 \003(\t\022\016\n\006action\030"
    "\023 \001(\t\022\031\n\007admtype\030\024 \002(\0162\010.AdmType*\260\030\n\017Con"
    "tentCategory\022\014\n\007CAT_801\020\241\006\022\017\n\tCAT_80101\020"
    "\345\361\004\022\017\n\tCAT_80102\020\346\361\004\022\017\n\tCAT_80103\020\347\361\004\022\017\n"
    "\tCAT_80106\020\352\361\004\022\017\n\tCAT_80107\020\353\361\004\022\017\n\tCAT_8"
    "0108\020\354\361\004\022\017\n\tCAT_80110\020\356\361\004\022\014\n\007CAT_802\020\242\006\022"
    "\017\n\tCAT_80201\020\311\362\004\022\017\n\tCAT_80203\020\313\362\004\022\017\n\tCAT"
    "_80205\020\315\362\004\022\017\n\tCAT_80206\020\316\362\004\022\017\n\tCAT_80207"
    "\020\317\362\004\022\017\n\tCAT_80210\020\322\362\004\022\017\n\tCAT_80212\020\324\362\004\022\017"
    "\n\tCAT_80213\020\325\362\004\022\017\n\tCAT_80214\020\326\362\004\022\017\n\tCAT_"
    "80215\020\327\362\004\022\017\n\tCAT_80216\020\330\362\004\022\014\n\007CAT_803\020\243\006"
    "\022\017\n\tCAT_80301\020\255\363\004\022\017\n\tCAT_80302\020\256\363\004\022\017\n\tCA"
    "T_80303\020\257\363\004\022\014\n\007CAT_804\020\244\006\022\017\n\tCAT_80401\020\221"
    "\364\004\022\017\n\tCAT_80402\020\222\364\004\022\017\n\tCAT_80403\020\223\364\004\022\017\n\t"
    "CAT_80404\020\224\364\004\022\017\n\tCAT_80405\020\225\364\004\022\014\n\007CAT_80"
    "5\020\245\006\022\017\n\tCAT_80501\020\365\364\004\022\017\n\tCAT_80502\020\366\364\004\022\017"
    "\n\tCAT_80503\020\367\364\004\022\017\n\tCAT_80504\020\370\364\004\022\017\n\tCAT_"
    "80505\020\371\364\004\022\017\n\tCAT_80506\020\372\364\004\022\017\n\tCAT_80507\020"
    "\373\364\004\022\017\n\tCAT_80509\020\375\364\004\022\014\n\007CAT_806\020\246\006\022\017\n\tCA"
    "T_80601\020\331\365\004\022\022\n\013CAT_8060101\020\305\371\353\003\022\022\n\013CAT_8"
    "060102\020\306\371\353\003\022\022\n\013CAT_8060103\020\307\371\353\003\022\022\n\013CAT_8"
    "060104\020\310\371\353\003\022\022\n\013CAT_8060105\020\311\371\353\003\022\022\n\013CAT_8"
    "060106\020\312\371\353\003\022\022\n\013CAT_8060107\020\313\371\353\003\022\022\n\013CAT_8"
    "060108\020\314\371\353\003\022\022\n\013CAT_8060109\020\315\371\353\003\022\017\n\tCAT_8"
    "0602\020\332\365\004\022\017\n\tCAT_80603\020\333\365\004\022\017\n\tCAT_80604\020\334"
    "\365\004\022\017\n\tCAT_80605\020\335\365\004\022\017\n\tCAT_80606\020\336\365\004\022\017\n\t"
    "CAT_80607\020\337\365\004\022\017\n\tCAT_80608\020\340\365\004\022\017\n\tCAT_80"
    "609\020\341\365\004\022\014\n\007CAT_808\020\250\006\022\017\n\tCAT_80801\020\241\367\004\022\017"
    "\n\tCAT_80803\020\243\367\004\022\017\n\tCAT_80805\020\245\367\004\022\017\n\tCAT_"
    "80806\020\246\367\004\022\017\n\tCAT_80808\020\250\367\004\022\017\n\tCAT_80809\020"
    "\251\367\004\022\014\n\007CAT_809\020\251\006\022\017\n\tCAT_80901\020\205\370\004\022\017\n\tCA"
    "T_80902\020\206\370\004\022\014\n\007CAT_810\020\252\006\022\017\n\tCAT_81001\020\351"
    "\370\004\022\017\n\tCAT_81002\020\352\370\004\022\017\n\tCAT_81003\020\353\370\004\022\017\n\t"
    "CAT_81005\020\355\370\004\022\017\n\tCAT_81007\020\357\370\004\022\017\n\tCAT_81"
    "008\020\360\370\004\022\017\n\tCAT_81009\020\361\370\004\022\014\n\007CAT_811\020\253\006\022\017"
    "\n\tCAT_81101\020\315\371\004\022\017\n\tCAT_81102\020\316\371\004\022\017\n\tCAT_"
    "81103\020\317\371\004\022\017\n\tCAT_81105\020\321\371\004\022\014\n\007CAT_812\020\254\006"
    "\022\017\n\tCAT_81201\020\261\372\004\022\017\n\tCAT_81202\020\262\372\004\022\017\n\tCA"
    "T_81203\020\263\372\004\022\017\n\tCAT_81204\020\264\372\004\022\017\n\tCAT_8120"
    "6\020\266\372\004\022\017\n\tCAT_81207\020\267\372\004\022\017\n\tCAT_81208\020\270\372\004\022"
    "\017\n\tCAT_81209\020\271\372\004\022\017\n\tCAT_81210\020\272\372\004\022\017\n\tCAT"
    "_81211\020\273\372\004\022\017\n\tCAT_81212\020\274\372\004\022\017\n\tCAT_81213"
    "\020\275\372\004\022\017\n\tCAT_81214\020\276\372\004\022\017\n\tCAT_81215\020\277\372\004\022\017"
    "\n\tCAT_81216\020\300\372\004\022\017\n\tCAT_81217\020\301\372\004\022\014\n\007CAT_"
    "813\020\255\006\022\017\n\tCAT_81301\020\225\373\004\022\017\n\tCAT_81302\020\226\373\004"
    "\022\017\n\tCAT_81303\020\227\373\004\022\017\n\tCAT_81304\020\230\373\004\022\017\n\tCA"
    "T_81305\020\231\373\004\022\017\n\tCAT_81306\020\232\373\004\022\017\n\tCAT_8130"
    "7\020\233\373\004\022\017\n\tCAT_81309\020\235\373\004\022\014\n\007CAT_814\020\256\006\022\017\n\t"
    "CAT_81401\020\371\373\004\022\017\n\tCAT_81402\020\372\373\004\022\017\n\tCAT_81"
    "403\020\373\373\004\022\017\n\tCAT_81405\020\375\373\004\022\014\n\007CAT_815\020\257\006\022\017"
    "\n\tCAT_81501\020\335\374\004\022\017\n\tCAT_81502\020\336\374\004\022\017\n\tCAT_"
    "81503\020\337\374\004\022\017\n\tCAT_81504\020\340\374\004\022\014\n\007CAT_816\020\260\006"
    "\022\017\n\tCAT_81601\020\301\375\004\022\017\n\tCAT_81602\020\302\375\004\022\017\n\tCA"
    "T_81603\020\303\375\004\022\017\n\tCAT_81604\020\304\375\004\022\017\n\tCAT_8160"
    "5\020\305\375\004\022\017\n\tCAT_81606\020\306\375\004\022\017\n\tCAT_81607\020\307\375\004\022"
    "\017\n\tCAT_81608\020\310\375\004\022\017\n\tCAT_81609\020\311\375\004\022\017\n\tCAT"
    "_81610\020\312\375\004\022\014\n\007CAT_817\020\261\006\022\017\n\tCAT_81701\020\245\376"
    "\004\022\017\n\tCAT_81702\020\246\376\004\022\017\n\tCAT_81703\020\247\376\004\022\017\n\tC"
    "AT_81704\020\250\376\004\022\017\n\tCAT_81705\020\251\376\004\022\017\n\tCAT_817"
    "06\020\252\376\004\022\017\n\tCAT_81707\020\253\376\004\022\017\n\tCAT_81709\020\255\376\004"
    "\022\017\n\tCAT_81710\020\256\376\004\022\017\n\tCAT_81711\020\257\376\004\022\017\n\tCA"
    "T_81712\020\260\376\004\022\017\n\tCAT_81713\020\261\376\004\022\017\n\tCAT_8171"
    "5\020\263\376\004\022\017\n\tCAT_81716\020\264\376\004\022\014\n\007CAT_818\020\262\006\022\017\n\t"
    "CAT_81804\020\214\377\004\022\017\n\tCAT_81805\020\215\377\004\022\017\n\tCAT_81"
    "816\020\230\377\004\022\017\n\tCAT_81817\020\231\377\004\022\017\n\tCAT_81822\020\236\377"
    "\004\022\017\n\tCAT_81823\020\237\377\004\022\014\n\007CAT_819\020\263\006\022\017\n\tCAT_"
    "81901\020\355\377\004\022\017\n\tCAT_81902\020\356\377\004\022\017\n\tCAT_81903\020"
    "\357\377\004\022\014\n\007CAT_820\020\264\006\022\017\n\tCAT_82001\020\321\200\005\022\017\n\tCA"
    "T_82002\020\322\200\005\022\017\n\tCAT_82003\020\323\200\005\022\017\n\tCAT_8200"
    "5\020\325\200\005\022\017\n\tCAT_82006\020\326\200\005\022\017\n\tCAT_82008\020\330\200\005\022"
    "\017\n\tCAT_82010\020\332\200\005\022\014\n\007CAT_822\020\266\006\022\017\n\tCAT_82"
    "201\020\231\202\005\022\017\n\tCAT_82202\020\232\202\005\022\017\n\tCAT_82204\020\234\202"
    "\005\022\017\n\tCAT_82207\020\237\202\005\022\017\n\tCAT_82208\020\240\202\005\022\014\n\007C"
    "AT_823\020\267\006\022\017\n\tCAT_82301\020\375\202\005\022\017\n\tCAT_82302\020"
    "\376\202\005\022\017\n\tCAT_82303\020\377\202\005\022\017\n\tCAT_82304\020\200\203\005\022\017\n"
    "\tCAT_82305\020\201\203\005\022\017\n\tCAT_82306\020\202\203\005\022\017\n\tCAT_8"
    "2308\020\204\203\005\022\014\n\007CAT_824\020\270\006\022\014\n\007CAT_825\020\271\006\022\017\n\t"
    "CAT_82501\020\305\204\005\022\017\n\tCAT_82502\020\306\204\005\022\017\n\tCAT_82"
    "503\020\307\204\005\022\017\n\tCAT_82504\020\310\204\005\022\017\n\tCAT_82505\020\311\204"
    "\005\022\017\n\tCAT_82506\020\312\204\005\022\017\n\tCAT_82507\020\313\204\005*K\n\006A"
    "dType\022\010\n\004TEXT\020\001\022\t\n\005IMAGE\020\002\022\006\n\002JS\020\003\022\n\n\006IF"
    "RAME\020\004\022\t\n\005FLASH\020\005\022\r\n\tIMAGETEXT\020\006*\2027\n\021Cre"
    "ativeAttribute\022\r\n\010ATTR_706\020\302\005\022\020\n\nATTR_70"
    "601\020\311\247\004\022\020\n\nATTR_70602\020\312\247\004\022\020\n\nATTR_70603\020"
    "\313\247\004\022\020\n\nATTR_70699\020\253\250\004\022\r\n\010ATTR_711\020\307\005\022\020\n\n"
    "ATTR_71101\020\275\253\004\022\020\n\nATTR_71102\020\276\253\004\022\020\n\nATTR"
    "_71103\020\277\253\004\022\020\n\nATTR_71104\020\300\253\004\022\020\n\nATTR_711"
    "05\020\301\253\004\022\020\n\nATTR_71106\020\302\253\004\022\020\n\nATTR_71107\020\303"
    "\253\004\022\020\n\nATTR_71108\020\304\253\004\022\020\n\nATTR_71109\020\305\253\004\022\020"
    "\n\nATTR_71110\020\306\253\004\022\020\n\nATTR_71111\020\307\253\004\022\020\n\nAT"
    "TR_71112\020\310\253\004\022\020\n\nATTR_71113\020\311\253\004\022\020\n\nATTR_7"
    "1114\020\312\253\004\022\020\n\nATTR_71115\020\313\253\004\022\020\n\nATTR_71116"
    "\020\314\253\004\022\020\n\nATTR_71117\020\315\253\004\022\020\n\nATTR_71118\020\316\253\004"
    "\022\020\n\nATTR_71119\020\317\253\004\022\020\n\nATTR_71120\020\320\253\004\022\020\n\n"
    "ATTR_71121\020\321\253\004\022\020\n\nATTR_71199\020\237\254\004\022\r\n\010ATTR"
    "_720\020\320\005\022\020\n\nATTR_72001\020\301\262\004\022\020\n\nATTR_72002\020"
    "\302\262\004\022\020\n\nATTR_72003\020\303\262\004\022\020\n\nATTR_72005\020\305\262\004\022"
    "\020\n\nATTR_72006\020\306\262\004\022\020\n\nATTR_72007\020\307\262\004\022\020\n\nA"
    "TTR_72008\020\310\262\004\022\020\n\nATTR_72099\020\243\263\004\022\r\n\010ATTR_"
    "722\020\322\005\022\020\n\nATTR_72201\020\211\264\004\022\020\n\nATTR_72202\020\212"
    "\264\004\022\020\n\nATTR_72203\020\213\264\004\022\020\n\nATTR_72204\020\214\264\004\022\020"
    "\n\nATTR_72205\020\215\264\004\022\020\n\nATTR_72206\020\216\264\004\022\020\n\nAT"
    "TR_72207\020\217\264\004\022\020\n\nATTR_72208\020\220\264\004\022\020\n\nATTR_7"
    "2209\020\221\264\004\022\020\n\nATTR_72210\020\222\264\004\022\020\n\nATTR_72211"
    "\020\223\264\004\022\020\n\nATTR_72212\020\224\264\004\022\020\n\nATTR_72299\020\353\264\004"
    "\022\r\n\010ATTR_701\020\275\005\022\020\n\nATTR_70101\020\325\243\004\022\020\n\nATT"
    "R_70102\020\326\243\004\022\020\n\nATTR_70103\020\327\243\004\022\020\n\nATTR_70"
    "104\020\330\243\004\022\020\n\nATTR_70105\020\331\243\004\022\020\n\nATTR_70106\020"
    "\332\243\004\022\020\n\nATTR_70107\020\333\243\004\022\020\n\nATTR_70108\020\334\243\004\022"
    "\020\n\nATTR_70109\020\335\243\004\022\020\n\nATTR_70110\020\336\243\004\022\020\n\nA"
    "TTR_70111\020\337\243\004\022\020\n\nATTR_70199\020\267\244\004\022\r\n\010ATTR_"
    "719\020\317\005\022\020\n\nATTR_71901\020\335\261\004\022\020\n\nATTR_71902\020\336"
    "\261\004\022\020\n\nATTR_71903\020\337\261\004\022\020\n\nATTR_71904\020\340\261\004\022\020"
    "\n\nATTR_71905\020\341\261\004\022\020\n\nATTR_71906\020\342\261\004\022\020\n\nAT"
    "TR_71907\020\343\261\004\022\020\n\nATTR_71908\020\344\261\004\022\020\n\nATTR_7"
    "1909\020\345\261\004\022\020\n\nATTR_71910\020\346\261\004\022\020\n\nATTR_71911"
    "\020\347\261\004\022\020\n\nATTR_71912\020\350\261\004\022\020\n\nATTR_71913\020\351\261\004"
    "\022\020\n\nATTR_71914\020\352\261\004\022\020\n\nATTR_71999\020\277\262\004\022\r\n\010"
    "ATTR_709\020\305\005\022\020\n\nATTR_70901\020\365\251\004\022\020\n\nATTR_70"
    "902\020\366\251\004\022\020\n\nATTR_70903\020\367\251\004\022\020\n\nATTR_70904\020"
    "\370\251\004\022\020\n\nATTR_70905\020\371\251\004\022\020\n\nATTR_70906\020\372\251\004\022"
    "\020\n\nATTR_70907\020\373\251\004\022\020\n\nATTR_70908\020\374\251\004\022\020\n\nA"
    "TTR_70909\020\375\251\004\022\020\n\nATTR_70910\020\376\251\004\022\020\n\nATTR_"
    "70911\020\377\251\004\022\020\n\nATTR_70913\020\201\252\004\022\020\n\nATTR_7091"
    "5\020\203\252\004\022\020\n\nATTR_70917\020\205\252\004\022\020\n\nATTR_70918\020\206\252"
    "\004\022\020\n\nATTR_70999\020\327\252\004\022\r\n\010ATTR_705\020\301\005\022\020\n\nAT"
    "TR_70501\020\345\246\004\022\020\n\nATTR_70502\020\346\246\004\022\020\n\nATTR_7"
    "0503\020\347\246\004\022\020\n\nATTR_70504\020\350\246\004\022\020\n\nATTR_70505"
    "\020\351\246\004\022\020\n\nATTR_70506\020\352\246\004\022\020\n\nATTR_70599\020\307\247\004"
    "\022\r\n\010ATTR_721\020\321\005\022\020\n\nATTR_72101\020\245\263\004\022\020\n\nATT"
    "R_72102\020\246\263\004\022\020\n\nATTR_72103\020\247\263\004\022\020\n\nATTR_72"
    "104\020\250\263\004\022\020\n\nATTR_72105\020\251\263\004\022\020\n\nATTR_72106\020"
    "\252\263\004\022\020\n\nATTR_72107\020\253\263\004\022\020\n\nATTR_72108\020\254\263\004\022"
    "\020\n\nATTR_72109\020\255\263\004\022\020\n\nATTR_72110\020\256\263\004\022\020\n\nA"
    "TTR_72111\020\257\263\004\022\020\n\nATTR_72112\020\260\263\004\022\020\n\nATTR_"
    "72113\020\261\263\004\022\020\n\nATTR_72114\020\262\263\004\022\020\n\nATTR_7211"
    "5\020\263\263\004\022\020\n\nATTR_72116\020\264\263\004\022\020\n\nATTR_72117\020\265\263"
    "\004\022\020\n\nATTR_72199\020\207\264\004\022\r\n\010ATTR_717\020\315\005\022\020\n\nAT"
    "TR_71701\020\225\260\004\022\020\n\nATTR_71702\020\226\260\004\022\020\n\nATTR_7"
    "1703\020\227\260\004\022\020\n\nATTR_71704\020\230\260\004\022\020\n\nATTR_71705"
    "\020\231\260\004\022\020\n\nATTR_71706\020\232\260\004\022\020\n\nATTR_71707\020\233\260\004"
    "\022\020\n\nATTR_71708\020\234\260\004\022\020\n\nATTR_71799\020\367\260\004\022\r\n\010"
    "ATTR_707\020\303\005\022\020\n\nATTR_70701\020\255\250\004\022\020\n\nATTR_70"
    "702\020\256\250\004\022\020\n\nATTR_70703\020\257\250\004\022\020\n\nATTR_70704\020"
    "\260\250\004\022\020\n\nATTR_70705\020\261\250\004\022\020\n\nATTR_70706\020\262\250\004\022"
    "\020\n\nATTR_70707\020\263\250\004\022\020\n\nATTR_70708\020\264\250\004\022\020\n\nA"
    "TTR_70709\020\265\250\004\022\020\n\nATTR_70710\020\266\250\004\022\020\n\nATTR_"
    "70711\020\267\250\004\022\020\n\nATTR_70712\020\270\250\004\022\020\n\nATTR_7071"
    "3\020\271\250\004\022\020\n\nATTR_70714\020\272\250\004\022\020\n\nATTR_70799\020\217\251"
    "\004\022\r\n\010ATTR_708\020\304\005\022\020\n\nATTR_70801\020\221\251\004\022\020\n\nAT"
    "TR_70802\020\222\251\004\022\020\n\nATTR_70803\020\223\251\004\022\020\n\nATTR_7"
    "0804\020\224\251\004\022\020\n\nATTR_70805\020\225\251\004\022\020\n\nATTR_70806"
    "\020\226\251\004\022\020\n\nATTR_70899\020\363\251\004\022\r\n\010ATTR_723\020\323\005\022\020\n"
    "\nATTR_72301\020\355\264\004\022\020\n\nATTR_72302\020\356\264\004\022\020\n\nATT"
    "R_72303\020\357\264\004\022\020\n\nATTR_72304\020\360\264\004\022\020\n\nATTR_72"
    "305\020\361\264\004\022\020\n\nATTR_72306\020\362\264\004\022\020\n\nATTR_72307\020"
    "\363\264\004\022\020\n\nATTR_72308\020\364\264\004\022\020\n\nATTR_72309\020\365\264\004\022"
    "\020\n\nATTR_72310\020\366\264\004\022\020\n\nATTR_72311\020\367\264\004\022\020\n\nA"
    "TTR_72312\020\370\264\004\022\020\n\nATTR_72313\020\371\264\004\022\020\n\nATTR_"
    "72314\020\372\264\004\022\020\n\nATTR_72315\020\373\264\004\022\020\n\nATTR_7239"
    "9\020\317\265\004\022\r\n\010ATTR_725\020\325\005\022\020\n\nATTR_72501\020\265\266\004\022\020"
    "\n\nATTR_72502\020\266\266\004\022\020\n\nATTR_72503\020\267\266\004\022\020\n\nAT"
    "TR_72504\020\270\266\004\022\020\n\nATTR_72505\020\271\266\004\022\020\n\nATTR_7"
    "2599\020\227\267\004\022\r\n\010ATTR_799\020\237\006\022\020\n\nATTR_79901\020\235\360"
    "\004\022\r\n\010ATTR_718\020\316\005\022\020\n\nATTR_71801\020\371\260\004\022\020\n\nAT"
    "TR_71802\020\372\260\004\022\020\n\nATTR_71803\020\373\260\004\022\020\n\nATTR_7"
    "1804\020\374\260\004\022\020\n\nATTR_71805\020\375\260\004\022\020\n\nATTR_71806"
    "\020\376\260\004\022\020\n\nATTR_71807\020\377\260\004\022\020\n\nATTR_71808\020\200\261\004"
    "\022\020\n\nATTR_71809\020\201\261\004\022\020\n\nATTR_71810\020\202\261\004\022\020\n\n"
    "ATTR_71811\020\203\261\004\022\020\n\nATTR_71812\020\204\261\004\022\020\n\nATTR"
    "_71813\020\205\261\004\022\020\n\nATTR_71814\020\206\261\004\022\020\n\nATTR_718"
    "15\020\207\261\004\022\020\n\nATTR_71816\020\210\261\004\022\020\n\nATTR_71817\020\211"
    "\261\004\022\020\n\nATTR_71818\020\212\261\004\022\020\n\nATTR_71819\020\213\261\004\022\020"
    "\n\nATTR_71820\020\214\261\004\022\020\n\nATTR_71821\020\215\261\004\022\020\n\nAT"
    "TR_71822\020\216\261\004\022\020\n\nATTR_71899\020\333\261\004\022\r\n\010ATTR_7"
    "24\020\324\005\022\020\n\nATTR_72401\020\321\265\004\022\020\n\nATTR_72402\020\322\265"
    "\004\022\020\n\nATTR_72403\020\323\265\004\022\020\n\nATTR_72404\020\324\265\004\022\020\n"
    "\nATTR_72405\020\325\265\004\022\020\n\nATTR_72406\020\326\265\004\022\020\n\nATT"
    "R_72407\020\327\265\004\022\020\n\nATTR_72408\020\330\265\004\022\020\n\nATTR_72"
    "409\020\331\265\004\022\020\n\nATTR_72410\020\332\265\004\022\020\n\nATTR_72411\020"
    "\333\265\004\022\020\n\nATTR_72412\020\334\265\004\022\020\n\nATTR_72413\020\335\265\004\022"
    "\020\n\nATTR_72414\020\336\265\004\022\020\n\nATTR_72415\020\337\265\004\022\020\n\nA"
    "TTR_72416\020\340\265\004\022\020\n\nATTR_72417\020\341\265\004\022\020\n\nATTR_"
    "72418\020\342\265\004\022\020\n\nATTR_72419\020\343\265\004\022\020\n\nATTR_7242"
    "0\020\344\265\004\022\020\n\nATTR_72421\020\345\265\004\022\020\n\nATTR_72422\020\346\265"
    "\004\022\020\n\nATTR_72423\020\347\265\004\022\020\n\nATTR_72424\020\350\265\004\022\020\n"
    "\nATTR_72499\020\263\266\004\022\r\n\010ATTR_716\020\314\005\022\020\n\nATTR_7"
    "1601\020\261\257\004\022\020\n\nATTR_71602\020\262\257\004\022\020\n\nATTR_71603"
    "\020\263\257\004\022\020\n\nATTR_71604\020\264\257\004\022\020\n\nATTR_71605\020\265\257\004"
    "\022\020\n\nATTR_71606\020\266\257\004\022\020\n\nATTR_71607\020\267\257\004\022\020\n\n"
    "ATTR_71608\020\270\257\004\022\020\n\nATTR_71609\020\271\257\004\022\020\n\nATTR"
    "_71610\020\272\257\004\022\020\n\nATTR_71611\020\273\257\004\022\020\n\nATTR_716"
    "12\020\274\257\004\022\020\n\nATTR_71613\020\275\257\004\022\020\n\nATTR_71614\020\276"
    "\257\004\022\020\n\nATTR_71615\020\277\257\004\022\020\n\nATTR_71616\020\300\257\004\022\020"
    "\n\nATTR_71617\020\301\257\004\022\020\n\nATTR_71618\020\302\257\004\022\020\n\nAT"
    "TR_71619\020\303\257\004\022\020\n\nATTR_71620\020\304\257\004\022\020\n\nATTR_7"
    "1621\020\305\257\004\022\020\n\nATTR_71699\020\223\260\004\022\r\n\010ATTR_710\020\306"
    "\005\022\020\n\nATTR_71001\020\331\252\004\022\020\n\nATTR_71002\020\332\252\004\022\020\n"
    "\nATTR_71003\020\333\252\004\022\020\n\nATTR_71004\020\334\252\004\022\020\n\nATT"
    "R_71005\020\335\252\004\022\020\n\nATTR_71006\020\336\252\004\022\020\n\nATTR_71"
    "007\020\337\252\004\022\020\n\nATTR_71008\020\340\252\004\022\020\n\nATTR_71099\020"
    "\273\253\004\022\r\n\010ATTR_704\020\300\005\022\020\n\nATTR_70401\020\201\246\004\022\020\n\n"
    "ATTR_70402\020\202\246\004\022\020\n\nATTR_70403\020\203\246\004\022\020\n\nATTR"
    "_70404\020\204\246\004\022\020\n\nATTR_70405\020\205\246\004\022\020\n\nATTR_704"
    "06\020\206\246\004\022\020\n\nATTR_70407\020\207\246\004\022\020\n\nATTR_70408\020\210"
    "\246\004\022\020\n\nATTR_70409\020\211\246\004\022\020\n\nATTR_70410\020\212\246\004\022\020"
    "\n\nATTR_70499\020\343\246\004\022\r\n\010ATTR_703\020\277\005\022\020\n\nATTR_"
    "70301\020\235\245\004\022\020\n\nATTR_70302\020\236\245\004\022\020\n\nATTR_7030"
    "3\020\237\245\004\022\020\n\nATTR_70305\020\241\245\004\022\020\n\nATTR_70306\020\242\245"
    "\004\022\020\n\nATTR_70307\020\243\245\004\022\020\n\nATTR_70308\020\244\245\004\022\020\n"
    "\nATTR_70399\020\377\245\004\022\r\n\010ATTR_702\020\276\005\022\020\n\nATTR_7"
    "0201\020\271\244\004\022\020\n\nATTR_70202\020\272\244\004\022\020\n\nATTR_70203"
    "\020\273\244\004\022\020\n\nATTR_70204\020\274\244\004\022\020\n\nATTR_70205\020\275\244\004"
    "\022\020\n\nATTR_70206\020\276\244\004\022\020\n\nATTR_70207\020\277\244\004\022\020\n\n"
    "ATTR_70208\020\300\244\004\022\020\n\nATTR_70209\020\301\244\004\022\020\n\nATTR"
    "_70210\020\302\244\004\022\020\n\nATTR_70212\020\304\244\004\022\020\n\nATTR_702"
    "99\020\233\245\004\022\r\n\010ATTR_726\020\326\005\022\020\n\nATTR_72601\020\231\267\004\022"
    "\020\n\nATTR_72602\020\232\267\004\022\020\n\nATTR_72603\020\233\267\004\022\020\n\nA"
    "TTR_72604\020\234\267\004\022\020\n\nATTR_72605\020\235\267\004\022\020\n\nATTR_"
    "72606\020\236\267\004\022\020\n\nATTR_72607\020\237\267\004\022\020\n\nATTR_7260"
    "8\020\240\267\004\022\020\n\nATTR_72609\020\241\267\004\022\020\n\nATTR_72610\020\242\267"
    "\004\022\020\n\nATTR_72611\020\243\267\004\022\020\n\nATTR_72612\020\244\267\004\022\020\n"
    "\nATTR_72699\020\373\267\004\022\r\n\010ATTR_714\020\312\005\022\020\n\nATTR_7"
    "1401\020\351\255\004\022\020\n\nATTR_71402\020\352\255\004\022\020\n\nATTR_71403"
    "\020\353\255\004\022\020\n\nATTR_71404\020\354\255\004\022\020\n\nATTR_71405\020\355\255\004"
    "\022\020\n\nATTR_71499\020\313\256\004\022\r\n\010ATTR_715\020\313\005\022\020\n\nATT"
    "R_71501\020\315\256\004\022\020\n\nATTR_71502\020\316\256\004\022\020\n\nATTR_71"
    "503\020\317\256\004\022\020\n\nATTR_71504\020\320\256\004\022\020\n\nATTR_71505\020"
    "\321\256\004\022\020\n\nATTR_71506\020\322\256\004\022\020\n\nATTR_71507\020\323\256\004\022"
    "\020\n\nATTR_71508\020\324\256\004\022\020\n\nATTR_71509\020\325\256\004\022\020\n\nA"
    "TTR_71510\020\326\256\004\022\020\n\nATTR_71511\020\327\256\004\022\020\n\nATTR_"
    "71512\020\330\256\004\022\020\n\nATTR_71514\020\332\256\004\022\020\n\nATTR_7151"
    "5\020\333\256\004\022\020\n\nATTR_71516\020\334\256\004\022\020\n\nATTR_71599\020\257\257"
    "\004\022\r\n\010ATTR_713\020\311\005\022\020\n\nATTR_71301\020\205\255\004\022\020\n\nAT"
    "TR_71302\020\206\255\004\022\020\n\nATTR_71303\020\207\255\004\022\020\n\nATTR_7"
    "1304\020\210\255\004\022\020\n\nATTR_71305\020\211\255\004\022\020\n\nATTR_71306"
    "\020\212\255\004\022\020\n\nATTR_71307\020\213\255\004\022\020\n\nATTR_71308\020\214\255\004"
    "\022\020\n\nATTR_71309\020\215\255\004\022\020\n\nATTR_71399\020\347\255\004\022\r\n\010"
    "ATTR_712\020\310\005\022\020\n\nATTR_71201\020\241\254\004\022\020\n\nATTR_71"
    "202\020\242\254\004\022\020\n\nATTR_71204\020\244\254\004\022\020\n\nATTR_71205\020"
    "\245\254\004\022\020\n\nATTR_71206\020\246\254\004\022\020\n\nATTR_71207\020\247\254\004\022"
    "\020\n\nATTR_71208\020\250\254\004\022\020\n\nATTR_71209\020\251\254\004\022\020\n\nA"
    "TTR_71210\020\252\254\004\022\020\n\nATTR_71211\020\253\254\004\022\020\n\nATTR_"
    "71212\020\254\254\004\022\020\n\nATTR_71213\020\255\254\004\022\020\n\nATTR_7121"
    "4\020\256\254\004\022\020\n\nATTR_71215\020\257\254\004\022\020\n\nATTR_71299\020\203\255"
    "\004\022\r\n\010ATTR_727\020\327\005\022\020\n\nATTR_72701\020\375\267\004\022\020\n\nAT"
    "TR_72702\020\376\267\004\022\020\n\nATTR_72703\020\377\267\004\022\r\n\010ATTR_9"
    "01\020\205\007\022\020\n\nATTR_90101\020\365\277\005\022\020\n\nATTR_90102\020\366\277"
    "\005\022\020\n\nATTR_90103\020\367\277\005\022\020\n\nATTR_90104\020\370\277\005\022\020\n"
    "\nATTR_90105\020\371\277\005\022\020\n\nATTR_90106\020\372\277\005\022\020\n\nATT"
    "R_90107\020\373\277\005\022\020\n\nATTR_90108\020\374\277\005\022\020\n\nATTR_90"
    "109\020\375\277\005\022\020\n\nATTR_90110\020\376\277\005\022\020\n\nATTR_90111\020"
    "\377\277\005\022\020\n\nATTR_90112\020\200\300\005\022\020\n\nATTR_90113\020\201\300\005\022"
    "\020\n\nATTR_90114\020\202\300\005\022\020\n\nATTR_90115\020\203\300\005\022\020\n\nA"
    "TTR_90116\020\204\300\005\022\020\n\nATTR_90117\020\205\300\005\022\020\n\nATTR_"
    "90118\020\206\300\005\022\020\n\nATTR_90119\020\207\300\005\022\020\n\nATTR_9012"
    "0\020\210\300\005\022\020\n\nATTR_90121\020\211\300\005\022\020\n\nATTR_90122\020\212\300"
    "\005\022\020\n\nATTR_90123\020\213\300\005\022\020\n\nATTR_90199\020\327\300\005*\220\001"
    "\n\nAdPosition\022\024\n\020UNKNOWN_POSITION\020\000\022\022\n\016AB"
    "OVE_THE_FOLD\020\001\022\016\n\nDEPRECATED\020\002\022\022\n\016BELOW_"
    "THE_FOLD\020\003\022\n\n\006HEADER\020\004\022\n\n\006FOOTER\020\005\022\013\n\007SI"
    "DEBAR\020\006\022\017\n\013FULL_SCREEN\020\007*9\n\014ScenarioType"
    "\022\t\n\005CWIFI\020\001\022\n\n\006NETBAR\020\002\022\t\n\005SITES\020\003\022\007\n\003AP"
    "P\020\004*\256\001\n\016ConnectionType\022\020\n\014UNKNOWN_TYPE\020\000"
    "\022\014\n\010ETHERNET\020\001\022\010\n\004WIFI\020\002\022\'\n#CELLULAR_NET"
    "WORK_UNKNOWN_GENERATION\020\003\022\027\n\023CELLULAR_NE"
    "TWORK_2G\020\004\022\027\n\023CELLULAR_NETWORK_3G\020\005\022\027\n\023C"
    "ELLULAR_NETWORK_4G\020\006*:\n\014LocationType\022\007\n\003"
    "GPS\020\001\022\016\n\nIP_ADDRESS\020\002\022\021\n\rUSER_PROVIDED\020\003"
    "* \n\nDeviceType\022\n\n\006MOBILE\020\001\022\006\n\002PC\020\002*\035\n\007Ad"
    "mType\022\010\n\004JSON\020\001\022\010\n\004HTML\020\002*O\n\020NoBidReason"
    "Codes\022\021\n\rUNKNOWN_ERROR\020\000\022\023\n\017TECHNICAL_ER"
    "ROR\020\001\022\023\n\017INVALID_REQUEST\020\002", 13186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guangyin_bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  Scenario::default_instance_ = new Scenario();
  Imp::default_instance_ = new Imp();
  Banner::default_instance_ = new Banner();
  Site::default_instance_ = new Site();
  App::default_instance_ = new App();
  Publisher::default_instance_ = new Publisher();
  Device::default_instance_ = new Device();
  Geo::default_instance_ = new Geo();
  User::default_instance_ = new User();
  BidResponse::default_instance_ = new BidResponse();
  SeatBid::default_instance_ = new SeatBid();
  Bid::default_instance_ = new Bid();
  BidRequest::default_instance_->InitAsDefaultInstance();
  Scenario::default_instance_->InitAsDefaultInstance();
  Imp::default_instance_->InitAsDefaultInstance();
  Banner::default_instance_->InitAsDefaultInstance();
  Site::default_instance_->InitAsDefaultInstance();
  App::default_instance_->InitAsDefaultInstance();
  Publisher::default_instance_->InitAsDefaultInstance();
  Device::default_instance_->InitAsDefaultInstance();
  Geo::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  SeatBid::default_instance_->InitAsDefaultInstance();
  Bid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_guangyin_5fbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_guangyin_5fbidding_2eproto {
  StaticDescriptorInitializer_guangyin_5fbidding_2eproto() {
    protobuf_AddDesc_guangyin_5fbidding_2eproto();
  }
} static_descriptor_initializer_guangyin_5fbidding_2eproto_;
const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentCategory_descriptor_;
}
bool ContentCategory_IsValid(int value) {
  switch(value) {
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 822:
    case 823:
    case 824:
    case 825:
    case 80101:
    case 80102:
    case 80103:
    case 80106:
    case 80107:
    case 80108:
    case 80110:
    case 80201:
    case 80203:
    case 80205:
    case 80206:
    case 80207:
    case 80210:
    case 80212:
    case 80213:
    case 80214:
    case 80215:
    case 80216:
    case 80301:
    case 80302:
    case 80303:
    case 80401:
    case 80402:
    case 80403:
    case 80404:
    case 80405:
    case 80501:
    case 80502:
    case 80503:
    case 80504:
    case 80505:
    case 80506:
    case 80507:
    case 80509:
    case 80601:
    case 80602:
    case 80603:
    case 80604:
    case 80605:
    case 80606:
    case 80607:
    case 80608:
    case 80609:
    case 80801:
    case 80803:
    case 80805:
    case 80806:
    case 80808:
    case 80809:
    case 80901:
    case 80902:
    case 81001:
    case 81002:
    case 81003:
    case 81005:
    case 81007:
    case 81008:
    case 81009:
    case 81101:
    case 81102:
    case 81103:
    case 81105:
    case 81201:
    case 81202:
    case 81203:
    case 81204:
    case 81206:
    case 81207:
    case 81208:
    case 81209:
    case 81210:
    case 81211:
    case 81212:
    case 81213:
    case 81214:
    case 81215:
    case 81216:
    case 81217:
    case 81301:
    case 81302:
    case 81303:
    case 81304:
    case 81305:
    case 81306:
    case 81307:
    case 81309:
    case 81401:
    case 81402:
    case 81403:
    case 81405:
    case 81501:
    case 81502:
    case 81503:
    case 81504:
    case 81601:
    case 81602:
    case 81603:
    case 81604:
    case 81605:
    case 81606:
    case 81607:
    case 81608:
    case 81609:
    case 81610:
    case 81701:
    case 81702:
    case 81703:
    case 81704:
    case 81705:
    case 81706:
    case 81707:
    case 81709:
    case 81710:
    case 81711:
    case 81712:
    case 81713:
    case 81715:
    case 81716:
    case 81804:
    case 81805:
    case 81816:
    case 81817:
    case 81822:
    case 81823:
    case 81901:
    case 81902:
    case 81903:
    case 82001:
    case 82002:
    case 82003:
    case 82005:
    case 82006:
    case 82008:
    case 82010:
    case 82201:
    case 82202:
    case 82204:
    case 82207:
    case 82208:
    case 82301:
    case 82302:
    case 82303:
    case 82304:
    case 82305:
    case 82306:
    case 82308:
    case 82501:
    case 82502:
    case 82503:
    case 82504:
    case 82505:
    case 82506:
    case 82507:
    case 8060101:
    case 8060102:
    case 8060103:
    case 8060104:
    case 8060105:
    case 8060106:
    case 8060107:
    case 8060108:
    case 8060109:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdType_descriptor_;
}
bool AdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreativeAttribute_descriptor_;
}
bool CreativeAttribute_IsValid(int value) {
  switch(value) {
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 726:
    case 727:
    case 799:
    case 901:
    case 70101:
    case 70102:
    case 70103:
    case 70104:
    case 70105:
    case 70106:
    case 70107:
    case 70108:
    case 70109:
    case 70110:
    case 70111:
    case 70199:
    case 70201:
    case 70202:
    case 70203:
    case 70204:
    case 70205:
    case 70206:
    case 70207:
    case 70208:
    case 70209:
    case 70210:
    case 70212:
    case 70299:
    case 70301:
    case 70302:
    case 70303:
    case 70305:
    case 70306:
    case 70307:
    case 70308:
    case 70399:
    case 70401:
    case 70402:
    case 70403:
    case 70404:
    case 70405:
    case 70406:
    case 70407:
    case 70408:
    case 70409:
    case 70410:
    case 70499:
    case 70501:
    case 70502:
    case 70503:
    case 70504:
    case 70505:
    case 70506:
    case 70599:
    case 70601:
    case 70602:
    case 70603:
    case 70699:
    case 70701:
    case 70702:
    case 70703:
    case 70704:
    case 70705:
    case 70706:
    case 70707:
    case 70708:
    case 70709:
    case 70710:
    case 70711:
    case 70712:
    case 70713:
    case 70714:
    case 70799:
    case 70801:
    case 70802:
    case 70803:
    case 70804:
    case 70805:
    case 70806:
    case 70899:
    case 70901:
    case 70902:
    case 70903:
    case 70904:
    case 70905:
    case 70906:
    case 70907:
    case 70908:
    case 70909:
    case 70910:
    case 70911:
    case 70913:
    case 70915:
    case 70917:
    case 70918:
    case 70999:
    case 71001:
    case 71002:
    case 71003:
    case 71004:
    case 71005:
    case 71006:
    case 71007:
    case 71008:
    case 71099:
    case 71101:
    case 71102:
    case 71103:
    case 71104:
    case 71105:
    case 71106:
    case 71107:
    case 71108:
    case 71109:
    case 71110:
    case 71111:
    case 71112:
    case 71113:
    case 71114:
    case 71115:
    case 71116:
    case 71117:
    case 71118:
    case 71119:
    case 71120:
    case 71121:
    case 71199:
    case 71201:
    case 71202:
    case 71204:
    case 71205:
    case 71206:
    case 71207:
    case 71208:
    case 71209:
    case 71210:
    case 71211:
    case 71212:
    case 71213:
    case 71214:
    case 71215:
    case 71299:
    case 71301:
    case 71302:
    case 71303:
    case 71304:
    case 71305:
    case 71306:
    case 71307:
    case 71308:
    case 71309:
    case 71399:
    case 71401:
    case 71402:
    case 71403:
    case 71404:
    case 71405:
    case 71499:
    case 71501:
    case 71502:
    case 71503:
    case 71504:
    case 71505:
    case 71506:
    case 71507:
    case 71508:
    case 71509:
    case 71510:
    case 71511:
    case 71512:
    case 71514:
    case 71515:
    case 71516:
    case 71599:
    case 71601:
    case 71602:
    case 71603:
    case 71604:
    case 71605:
    case 71606:
    case 71607:
    case 71608:
    case 71609:
    case 71610:
    case 71611:
    case 71612:
    case 71613:
    case 71614:
    case 71615:
    case 71616:
    case 71617:
    case 71618:
    case 71619:
    case 71620:
    case 71621:
    case 71699:
    case 71701:
    case 71702:
    case 71703:
    case 71704:
    case 71705:
    case 71706:
    case 71707:
    case 71708:
    case 71799:
    case 71801:
    case 71802:
    case 71803:
    case 71804:
    case 71805:
    case 71806:
    case 71807:
    case 71808:
    case 71809:
    case 71810:
    case 71811:
    case 71812:
    case 71813:
    case 71814:
    case 71815:
    case 71816:
    case 71817:
    case 71818:
    case 71819:
    case 71820:
    case 71821:
    case 71822:
    case 71899:
    case 71901:
    case 71902:
    case 71903:
    case 71904:
    case 71905:
    case 71906:
    case 71907:
    case 71908:
    case 71909:
    case 71910:
    case 71911:
    case 71912:
    case 71913:
    case 71914:
    case 71999:
    case 72001:
    case 72002:
    case 72003:
    case 72005:
    case 72006:
    case 72007:
    case 72008:
    case 72099:
    case 72101:
    case 72102:
    case 72103:
    case 72104:
    case 72105:
    case 72106:
    case 72107:
    case 72108:
    case 72109:
    case 72110:
    case 72111:
    case 72112:
    case 72113:
    case 72114:
    case 72115:
    case 72116:
    case 72117:
    case 72199:
    case 72201:
    case 72202:
    case 72203:
    case 72204:
    case 72205:
    case 72206:
    case 72207:
    case 72208:
    case 72209:
    case 72210:
    case 72211:
    case 72212:
    case 72299:
    case 72301:
    case 72302:
    case 72303:
    case 72304:
    case 72305:
    case 72306:
    case 72307:
    case 72308:
    case 72309:
    case 72310:
    case 72311:
    case 72312:
    case 72313:
    case 72314:
    case 72315:
    case 72399:
    case 72401:
    case 72402:
    case 72403:
    case 72404:
    case 72405:
    case 72406:
    case 72407:
    case 72408:
    case 72409:
    case 72410:
    case 72411:
    case 72412:
    case 72413:
    case 72414:
    case 72415:
    case 72416:
    case 72417:
    case 72418:
    case 72419:
    case 72420:
    case 72421:
    case 72422:
    case 72423:
    case 72424:
    case 72499:
    case 72501:
    case 72502:
    case 72503:
    case 72504:
    case 72505:
    case 72599:
    case 72601:
    case 72602:
    case 72603:
    case 72604:
    case 72605:
    case 72606:
    case 72607:
    case 72608:
    case 72609:
    case 72610:
    case 72611:
    case 72612:
    case 72699:
    case 72701:
    case 72702:
    case 72703:
    case 79901:
    case 90101:
    case 90102:
    case 90103:
    case 90104:
    case 90105:
    case 90106:
    case 90107:
    case 90108:
    case 90109:
    case 90110:
    case 90111:
    case 90112:
    case 90113:
    case 90114:
    case 90115:
    case 90116:
    case 90117:
    case 90118:
    case 90119:
    case 90120:
    case 90121:
    case 90122:
    case 90123:
    case 90199:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdPosition_descriptor_;
}
bool AdPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScenarioType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenarioType_descriptor_;
}
bool ScenarioType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionType_descriptor_;
}
bool ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationType_descriptor_;
}
bool LocationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdmType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdmType_descriptor_;
}
bool AdmType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NoBidReasonCodes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoBidReasonCodes_descriptor_;
}
bool NoBidReasonCodes_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest::kIdFieldNumber;
const int BidRequest::kImpFieldNumber;
const int BidRequest::kSiteFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kUserFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kTestFieldNumber;
const int BidRequest::kTmaxFieldNumber;
const int BidRequest::kAtFieldNumber;
const int BidRequest::kWseatFieldNumber;
const int BidRequest::kScenarioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest::BidRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  site_ = const_cast< ::Site*>(&::Site::default_instance());
  app_ = const_cast< ::App*>(&::App::default_instance());
  user_ = const_cast< ::User*>(&::User::default_instance());
  device_ = const_cast< ::Device*>(&::Device::default_instance());
  scenario_ = const_cast< ::Scenario*>(&::Scenario::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_ = NULL;
  app_ = NULL;
  user_ = NULL;
  device_ = NULL;
  test_ = 0;
  tmax_ = 0;
  at_ = 2;
  scenario_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete site_;
    delete app_;
    delete user_;
    delete device_;
    delete scenario_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New(::google::protobuf::Arena* arena) const {
  BidRequest* n = new BidRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BidRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 253u) {
    ZR_(test_, tmax_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_site()) {
      if (site_ != NULL) site_->::Site::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::App::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::User::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::Device::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 1280u) {
    at_ = 2;
    if (has_scenario()) {
      if (scenario_ != NULL) scenario_->::Scenario::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  imp_.Clear();
  wseat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imp;
        break;
      }

      // repeated .Imp imp = 2;
      case 2: {
        if (tag == 18) {
         parse_imp:
          DO_(input->IncrementRecursionDepth());
         parse_loop_imp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_imp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_imp;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_site;
        break;
      }

      // optional .Site site = 3;
      case 3: {
        if (tag == 26) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_app;
        break;
      }

      // optional .App app = 4;
      case 4: {
        if (tag == 34) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .User user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional .Device device = 6;
      case 6: {
        if (tag == 50) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_test;
        break;
      }

      // required int32 test = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tmax;
        break;
      }

      // required int32 tmax = 8;
      case 8: {
        if (tag == 64) {
         parse_tmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmax_)));
          set_has_tmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_at;
        break;
      }

      // required int32 at = 9 [default = 2];
      case 9: {
        if (tag == 72) {
         parse_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &at_)));
          set_has_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_wseat;
        break;
      }

      // repeated string wseat = 10;
      case 10: {
        if (tag == 82) {
         parse_wseat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wseat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wseat(this->wseat_size() - 1).data(),
            this->wseat(this->wseat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidRequest.wseat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_wseat;
        if (input->ExpectTag(90)) goto parse_scenario;
        break;
      }

      // required .Scenario scenario = 11;
      case 11: {
        if (tag == 90) {
         parse_scenario:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenario()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .Imp imp = 2;
  for (unsigned int i = 0, n = this->imp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->imp(i), output);
  }

  // optional .Site site = 3;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->site_, output);
  }

  // optional .App app = 4;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->app_, output);
  }

  // optional .User user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->user_, output);
  }

  // optional .Device device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->device_, output);
  }

  // required int32 test = 7 [default = 0];
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->test(), output);
  }

  // required int32 tmax = 8;
  if (has_tmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tmax(), output);
  }

  // required int32 at = 9 [default = 2];
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->at(), output);
  }

  // repeated string wseat = 10;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.wseat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->wseat(i), output);
  }

  // required .Scenario scenario = 11;
  if (has_scenario()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->scenario_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidRequest)
}

::google::protobuf::uint8* BidRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .Imp imp = 2;
  for (unsigned int i = 0, n = this->imp_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->imp(i), false, target);
  }

  // optional .Site site = 3;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->site_, false, target);
  }

  // optional .App app = 4;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->app_, false, target);
  }

  // optional .User user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->user_, false, target);
  }

  // optional .Device device = 6;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->device_, false, target);
  }

  // required int32 test = 7 [default = 0];
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->test(), target);
  }

  // required int32 tmax = 8;
  if (has_tmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tmax(), target);
  }

  // required int32 at = 9 [default = 2];
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->at(), target);
  }

  // repeated string wseat = 10;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidRequest.wseat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->wseat(i), target);
  }

  // required .Scenario scenario = 11;
  if (has_scenario()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->scenario_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidRequest)
  return target;
}

int BidRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BidRequest)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_test()) {
    // required int32 test = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->test());
  }

  if (has_tmax()) {
    // required int32 tmax = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tmax());
  }

  if (has_at()) {
    // required int32 at = 9 [default = 2];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->at());
  }

  if (has_scenario()) {
    // required .Scenario scenario = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scenario_);
  }

  return total_size;
}
int BidRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BidRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000005c1) ^ 0x000005c1) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required int32 test = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->test());

    // required int32 tmax = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tmax());

    // required int32 at = 9 [default = 2];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->at());

    // required .Scenario scenario = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scenario_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional .Site site = 3;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->site_);
    }

    // optional .App app = 4;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_);
    }

    // optional .User user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

    // optional .Device device = 6;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_);
    }

  }
  // repeated .Imp imp = 2;
  total_size += 1 * this->imp_size();
  for (int i = 0; i < this->imp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imp(i));
  }

  // repeated string wseat = 10;
  total_size += 1 * this->wseat_size();
  for (int i = 0; i < this->wseat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wseat(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BidRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BidRequest)
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  imp_.MergeFrom(from.imp_);
  wseat_.MergeFrom(from.wseat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_site()) {
      mutable_site()->::Site::MergeFrom(from.site());
    }
    if (from.has_app()) {
      mutable_app()->::App::MergeFrom(from.app());
    }
    if (from.has_user()) {
      mutable_user()->::User::MergeFrom(from.user());
    }
    if (from.has_device()) {
      mutable_device()->::Device::MergeFrom(from.device());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
    if (from.has_tmax()) {
      set_tmax(from.tmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_at()) {
      set_at(from.at());
    }
    if (from.has_scenario()) {
      mutable_scenario()->::Scenario::MergeFrom(from.scenario());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000005c1) != 0x000005c1) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->imp())) return false;
  if (has_site()) {
    if (!this->site_->IsInitialized()) return false;
  }
  if (has_app()) {
    if (!this->app_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_device()) {
    if (!this->device_->IsInitialized()) return false;
  }
  if (has_scenario()) {
    if (!this->scenario_->IsInitialized()) return false;
  }
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest::InternalSwap(BidRequest* other) {
  id_.Swap(&other->id_);
  imp_.UnsafeArenaSwap(&other->imp_);
  std::swap(site_, other->site_);
  std::swap(app_, other->app_);
  std::swap(user_, other->user_);
  std::swap(device_, other->device_);
  std::swap(test_, other->test_);
  std::swap(tmax_, other->tmax_);
  std::swap(at_, other->at_);
  wseat_.UnsafeArenaSwap(&other->wseat_);
  std::swap(scenario_, other->scenario_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidRequest

// required string id = 1;
bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest::id() const {
  // @@protoc_insertion_point(field_get:BidRequest.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidRequest.id)
}
 void BidRequest::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidRequest.id)
}
 void BidRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidRequest.id)
}
 ::std::string* BidRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:BidRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_id() {
  // @@protoc_insertion_point(field_release:BidRequest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:BidRequest.id)
}

// repeated .Imp imp = 2;
int BidRequest::imp_size() const {
  return imp_.size();
}
void BidRequest::clear_imp() {
  imp_.Clear();
}
const ::Imp& BidRequest::imp(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.imp)
  return imp_.Get(index);
}
::Imp* BidRequest::mutable_imp(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.imp)
  return imp_.Mutable(index);
}
::Imp* BidRequest::add_imp() {
  // @@protoc_insertion_point(field_add:BidRequest.imp)
  return imp_.Add();
}
::google::protobuf::RepeatedPtrField< ::Imp >*
BidRequest::mutable_imp() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.imp)
  return &imp_;
}
const ::google::protobuf::RepeatedPtrField< ::Imp >&
BidRequest::imp() const {
  // @@protoc_insertion_point(field_list:BidRequest.imp)
  return imp_;
}

// optional .Site site = 3;
bool BidRequest::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest::clear_site() {
  if (site_ != NULL) site_->::Site::Clear();
  clear_has_site();
}
const ::Site& BidRequest::site() const {
  // @@protoc_insertion_point(field_get:BidRequest.site)
  return site_ != NULL ? *site_ : *default_instance_->site_;
}
::Site* BidRequest::mutable_site() {
  set_has_site();
  if (site_ == NULL) {
    site_ = new ::Site;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.site)
  return site_;
}
::Site* BidRequest::release_site() {
  // @@protoc_insertion_point(field_release:BidRequest.site)
  clear_has_site();
  ::Site* temp = site_;
  site_ = NULL;
  return temp;
}
void BidRequest::set_allocated_site(::Site* site) {
  delete site_;
  site_ = site;
  if (site) {
    set_has_site();
  } else {
    clear_has_site();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.site)
}

// optional .App app = 4;
bool BidRequest::has_app() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest::set_has_app() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest::clear_app() {
  if (app_ != NULL) app_->::App::Clear();
  clear_has_app();
}
const ::App& BidRequest::app() const {
  // @@protoc_insertion_point(field_get:BidRequest.app)
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
::App* BidRequest::mutable_app() {
  set_has_app();
  if (app_ == NULL) {
    app_ = new ::App;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.app)
  return app_;
}
::App* BidRequest::release_app() {
  // @@protoc_insertion_point(field_release:BidRequest.app)
  clear_has_app();
  ::App* temp = app_;
  app_ = NULL;
  return temp;
}
void BidRequest::set_allocated_app(::App* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.app)
}

// optional .User user = 5;
bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest::clear_user() {
  if (user_ != NULL) user_->::User::Clear();
  clear_has_user();
}
const ::User& BidRequest::user() const {
  // @@protoc_insertion_point(field_get:BidRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
::User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::User;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.user)
  return user_;
}
::User* BidRequest::release_user() {
  // @@protoc_insertion_point(field_release:BidRequest.user)
  clear_has_user();
  ::User* temp = user_;
  user_ = NULL;
  return temp;
}
void BidRequest::set_allocated_user(::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.user)
}

// optional .Device device = 6;
bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest::clear_device() {
  if (device_ != NULL) device_->::Device::Clear();
  clear_has_device();
}
const ::Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:BidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
::Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) {
    device_ = new ::Device;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.device)
  return device_;
}
::Device* BidRequest::release_device() {
  // @@protoc_insertion_point(field_release:BidRequest.device)
  clear_has_device();
  ::Device* temp = device_;
  device_ = NULL;
  return temp;
}
void BidRequest::set_allocated_device(::Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.device)
}

// required int32 test = 7 [default = 0];
bool BidRequest::has_test() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest::set_has_test() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest::clear_has_test() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest::clear_test() {
  test_ = 0;
  clear_has_test();
}
 ::google::protobuf::int32 BidRequest::test() const {
  // @@protoc_insertion_point(field_get:BidRequest.test)
  return test_;
}
 void BidRequest::set_test(::google::protobuf::int32 value) {
  set_has_test();
  test_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.test)
}

// required int32 tmax = 8;
bool BidRequest::has_tmax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest::set_has_tmax() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest::clear_has_tmax() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest::clear_tmax() {
  tmax_ = 0;
  clear_has_tmax();
}
 ::google::protobuf::int32 BidRequest::tmax() const {
  // @@protoc_insertion_point(field_get:BidRequest.tmax)
  return tmax_;
}
 void BidRequest::set_tmax(::google::protobuf::int32 value) {
  set_has_tmax();
  tmax_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.tmax)
}

// required int32 at = 9 [default = 2];
bool BidRequest::has_at() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest::set_has_at() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest::clear_has_at() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest::clear_at() {
  at_ = 2;
  clear_has_at();
}
 ::google::protobuf::int32 BidRequest::at() const {
  // @@protoc_insertion_point(field_get:BidRequest.at)
  return at_;
}
 void BidRequest::set_at(::google::protobuf::int32 value) {
  set_has_at();
  at_ = value;
  // @@protoc_insertion_point(field_set:BidRequest.at)
}

// repeated string wseat = 10;
int BidRequest::wseat_size() const {
  return wseat_.size();
}
void BidRequest::clear_wseat() {
  wseat_.Clear();
}
 const ::std::string& BidRequest::wseat(int index) const {
  // @@protoc_insertion_point(field_get:BidRequest.wseat)
  return wseat_.Get(index);
}
 ::std::string* BidRequest::mutable_wseat(int index) {
  // @@protoc_insertion_point(field_mutable:BidRequest.wseat)
  return wseat_.Mutable(index);
}
 void BidRequest::set_wseat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BidRequest.wseat)
  wseat_.Mutable(index)->assign(value);
}
 void BidRequest::set_wseat(int index, const char* value) {
  wseat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BidRequest.wseat)
}
 void BidRequest::set_wseat(int index, const char* value, size_t size) {
  wseat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BidRequest.wseat)
}
 ::std::string* BidRequest::add_wseat() {
  // @@protoc_insertion_point(field_add_mutable:BidRequest.wseat)
  return wseat_.Add();
}
 void BidRequest::add_wseat(const ::std::string& value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BidRequest.wseat)
}
 void BidRequest::add_wseat(const char* value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BidRequest.wseat)
}
 void BidRequest::add_wseat(const char* value, size_t size) {
  wseat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BidRequest.wseat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::wseat() const {
  // @@protoc_insertion_point(field_list:BidRequest.wseat)
  return wseat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_wseat() {
  // @@protoc_insertion_point(field_mutable_list:BidRequest.wseat)
  return &wseat_;
}

// required .Scenario scenario = 11;
bool BidRequest::has_scenario() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest::set_has_scenario() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest::clear_has_scenario() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest::clear_scenario() {
  if (scenario_ != NULL) scenario_->::Scenario::Clear();
  clear_has_scenario();
}
const ::Scenario& BidRequest::scenario() const {
  // @@protoc_insertion_point(field_get:BidRequest.scenario)
  return scenario_ != NULL ? *scenario_ : *default_instance_->scenario_;
}
::Scenario* BidRequest::mutable_scenario() {
  set_has_scenario();
  if (scenario_ == NULL) {
    scenario_ = new ::Scenario;
  }
  // @@protoc_insertion_point(field_mutable:BidRequest.scenario)
  return scenario_;
}
::Scenario* BidRequest::release_scenario() {
  // @@protoc_insertion_point(field_release:BidRequest.scenario)
  clear_has_scenario();
  ::Scenario* temp = scenario_;
  scenario_ = NULL;
  return temp;
}
void BidRequest::set_allocated_scenario(::Scenario* scenario) {
  delete scenario_;
  scenario_ = scenario;
  if (scenario) {
    set_has_scenario();
  } else {
    clear_has_scenario();
  }
  // @@protoc_insertion_point(field_set_allocated:BidRequest.scenario)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scenario::kTypeFieldNumber;
const int Scenario::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scenario::Scenario()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Scenario)
}

void Scenario::InitAsDefaultInstance() {
}

Scenario::Scenario(const Scenario& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Scenario)
}

void Scenario::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scenario::~Scenario() {
  // @@protoc_insertion_point(destructor:Scenario)
  SharedDtor();
}

void Scenario::SharedDtor() {
  info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Scenario::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scenario::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scenario_descriptor_;
}

const Scenario& Scenario::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

Scenario* Scenario::default_instance_ = NULL;

Scenario* Scenario::New(::google::protobuf::Arena* arena) const {
  Scenario* n = new Scenario;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scenario::Clear() {
// @@protoc_insertion_point(message_clear_start:Scenario)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    if (has_info()) {
      info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Scenario::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Scenario)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ScenarioType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ScenarioType_IsValid(value)) {
            set_type(static_cast< ::ScenarioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional string info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Scenario.info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Scenario)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Scenario)
  return false;
#undef DO_
}

void Scenario::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Scenario)
  // required .ScenarioType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Scenario.info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Scenario)
}

::google::protobuf::uint8* Scenario::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Scenario)
  // required .ScenarioType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Scenario.info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Scenario)
  return target;
}

int Scenario::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Scenario)
  int total_size = 0;

  // required .ScenarioType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional string info = 2;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->info());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scenario::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Scenario)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Scenario* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Scenario>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Scenario)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Scenario)
    MergeFrom(*source);
  }
}

void Scenario::MergeFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Scenario)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      set_has_info();
      info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.info_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Scenario::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenario::CopyFrom(const Scenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Scenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenario::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Scenario::Swap(Scenario* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scenario::InternalSwap(Scenario* other) {
  std::swap(type_, other->type_);
  info_.Swap(&other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scenario::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scenario_descriptor_;
  metadata.reflection = Scenario_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scenario

// required .ScenarioType type = 1;
bool Scenario::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scenario::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Scenario::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scenario::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::ScenarioType Scenario::type() const {
  // @@protoc_insertion_point(field_get:Scenario.type)
  return static_cast< ::ScenarioType >(type_);
}
 void Scenario::set_type(::ScenarioType value) {
  assert(::ScenarioType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Scenario.type)
}

// optional string info = 2;
bool Scenario::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scenario::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
void Scenario::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scenario::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_info();
}
 const ::std::string& Scenario::info() const {
  // @@protoc_insertion_point(field_get:Scenario.info)
  return info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Scenario::set_info(const ::std::string& value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Scenario.info)
}
 void Scenario::set_info(const char* value) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Scenario.info)
}
 void Scenario::set_info(const char* value, size_t size) {
  set_has_info();
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Scenario.info)
}
 ::std::string* Scenario::mutable_info() {
  set_has_info();
  // @@protoc_insertion_point(field_mutable:Scenario.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Scenario::release_info() {
  // @@protoc_insertion_point(field_release:Scenario.info)
  clear_has_info();
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Scenario::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    set_has_info();
  } else {
    clear_has_info();
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:Scenario.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imp::kIdFieldNumber;
const int Imp::kBannerFieldNumber;
const int Imp::kBidfloorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imp::Imp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Imp)
}

void Imp::InitAsDefaultInstance() {
  banner_ = const_cast< ::Banner*>(&::Banner::default_instance());
}

Imp::Imp(const Imp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Imp)
}

void Imp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banner_ = NULL;
  bidfloor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Imp::~Imp() {
  // @@protoc_insertion_point(destructor:Imp)
  SharedDtor();
}

void Imp::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete banner_;
  }
}

void Imp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imp_descriptor_;
}

const Imp& Imp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

Imp* Imp::default_instance_ = NULL;

Imp* Imp::New(::google::protobuf::Arena* arena) const {
  Imp* n = new Imp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imp::Clear() {
// @@protoc_insertion_point(message_clear_start:Imp)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::Banner::Clear();
    }
    bidfloor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Imp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Imp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Imp.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        break;
      }

      // required .Banner banner = 2;
      case 2: {
        if (tag == 18) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_bidfloor;
        break;
      }

      // required float bidfloor = 3;
      case 3: {
        if (tag == 29) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Imp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Imp)
  return false;
#undef DO_
}

void Imp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Imp.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .Banner banner = 2;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->banner_, output);
  }

  // required float bidfloor = 3;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bidfloor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Imp)
}

::google::protobuf::uint8* Imp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Imp.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Banner banner = 2;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->banner_, false, target);
  }

  // required float bidfloor = 3;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bidfloor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Imp)
  return target;
}

int Imp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Imp)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_banner()) {
    // required .Banner banner = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->banner_);
  }

  if (has_bidfloor()) {
    // required float bidfloor = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int Imp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Imp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .Banner banner = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->banner_);

    // required float bidfloor = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Imp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Imp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Imp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Imp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Imp)
    MergeFrom(*source);
  }
}

void Imp::MergeFrom(const Imp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Imp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_banner()) {
      mutable_banner()->::Banner::MergeFrom(from.banner());
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Imp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Imp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imp::CopyFrom(const Imp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Imp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_banner()) {
    if (!this->banner_->IsInitialized()) return false;
  }
  return true;
}

void Imp::Swap(Imp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imp::InternalSwap(Imp* other) {
  id_.Swap(&other->id_);
  std::swap(banner_, other->banner_);
  std::swap(bidfloor_, other->bidfloor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imp_descriptor_;
  metadata.reflection = Imp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imp

// required string id = 1;
bool Imp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Imp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Imp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Imp::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Imp::id() const {
  // @@protoc_insertion_point(field_get:Imp.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Imp::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Imp.id)
}
 void Imp::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Imp.id)
}
 void Imp::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Imp.id)
}
 ::std::string* Imp::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Imp.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Imp::release_id() {
  // @@protoc_insertion_point(field_release:Imp.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Imp::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Imp.id)
}

// required .Banner banner = 2;
bool Imp::has_banner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Imp::set_has_banner() {
  _has_bits_[0] |= 0x00000002u;
}
void Imp::clear_has_banner() {
  _has_bits_[0] &= ~0x00000002u;
}
void Imp::clear_banner() {
  if (banner_ != NULL) banner_->::Banner::Clear();
  clear_has_banner();
}
const ::Banner& Imp::banner() const {
  // @@protoc_insertion_point(field_get:Imp.banner)
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
::Banner* Imp::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) {
    banner_ = new ::Banner;
  }
  // @@protoc_insertion_point(field_mutable:Imp.banner)
  return banner_;
}
::Banner* Imp::release_banner() {
  // @@protoc_insertion_point(field_release:Imp.banner)
  clear_has_banner();
  ::Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
void Imp::set_allocated_banner(::Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:Imp.banner)
}

// required float bidfloor = 3;
bool Imp::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Imp::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000004u;
}
void Imp::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000004u;
}
void Imp::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
 float Imp::bidfloor() const {
  // @@protoc_insertion_point(field_get:Imp.bidfloor)
  return bidfloor_;
}
 void Imp::set_bidfloor(float value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:Imp.bidfloor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Banner::kIdFieldNumber;
const int Banner::kWFieldNumber;
const int Banner::kHFieldNumber;
const int Banner::kWmaxFieldNumber;
const int Banner::kHmaxFieldNumber;
const int Banner::kWminFieldNumber;
const int Banner::kHminFieldNumber;
const int Banner::kBtypeFieldNumber;
const int Banner::kWtypeFieldNumber;
const int Banner::kBattrFieldNumber;
const int Banner::kPosFieldNumber;
const int Banner::kMimesFieldNumber;
const int Banner::kKeywordsFieldNumber;
const int Banner::kBwordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Banner::Banner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Banner)
}

void Banner::InitAsDefaultInstance() {
}

Banner::Banner(const Banner& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Banner)
}

void Banner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  wmax_ = 0;
  hmax_ = 0;
  wmin_ = 0;
  hmin_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Banner::~Banner() {
  // @@protoc_insertion_point(destructor:Banner)
  SharedDtor();
}

void Banner::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Banner_descriptor_;
}

const Banner& Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

Banner* Banner::default_instance_ = NULL;

Banner* Banner::New(::google::protobuf::Arena* arena) const {
  Banner* n = new Banner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Banner::Clear() {
// @@protoc_insertion_point(message_clear_start:Banner)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Banner, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Banner*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(w_, hmin_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  pos_ = 0;

#undef ZR_HELPER_
#undef ZR_

  btype_.Clear();
  wtype_.Clear();
  battr_.Clear();
  mimes_.Clear();
  keywords_.Clear();
  bwords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Banner.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_w;
        break;
      }

      // optional int32 w = 2;
      case 2: {
        if (tag == 16) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_h;
        break;
      }

      // optional int32 h = 3;
      case 3: {
        if (tag == 24) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wmax;
        break;
      }

      // optional int32 wmax = 4;
      case 4: {
        if (tag == 32) {
         parse_wmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmax_)));
          set_has_wmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hmax;
        break;
      }

      // optional int32 hmax = 5;
      case 5: {
        if (tag == 40) {
         parse_hmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmax_)));
          set_has_hmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wmin;
        break;
      }

      // optional int32 wmin = 6;
      case 6: {
        if (tag == 48) {
         parse_wmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmin_)));
          set_has_wmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hmin;
        break;
      }

      // optional int32 hmin = 7;
      case 7: {
        if (tag == 56) {
         parse_hmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmin_)));
          set_has_hmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_btype;
        break;
      }

      // repeated .AdType btype = 8;
      case 8: {
        if (tag == 64) {
         parse_btype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdType_IsValid(value)) {
            add_btype(static_cast< ::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::AdType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_btype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_btype;
        if (input->ExpectTag(72)) goto parse_wtype;
        break;
      }

      // repeated .AdType wtype = 9;
      case 9: {
        if (tag == 72) {
         parse_wtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdType_IsValid(value)) {
            add_wtype(static_cast< ::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 9,
                 ::AdType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_wtype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_wtype;
        if (input->ExpectTag(80)) goto parse_battr;
        break;
      }

      // repeated .CreativeAttribute battr = 10;
      case 10: {
        if (tag == 80) {
         parse_battr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CreativeAttribute_IsValid(value)) {
            add_battr(static_cast< ::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 10,
                 ::CreativeAttribute_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_battr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_battr;
        if (input->ExpectTag(88)) goto parse_pos;
        break;
      }

      // optional .AdPosition pos = 11;
      case 11: {
        if (tag == 88) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdPosition_IsValid(value)) {
            set_pos(static_cast< ::AdPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 12;
      case 12: {
        if (tag == 98) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Banner.mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mimes;
        if (input->ExpectTag(106)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 13;
      case 13: {
        if (tag == 106) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Banner.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_keywords;
        if (input->ExpectTag(114)) goto parse_bwords;
        break;
      }

      // repeated string bwords = 14;
      case 14: {
        if (tag == 114) {
         parse_bwords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bwords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bwords(this->bwords_size() - 1).data(),
            this->bwords(this->bwords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Banner.bwords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bwords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Banner)
  return false;
#undef DO_
}

void Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Banner)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Banner.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 w = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->w(), output);
  }

  // optional int32 h = 3;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h(), output);
  }

  // optional int32 wmax = 4;
  if (has_wmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wmax(), output);
  }

  // optional int32 hmax = 5;
  if (has_hmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hmax(), output);
  }

  // optional int32 wmin = 6;
  if (has_wmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wmin(), output);
  }

  // optional int32 hmin = 7;
  if (has_hmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hmin(), output);
  }

  // repeated .AdType btype = 8;
  for (int i = 0; i < this->btype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->btype(i), output);
  }

  // repeated .AdType wtype = 9;
  for (int i = 0; i < this->wtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->wtype(i), output);
  }

  // repeated .CreativeAttribute battr = 10;
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->battr(i), output);
  }

  // optional .AdPosition pos = 11;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pos(), output);
  }

  // repeated string mimes = 12;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Banner.mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->mimes(i), output);
  }

  // repeated string keywords = 13;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Banner.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->keywords(i), output);
  }

  // repeated string bwords = 14;
  for (int i = 0; i < this->bwords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bwords(i).data(), this->bwords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Banner.bwords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->bwords(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Banner)
}

::google::protobuf::uint8* Banner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Banner)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Banner.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 w = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->w(), target);
  }

  // optional int32 h = 3;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h(), target);
  }

  // optional int32 wmax = 4;
  if (has_wmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wmax(), target);
  }

  // optional int32 hmax = 5;
  if (has_hmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hmax(), target);
  }

  // optional int32 wmin = 6;
  if (has_wmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wmin(), target);
  }

  // optional int32 hmin = 7;
  if (has_hmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hmin(), target);
  }

  // repeated .AdType btype = 8;
  for (int i = 0; i < this->btype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->btype(i), target);
  }

  // repeated .AdType wtype = 9;
  for (int i = 0; i < this->wtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->wtype(i), target);
  }

  // repeated .CreativeAttribute battr = 10;
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->battr(i), target);
  }

  // optional .AdPosition pos = 11;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pos(), target);
  }

  // repeated string mimes = 12;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Banner.mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->mimes(i), target);
  }

  // repeated string keywords = 13;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Banner.keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->keywords(i), target);
  }

  // repeated string bwords = 14;
  for (int i = 0; i < this->bwords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bwords(i).data(), this->bwords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Banner.bwords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->bwords(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Banner)
  return target;
}

int Banner::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Banner)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 126u) {
    // optional int32 w = 2;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 3;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 wmax = 4;
    if (has_wmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmax());
    }

    // optional int32 hmax = 5;
    if (has_hmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmax());
    }

    // optional int32 wmin = 6;
    if (has_wmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmin());
    }

    // optional int32 hmin = 7;
    if (has_hmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmin());
    }

  }
  // optional .AdPosition pos = 11;
  if (has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
  }

  // repeated .AdType btype = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->btype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->btype(i));
    }
    total_size += 1 * this->btype_size() + data_size;
  }

  // repeated .AdType wtype = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->wtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->wtype(i));
    }
    total_size += 1 * this->wtype_size() + data_size;
  }

  // repeated .CreativeAttribute battr = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->battr(i));
    }
    total_size += 1 * this->battr_size() + data_size;
  }

  // repeated string mimes = 12;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  // repeated string keywords = 13;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  // repeated string bwords = 14;
  total_size += 1 * this->bwords_size();
  for (int i = 0; i < this->bwords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bwords(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Banner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Banner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Banner* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Banner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Banner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Banner)
    MergeFrom(*source);
  }
}

void Banner::MergeFrom(const Banner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Banner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  btype_.MergeFrom(from.btype_);
  wtype_.MergeFrom(from.wtype_);
  battr_.MergeFrom(from.battr_);
  mimes_.MergeFrom(from.mimes_);
  keywords_.MergeFrom(from.keywords_);
  bwords_.MergeFrom(from.bwords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_wmax()) {
      set_wmax(from.wmax());
    }
    if (from.has_hmax()) {
      set_hmax(from.hmax());
    }
    if (from.has_wmin()) {
      set_wmin(from.wmin());
    }
    if (from.has_hmin()) {
      set_hmin(from.hmin());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Banner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Banner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Banner::CopyFrom(const Banner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Banner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Banner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Banner::Swap(Banner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Banner::InternalSwap(Banner* other) {
  id_.Swap(&other->id_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(wmax_, other->wmax_);
  std::swap(hmax_, other->hmax_);
  std::swap(wmin_, other->wmin_);
  std::swap(hmin_, other->hmin_);
  btype_.UnsafeArenaSwap(&other->btype_);
  wtype_.UnsafeArenaSwap(&other->wtype_);
  battr_.UnsafeArenaSwap(&other->battr_);
  std::swap(pos_, other->pos_);
  mimes_.UnsafeArenaSwap(&other->mimes_);
  keywords_.UnsafeArenaSwap(&other->keywords_);
  bwords_.UnsafeArenaSwap(&other->bwords_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Banner_descriptor_;
  metadata.reflection = Banner_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Banner

// required string id = 1;
bool Banner::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Banner::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Banner::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Banner::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Banner::id() const {
  // @@protoc_insertion_point(field_get:Banner.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Banner::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Banner.id)
}
 void Banner::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Banner.id)
}
 void Banner::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Banner.id)
}
 ::std::string* Banner::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Banner.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Banner::release_id() {
  // @@protoc_insertion_point(field_release:Banner.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Banner::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Banner.id)
}

// optional int32 w = 2;
bool Banner::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Banner::set_has_w() {
  _has_bits_[0] |= 0x00000002u;
}
void Banner::clear_has_w() {
  _has_bits_[0] &= ~0x00000002u;
}
void Banner::clear_w() {
  w_ = 0;
  clear_has_w();
}
 ::google::protobuf::int32 Banner::w() const {
  // @@protoc_insertion_point(field_get:Banner.w)
  return w_;
}
 void Banner::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:Banner.w)
}

// optional int32 h = 3;
bool Banner::has_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Banner::set_has_h() {
  _has_bits_[0] |= 0x00000004u;
}
void Banner::clear_has_h() {
  _has_bits_[0] &= ~0x00000004u;
}
void Banner::clear_h() {
  h_ = 0;
  clear_has_h();
}
 ::google::protobuf::int32 Banner::h() const {
  // @@protoc_insertion_point(field_get:Banner.h)
  return h_;
}
 void Banner::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:Banner.h)
}

// optional int32 wmax = 4;
bool Banner::has_wmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Banner::set_has_wmax() {
  _has_bits_[0] |= 0x00000008u;
}
void Banner::clear_has_wmax() {
  _has_bits_[0] &= ~0x00000008u;
}
void Banner::clear_wmax() {
  wmax_ = 0;
  clear_has_wmax();
}
 ::google::protobuf::int32 Banner::wmax() const {
  // @@protoc_insertion_point(field_get:Banner.wmax)
  return wmax_;
}
 void Banner::set_wmax(::google::protobuf::int32 value) {
  set_has_wmax();
  wmax_ = value;
  // @@protoc_insertion_point(field_set:Banner.wmax)
}

// optional int32 hmax = 5;
bool Banner::has_hmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Banner::set_has_hmax() {
  _has_bits_[0] |= 0x00000010u;
}
void Banner::clear_has_hmax() {
  _has_bits_[0] &= ~0x00000010u;
}
void Banner::clear_hmax() {
  hmax_ = 0;
  clear_has_hmax();
}
 ::google::protobuf::int32 Banner::hmax() const {
  // @@protoc_insertion_point(field_get:Banner.hmax)
  return hmax_;
}
 void Banner::set_hmax(::google::protobuf::int32 value) {
  set_has_hmax();
  hmax_ = value;
  // @@protoc_insertion_point(field_set:Banner.hmax)
}

// optional int32 wmin = 6;
bool Banner::has_wmin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Banner::set_has_wmin() {
  _has_bits_[0] |= 0x00000020u;
}
void Banner::clear_has_wmin() {
  _has_bits_[0] &= ~0x00000020u;
}
void Banner::clear_wmin() {
  wmin_ = 0;
  clear_has_wmin();
}
 ::google::protobuf::int32 Banner::wmin() const {
  // @@protoc_insertion_point(field_get:Banner.wmin)
  return wmin_;
}
 void Banner::set_wmin(::google::protobuf::int32 value) {
  set_has_wmin();
  wmin_ = value;
  // @@protoc_insertion_point(field_set:Banner.wmin)
}

// optional int32 hmin = 7;
bool Banner::has_hmin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Banner::set_has_hmin() {
  _has_bits_[0] |= 0x00000040u;
}
void Banner::clear_has_hmin() {
  _has_bits_[0] &= ~0x00000040u;
}
void Banner::clear_hmin() {
  hmin_ = 0;
  clear_has_hmin();
}
 ::google::protobuf::int32 Banner::hmin() const {
  // @@protoc_insertion_point(field_get:Banner.hmin)
  return hmin_;
}
 void Banner::set_hmin(::google::protobuf::int32 value) {
  set_has_hmin();
  hmin_ = value;
  // @@protoc_insertion_point(field_set:Banner.hmin)
}

// repeated .AdType btype = 8;
int Banner::btype_size() const {
  return btype_.size();
}
void Banner::clear_btype() {
  btype_.Clear();
}
 ::AdType Banner::btype(int index) const {
  // @@protoc_insertion_point(field_get:Banner.btype)
  return static_cast< ::AdType >(btype_.Get(index));
}
 void Banner::set_btype(int index, ::AdType value) {
  assert(::AdType_IsValid(value));
  btype_.Set(index, value);
  // @@protoc_insertion_point(field_set:Banner.btype)
}
 void Banner::add_btype(::AdType value) {
  assert(::AdType_IsValid(value));
  btype_.Add(value);
  // @@protoc_insertion_point(field_add:Banner.btype)
}
 const ::google::protobuf::RepeatedField<int>&
Banner::btype() const {
  // @@protoc_insertion_point(field_list:Banner.btype)
  return btype_;
}
 ::google::protobuf::RepeatedField<int>*
Banner::mutable_btype() {
  // @@protoc_insertion_point(field_mutable_list:Banner.btype)
  return &btype_;
}

// repeated .AdType wtype = 9;
int Banner::wtype_size() const {
  return wtype_.size();
}
void Banner::clear_wtype() {
  wtype_.Clear();
}
 ::AdType Banner::wtype(int index) const {
  // @@protoc_insertion_point(field_get:Banner.wtype)
  return static_cast< ::AdType >(wtype_.Get(index));
}
 void Banner::set_wtype(int index, ::AdType value) {
  assert(::AdType_IsValid(value));
  wtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:Banner.wtype)
}
 void Banner::add_wtype(::AdType value) {
  assert(::AdType_IsValid(value));
  wtype_.Add(value);
  // @@protoc_insertion_point(field_add:Banner.wtype)
}
 const ::google::protobuf::RepeatedField<int>&
Banner::wtype() const {
  // @@protoc_insertion_point(field_list:Banner.wtype)
  return wtype_;
}
 ::google::protobuf::RepeatedField<int>*
Banner::mutable_wtype() {
  // @@protoc_insertion_point(field_mutable_list:Banner.wtype)
  return &wtype_;
}

// repeated .CreativeAttribute battr = 10;
int Banner::battr_size() const {
  return battr_.size();
}
void Banner::clear_battr() {
  battr_.Clear();
}
 ::CreativeAttribute Banner::battr(int index) const {
  // @@protoc_insertion_point(field_get:Banner.battr)
  return static_cast< ::CreativeAttribute >(battr_.Get(index));
}
 void Banner::set_battr(int index, ::CreativeAttribute value) {
  assert(::CreativeAttribute_IsValid(value));
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:Banner.battr)
}
 void Banner::add_battr(::CreativeAttribute value) {
  assert(::CreativeAttribute_IsValid(value));
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:Banner.battr)
}
 const ::google::protobuf::RepeatedField<int>&
Banner::battr() const {
  // @@protoc_insertion_point(field_list:Banner.battr)
  return battr_;
}
 ::google::protobuf::RepeatedField<int>*
Banner::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:Banner.battr)
  return &battr_;
}

// optional .AdPosition pos = 11;
bool Banner::has_pos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Banner::set_has_pos() {
  _has_bits_[0] |= 0x00000400u;
}
void Banner::clear_has_pos() {
  _has_bits_[0] &= ~0x00000400u;
}
void Banner::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
 ::AdPosition Banner::pos() const {
  // @@protoc_insertion_point(field_get:Banner.pos)
  return static_cast< ::AdPosition >(pos_);
}
 void Banner::set_pos(::AdPosition value) {
  assert(::AdPosition_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Banner.pos)
}

// repeated string mimes = 12;
int Banner::mimes_size() const {
  return mimes_.size();
}
void Banner::clear_mimes() {
  mimes_.Clear();
}
 const ::std::string& Banner::mimes(int index) const {
  // @@protoc_insertion_point(field_get:Banner.mimes)
  return mimes_.Get(index);
}
 ::std::string* Banner::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:Banner.mimes)
  return mimes_.Mutable(index);
}
 void Banner::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Banner.mimes)
  mimes_.Mutable(index)->assign(value);
}
 void Banner::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Banner.mimes)
}
 void Banner::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Banner.mimes)
}
 ::std::string* Banner::add_mimes() {
  // @@protoc_insertion_point(field_add_mutable:Banner.mimes)
  return mimes_.Add();
}
 void Banner::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Banner.mimes)
}
 void Banner::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Banner.mimes)
}
 void Banner::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Banner.mimes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Banner::mimes() const {
  // @@protoc_insertion_point(field_list:Banner.mimes)
  return mimes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Banner::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:Banner.mimes)
  return &mimes_;
}

// repeated string keywords = 13;
int Banner::keywords_size() const {
  return keywords_.size();
}
void Banner::clear_keywords() {
  keywords_.Clear();
}
 const ::std::string& Banner::keywords(int index) const {
  // @@protoc_insertion_point(field_get:Banner.keywords)
  return keywords_.Get(index);
}
 ::std::string* Banner::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:Banner.keywords)
  return keywords_.Mutable(index);
}
 void Banner::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Banner.keywords)
  keywords_.Mutable(index)->assign(value);
}
 void Banner::set_keywords(int index, const char* value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Banner.keywords)
}
 void Banner::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Banner.keywords)
}
 ::std::string* Banner::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:Banner.keywords)
  return keywords_.Add();
}
 void Banner::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Banner.keywords)
}
 void Banner::add_keywords(const char* value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Banner.keywords)
}
 void Banner::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Banner.keywords)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Banner::keywords() const {
  // @@protoc_insertion_point(field_list:Banner.keywords)
  return keywords_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Banner::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:Banner.keywords)
  return &keywords_;
}

// repeated string bwords = 14;
int Banner::bwords_size() const {
  return bwords_.size();
}
void Banner::clear_bwords() {
  bwords_.Clear();
}
 const ::std::string& Banner::bwords(int index) const {
  // @@protoc_insertion_point(field_get:Banner.bwords)
  return bwords_.Get(index);
}
 ::std::string* Banner::mutable_bwords(int index) {
  // @@protoc_insertion_point(field_mutable:Banner.bwords)
  return bwords_.Mutable(index);
}
 void Banner::set_bwords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Banner.bwords)
  bwords_.Mutable(index)->assign(value);
}
 void Banner::set_bwords(int index, const char* value) {
  bwords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Banner.bwords)
}
 void Banner::set_bwords(int index, const char* value, size_t size) {
  bwords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Banner.bwords)
}
 ::std::string* Banner::add_bwords() {
  // @@protoc_insertion_point(field_add_mutable:Banner.bwords)
  return bwords_.Add();
}
 void Banner::add_bwords(const ::std::string& value) {
  bwords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Banner.bwords)
}
 void Banner::add_bwords(const char* value) {
  bwords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Banner.bwords)
}
 void Banner::add_bwords(const char* value, size_t size) {
  bwords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Banner.bwords)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Banner::bwords() const {
  // @@protoc_insertion_point(field_list:Banner.bwords)
  return bwords_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Banner::mutable_bwords() {
  // @@protoc_insertion_point(field_mutable_list:Banner.bwords)
  return &bwords_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Site::kIdFieldNumber;
const int Site::kNameFieldNumber;
const int Site::kDomainFieldNumber;
const int Site::kCatFieldNumber;
const int Site::kSectioncatFieldNumber;
const int Site::kPagecatFieldNumber;
const int Site::kPageFieldNumber;
const int Site::kRefFieldNumber;
const int Site::kSearchFieldNumber;
const int Site::kMobileFieldNumber;
const int Site::kPublisherFieldNumber;
const int Site::kKeywordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Site::Site()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Site)
}

void Site::InitAsDefaultInstance() {
  publisher_ = const_cast< ::Publisher*>(&::Publisher::default_instance());
}

Site::Site(const Site& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Site)
}

void Site::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sectioncat_ = 801;
  pagecat_ = 801;
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = 0;
  publisher_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Site::~Site() {
  // @@protoc_insertion_point(destructor:Site)
  SharedDtor();
}

void Site::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete publisher_;
  }
}

void Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Site_descriptor_;
}

const Site& Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

Site* Site::default_instance_ = NULL;

Site* Site::New(::google::protobuf::Arena* arena) const {
  Site* n = new Site;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Site::Clear() {
// @@protoc_insertion_point(message_clear_start:Site)
  if (_has_bits_[0 / 32] & 247u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sectioncat_ = 801;
    pagecat_ = 801;
    if (has_page()) {
      page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ref()) {
      ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1536u) {
    mobile_ = 0;
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::Publisher::Clear();
    }
  }
  cat_.Clear();
  search_.Clear();
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Site)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Site.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Site.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (tag == 26) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Site.domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cat;
        break;
      }

      // repeated .ContentCategory cat = 4;
      case 4: {
        if (tag == 32) {
         parse_cat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            add_cat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::ContentCategory_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_cat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cat;
        if (input->ExpectTag(40)) goto parse_sectioncat;
        break;
      }

      // optional .ContentCategory sectioncat = 5;
      case 5: {
        if (tag == 40) {
         parse_sectioncat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_sectioncat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pagecat;
        break;
      }

      // optional .ContentCategory pagecat = 6;
      case 6: {
        if (tag == 48) {
         parse_pagecat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_pagecat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_page;
        break;
      }

      // required string page = 7;
      case 7: {
        if (tag == 58) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page().data(), this->page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Site.page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ref;
        break;
      }

      // optional string ref = 8;
      case 8: {
        if (tag == 66) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Site.ref");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_search;
        break;
      }

      // repeated string search = 9;
      case 9: {
        if (tag == 74) {
         parse_search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search(this->search_size() - 1).data(),
            this->search(this->search_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Site.search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_search;
        if (input->ExpectTag(80)) goto parse_mobile;
        break;
      }

      // required int32 mobile = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_mobile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobile_)));
          set_has_mobile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher;
        break;
      }

      // required .Publisher publisher = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 12;
      case 12: {
        if (tag == 98) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Site.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Site)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Site)
  return false;
#undef DO_
}

void Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Site)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // repeated .ContentCategory cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cat(i), output);
  }

  // optional .ContentCategory sectioncat = 5;
  if (has_sectioncat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sectioncat(), output);
  }

  // optional .ContentCategory pagecat = 6;
  if (has_pagecat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pagecat(), output);
  }

  // required string page = 7;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->page(), output);
  }

  // optional string ref = 8;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ref(), output);
  }

  // repeated string search = 9;
  for (int i = 0; i < this->search_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search(i).data(), this->search(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.search");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->search(i), output);
  }

  // required int32 mobile = 10 [default = 0];
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mobile(), output);
  }

  // required .Publisher publisher = 11;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->publisher_, output);
  }

  // repeated string keywords = 12;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->keywords(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Site)
}

::google::protobuf::uint8* Site::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Site)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // repeated .ContentCategory cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cat(i), target);
  }

  // optional .ContentCategory sectioncat = 5;
  if (has_sectioncat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sectioncat(), target);
  }

  // optional .ContentCategory pagecat = 6;
  if (has_pagecat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pagecat(), target);
  }

  // required string page = 7;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->page(), target);
  }

  // optional string ref = 8;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ref(), target);
  }

  // repeated string search = 9;
  for (int i = 0; i < this->search_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search(i).data(), this->search(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.search");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->search(i), target);
  }

  // required int32 mobile = 10 [default = 0];
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mobile(), target);
  }

  // required .Publisher publisher = 11;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->publisher_, false, target);
  }

  // repeated string keywords = 12;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Site.keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->keywords(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Site)
  return target;
}

int Site::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Site)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_page()) {
    // required string page = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page());
  }

  if (has_mobile()) {
    // required int32 mobile = 10 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mobile());
  }

  if (has_publisher()) {
    // required .Publisher publisher = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->publisher_);
  }

  return total_size;
}
int Site::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Site)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000641) ^ 0x00000641) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string page = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page());

    // required int32 mobile = 10 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mobile());

    // required .Publisher publisher = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->publisher_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 182u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional .ContentCategory sectioncat = 5;
    if (has_sectioncat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sectioncat());
    }

    // optional .ContentCategory pagecat = 6;
    if (has_pagecat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pagecat());
    }

    // optional string ref = 8;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

  }
  // repeated .ContentCategory cat = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cat(i));
    }
    total_size += 1 * this->cat_size() + data_size;
  }

  // repeated string search = 9;
  total_size += 1 * this->search_size();
  for (int i = 0; i < this->search_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->search(i));
  }

  // repeated string keywords = 12;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Site::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Site)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Site* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Site>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Site)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Site)
    MergeFrom(*source);
  }
}

void Site::MergeFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Site)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cat_.MergeFrom(from.cat_);
  search_.MergeFrom(from.search_);
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (from.has_sectioncat()) {
      set_sectioncat(from.sectioncat());
    }
    if (from.has_pagecat()) {
      set_pagecat(from.pagecat());
    }
    if (from.has_page()) {
      set_has_page();
      page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
    }
    if (from.has_ref()) {
      set_has_ref();
      ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_publisher()) {
      mutable_publisher()->::Publisher::MergeFrom(from.publisher());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Site::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Site::CopyFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Site::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000641) != 0x00000641) return false;

  if (has_publisher()) {
    if (!this->publisher_->IsInitialized()) return false;
  }
  return true;
}

void Site::Swap(Site* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Site::InternalSwap(Site* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  domain_.Swap(&other->domain_);
  cat_.UnsafeArenaSwap(&other->cat_);
  std::swap(sectioncat_, other->sectioncat_);
  std::swap(pagecat_, other->pagecat_);
  page_.Swap(&other->page_);
  ref_.Swap(&other->ref_);
  search_.UnsafeArenaSwap(&other->search_);
  std::swap(mobile_, other->mobile_);
  std::swap(publisher_, other->publisher_);
  keywords_.UnsafeArenaSwap(&other->keywords_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Site_descriptor_;
  metadata.reflection = Site_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Site

// required string id = 1;
bool Site::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Site::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Site::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Site::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Site::id() const {
  // @@protoc_insertion_point(field_get:Site.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Site.id)
}
 void Site::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Site.id)
}
 void Site::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Site.id)
}
 ::std::string* Site::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Site.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Site::release_id() {
  // @@protoc_insertion_point(field_release:Site.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Site.id)
}

// optional string name = 2;
bool Site::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Site::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Site::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Site::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Site::name() const {
  // @@protoc_insertion_point(field_get:Site.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Site.name)
}
 void Site::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Site.name)
}
 void Site::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Site.name)
}
 ::std::string* Site::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Site.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Site::release_name() {
  // @@protoc_insertion_point(field_release:Site.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Site.name)
}

// optional string domain = 3;
bool Site::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Site::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
void Site::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
void Site::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
 const ::std::string& Site::domain() const {
  // @@protoc_insertion_point(field_get:Site.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Site.domain)
}
 void Site::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Site.domain)
}
 void Site::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Site.domain)
}
 ::std::string* Site::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:Site.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Site::release_domain() {
  // @@protoc_insertion_point(field_release:Site.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:Site.domain)
}

// repeated .ContentCategory cat = 4;
int Site::cat_size() const {
  return cat_.size();
}
void Site::clear_cat() {
  cat_.Clear();
}
 ::ContentCategory Site::cat(int index) const {
  // @@protoc_insertion_point(field_get:Site.cat)
  return static_cast< ::ContentCategory >(cat_.Get(index));
}
 void Site::set_cat(int index, ::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  cat_.Set(index, value);
  // @@protoc_insertion_point(field_set:Site.cat)
}
 void Site::add_cat(::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  cat_.Add(value);
  // @@protoc_insertion_point(field_add:Site.cat)
}
 const ::google::protobuf::RepeatedField<int>&
Site::cat() const {
  // @@protoc_insertion_point(field_list:Site.cat)
  return cat_;
}
 ::google::protobuf::RepeatedField<int>*
Site::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:Site.cat)
  return &cat_;
}

// optional .ContentCategory sectioncat = 5;
bool Site::has_sectioncat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Site::set_has_sectioncat() {
  _has_bits_[0] |= 0x00000010u;
}
void Site::clear_has_sectioncat() {
  _has_bits_[0] &= ~0x00000010u;
}
void Site::clear_sectioncat() {
  sectioncat_ = 801;
  clear_has_sectioncat();
}
 ::ContentCategory Site::sectioncat() const {
  // @@protoc_insertion_point(field_get:Site.sectioncat)
  return static_cast< ::ContentCategory >(sectioncat_);
}
 void Site::set_sectioncat(::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  set_has_sectioncat();
  sectioncat_ = value;
  // @@protoc_insertion_point(field_set:Site.sectioncat)
}

// optional .ContentCategory pagecat = 6;
bool Site::has_pagecat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Site::set_has_pagecat() {
  _has_bits_[0] |= 0x00000020u;
}
void Site::clear_has_pagecat() {
  _has_bits_[0] &= ~0x00000020u;
}
void Site::clear_pagecat() {
  pagecat_ = 801;
  clear_has_pagecat();
}
 ::ContentCategory Site::pagecat() const {
  // @@protoc_insertion_point(field_get:Site.pagecat)
  return static_cast< ::ContentCategory >(pagecat_);
}
 void Site::set_pagecat(::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  set_has_pagecat();
  pagecat_ = value;
  // @@protoc_insertion_point(field_set:Site.pagecat)
}

// required string page = 7;
bool Site::has_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Site::set_has_page() {
  _has_bits_[0] |= 0x00000040u;
}
void Site::clear_has_page() {
  _has_bits_[0] &= ~0x00000040u;
}
void Site::clear_page() {
  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page();
}
 const ::std::string& Site::page() const {
  // @@protoc_insertion_point(field_get:Site.page)
  return page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_page(const ::std::string& value) {
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Site.page)
}
 void Site::set_page(const char* value) {
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Site.page)
}
 void Site::set_page(const char* value, size_t size) {
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Site.page)
}
 ::std::string* Site::mutable_page() {
  set_has_page();
  // @@protoc_insertion_point(field_mutable:Site.page)
  return page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Site::release_page() {
  // @@protoc_insertion_point(field_release:Site.page)
  clear_has_page();
  return page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_allocated_page(::std::string* page) {
  if (page != NULL) {
    set_has_page();
  } else {
    clear_has_page();
  }
  page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:Site.page)
}

// optional string ref = 8;
bool Site::has_ref() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Site::set_has_ref() {
  _has_bits_[0] |= 0x00000080u;
}
void Site::clear_has_ref() {
  _has_bits_[0] &= ~0x00000080u;
}
void Site::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ref();
}
 const ::std::string& Site::ref() const {
  // @@protoc_insertion_point(field_get:Site.ref)
  return ref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_ref(const ::std::string& value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Site.ref)
}
 void Site::set_ref(const char* value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Site.ref)
}
 void Site::set_ref(const char* value, size_t size) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Site.ref)
}
 ::std::string* Site::mutable_ref() {
  set_has_ref();
  // @@protoc_insertion_point(field_mutable:Site.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Site::release_ref() {
  // @@protoc_insertion_point(field_release:Site.ref)
  clear_has_ref();
  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Site::set_allocated_ref(::std::string* ref) {
  if (ref != NULL) {
    set_has_ref();
  } else {
    clear_has_ref();
  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:Site.ref)
}

// repeated string search = 9;
int Site::search_size() const {
  return search_.size();
}
void Site::clear_search() {
  search_.Clear();
}
 const ::std::string& Site::search(int index) const {
  // @@protoc_insertion_point(field_get:Site.search)
  return search_.Get(index);
}
 ::std::string* Site::mutable_search(int index) {
  // @@protoc_insertion_point(field_mutable:Site.search)
  return search_.Mutable(index);
}
 void Site::set_search(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Site.search)
  search_.Mutable(index)->assign(value);
}
 void Site::set_search(int index, const char* value) {
  search_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Site.search)
}
 void Site::set_search(int index, const char* value, size_t size) {
  search_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Site.search)
}
 ::std::string* Site::add_search() {
  // @@protoc_insertion_point(field_add_mutable:Site.search)
  return search_.Add();
}
 void Site::add_search(const ::std::string& value) {
  search_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Site.search)
}
 void Site::add_search(const char* value) {
  search_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Site.search)
}
 void Site::add_search(const char* value, size_t size) {
  search_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Site.search)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Site::search() const {
  // @@protoc_insertion_point(field_list:Site.search)
  return search_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Site::mutable_search() {
  // @@protoc_insertion_point(field_mutable_list:Site.search)
  return &search_;
}

// required int32 mobile = 10 [default = 0];
bool Site::has_mobile() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Site::set_has_mobile() {
  _has_bits_[0] |= 0x00000200u;
}
void Site::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000200u;
}
void Site::clear_mobile() {
  mobile_ = 0;
  clear_has_mobile();
}
 ::google::protobuf::int32 Site::mobile() const {
  // @@protoc_insertion_point(field_get:Site.mobile)
  return mobile_;
}
 void Site::set_mobile(::google::protobuf::int32 value) {
  set_has_mobile();
  mobile_ = value;
  // @@protoc_insertion_point(field_set:Site.mobile)
}

// required .Publisher publisher = 11;
bool Site::has_publisher() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Site::set_has_publisher() {
  _has_bits_[0] |= 0x00000400u;
}
void Site::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000400u;
}
void Site::clear_publisher() {
  if (publisher_ != NULL) publisher_->::Publisher::Clear();
  clear_has_publisher();
}
const ::Publisher& Site::publisher() const {
  // @@protoc_insertion_point(field_get:Site.publisher)
  return publisher_ != NULL ? *publisher_ : *default_instance_->publisher_;
}
::Publisher* Site::mutable_publisher() {
  set_has_publisher();
  if (publisher_ == NULL) {
    publisher_ = new ::Publisher;
  }
  // @@protoc_insertion_point(field_mutable:Site.publisher)
  return publisher_;
}
::Publisher* Site::release_publisher() {
  // @@protoc_insertion_point(field_release:Site.publisher)
  clear_has_publisher();
  ::Publisher* temp = publisher_;
  publisher_ = NULL;
  return temp;
}
void Site::set_allocated_publisher(::Publisher* publisher) {
  delete publisher_;
  publisher_ = publisher;
  if (publisher) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  // @@protoc_insertion_point(field_set_allocated:Site.publisher)
}

// repeated string keywords = 12;
int Site::keywords_size() const {
  return keywords_.size();
}
void Site::clear_keywords() {
  keywords_.Clear();
}
 const ::std::string& Site::keywords(int index) const {
  // @@protoc_insertion_point(field_get:Site.keywords)
  return keywords_.Get(index);
}
 ::std::string* Site::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:Site.keywords)
  return keywords_.Mutable(index);
}
 void Site::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Site.keywords)
  keywords_.Mutable(index)->assign(value);
}
 void Site::set_keywords(int index, const char* value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Site.keywords)
}
 void Site::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Site.keywords)
}
 ::std::string* Site::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:Site.keywords)
  return keywords_.Add();
}
 void Site::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Site.keywords)
}
 void Site::add_keywords(const char* value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Site.keywords)
}
 void Site::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Site.keywords)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Site::keywords() const {
  // @@protoc_insertion_point(field_list:Site.keywords)
  return keywords_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Site::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:Site.keywords)
  return &keywords_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int App::kIdFieldNumber;
const int App::kNameFieldNumber;
const int App::kBundleFieldNumber;
const int App::kDomainFieldNumber;
const int App::kStoreurlFieldNumber;
const int App::kCatFieldNumber;
const int App::kSectioncatFieldNumber;
const int App::kPagecatFieldNumber;
const int App::kVerFieldNumber;
const int App::kPaidFieldNumber;
const int App::kPublisherFieldNumber;
const int App::kKeywordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

App::App()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:App)
}

void App::InitAsDefaultInstance() {
  publisher_ = const_cast< ::Publisher*>(&::Publisher::default_instance());
}

App::App(const App& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:App)
}

void App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cat_ = 801;
  sectioncat_ = 801;
  pagecat_ = 801;
  ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paid_ = 0;
  publisher_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

App::~App() {
  // @@protoc_insertion_point(destructor:App)
  SharedDtor();
}

void App::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete publisher_;
  }
}

void App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return App_descriptor_;
}

const App& App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

App* App::default_instance_ = NULL;

App* App::New(::google::protobuf::Arena* arena) const {
  App* n = new App;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void App::Clear() {
// @@protoc_insertion_point(message_clear_start:App)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bundle()) {
      bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_storeurl()) {
      storeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cat_ = 801;
    sectioncat_ = 801;
    pagecat_ = 801;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_ver()) {
      ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    paid_ = 0;
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::Publisher::Clear();
    }
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "App.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "App.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bundle;
        break;
      }

      // required string bundle = 3;
      case 3: {
        if (tag == 26) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "App.bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "App.domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_storeurl;
        break;
      }

      // optional string storeurl = 5;
      case 5: {
        if (tag == 42) {
         parse_storeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storeurl().data(), this->storeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "App.storeurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cat;
        break;
      }

      // optional .ContentCategory cat = 6;
      case 6: {
        if (tag == 48) {
         parse_cat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_cat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sectioncat;
        break;
      }

      // optional .ContentCategory sectioncat = 7;
      case 7: {
        if (tag == 56) {
         parse_sectioncat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_sectioncat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pagecat;
        break;
      }

      // optional .ContentCategory pagecat = 8;
      case 8: {
        if (tag == 64) {
         parse_pagecat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_pagecat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ver;
        break;
      }

      // optional string ver = 9;
      case 9: {
        if (tag == 74) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "App.ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_paid;
        break;
      }

      // required int32 paid = 10;
      case 10: {
        if (tag == 80) {
         parse_paid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paid_)));
          set_has_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher;
        break;
      }

      // required .Publisher publisher = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 12;
      case 12: {
        if (tag == 98) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "App.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_keywords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:App)
  return false;
#undef DO_
}

void App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:App)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string bundle = 3;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bundle(), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // optional string storeurl = 5;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.storeurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->storeurl(), output);
  }

  // optional .ContentCategory cat = 6;
  if (has_cat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cat(), output);
  }

  // optional .ContentCategory sectioncat = 7;
  if (has_sectioncat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sectioncat(), output);
  }

  // optional .ContentCategory pagecat = 8;
  if (has_pagecat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pagecat(), output);
  }

  // optional string ver = 9;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ver(), output);
  }

  // required int32 paid = 10;
  if (has_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->paid(), output);
  }

  // required .Publisher publisher = 11;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->publisher_, output);
  }

  // repeated string keywords = 12;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->keywords(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:App)
}

::google::protobuf::uint8* App::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:App)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string bundle = 3;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bundle(), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // optional string storeurl = 5;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.storeurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->storeurl(), target);
  }

  // optional .ContentCategory cat = 6;
  if (has_cat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cat(), target);
  }

  // optional .ContentCategory sectioncat = 7;
  if (has_sectioncat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sectioncat(), target);
  }

  // optional .ContentCategory pagecat = 8;
  if (has_pagecat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pagecat(), target);
  }

  // optional string ver = 9;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ver(), target);
  }

  // required int32 paid = 10;
  if (has_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->paid(), target);
  }

  // required .Publisher publisher = 11;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->publisher_, false, target);
  }

  // repeated string keywords = 12;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "App.keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->keywords(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:App)
  return target;
}

int App::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:App)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_bundle()) {
    // required string bundle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bundle());
  }

  if (has_paid()) {
    // required int32 paid = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paid());
  }

  if (has_publisher()) {
    // required .Publisher publisher = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->publisher_);
  }

  return total_size;
}
int App::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:App)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000605) ^ 0x00000605) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string bundle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bundle());

    // required int32 paid = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->paid());

    // required .Publisher publisher = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->publisher_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 250u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string storeurl = 5;
    if (has_storeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storeurl());
    }

    // optional .ContentCategory cat = 6;
    if (has_cat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cat());
    }

    // optional .ContentCategory sectioncat = 7;
    if (has_sectioncat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sectioncat());
    }

    // optional .ContentCategory pagecat = 8;
    if (has_pagecat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pagecat());
    }

  }
  // optional string ver = 9;
  if (has_ver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ver());
  }

  // repeated string keywords = 12;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:App)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const App* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const App>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:App)
    MergeFrom(*source);
  }
}

void App::MergeFrom(const App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:App)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_bundle()) {
      set_has_bundle();
      bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_);
    }
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (from.has_storeurl()) {
      set_has_storeurl();
      storeurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storeurl_);
    }
    if (from.has_cat()) {
      set_cat(from.cat());
    }
    if (from.has_sectioncat()) {
      set_sectioncat(from.sectioncat());
    }
    if (from.has_pagecat()) {
      set_pagecat(from.pagecat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ver()) {
      set_has_ver();
      ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ver_);
    }
    if (from.has_paid()) {
      set_paid(from.paid());
    }
    if (from.has_publisher()) {
      mutable_publisher()->::Publisher::MergeFrom(from.publisher());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void App::CopyFrom(const App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool App::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000605) != 0x00000605) return false;

  if (has_publisher()) {
    if (!this->publisher_->IsInitialized()) return false;
  }
  return true;
}

void App::Swap(App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void App::InternalSwap(App* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  bundle_.Swap(&other->bundle_);
  domain_.Swap(&other->domain_);
  storeurl_.Swap(&other->storeurl_);
  std::swap(cat_, other->cat_);
  std::swap(sectioncat_, other->sectioncat_);
  std::swap(pagecat_, other->pagecat_);
  ver_.Swap(&other->ver_);
  std::swap(paid_, other->paid_);
  std::swap(publisher_, other->publisher_);
  keywords_.UnsafeArenaSwap(&other->keywords_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = App_descriptor_;
  metadata.reflection = App_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// App

// required string id = 1;
bool App::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void App::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void App::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void App::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& App::id() const {
  // @@protoc_insertion_point(field_get:App.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:App.id)
}
 void App::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:App.id)
}
 void App::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:App.id)
}
 ::std::string* App::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:App.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* App::release_id() {
  // @@protoc_insertion_point(field_release:App.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:App.id)
}

// optional string name = 2;
bool App::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void App::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void App::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void App::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& App::name() const {
  // @@protoc_insertion_point(field_get:App.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:App.name)
}
 void App::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:App.name)
}
 void App::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:App.name)
}
 ::std::string* App::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:App.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* App::release_name() {
  // @@protoc_insertion_point(field_release:App.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:App.name)
}

// required string bundle = 3;
bool App::has_bundle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void App::set_has_bundle() {
  _has_bits_[0] |= 0x00000004u;
}
void App::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000004u;
}
void App::clear_bundle() {
  bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundle();
}
 const ::std::string& App::bundle() const {
  // @@protoc_insertion_point(field_get:App.bundle)
  return bundle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_bundle(const ::std::string& value) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:App.bundle)
}
 void App::set_bundle(const char* value) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:App.bundle)
}
 void App::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:App.bundle)
}
 ::std::string* App::mutable_bundle() {
  set_has_bundle();
  // @@protoc_insertion_point(field_mutable:App.bundle)
  return bundle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* App::release_bundle() {
  // @@protoc_insertion_point(field_release:App.bundle)
  clear_has_bundle();
  return bundle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_allocated_bundle(::std::string* bundle) {
  if (bundle != NULL) {
    set_has_bundle();
  } else {
    clear_has_bundle();
  }
  bundle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle);
  // @@protoc_insertion_point(field_set_allocated:App.bundle)
}

// optional string domain = 4;
bool App::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void App::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
void App::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
void App::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
 const ::std::string& App::domain() const {
  // @@protoc_insertion_point(field_get:App.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:App.domain)
}
 void App::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:App.domain)
}
 void App::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:App.domain)
}
 ::std::string* App::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:App.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* App::release_domain() {
  // @@protoc_insertion_point(field_release:App.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:App.domain)
}

// optional string storeurl = 5;
bool App::has_storeurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void App::set_has_storeurl() {
  _has_bits_[0] |= 0x00000010u;
}
void App::clear_has_storeurl() {
  _has_bits_[0] &= ~0x00000010u;
}
void App::clear_storeurl() {
  storeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storeurl();
}
 const ::std::string& App::storeurl() const {
  // @@protoc_insertion_point(field_get:App.storeurl)
  return storeurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_storeurl(const ::std::string& value) {
  set_has_storeurl();
  storeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:App.storeurl)
}
 void App::set_storeurl(const char* value) {
  set_has_storeurl();
  storeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:App.storeurl)
}
 void App::set_storeurl(const char* value, size_t size) {
  set_has_storeurl();
  storeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:App.storeurl)
}
 ::std::string* App::mutable_storeurl() {
  set_has_storeurl();
  // @@protoc_insertion_point(field_mutable:App.storeurl)
  return storeurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* App::release_storeurl() {
  // @@protoc_insertion_point(field_release:App.storeurl)
  clear_has_storeurl();
  return storeurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_allocated_storeurl(::std::string* storeurl) {
  if (storeurl != NULL) {
    set_has_storeurl();
  } else {
    clear_has_storeurl();
  }
  storeurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storeurl);
  // @@protoc_insertion_point(field_set_allocated:App.storeurl)
}

// optional .ContentCategory cat = 6;
bool App::has_cat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void App::set_has_cat() {
  _has_bits_[0] |= 0x00000020u;
}
void App::clear_has_cat() {
  _has_bits_[0] &= ~0x00000020u;
}
void App::clear_cat() {
  cat_ = 801;
  clear_has_cat();
}
 ::ContentCategory App::cat() const {
  // @@protoc_insertion_point(field_get:App.cat)
  return static_cast< ::ContentCategory >(cat_);
}
 void App::set_cat(::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  set_has_cat();
  cat_ = value;
  // @@protoc_insertion_point(field_set:App.cat)
}

// optional .ContentCategory sectioncat = 7;
bool App::has_sectioncat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void App::set_has_sectioncat() {
  _has_bits_[0] |= 0x00000040u;
}
void App::clear_has_sectioncat() {
  _has_bits_[0] &= ~0x00000040u;
}
void App::clear_sectioncat() {
  sectioncat_ = 801;
  clear_has_sectioncat();
}
 ::ContentCategory App::sectioncat() const {
  // @@protoc_insertion_point(field_get:App.sectioncat)
  return static_cast< ::ContentCategory >(sectioncat_);
}
 void App::set_sectioncat(::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  set_has_sectioncat();
  sectioncat_ = value;
  // @@protoc_insertion_point(field_set:App.sectioncat)
}

// optional .ContentCategory pagecat = 8;
bool App::has_pagecat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void App::set_has_pagecat() {
  _has_bits_[0] |= 0x00000080u;
}
void App::clear_has_pagecat() {
  _has_bits_[0] &= ~0x00000080u;
}
void App::clear_pagecat() {
  pagecat_ = 801;
  clear_has_pagecat();
}
 ::ContentCategory App::pagecat() const {
  // @@protoc_insertion_point(field_get:App.pagecat)
  return static_cast< ::ContentCategory >(pagecat_);
}
 void App::set_pagecat(::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  set_has_pagecat();
  pagecat_ = value;
  // @@protoc_insertion_point(field_set:App.pagecat)
}

// optional string ver = 9;
bool App::has_ver() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void App::set_has_ver() {
  _has_bits_[0] |= 0x00000100u;
}
void App::clear_has_ver() {
  _has_bits_[0] &= ~0x00000100u;
}
void App::clear_ver() {
  ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ver();
}
 const ::std::string& App::ver() const {
  // @@protoc_insertion_point(field_get:App.ver)
  return ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_ver(const ::std::string& value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:App.ver)
}
 void App::set_ver(const char* value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:App.ver)
}
 void App::set_ver(const char* value, size_t size) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:App.ver)
}
 ::std::string* App::mutable_ver() {
  set_has_ver();
  // @@protoc_insertion_point(field_mutable:App.ver)
  return ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* App::release_ver() {
  // @@protoc_insertion_point(field_release:App.ver)
  clear_has_ver();
  return ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void App::set_allocated_ver(::std::string* ver) {
  if (ver != NULL) {
    set_has_ver();
  } else {
    clear_has_ver();
  }
  ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ver);
  // @@protoc_insertion_point(field_set_allocated:App.ver)
}

// required int32 paid = 10;
bool App::has_paid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void App::set_has_paid() {
  _has_bits_[0] |= 0x00000200u;
}
void App::clear_has_paid() {
  _has_bits_[0] &= ~0x00000200u;
}
void App::clear_paid() {
  paid_ = 0;
  clear_has_paid();
}
 ::google::protobuf::int32 App::paid() const {
  // @@protoc_insertion_point(field_get:App.paid)
  return paid_;
}
 void App::set_paid(::google::protobuf::int32 value) {
  set_has_paid();
  paid_ = value;
  // @@protoc_insertion_point(field_set:App.paid)
}

// required .Publisher publisher = 11;
bool App::has_publisher() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void App::set_has_publisher() {
  _has_bits_[0] |= 0x00000400u;
}
void App::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000400u;
}
void App::clear_publisher() {
  if (publisher_ != NULL) publisher_->::Publisher::Clear();
  clear_has_publisher();
}
const ::Publisher& App::publisher() const {
  // @@protoc_insertion_point(field_get:App.publisher)
  return publisher_ != NULL ? *publisher_ : *default_instance_->publisher_;
}
::Publisher* App::mutable_publisher() {
  set_has_publisher();
  if (publisher_ == NULL) {
    publisher_ = new ::Publisher;
  }
  // @@protoc_insertion_point(field_mutable:App.publisher)
  return publisher_;
}
::Publisher* App::release_publisher() {
  // @@protoc_insertion_point(field_release:App.publisher)
  clear_has_publisher();
  ::Publisher* temp = publisher_;
  publisher_ = NULL;
  return temp;
}
void App::set_allocated_publisher(::Publisher* publisher) {
  delete publisher_;
  publisher_ = publisher;
  if (publisher) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  // @@protoc_insertion_point(field_set_allocated:App.publisher)
}

// repeated string keywords = 12;
int App::keywords_size() const {
  return keywords_.size();
}
void App::clear_keywords() {
  keywords_.Clear();
}
 const ::std::string& App::keywords(int index) const {
  // @@protoc_insertion_point(field_get:App.keywords)
  return keywords_.Get(index);
}
 ::std::string* App::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:App.keywords)
  return keywords_.Mutable(index);
}
 void App::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:App.keywords)
  keywords_.Mutable(index)->assign(value);
}
 void App::set_keywords(int index, const char* value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:App.keywords)
}
 void App::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:App.keywords)
}
 ::std::string* App::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:App.keywords)
  return keywords_.Add();
}
 void App::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:App.keywords)
}
 void App::add_keywords(const char* value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:App.keywords)
}
 void App::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:App.keywords)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
App::keywords() const {
  // @@protoc_insertion_point(field_list:App.keywords)
  return keywords_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
App::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:App.keywords)
  return &keywords_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Publisher::kIdFieldNumber;
const int Publisher::kNameFieldNumber;
const int Publisher::kCatFieldNumber;
const int Publisher::kDomainFieldNumber;
const int Publisher::kTypeFieldNumber;
const int Publisher::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Publisher::Publisher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Publisher)
}

void Publisher::InitAsDefaultInstance() {
}

Publisher::Publisher(const Publisher& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Publisher)
}

void Publisher::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Publisher::~Publisher() {
  // @@protoc_insertion_point(destructor:Publisher)
  SharedDtor();
}

void Publisher::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Publisher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Publisher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Publisher_descriptor_;
}

const Publisher& Publisher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

Publisher* Publisher::default_instance_ = NULL;

Publisher* Publisher::New(::google::protobuf::Arena* arena) const {
  Publisher* n = new Publisher;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Publisher::Clear() {
// @@protoc_insertion_point(message_clear_start:Publisher)
  if (_has_bits_[0 / 32] & 59u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_slot()) {
      slot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Publisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Publisher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Publisher.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Publisher.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cat;
        break;
      }

      // repeated .ContentCategory cat = 3;
      case 3: {
        if (tag == 24) {
         parse_cat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            add_cat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::ContentCategory_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_cat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cat;
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // required string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Publisher.domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // optional string type = 5;
      case 5: {
        if (tag == 42) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Publisher.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_slot;
        break;
      }

      // optional string slot = 6;
      case 6: {
        if (tag == 50) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slot().data(), this->slot().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Publisher.slot");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Publisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Publisher)
  return false;
#undef DO_
}

void Publisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Publisher)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .ContentCategory cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cat(i), output);
  }

  // required string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // optional string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // optional string slot = 6;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slot().data(), this->slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.slot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Publisher)
}

::google::protobuf::uint8* Publisher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Publisher)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .ContentCategory cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cat(i), target);
  }

  // required string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // optional string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // optional string slot = 6;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slot().data(), this->slot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Publisher.slot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Publisher)
  return target;
}

int Publisher::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Publisher)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_domain()) {
    // required string domain = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  return total_size;
}
int Publisher::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Publisher)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string domain = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 50u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string slot = 6;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slot());
    }

  }
  // repeated .ContentCategory cat = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cat(i));
    }
    total_size += 1 * this->cat_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Publisher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Publisher)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Publisher* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Publisher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Publisher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Publisher)
    MergeFrom(*source);
  }
}

void Publisher::MergeFrom(const Publisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Publisher)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_slot()) {
      set_has_slot();
      slot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slot_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Publisher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Publisher::CopyFrom(const Publisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publisher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void Publisher::Swap(Publisher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Publisher::InternalSwap(Publisher* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  cat_.UnsafeArenaSwap(&other->cat_);
  domain_.Swap(&other->domain_);
  type_.Swap(&other->type_);
  slot_.Swap(&other->slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Publisher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Publisher_descriptor_;
  metadata.reflection = Publisher_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Publisher

// required string id = 1;
bool Publisher::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Publisher::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Publisher::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Publisher::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Publisher::id() const {
  // @@protoc_insertion_point(field_get:Publisher.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Publisher.id)
}
 void Publisher::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Publisher.id)
}
 void Publisher::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Publisher.id)
}
 ::std::string* Publisher::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Publisher.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Publisher::release_id() {
  // @@protoc_insertion_point(field_release:Publisher.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Publisher.id)
}

// optional string name = 2;
bool Publisher::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Publisher::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Publisher::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Publisher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Publisher::name() const {
  // @@protoc_insertion_point(field_get:Publisher.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Publisher.name)
}
 void Publisher::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Publisher.name)
}
 void Publisher::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Publisher.name)
}
 ::std::string* Publisher::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Publisher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Publisher::release_name() {
  // @@protoc_insertion_point(field_release:Publisher.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Publisher.name)
}

// repeated .ContentCategory cat = 3;
int Publisher::cat_size() const {
  return cat_.size();
}
void Publisher::clear_cat() {
  cat_.Clear();
}
 ::ContentCategory Publisher::cat(int index) const {
  // @@protoc_insertion_point(field_get:Publisher.cat)
  return static_cast< ::ContentCategory >(cat_.Get(index));
}
 void Publisher::set_cat(int index, ::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  cat_.Set(index, value);
  // @@protoc_insertion_point(field_set:Publisher.cat)
}
 void Publisher::add_cat(::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  cat_.Add(value);
  // @@protoc_insertion_point(field_add:Publisher.cat)
}
 const ::google::protobuf::RepeatedField<int>&
Publisher::cat() const {
  // @@protoc_insertion_point(field_list:Publisher.cat)
  return cat_;
}
 ::google::protobuf::RepeatedField<int>*
Publisher::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:Publisher.cat)
  return &cat_;
}

// required string domain = 4;
bool Publisher::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Publisher::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
void Publisher::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
void Publisher::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
 const ::std::string& Publisher::domain() const {
  // @@protoc_insertion_point(field_get:Publisher.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Publisher.domain)
}
 void Publisher::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Publisher.domain)
}
 void Publisher::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Publisher.domain)
}
 ::std::string* Publisher::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:Publisher.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Publisher::release_domain() {
  // @@protoc_insertion_point(field_release:Publisher.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:Publisher.domain)
}

// optional string type = 5;
bool Publisher::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Publisher::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void Publisher::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void Publisher::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Publisher::type() const {
  // @@protoc_insertion_point(field_get:Publisher.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Publisher.type)
}
 void Publisher::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Publisher.type)
}
 void Publisher::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Publisher.type)
}
 ::std::string* Publisher::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:Publisher.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Publisher::release_type() {
  // @@protoc_insertion_point(field_release:Publisher.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Publisher.type)
}

// optional string slot = 6;
bool Publisher::has_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Publisher::set_has_slot() {
  _has_bits_[0] |= 0x00000020u;
}
void Publisher::clear_has_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
void Publisher::clear_slot() {
  slot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slot();
}
 const ::std::string& Publisher::slot() const {
  // @@protoc_insertion_point(field_get:Publisher.slot)
  return slot_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_slot(const ::std::string& value) {
  set_has_slot();
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Publisher.slot)
}
 void Publisher::set_slot(const char* value) {
  set_has_slot();
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Publisher.slot)
}
 void Publisher::set_slot(const char* value, size_t size) {
  set_has_slot();
  slot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Publisher.slot)
}
 ::std::string* Publisher::mutable_slot() {
  set_has_slot();
  // @@protoc_insertion_point(field_mutable:Publisher.slot)
  return slot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Publisher::release_slot() {
  // @@protoc_insertion_point(field_release:Publisher.slot)
  clear_has_slot();
  return slot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publisher::set_allocated_slot(::std::string* slot) {
  if (slot != NULL) {
    set_has_slot();
  } else {
    clear_has_slot();
  }
  slot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slot);
  // @@protoc_insertion_point(field_set_allocated:Publisher.slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kUaFieldNumber;
const int Device::kGeoFieldNumber;
const int Device::kIpFieldNumber;
const int Device::kDevicetypeFieldNumber;
const int Device::kMakeFieldNumber;
const int Device::kModelFieldNumber;
const int Device::kHwvFieldNumber;
const int Device::kOsFieldNumber;
const int Device::kOsvFieldNumber;
const int Device::kWFieldNumber;
const int Device::kHFieldNumber;
const int Device::kJsFieldNumber;
const int Device::kLanguageFieldNumber;
const int Device::kConnectiontypeFieldNumber;
const int Device::kImeiFieldNumber;
const int Device::kMacFieldNumber;
const int Device::kIdfaFieldNumber;
const int Device::kCarrierFieldNumber;
const int Device::kAndroididFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Device)
}

void Device::InitAsDefaultInstance() {
  geo_ = const_cast< ::Geo*>(&::Geo::default_instance());
}

Device::Device(const Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Device)
}

void Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ua_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicetype_ = 1;
  make_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hwv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  js_ = 0;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connectiontype_ = 1;
  imei_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:Device)
  SharedDtor();
}

void Device::SharedDtor() {
  ua_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  make_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hwv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imei_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete geo_;
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:Device)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Device, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Device*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_ua()) {
      ua_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Geo::Clear();
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    devicetype_ = 1;
    if (has_make()) {
      make_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hwv()) {
      hwv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_os()) {
      os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(h_, js_);
    if (has_osv()) {
      osv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    w_ = 0;
    if (has_language()) {
      language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    connectiontype_ = 1;
    if (has_imei()) {
      imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mac()) {
      mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 458752u) {
    if (has_idfa()) {
      idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_carrier()) {
      carrier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_androidid()) {
      androidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ua = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_geo;
        break;
      }

      // optional .Geo geo = 2;
      case 2: {
        if (tag == 18) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_devicetype;
        break;
      }

      // required .DeviceType devicetype = 4;
      case 4: {
        if (tag == 32) {
         parse_devicetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DeviceType_IsValid(value)) {
            set_devicetype(static_cast< ::DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_make;
        break;
      }

      // optional string make = 5;
      case 5: {
        if (tag == 42) {
         parse_make:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_make()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->make().data(), this->make().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.make");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_model;
        break;
      }

      // optional string model = 6;
      case 6: {
        if (tag == 50) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hwv;
        break;
      }

      // optional string hwv = 7;
      case 7: {
        if (tag == 58) {
         parse_hwv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hwv().data(), this->hwv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.hwv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_os;
        break;
      }

      // optional string os = 8;
      case 8: {
        if (tag == 66) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_osv;
        break;
      }

      // optional string osv = 9;
      case 9: {
        if (tag == 74) {
         parse_osv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->osv().data(), this->osv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.osv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_w;
        break;
      }

      // required int32 w = 10;
      case 10: {
        if (tag == 80) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_h;
        break;
      }

      // required int32 h = 11;
      case 11: {
        if (tag == 88) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_js;
        break;
      }

      // optional int32 js = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_js:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &js_)));
          set_has_js();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_language;
        break;
      }

      // optional string language = 13;
      case 13: {
        if (tag == 106) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_connectiontype;
        break;
      }

      // optional .ConnectionType connectiontype = 14 [default = ETHERNET];
      case 14: {
        if (tag == 112) {
         parse_connectiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_imei;
        break;
      }

      // optional string imei = 15;
      case 15: {
        if (tag == 122) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.imei");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_mac;
        break;
      }

      // optional string mac = 16;
      case 16: {
        if (tag == 130) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_idfa;
        break;
      }

      // optional string idfa = 17;
      case 17: {
        if (tag == 138) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.idfa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_carrier;
        break;
      }

      // optional string carrier = 18;
      case 18: {
        if (tag == 146) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->carrier().data(), this->carrier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.carrier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_androidid;
        break;
      }

      // optional string androidid = 19;
      case 19: {
        if (tag == 154) {
         parse_androidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_androidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->androidid().data(), this->androidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Device.androidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Device)
  // required string ua = 1;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ua(), output);
  }

  // optional .Geo geo = 2;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->geo_, output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // required .DeviceType devicetype = 4;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->devicetype(), output);
  }

  // optional string make = 5;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.make");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->make(), output);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->model(), output);
  }

  // optional string hwv = 7;
  if (has_hwv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwv().data(), this->hwv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.hwv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->hwv(), output);
  }

  // optional string os = 8;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->os(), output);
  }

  // optional string osv = 9;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.osv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->osv(), output);
  }

  // required int32 w = 10;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->w(), output);
  }

  // required int32 h = 11;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->h(), output);
  }

  // optional int32 js = 12 [default = 0];
  if (has_js()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->js(), output);
  }

  // optional string language = 13;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->language(), output);
  }

  // optional .ConnectionType connectiontype = 14 [default = ETHERNET];
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->connectiontype(), output);
  }

  // optional string imei = 15;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.imei");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->imei(), output);
  }

  // optional string mac = 16;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->mac(), output);
  }

  // optional string idfa = 17;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->idfa(), output);
  }

  // optional string carrier = 18;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.carrier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->carrier(), output);
  }

  // optional string androidid = 19;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.androidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->androidid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Device)
}

::google::protobuf::uint8* Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Device)
  // required string ua = 1;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ua(), target);
  }

  // optional .Geo geo = 2;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->geo_, false, target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required .DeviceType devicetype = 4;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->devicetype(), target);
  }

  // optional string make = 5;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.make");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->make(), target);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->model(), target);
  }

  // optional string hwv = 7;
  if (has_hwv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwv().data(), this->hwv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.hwv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hwv(), target);
  }

  // optional string os = 8;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->os(), target);
  }

  // optional string osv = 9;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.osv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->osv(), target);
  }

  // required int32 w = 10;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->w(), target);
  }

  // required int32 h = 11;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->h(), target);
  }

  // optional int32 js = 12 [default = 0];
  if (has_js()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->js(), target);
  }

  // optional string language = 13;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->language(), target);
  }

  // optional .ConnectionType connectiontype = 14 [default = ETHERNET];
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->connectiontype(), target);
  }

  // optional string imei = 15;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.imei");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->imei(), target);
  }

  // optional string mac = 16;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->mac(), target);
  }

  // optional string idfa = 17;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->idfa(), target);
  }

  // optional string carrier = 18;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.carrier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->carrier(), target);
  }

  // optional string androidid = 19;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Device.androidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->androidid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Device)
  return target;
}

int Device::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Device)
  int total_size = 0;

  if (has_ua()) {
    // required string ua = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ua());
  }

  if (has_ip()) {
    // required string ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_devicetype()) {
    // required .DeviceType devicetype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->devicetype());
  }

  if (has_w()) {
    // required int32 w = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->w());
  }

  if (has_h()) {
    // required int32 h = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h());
  }

  return total_size;
}
int Device::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Device)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000060d) ^ 0x0000060d) == 0) {  // All required fields are present.
    // required string ua = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ua());

    // required string ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required .DeviceType devicetype = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->devicetype());

    // required int32 w = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->w());

    // required int32 h = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 242u) {
    // optional .Geo geo = 2;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geo_);
    }

    // optional string make = 5;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->make());
    }

    // optional string model = 6;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string hwv = 7;
    if (has_hwv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwv());
    }

    // optional string os = 8;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  if (_has_bits_[8 / 32] & 63744u) {
    // optional string osv = 9;
    if (has_osv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osv());
    }

    // optional int32 js = 12 [default = 0];
    if (has_js()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->js());
    }

    // optional string language = 13;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional .ConnectionType connectiontype = 14 [default = ETHERNET];
    if (has_connectiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional string imei = 15;
    if (has_imei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

    // optional string mac = 16;
    if (has_mac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional string idfa = 17;
    if (has_idfa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string carrier = 18;
    if (has_carrier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrier());
    }

    // optional string androidid = 19;
    if (has_androidid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->androidid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ua()) {
      set_has_ua();
      ua_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ua_);
    }
    if (from.has_geo()) {
      mutable_geo()->::Geo::MergeFrom(from.geo());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_make()) {
      set_has_make();
      make_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.make_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_hwv()) {
      set_has_hwv();
      hwv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hwv_);
    }
    if (from.has_os()) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_osv()) {
      set_has_osv();
      osv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osv_);
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_js()) {
      set_js(from.js());
    }
    if (from.has_language()) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_imei()) {
      set_has_imei();
      imei_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imei_);
    }
    if (from.has_mac()) {
      set_has_mac();
      mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_idfa()) {
      set_has_idfa();
      idfa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idfa_);
    }
    if (from.has_carrier()) {
      set_has_carrier();
      carrier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.carrier_);
    }
    if (from.has_androidid()) {
      set_has_androidid();
      androidid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.androidid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000060d) != 0x0000060d) return false;

  if (has_geo()) {
    if (!this->geo_->IsInitialized()) return false;
  }
  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  ua_.Swap(&other->ua_);
  std::swap(geo_, other->geo_);
  ip_.Swap(&other->ip_);
  std::swap(devicetype_, other->devicetype_);
  make_.Swap(&other->make_);
  model_.Swap(&other->model_);
  hwv_.Swap(&other->hwv_);
  os_.Swap(&other->os_);
  osv_.Swap(&other->osv_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(js_, other->js_);
  language_.Swap(&other->language_);
  std::swap(connectiontype_, other->connectiontype_);
  imei_.Swap(&other->imei_);
  mac_.Swap(&other->mac_);
  idfa_.Swap(&other->idfa_);
  carrier_.Swap(&other->carrier_);
  androidid_.Swap(&other->androidid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// required string ua = 1;
bool Device::has_ua() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Device::set_has_ua() {
  _has_bits_[0] |= 0x00000001u;
}
void Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000001u;
}
void Device::clear_ua() {
  ua_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ua();
}
 const ::std::string& Device::ua() const {
  // @@protoc_insertion_point(field_get:Device.ua)
  return ua_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_ua(const ::std::string& value) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.ua)
}
 void Device::set_ua(const char* value) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.ua)
}
 void Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.ua)
}
 ::std::string* Device::mutable_ua() {
  set_has_ua();
  // @@protoc_insertion_point(field_mutable:Device.ua)
  return ua_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_ua() {
  // @@protoc_insertion_point(field_release:Device.ua)
  clear_has_ua();
  return ua_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_ua(::std::string* ua) {
  if (ua != NULL) {
    set_has_ua();
  } else {
    clear_has_ua();
  }
  ua_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ua);
  // @@protoc_insertion_point(field_set_allocated:Device.ua)
}

// optional .Geo geo = 2;
bool Device::has_geo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Device::set_has_geo() {
  _has_bits_[0] |= 0x00000002u;
}
void Device::clear_has_geo() {
  _has_bits_[0] &= ~0x00000002u;
}
void Device::clear_geo() {
  if (geo_ != NULL) geo_->::Geo::Clear();
  clear_has_geo();
}
const ::Geo& Device::geo() const {
  // @@protoc_insertion_point(field_get:Device.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
::Geo* Device::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) {
    geo_ = new ::Geo;
  }
  // @@protoc_insertion_point(field_mutable:Device.geo)
  return geo_;
}
::Geo* Device::release_geo() {
  // @@protoc_insertion_point(field_release:Device.geo)
  clear_has_geo();
  ::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
void Device::set_allocated_geo(::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:Device.geo)
}

// required string ip = 3;
bool Device::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Device::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void Device::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& Device::ip() const {
  // @@protoc_insertion_point(field_get:Device.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.ip)
}
 void Device::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.ip)
}
 void Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.ip)
}
 ::std::string* Device::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:Device.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_ip() {
  // @@protoc_insertion_point(field_release:Device.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Device.ip)
}

// required .DeviceType devicetype = 4;
bool Device::has_devicetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Device::set_has_devicetype() {
  _has_bits_[0] |= 0x00000008u;
}
void Device::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00000008u;
}
void Device::clear_devicetype() {
  devicetype_ = 1;
  clear_has_devicetype();
}
 ::DeviceType Device::devicetype() const {
  // @@protoc_insertion_point(field_get:Device.devicetype)
  return static_cast< ::DeviceType >(devicetype_);
}
 void Device::set_devicetype(::DeviceType value) {
  assert(::DeviceType_IsValid(value));
  set_has_devicetype();
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:Device.devicetype)
}

// optional string make = 5;
bool Device::has_make() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Device::set_has_make() {
  _has_bits_[0] |= 0x00000010u;
}
void Device::clear_has_make() {
  _has_bits_[0] &= ~0x00000010u;
}
void Device::clear_make() {
  make_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_make();
}
 const ::std::string& Device::make() const {
  // @@protoc_insertion_point(field_get:Device.make)
  return make_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_make(const ::std::string& value) {
  set_has_make();
  make_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.make)
}
 void Device::set_make(const char* value) {
  set_has_make();
  make_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.make)
}
 void Device::set_make(const char* value, size_t size) {
  set_has_make();
  make_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.make)
}
 ::std::string* Device::mutable_make() {
  set_has_make();
  // @@protoc_insertion_point(field_mutable:Device.make)
  return make_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_make() {
  // @@protoc_insertion_point(field_release:Device.make)
  clear_has_make();
  return make_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_make(::std::string* make) {
  if (make != NULL) {
    set_has_make();
  } else {
    clear_has_make();
  }
  make_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), make);
  // @@protoc_insertion_point(field_set_allocated:Device.make)
}

// optional string model = 6;
bool Device::has_model() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Device::set_has_model() {
  _has_bits_[0] |= 0x00000020u;
}
void Device::clear_has_model() {
  _has_bits_[0] &= ~0x00000020u;
}
void Device::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& Device::model() const {
  // @@protoc_insertion_point(field_get:Device.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.model)
}
 void Device::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.model)
}
 void Device::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.model)
}
 ::std::string* Device::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:Device.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_model() {
  // @@protoc_insertion_point(field_release:Device.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:Device.model)
}

// optional string hwv = 7;
bool Device::has_hwv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Device::set_has_hwv() {
  _has_bits_[0] |= 0x00000040u;
}
void Device::clear_has_hwv() {
  _has_bits_[0] &= ~0x00000040u;
}
void Device::clear_hwv() {
  hwv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hwv();
}
 const ::std::string& Device::hwv() const {
  // @@protoc_insertion_point(field_get:Device.hwv)
  return hwv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_hwv(const ::std::string& value) {
  set_has_hwv();
  hwv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.hwv)
}
 void Device::set_hwv(const char* value) {
  set_has_hwv();
  hwv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.hwv)
}
 void Device::set_hwv(const char* value, size_t size) {
  set_has_hwv();
  hwv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.hwv)
}
 ::std::string* Device::mutable_hwv() {
  set_has_hwv();
  // @@protoc_insertion_point(field_mutable:Device.hwv)
  return hwv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_hwv() {
  // @@protoc_insertion_point(field_release:Device.hwv)
  clear_has_hwv();
  return hwv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_hwv(::std::string* hwv) {
  if (hwv != NULL) {
    set_has_hwv();
  } else {
    clear_has_hwv();
  }
  hwv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hwv);
  // @@protoc_insertion_point(field_set_allocated:Device.hwv)
}

// optional string os = 8;
bool Device::has_os() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Device::set_has_os() {
  _has_bits_[0] |= 0x00000080u;
}
void Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000080u;
}
void Device::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os();
}
 const ::std::string& Device::os() const {
  // @@protoc_insertion_point(field_get:Device.os)
  return os_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_os(const ::std::string& value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.os)
}
 void Device::set_os(const char* value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.os)
}
 void Device::set_os(const char* value, size_t size) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.os)
}
 ::std::string* Device::mutable_os() {
  set_has_os();
  // @@protoc_insertion_point(field_mutable:Device.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_os() {
  // @@protoc_insertion_point(field_release:Device.os)
  clear_has_os();
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    set_has_os();
  } else {
    clear_has_os();
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:Device.os)
}

// optional string osv = 9;
bool Device::has_osv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Device::set_has_osv() {
  _has_bits_[0] |= 0x00000100u;
}
void Device::clear_has_osv() {
  _has_bits_[0] &= ~0x00000100u;
}
void Device::clear_osv() {
  osv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_osv();
}
 const ::std::string& Device::osv() const {
  // @@protoc_insertion_point(field_get:Device.osv)
  return osv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_osv(const ::std::string& value) {
  set_has_osv();
  osv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.osv)
}
 void Device::set_osv(const char* value) {
  set_has_osv();
  osv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.osv)
}
 void Device::set_osv(const char* value, size_t size) {
  set_has_osv();
  osv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.osv)
}
 ::std::string* Device::mutable_osv() {
  set_has_osv();
  // @@protoc_insertion_point(field_mutable:Device.osv)
  return osv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_osv() {
  // @@protoc_insertion_point(field_release:Device.osv)
  clear_has_osv();
  return osv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_osv(::std::string* osv) {
  if (osv != NULL) {
    set_has_osv();
  } else {
    clear_has_osv();
  }
  osv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osv);
  // @@protoc_insertion_point(field_set_allocated:Device.osv)
}

// required int32 w = 10;
bool Device::has_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Device::set_has_w() {
  _has_bits_[0] |= 0x00000200u;
}
void Device::clear_has_w() {
  _has_bits_[0] &= ~0x00000200u;
}
void Device::clear_w() {
  w_ = 0;
  clear_has_w();
}
 ::google::protobuf::int32 Device::w() const {
  // @@protoc_insertion_point(field_get:Device.w)
  return w_;
}
 void Device::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:Device.w)
}

// required int32 h = 11;
bool Device::has_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Device::set_has_h() {
  _has_bits_[0] |= 0x00000400u;
}
void Device::clear_has_h() {
  _has_bits_[0] &= ~0x00000400u;
}
void Device::clear_h() {
  h_ = 0;
  clear_has_h();
}
 ::google::protobuf::int32 Device::h() const {
  // @@protoc_insertion_point(field_get:Device.h)
  return h_;
}
 void Device::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:Device.h)
}

// optional int32 js = 12 [default = 0];
bool Device::has_js() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Device::set_has_js() {
  _has_bits_[0] |= 0x00000800u;
}
void Device::clear_has_js() {
  _has_bits_[0] &= ~0x00000800u;
}
void Device::clear_js() {
  js_ = 0;
  clear_has_js();
}
 ::google::protobuf::int32 Device::js() const {
  // @@protoc_insertion_point(field_get:Device.js)
  return js_;
}
 void Device::set_js(::google::protobuf::int32 value) {
  set_has_js();
  js_ = value;
  // @@protoc_insertion_point(field_set:Device.js)
}

// optional string language = 13;
bool Device::has_language() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Device::set_has_language() {
  _has_bits_[0] |= 0x00001000u;
}
void Device::clear_has_language() {
  _has_bits_[0] &= ~0x00001000u;
}
void Device::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
 const ::std::string& Device::language() const {
  // @@protoc_insertion_point(field_get:Device.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.language)
}
 void Device::set_language(const char* value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.language)
}
 void Device::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.language)
}
 ::std::string* Device::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:Device.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_language() {
  // @@protoc_insertion_point(field_release:Device.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:Device.language)
}

// optional .ConnectionType connectiontype = 14 [default = ETHERNET];
bool Device::has_connectiontype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Device::set_has_connectiontype() {
  _has_bits_[0] |= 0x00002000u;
}
void Device::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00002000u;
}
void Device::clear_connectiontype() {
  connectiontype_ = 1;
  clear_has_connectiontype();
}
 ::ConnectionType Device::connectiontype() const {
  // @@protoc_insertion_point(field_get:Device.connectiontype)
  return static_cast< ::ConnectionType >(connectiontype_);
}
 void Device::set_connectiontype(::ConnectionType value) {
  assert(::ConnectionType_IsValid(value));
  set_has_connectiontype();
  connectiontype_ = value;
  // @@protoc_insertion_point(field_set:Device.connectiontype)
}

// optional string imei = 15;
bool Device::has_imei() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Device::set_has_imei() {
  _has_bits_[0] |= 0x00004000u;
}
void Device::clear_has_imei() {
  _has_bits_[0] &= ~0x00004000u;
}
void Device::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imei();
}
 const ::std::string& Device::imei() const {
  // @@protoc_insertion_point(field_get:Device.imei)
  return imei_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_imei(const ::std::string& value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.imei)
}
 void Device::set_imei(const char* value) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.imei)
}
 void Device::set_imei(const char* value, size_t size) {
  set_has_imei();
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.imei)
}
 ::std::string* Device::mutable_imei() {
  set_has_imei();
  // @@protoc_insertion_point(field_mutable:Device.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_imei() {
  // @@protoc_insertion_point(field_release:Device.imei)
  clear_has_imei();
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    set_has_imei();
  } else {
    clear_has_imei();
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:Device.imei)
}

// optional string mac = 16;
bool Device::has_mac() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Device::set_has_mac() {
  _has_bits_[0] |= 0x00008000u;
}
void Device::clear_has_mac() {
  _has_bits_[0] &= ~0x00008000u;
}
void Device::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mac();
}
 const ::std::string& Device::mac() const {
  // @@protoc_insertion_point(field_get:Device.mac)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_mac(const ::std::string& value) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.mac)
}
 void Device::set_mac(const char* value) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.mac)
}
 void Device::set_mac(const char* value, size_t size) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.mac)
}
 ::std::string* Device::mutable_mac() {
  set_has_mac();
  // @@protoc_insertion_point(field_mutable:Device.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_mac() {
  // @@protoc_insertion_point(field_release:Device.mac)
  clear_has_mac();
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    set_has_mac();
  } else {
    clear_has_mac();
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:Device.mac)
}

// optional string idfa = 17;
bool Device::has_idfa() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Device::set_has_idfa() {
  _has_bits_[0] |= 0x00010000u;
}
void Device::clear_has_idfa() {
  _has_bits_[0] &= ~0x00010000u;
}
void Device::clear_idfa() {
  idfa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idfa();
}
 const ::std::string& Device::idfa() const {
  // @@protoc_insertion_point(field_get:Device.idfa)
  return idfa_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_idfa(const ::std::string& value) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.idfa)
}
 void Device::set_idfa(const char* value) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.idfa)
}
 void Device::set_idfa(const char* value, size_t size) {
  set_has_idfa();
  idfa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.idfa)
}
 ::std::string* Device::mutable_idfa() {
  set_has_idfa();
  // @@protoc_insertion_point(field_mutable:Device.idfa)
  return idfa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_idfa() {
  // @@protoc_insertion_point(field_release:Device.idfa)
  clear_has_idfa();
  return idfa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_idfa(::std::string* idfa) {
  if (idfa != NULL) {
    set_has_idfa();
  } else {
    clear_has_idfa();
  }
  idfa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idfa);
  // @@protoc_insertion_point(field_set_allocated:Device.idfa)
}

// optional string carrier = 18;
bool Device::has_carrier() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Device::set_has_carrier() {
  _has_bits_[0] |= 0x00020000u;
}
void Device::clear_has_carrier() {
  _has_bits_[0] &= ~0x00020000u;
}
void Device::clear_carrier() {
  carrier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_carrier();
}
 const ::std::string& Device::carrier() const {
  // @@protoc_insertion_point(field_get:Device.carrier)
  return carrier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_carrier(const ::std::string& value) {
  set_has_carrier();
  carrier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.carrier)
}
 void Device::set_carrier(const char* value) {
  set_has_carrier();
  carrier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.carrier)
}
 void Device::set_carrier(const char* value, size_t size) {
  set_has_carrier();
  carrier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.carrier)
}
 ::std::string* Device::mutable_carrier() {
  set_has_carrier();
  // @@protoc_insertion_point(field_mutable:Device.carrier)
  return carrier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_carrier() {
  // @@protoc_insertion_point(field_release:Device.carrier)
  clear_has_carrier();
  return carrier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_carrier(::std::string* carrier) {
  if (carrier != NULL) {
    set_has_carrier();
  } else {
    clear_has_carrier();
  }
  carrier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), carrier);
  // @@protoc_insertion_point(field_set_allocated:Device.carrier)
}

// optional string androidid = 19;
bool Device::has_androidid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Device::set_has_androidid() {
  _has_bits_[0] |= 0x00040000u;
}
void Device::clear_has_androidid() {
  _has_bits_[0] &= ~0x00040000u;
}
void Device::clear_androidid() {
  androidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_androidid();
}
 const ::std::string& Device::androidid() const {
  // @@protoc_insertion_point(field_get:Device.androidid)
  return androidid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_androidid(const ::std::string& value) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Device.androidid)
}
 void Device::set_androidid(const char* value) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Device.androidid)
}
 void Device::set_androidid(const char* value, size_t size) {
  set_has_androidid();
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Device.androidid)
}
 ::std::string* Device::mutable_androidid() {
  set_has_androidid();
  // @@protoc_insertion_point(field_mutable:Device.androidid)
  return androidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_androidid() {
  // @@protoc_insertion_point(field_release:Device.androidid)
  clear_has_androidid();
  return androidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_androidid(::std::string* androidid) {
  if (androidid != NULL) {
    set_has_androidid();
  } else {
    clear_has_androidid();
  }
  androidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), androidid);
  // @@protoc_insertion_point(field_set_allocated:Device.androidid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Geo::kLatFieldNumber;
const int Geo::kLonFieldNumber;
const int Geo::kTypeFieldNumber;
const int Geo::kCountryFieldNumber;
const int Geo::kProvinceFieldNumber;
const int Geo::kCityFieldNumber;
const int Geo::kZipFieldNumber;
const int Geo::kUtcoffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Geo::Geo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Geo)
}

void Geo::InitAsDefaultInstance() {
}

Geo::Geo(const Geo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Geo)
}

void Geo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  type_ = 1;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utcoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Geo::~Geo() {
  // @@protoc_insertion_point(destructor:Geo)
  SharedDtor();
}

void Geo::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Geo_descriptor_;
}

const Geo& Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

Geo* Geo::default_instance_ = NULL;

Geo* Geo::New(::google::protobuf::Arena* arena) const {
  Geo* n = new Geo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:Geo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Geo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Geo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(lat_, lon_);
    type_ = 1;
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_province()) {
      province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_city()) {
      city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_zip()) {
      zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    utcoffset_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float lat = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_lon;
        break;
      }

      // optional float lon = 2;
      case 2: {
        if (tag == 21) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .LocationType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LocationType_IsValid(value)) {
            set_type(static_cast< ::LocationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_country;
        break;
      }

      // optional string country = 4;
      case 4: {
        if (tag == 34) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Geo.country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_province;
        break;
      }

      // optional string province = 5;
      case 5: {
        if (tag == 42) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Geo.province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (tag == 50) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Geo.city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_zip;
        break;
      }

      // optional string zip = 7;
      case 7: {
        if (tag == 58) {
         parse_zip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zip().data(), this->zip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Geo.zip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_utcoffset;
        break;
      }

      // optional int32 utcoffset = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_utcoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utcoffset_)));
          set_has_utcoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Geo)
  return false;
#undef DO_
}

void Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Geo)
  // optional float lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->lat(), output);
  }

  // optional float lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->lon(), output);
  }

  // required .LocationType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Geo.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->country(), output);
  }

  // optional string province = 5;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Geo.province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->province(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Geo.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->city(), output);
  }

  // optional string zip = 7;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Geo.zip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->zip(), output);
  }

  // optional int32 utcoffset = 8 [default = 0];
  if (has_utcoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->utcoffset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Geo)
}

::google::protobuf::uint8* Geo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Geo)
  // optional float lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->lat(), target);
  }

  // optional float lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->lon(), target);
  }

  // required .LocationType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Geo.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->country(), target);
  }

  // optional string province = 5;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Geo.province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->province(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Geo.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // optional string zip = 7;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Geo.zip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->zip(), target);
  }

  // optional int32 utcoffset = 8 [default = 0];
  if (has_utcoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->utcoffset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Geo)
  return target;
}

int Geo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Geo)
  int total_size = 0;

  // required .LocationType type = 3;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 251u) {
    // optional float lat = 1;
    if (has_lat()) {
      total_size += 1 + 4;
    }

    // optional float lon = 2;
    if (has_lon()) {
      total_size += 1 + 4;
    }

    // optional string country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string province = 5;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string zip = 7;
    if (has_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip());
    }

    // optional int32 utcoffset = 8 [default = 0];
    if (has_utcoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utcoffset());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Geo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Geo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Geo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Geo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Geo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Geo)
    MergeFrom(*source);
  }
}

void Geo::MergeFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Geo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_province()) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (from.has_city()) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (from.has_zip()) {
      set_has_zip();
      zip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zip_);
    }
    if (from.has_utcoffset()) {
      set_utcoffset(from.utcoffset());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Geo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geo::CopyFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void Geo::Swap(Geo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Geo::InternalSwap(Geo* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(type_, other->type_);
  country_.Swap(&other->country_);
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  zip_.Swap(&other->zip_);
  std::swap(utcoffset_, other->utcoffset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Geo_descriptor_;
  metadata.reflection = Geo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Geo

// optional float lat = 1;
bool Geo::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Geo::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
void Geo::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
void Geo::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 float Geo::lat() const {
  // @@protoc_insertion_point(field_get:Geo.lat)
  return lat_;
}
 void Geo::set_lat(float value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:Geo.lat)
}

// optional float lon = 2;
bool Geo::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Geo::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void Geo::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Geo::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 float Geo::lon() const {
  // @@protoc_insertion_point(field_get:Geo.lon)
  return lon_;
}
 void Geo::set_lon(float value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:Geo.lon)
}

// required .LocationType type = 3;
bool Geo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Geo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Geo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Geo::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::LocationType Geo::type() const {
  // @@protoc_insertion_point(field_get:Geo.type)
  return static_cast< ::LocationType >(type_);
}
 void Geo::set_type(::LocationType value) {
  assert(::LocationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Geo.type)
}

// optional string country = 4;
bool Geo::has_country() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Geo::set_has_country() {
  _has_bits_[0] |= 0x00000008u;
}
void Geo::clear_has_country() {
  _has_bits_[0] &= ~0x00000008u;
}
void Geo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& Geo::country() const {
  // @@protoc_insertion_point(field_get:Geo.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Geo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Geo.country)
}
 void Geo::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Geo.country)
}
 void Geo::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Geo.country)
}
 ::std::string* Geo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:Geo.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Geo::release_country() {
  // @@protoc_insertion_point(field_release:Geo.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Geo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:Geo.country)
}

// optional string province = 5;
bool Geo::has_province() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Geo::set_has_province() {
  _has_bits_[0] |= 0x00000010u;
}
void Geo::clear_has_province() {
  _has_bits_[0] &= ~0x00000010u;
}
void Geo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
 const ::std::string& Geo::province() const {
  // @@protoc_insertion_point(field_get:Geo.province)
  return province_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Geo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Geo.province)
}
 void Geo::set_province(const char* value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Geo.province)
}
 void Geo::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Geo.province)
}
 ::std::string* Geo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:Geo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Geo::release_province() {
  // @@protoc_insertion_point(field_release:Geo.province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Geo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:Geo.province)
}

// optional string city = 6;
bool Geo::has_city() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Geo::set_has_city() {
  _has_bits_[0] |= 0x00000020u;
}
void Geo::clear_has_city() {
  _has_bits_[0] &= ~0x00000020u;
}
void Geo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
 const ::std::string& Geo::city() const {
  // @@protoc_insertion_point(field_get:Geo.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Geo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Geo.city)
}
 void Geo::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Geo.city)
}
 void Geo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Geo.city)
}
 ::std::string* Geo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:Geo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Geo::release_city() {
  // @@protoc_insertion_point(field_release:Geo.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Geo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:Geo.city)
}

// optional string zip = 7;
bool Geo::has_zip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Geo::set_has_zip() {
  _has_bits_[0] |= 0x00000040u;
}
void Geo::clear_has_zip() {
  _has_bits_[0] &= ~0x00000040u;
}
void Geo::clear_zip() {
  zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zip();
}
 const ::std::string& Geo::zip() const {
  // @@protoc_insertion_point(field_get:Geo.zip)
  return zip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Geo::set_zip(const ::std::string& value) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Geo.zip)
}
 void Geo::set_zip(const char* value) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Geo.zip)
}
 void Geo::set_zip(const char* value, size_t size) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Geo.zip)
}
 ::std::string* Geo::mutable_zip() {
  set_has_zip();
  // @@protoc_insertion_point(field_mutable:Geo.zip)
  return zip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Geo::release_zip() {
  // @@protoc_insertion_point(field_release:Geo.zip)
  clear_has_zip();
  return zip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Geo::set_allocated_zip(::std::string* zip) {
  if (zip != NULL) {
    set_has_zip();
  } else {
    clear_has_zip();
  }
  zip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip);
  // @@protoc_insertion_point(field_set_allocated:Geo.zip)
}

// optional int32 utcoffset = 8 [default = 0];
bool Geo::has_utcoffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Geo::set_has_utcoffset() {
  _has_bits_[0] |= 0x00000080u;
}
void Geo::clear_has_utcoffset() {
  _has_bits_[0] &= ~0x00000080u;
}
void Geo::clear_utcoffset() {
  utcoffset_ = 0;
  clear_has_utcoffset();
}
 ::google::protobuf::int32 Geo::utcoffset() const {
  // @@protoc_insertion_point(field_get:Geo.utcoffset)
  return utcoffset_;
}
 void Geo::set_utcoffset(::google::protobuf::int32 value) {
  set_has_utcoffset();
  utcoffset_ = value;
  // @@protoc_insertion_point(field_set:Geo.utcoffset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kIdFieldNumber;
const int User::kYobFieldNumber;
const int User::kGenderFieldNumber;
const int User::kKeywordsFieldNumber;
const int User::kGeoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User)
}

void User::InitAsDefaultInstance() {
  geo_ = const_cast< ::Geo*>(&::Geo::default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yob_ = 0;
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:User)
  SharedDtor();
}

void User::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete geo_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:User)
  if (_has_bits_[0 / 32] & 23u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    yob_ = 0;
    if (has_gender()) {
      gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::Geo::Clear();
    }
  }
  keywords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "User.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yob;
        break;
      }

      // optional int32 yob = 3;
      case 3: {
        if (tag == 24) {
         parse_yob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yob_)));
          set_has_yob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gender;
        break;
      }

      // optional string gender = 4;
      case 4: {
        if (tag == 34) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "User.gender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        break;
      }

      // repeated string keywords = 5;
      case 5: {
        if (tag == 42) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords(this->keywords_size() - 1).data(),
            this->keywords(this->keywords_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "User.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        if (input->ExpectTag(50)) goto parse_geo;
        break;
      }

      // optional .Geo geo = 6;
      case 6: {
        if (tag == 50) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "User.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yob(), output);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "User.gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gender(), output);
  }

  // repeated string keywords = 5;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "User.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->keywords(i), output);
  }

  // optional .Geo geo = 6;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->geo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "User.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yob(), target);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "User.gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gender(), target);
  }

  // repeated string keywords = 5;
  for (int i = 0; i < this->keywords_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords(i).data(), this->keywords(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "User.keywords");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->keywords(i), target);
  }

  // optional .Geo geo = 6;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->geo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User)
  return target;
}

int User::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:User)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 22u) {
    // optional int32 yob = 3;
    if (has_yob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yob());
    }

    // optional string gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

    // optional .Geo geo = 6;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geo_);
    }

  }
  // repeated string keywords = 5;
  total_size += 1 * this->keywords_size();
  for (int i = 0; i < this->keywords_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keywords(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const User* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keywords_.MergeFrom(from.keywords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_yob()) {
      set_yob(from.yob());
    }
    if (from.has_gender()) {
      set_has_gender();
      gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
    }
    if (from.has_geo()) {
      mutable_geo()->::Geo::MergeFrom(from.geo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_geo()) {
    if (!this->geo_->IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  id_.Swap(&other->id_);
  std::swap(yob_, other->yob_);
  gender_.Swap(&other->gender_);
  keywords_.UnsafeArenaSwap(&other->keywords_);
  std::swap(geo_, other->geo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// required string id = 1;
bool User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:User.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void User::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.id)
}
 void User::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.id)
}
 void User::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.id)
}
 ::std::string* User::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:User.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:User.id)
}

// optional int32 yob = 3;
bool User::has_yob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void User::set_has_yob() {
  _has_bits_[0] |= 0x00000002u;
}
void User::clear_has_yob() {
  _has_bits_[0] &= ~0x00000002u;
}
void User::clear_yob() {
  yob_ = 0;
  clear_has_yob();
}
 ::google::protobuf::int32 User::yob() const {
  // @@protoc_insertion_point(field_get:User.yob)
  return yob_;
}
 void User::set_yob(::google::protobuf::int32 value) {
  set_has_yob();
  yob_ = value;
  // @@protoc_insertion_point(field_set:User.yob)
}

// optional string gender = 4;
bool User::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void User::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
void User::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
void User::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gender();
}
 const ::std::string& User::gender() const {
  // @@protoc_insertion_point(field_get:User.gender)
  return gender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void User::set_gender(const ::std::string& value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.gender)
}
 void User::set_gender(const char* value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.gender)
}
 void User::set_gender(const char* value, size_t size) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.gender)
}
 ::std::string* User::mutable_gender() {
  set_has_gender();
  // @@protoc_insertion_point(field_mutable:User.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* User::release_gender() {
  // @@protoc_insertion_point(field_release:User.gender)
  clear_has_gender();
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void User::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    set_has_gender();
  } else {
    clear_has_gender();
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:User.gender)
}

// repeated string keywords = 5;
int User::keywords_size() const {
  return keywords_.size();
}
void User::clear_keywords() {
  keywords_.Clear();
}
 const ::std::string& User::keywords(int index) const {
  // @@protoc_insertion_point(field_get:User.keywords)
  return keywords_.Get(index);
}
 ::std::string* User::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:User.keywords)
  return keywords_.Mutable(index);
}
 void User::set_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:User.keywords)
  keywords_.Mutable(index)->assign(value);
}
 void User::set_keywords(int index, const char* value) {
  keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:User.keywords)
}
 void User::set_keywords(int index, const char* value, size_t size) {
  keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:User.keywords)
}
 ::std::string* User::add_keywords() {
  // @@protoc_insertion_point(field_add_mutable:User.keywords)
  return keywords_.Add();
}
 void User::add_keywords(const ::std::string& value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:User.keywords)
}
 void User::add_keywords(const char* value) {
  keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:User.keywords)
}
 void User::add_keywords(const char* value, size_t size) {
  keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:User.keywords)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::keywords() const {
  // @@protoc_insertion_point(field_list:User.keywords)
  return keywords_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:User.keywords)
  return &keywords_;
}

// optional .Geo geo = 6;
bool User::has_geo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void User::set_has_geo() {
  _has_bits_[0] |= 0x00000010u;
}
void User::clear_has_geo() {
  _has_bits_[0] &= ~0x00000010u;
}
void User::clear_geo() {
  if (geo_ != NULL) geo_->::Geo::Clear();
  clear_has_geo();
}
const ::Geo& User::geo() const {
  // @@protoc_insertion_point(field_get:User.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
::Geo* User::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) {
    geo_ = new ::Geo;
  }
  // @@protoc_insertion_point(field_mutable:User.geo)
  return geo_;
}
::Geo* User::release_geo() {
  // @@protoc_insertion_point(field_release:User.geo)
  clear_has_geo();
  ::Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
void User::set_allocated_geo(::Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:User.geo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse::kIdFieldNumber;
const int BidResponse::kSeatbidFieldNumber;
const int BidResponse::kBididFieldNumber;
const int BidResponse::kNbrFieldNumber;
const int BidResponse::kProcessTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse::BidResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nbr_ = 0;
  process_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New(::google::protobuf::Arena* arena) const {
  BidResponse* n = new BidResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BidResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(nbr_, process_time_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bidid()) {
      bidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        break;
      }

      // repeated .SeatBid seatbid = 2;
      case 2: {
        if (tag == 18) {
         parse_seatbid:
          DO_(input->IncrementRecursionDepth());
         parse_loop_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_seatbid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_bidid;
        break;
      }

      // required string bidid = 3;
      case 3: {
        if (tag == 26) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "BidResponse.bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nbr;
        break;
      }

      // optional .NoBidReasonCodes nbr = 4;
      case 4: {
        if (tag == 32) {
         parse_nbr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NoBidReasonCodes_IsValid(value)) {
            set_nbr(static_cast< ::NoBidReasonCodes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_process_time;
        break;
      }

      // optional int32 process_time = 5;
      case 5: {
        if (tag == 40) {
         parse_process_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_time_)));
          set_has_process_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .SeatBid seatbid = 2;
  for (unsigned int i = 0, n = this->seatbid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seatbid(i), output);
  }

  // required string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bidid(), output);
  }

  // optional .NoBidReasonCodes nbr = 4;
  if (has_nbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->nbr(), output);
  }

  // optional int32 process_time = 5;
  if (has_process_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->process_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BidResponse)
}

::google::protobuf::uint8* BidResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .SeatBid seatbid = 2;
  for (unsigned int i = 0, n = this->seatbid_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->seatbid(i), false, target);
  }

  // required string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "BidResponse.bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bidid(), target);
  }

  // optional .NoBidReasonCodes nbr = 4;
  if (has_nbr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->nbr(), target);
  }

  // optional int32 process_time = 5;
  if (has_process_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->process_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BidResponse)
  return target;
}

int BidResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BidResponse)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_bidid()) {
    // required string bidid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bidid());
  }

  return total_size;
}
int BidResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BidResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string bidid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bidid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional .NoBidReasonCodes nbr = 4;
    if (has_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nbr());
    }

    // optional int32 process_time = 5;
    if (has_process_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_time());
    }

  }
  // repeated .SeatBid seatbid = 2;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BidResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BidResponse)
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_bidid()) {
      set_has_bidid();
      bidid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bidid_);
    }
    if (from.has_nbr()) {
      set_nbr(from.nbr());
    }
    if (from.has_process_time()) {
      set_process_time(from.process_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse::InternalSwap(BidResponse* other) {
  id_.Swap(&other->id_);
  seatbid_.UnsafeArenaSwap(&other->seatbid_);
  bidid_.Swap(&other->bidid_);
  std::swap(nbr_, other->nbr_);
  std::swap(process_time_, other->process_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidResponse

// required string id = 1;
bool BidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:BidResponse.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.id)
}
 void BidResponse::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.id)
}
 void BidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.id)
}
 ::std::string* BidResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:BidResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_id() {
  // @@protoc_insertion_point(field_release:BidResponse.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.id)
}

// repeated .SeatBid seatbid = 2;
int BidResponse::seatbid_size() const {
  return seatbid_.size();
}
void BidResponse::clear_seatbid() {
  seatbid_.Clear();
}
const ::SeatBid& BidResponse::seatbid(int index) const {
  // @@protoc_insertion_point(field_get:BidResponse.seatbid)
  return seatbid_.Get(index);
}
::SeatBid* BidResponse::mutable_seatbid(int index) {
  // @@protoc_insertion_point(field_mutable:BidResponse.seatbid)
  return seatbid_.Mutable(index);
}
::SeatBid* BidResponse::add_seatbid() {
  // @@protoc_insertion_point(field_add:BidResponse.seatbid)
  return seatbid_.Add();
}
::google::protobuf::RepeatedPtrField< ::SeatBid >*
BidResponse::mutable_seatbid() {
  // @@protoc_insertion_point(field_mutable_list:BidResponse.seatbid)
  return &seatbid_;
}
const ::google::protobuf::RepeatedPtrField< ::SeatBid >&
BidResponse::seatbid() const {
  // @@protoc_insertion_point(field_list:BidResponse.seatbid)
  return seatbid_;
}

// required string bidid = 3;
bool BidResponse::has_bidid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse::set_has_bidid() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse::clear_has_bidid() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse::clear_bidid() {
  bidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bidid();
}
 const ::std::string& BidResponse::bidid() const {
  // @@protoc_insertion_point(field_get:BidResponse.bidid)
  return bidid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_bidid(const ::std::string& value) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BidResponse.bidid)
}
 void BidResponse::set_bidid(const char* value) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BidResponse.bidid)
}
 void BidResponse::set_bidid(const char* value, size_t size) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BidResponse.bidid)
}
 ::std::string* BidResponse::mutable_bidid() {
  set_has_bidid();
  // @@protoc_insertion_point(field_mutable:BidResponse.bidid)
  return bidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_bidid() {
  // @@protoc_insertion_point(field_release:BidResponse.bidid)
  clear_has_bidid();
  return bidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_bidid(::std::string* bidid) {
  if (bidid != NULL) {
    set_has_bidid();
  } else {
    clear_has_bidid();
  }
  bidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bidid);
  // @@protoc_insertion_point(field_set_allocated:BidResponse.bidid)
}

// optional .NoBidReasonCodes nbr = 4;
bool BidResponse::has_nbr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse::set_has_nbr() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse::clear_has_nbr() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse::clear_nbr() {
  nbr_ = 0;
  clear_has_nbr();
}
 ::NoBidReasonCodes BidResponse::nbr() const {
  // @@protoc_insertion_point(field_get:BidResponse.nbr)
  return static_cast< ::NoBidReasonCodes >(nbr_);
}
 void BidResponse::set_nbr(::NoBidReasonCodes value) {
  assert(::NoBidReasonCodes_IsValid(value));
  set_has_nbr();
  nbr_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.nbr)
}

// optional int32 process_time = 5;
bool BidResponse::has_process_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse::set_has_process_time() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse::clear_has_process_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse::clear_process_time() {
  process_time_ = 0;
  clear_has_process_time();
}
 ::google::protobuf::int32 BidResponse::process_time() const {
  // @@protoc_insertion_point(field_get:BidResponse.process_time)
  return process_time_;
}
 void BidResponse::set_process_time(::google::protobuf::int32 value) {
  set_has_process_time();
  process_time_ = value;
  // @@protoc_insertion_point(field_set:BidResponse.process_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatBid::kBidFieldNumber;
const int SeatBid::kSeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatBid::SeatBid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SeatBid)
}

void SeatBid::InitAsDefaultInstance() {
}

SeatBid::SeatBid(const SeatBid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SeatBid)
}

void SeatBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatBid::~SeatBid() {
  // @@protoc_insertion_point(destructor:SeatBid)
  SharedDtor();
}

void SeatBid::SharedDtor() {
  seat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatBid_descriptor_;
}

const SeatBid& SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

SeatBid* SeatBid::default_instance_ = NULL;

SeatBid* SeatBid::New(::google::protobuf::Arena* arena) const {
  SeatBid* n = new SeatBid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeatBid::Clear() {
// @@protoc_insertion_point(message_clear_start:SeatBid)
  if (has_seat()) {
    seat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Bid bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_bid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_seat;
        break;
      }

      // required string seat = 2;
      case 2: {
        if (tag == 18) {
         parse_seat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seat().data(), this->seat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SeatBid.seat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SeatBid)
  return false;
#undef DO_
}

void SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SeatBid)
  // repeated .Bid bid = 1;
  for (unsigned int i = 0, n = this->bid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  // required string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SeatBid.seat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SeatBid)
}

::google::protobuf::uint8* SeatBid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SeatBid)
  // repeated .Bid bid = 1;
  for (unsigned int i = 0, n = this->bid_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bid(i), false, target);
  }

  // required string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SeatBid.seat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SeatBid)
  return target;
}

int SeatBid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SeatBid)
  int total_size = 0;

  // required string seat = 2;
  if (has_seat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seat());
  }
  // repeated .Bid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SeatBid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeatBid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatBid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SeatBid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SeatBid)
    MergeFrom(*source);
  }
}

void SeatBid::MergeFrom(const SeatBid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SeatBid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bid_.MergeFrom(from.bid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_seat()) {
      set_has_seat();
      seat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seat_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SeatBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatBid::CopyFrom(const SeatBid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SeatBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatBid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;
  return true;
}

void SeatBid::Swap(SeatBid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeatBid::InternalSwap(SeatBid* other) {
  bid_.UnsafeArenaSwap(&other->bid_);
  seat_.Swap(&other->seat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatBid_descriptor_;
  metadata.reflection = SeatBid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeatBid

// repeated .Bid bid = 1;
int SeatBid::bid_size() const {
  return bid_.size();
}
void SeatBid::clear_bid() {
  bid_.Clear();
}
const ::Bid& SeatBid::bid(int index) const {
  // @@protoc_insertion_point(field_get:SeatBid.bid)
  return bid_.Get(index);
}
::Bid* SeatBid::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:SeatBid.bid)
  return bid_.Mutable(index);
}
::Bid* SeatBid::add_bid() {
  // @@protoc_insertion_point(field_add:SeatBid.bid)
  return bid_.Add();
}
::google::protobuf::RepeatedPtrField< ::Bid >*
SeatBid::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:SeatBid.bid)
  return &bid_;
}
const ::google::protobuf::RepeatedPtrField< ::Bid >&
SeatBid::bid() const {
  // @@protoc_insertion_point(field_list:SeatBid.bid)
  return bid_;
}

// required string seat = 2;
bool SeatBid::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SeatBid::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
void SeatBid::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
void SeatBid::clear_seat() {
  seat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seat();
}
 const ::std::string& SeatBid::seat() const {
  // @@protoc_insertion_point(field_get:SeatBid.seat)
  return seat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeatBid::set_seat(const ::std::string& value) {
  set_has_seat();
  seat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SeatBid.seat)
}
 void SeatBid::set_seat(const char* value) {
  set_has_seat();
  seat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SeatBid.seat)
}
 void SeatBid::set_seat(const char* value, size_t size) {
  set_has_seat();
  seat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SeatBid.seat)
}
 ::std::string* SeatBid::mutable_seat() {
  set_has_seat();
  // @@protoc_insertion_point(field_mutable:SeatBid.seat)
  return seat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeatBid::release_seat() {
  // @@protoc_insertion_point(field_release:SeatBid.seat)
  clear_has_seat();
  return seat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeatBid::set_allocated_seat(::std::string* seat) {
  if (seat != NULL) {
    set_has_seat();
  } else {
    clear_has_seat();
  }
  seat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seat);
  // @@protoc_insertion_point(field_set_allocated:SeatBid.seat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bid::kIdFieldNumber;
const int Bid::kImpidFieldNumber;
const int Bid::kPriceFieldNumber;
const int Bid::kAdmFieldNumber;
const int Bid::kAdomainFieldNumber;
const int Bid::kBundleFieldNumber;
const int Bid::kIurlFieldNumber;
const int Bid::kWFieldNumber;
const int Bid::kHFieldNumber;
const int Bid::kAdidFieldNumber;
const int Bid::kNurlFieldNumber;
const int Bid::kCidFieldNumber;
const int Bid::kCridFieldNumber;
const int Bid::kCatFieldNumber;
const int Bid::kAttrFieldNumber;
const int Bid::kCurlFieldNumber;
const int Bid::kTypeFieldNumber;
const int Bid::kExtiurlFieldNumber;
const int Bid::kActionFieldNumber;
const int Bid::kAdmtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bid::Bid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Bid)
}

void Bid::InitAsDefaultInstance() {
}

Bid::Bid(const Bid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Bid)
}

void Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  adm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adomain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  adid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cat_ = 801;
  attr_ = 706;
  curl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  admtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bid::~Bid() {
  // @@protoc_insertion_point(destructor:Bid)
  SharedDtor();
}

void Bid::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adomain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bid_descriptor_;
}

const Bid& Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guangyin_5fbidding_2eproto();
  return *default_instance_;
}

Bid* Bid::default_instance_ = NULL;

Bid* Bid::New(::google::protobuf::Arena* arena) const {
  Bid* n = new Bid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bid::Clear() {
// @@protoc_insertion_point(message_clear_start:Bid)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Bid, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Bid*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(price_, w_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_impid()) {
      impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_adm()) {
      adm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_adomain()) {
      adomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bundle()) {
      bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_iurl()) {
      iurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    h_ = 0;
    if (has_adid()) {
      adid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nurl()) {
      nurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cid()) {
      cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_crid()) {
      crid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cat_ = 801;
    attr_ = 706;
    if (has_curl()) {
      curl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 851968u) {
    type_ = 1;
    if (has_action()) {
      action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    admtype_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  extiurl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impid;
        break;
      }

      // required string impid = 2;
      case 2: {
        if (tag == 18) {
         parse_impid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_price;
        break;
      }

      // required float price = 3;
      case 3: {
        if (tag == 29) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adm;
        break;
      }

      // required string adm = 4;
      case 4: {
        if (tag == 34) {
         parse_adm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adm().data(), this->adm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.adm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_adomain;
        break;
      }

      // required string adomain = 5;
      case 5: {
        if (tag == 42) {
         parse_adomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adomain().data(), this->adomain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.adomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bundle;
        break;
      }

      // optional string bundle = 6;
      case 6: {
        if (tag == 50) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_iurl;
        break;
      }

      // required string iurl = 7;
      case 7: {
        if (tag == 58) {
         parse_iurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iurl().data(), this->iurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.iurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_w;
        break;
      }

      // required float w = 8;
      case 8: {
        if (tag == 69) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_h;
        break;
      }

      // required float h = 9;
      case 9: {
        if (tag == 77) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_adid;
        break;
      }

      // optional string adid = 10;
      case 10: {
        if (tag == 82) {
         parse_adid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adid().data(), this->adid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.adid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_nurl;
        break;
      }

      // optional string nurl = 11;
      case 11: {
        if (tag == 90) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.nurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cid;
        break;
      }

      // optional string cid = 12;
      case 12: {
        if (tag == 98) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.cid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_crid;
        break;
      }

      // optional string crid = 13;
      case 13: {
        if (tag == 106) {
         parse_crid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crid().data(), this->crid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.crid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_cat;
        break;
      }

      // optional .ContentCategory cat = 14;
      case 14: {
        if (tag == 112) {
         parse_cat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ContentCategory_IsValid(value)) {
            set_cat(static_cast< ::ContentCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_attr;
        break;
      }

      // optional .CreativeAttribute attr = 15;
      case 15: {
        if (tag == 120) {
         parse_attr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CreativeAttribute_IsValid(value)) {
            set_attr(static_cast< ::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_curl;
        break;
      }

      // required string curl = 16;
      case 16: {
        if (tag == 130) {
         parse_curl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curl().data(), this->curl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.curl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_type;
        break;
      }

      // required .AdType type = 17;
      case 17: {
        if (tag == 136) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdType_IsValid(value)) {
            set_type(static_cast< ::AdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_extiurl;
        break;
      }

      // repeated string extiurl = 18;
      case 18: {
        if (tag == 146) {
         parse_extiurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_extiurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extiurl(this->extiurl_size() - 1).data(),
            this->extiurl(this->extiurl_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.extiurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_extiurl;
        if (input->ExpectTag(154)) goto parse_action;
        break;
      }

      // optional string action = 19;
      case 19: {
        if (tag == 154) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Bid.action");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_admtype;
        break;
      }

      // required .AdmType admtype = 20;
      case 20: {
        if (tag == 160) {
         parse_admtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AdmType_IsValid(value)) {
            set_admtype(static_cast< ::AdmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Bid)
  return false;
#undef DO_
}

void Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->impid(), output);
  }

  // required float price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }

  // required string adm = 4;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.adm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->adm(), output);
  }

  // required string adomain = 5;
  if (has_adomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adomain().data(), this->adomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.adomain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->adomain(), output);
  }

  // optional string bundle = 6;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bundle(), output);
  }

  // required string iurl = 7;
  if (has_iurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iurl().data(), this->iurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.iurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->iurl(), output);
  }

  // required float w = 8;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->w(), output);
  }

  // required float h = 9;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->h(), output);
  }

  // optional string adid = 10;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.adid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->adid(), output);
  }

  // optional string nurl = 11;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.nurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->nurl(), output);
  }

  // optional string cid = 12;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->cid(), output);
  }

  // optional string crid = 13;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.crid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->crid(), output);
  }

  // optional .ContentCategory cat = 14;
  if (has_cat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->cat(), output);
  }

  // optional .CreativeAttribute attr = 15;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->attr(), output);
  }

  // required string curl = 16;
  if (has_curl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curl().data(), this->curl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.curl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->curl(), output);
  }

  // required .AdType type = 17;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->type(), output);
  }

  // repeated string extiurl = 18;
  for (int i = 0; i < this->extiurl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extiurl(i).data(), this->extiurl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.extiurl");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->extiurl(i), output);
  }

  // optional string action = 19;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->action(), output);
  }

  // required .AdmType admtype = 20;
  if (has_admtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->admtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Bid)
}

::google::protobuf::uint8* Bid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impid(), target);
  }

  // required float price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }

  // required string adm = 4;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.adm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->adm(), target);
  }

  // required string adomain = 5;
  if (has_adomain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adomain().data(), this->adomain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.adomain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->adomain(), target);
  }

  // optional string bundle = 6;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bundle(), target);
  }

  // required string iurl = 7;
  if (has_iurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iurl().data(), this->iurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.iurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->iurl(), target);
  }

  // required float w = 8;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->w(), target);
  }

  // required float h = 9;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->h(), target);
  }

  // optional string adid = 10;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.adid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->adid(), target);
  }

  // optional string nurl = 11;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.nurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->nurl(), target);
  }

  // optional string cid = 12;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cid(), target);
  }

  // optional string crid = 13;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.crid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->crid(), target);
  }

  // optional .ContentCategory cat = 14;
  if (has_cat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->cat(), target);
  }

  // optional .CreativeAttribute attr = 15;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->attr(), target);
  }

  // required string curl = 16;
  if (has_curl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curl().data(), this->curl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.curl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->curl(), target);
  }

  // required .AdType type = 17;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->type(), target);
  }

  // repeated string extiurl = 18;
  for (int i = 0; i < this->extiurl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extiurl(i).data(), this->extiurl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.extiurl");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->extiurl(i), target);
  }

  // optional string action = 19;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Bid.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->action(), target);
  }

  // required .AdmType admtype = 20;
  if (has_admtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->admtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bid)
  return target;
}

int Bid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Bid)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_impid()) {
    // required string impid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->impid());
  }

  if (has_price()) {
    // required float price = 3;
    total_size += 1 + 4;
  }

  if (has_adm()) {
    // required string adm = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adm());
  }

  if (has_adomain()) {
    // required string adomain = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adomain());
  }

  if (has_iurl()) {
    // required string iurl = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iurl());
  }

  if (has_w()) {
    // required float w = 8;
    total_size += 1 + 4;
  }

  if (has_h()) {
    // required float h = 9;
    total_size += 1 + 4;
  }

  if (has_curl()) {
    // required string curl = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curl());
  }

  if (has_type()) {
    // required .AdType type = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_admtype()) {
    // required .AdmType admtype = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->admtype());
  }

  return total_size;
}
int Bid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Bid)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000981df) ^ 0x000981df) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string impid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->impid());

    // required float price = 3;
    total_size += 1 + 4;

    // required string adm = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adm());

    // required string adomain = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adomain());

    // required string iurl = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iurl());

    // required float w = 8;
    total_size += 1 + 4;

    // required float h = 9;
    total_size += 1 + 4;

    // required string curl = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curl());

    // required .AdType type = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required .AdmType admtype = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->admtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string bundle = 6;
  if (has_bundle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bundle());
  }

  if (_has_bits_[9 / 32] & 32256u) {
    // optional string adid = 10;
    if (has_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adid());
    }

    // optional string nurl = 11;
    if (has_nurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nurl());
    }

    // optional string cid = 12;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string crid = 13;
    if (has_crid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crid());
    }

    // optional .ContentCategory cat = 14;
    if (has_cat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cat());
    }

    // optional .CreativeAttribute attr = 15;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attr());
    }

  }
  // optional string action = 19;
  if (has_action()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }

  // repeated string extiurl = 18;
  total_size += 2 * this->extiurl_size();
  for (int i = 0; i < this->extiurl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->extiurl(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Bid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Bid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Bid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Bid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Bid)
    MergeFrom(*source);
  }
}

void Bid::MergeFrom(const Bid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Bid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  extiurl_.MergeFrom(from.extiurl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_impid()) {
      set_has_impid();
      impid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.impid_);
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_adm()) {
      set_has_adm();
      adm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adm_);
    }
    if (from.has_adomain()) {
      set_has_adomain();
      adomain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adomain_);
    }
    if (from.has_bundle()) {
      set_has_bundle();
      bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_);
    }
    if (from.has_iurl()) {
      set_has_iurl();
      iurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iurl_);
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_adid()) {
      set_has_adid();
      adid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adid_);
    }
    if (from.has_nurl()) {
      set_has_nurl();
      nurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nurl_);
    }
    if (from.has_cid()) {
      set_has_cid();
      cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
    }
    if (from.has_crid()) {
      set_has_crid();
      crid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crid_);
    }
    if (from.has_cat()) {
      set_cat(from.cat());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
    if (from.has_curl()) {
      set_has_curl();
      curl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curl_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_action()) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (from.has_admtype()) {
      set_admtype(from.admtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Bid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Bid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bid::CopyFrom(const Bid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Bid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x000981df) != 0x000981df) return false;

  return true;
}

void Bid::Swap(Bid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bid::InternalSwap(Bid* other) {
  id_.Swap(&other->id_);
  impid_.Swap(&other->impid_);
  std::swap(price_, other->price_);
  adm_.Swap(&other->adm_);
  adomain_.Swap(&other->adomain_);
  bundle_.Swap(&other->bundle_);
  iurl_.Swap(&other->iurl_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  adid_.Swap(&other->adid_);
  nurl_.Swap(&other->nurl_);
  cid_.Swap(&other->cid_);
  crid_.Swap(&other->crid_);
  std::swap(cat_, other->cat_);
  std::swap(attr_, other->attr_);
  curl_.Swap(&other->curl_);
  std::swap(type_, other->type_);
  extiurl_.UnsafeArenaSwap(&other->extiurl_);
  action_.Swap(&other->action_);
  std::swap(admtype_, other->admtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bid_descriptor_;
  metadata.reflection = Bid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bid

// required string id = 1;
bool Bid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Bid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Bid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Bid::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Bid::id() const {
  // @@protoc_insertion_point(field_get:Bid.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.id)
}
 void Bid::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.id)
}
 void Bid::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.id)
}
 ::std::string* Bid::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Bid.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_id() {
  // @@protoc_insertion_point(field_release:Bid.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Bid.id)
}

// required string impid = 2;
bool Bid::has_impid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Bid::set_has_impid() {
  _has_bits_[0] |= 0x00000002u;
}
void Bid::clear_has_impid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Bid::clear_impid() {
  impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_impid();
}
 const ::std::string& Bid::impid() const {
  // @@protoc_insertion_point(field_get:Bid.impid)
  return impid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_impid(const ::std::string& value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.impid)
}
 void Bid::set_impid(const char* value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.impid)
}
 void Bid::set_impid(const char* value, size_t size) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.impid)
}
 ::std::string* Bid::mutable_impid() {
  set_has_impid();
  // @@protoc_insertion_point(field_mutable:Bid.impid)
  return impid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_impid() {
  // @@protoc_insertion_point(field_release:Bid.impid)
  clear_has_impid();
  return impid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_impid(::std::string* impid) {
  if (impid != NULL) {
    set_has_impid();
  } else {
    clear_has_impid();
  }
  impid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impid);
  // @@protoc_insertion_point(field_set_allocated:Bid.impid)
}

// required float price = 3;
bool Bid::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Bid::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
void Bid::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void Bid::clear_price() {
  price_ = 0;
  clear_has_price();
}
 float Bid::price() const {
  // @@protoc_insertion_point(field_get:Bid.price)
  return price_;
}
 void Bid::set_price(float value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Bid.price)
}

// required string adm = 4;
bool Bid::has_adm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Bid::set_has_adm() {
  _has_bits_[0] |= 0x00000008u;
}
void Bid::clear_has_adm() {
  _has_bits_[0] &= ~0x00000008u;
}
void Bid::clear_adm() {
  adm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adm();
}
 const ::std::string& Bid::adm() const {
  // @@protoc_insertion_point(field_get:Bid.adm)
  return adm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_adm(const ::std::string& value) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.adm)
}
 void Bid::set_adm(const char* value) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.adm)
}
 void Bid::set_adm(const char* value, size_t size) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.adm)
}
 ::std::string* Bid::mutable_adm() {
  set_has_adm();
  // @@protoc_insertion_point(field_mutable:Bid.adm)
  return adm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_adm() {
  // @@protoc_insertion_point(field_release:Bid.adm)
  clear_has_adm();
  return adm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_adm(::std::string* adm) {
  if (adm != NULL) {
    set_has_adm();
  } else {
    clear_has_adm();
  }
  adm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adm);
  // @@protoc_insertion_point(field_set_allocated:Bid.adm)
}

// required string adomain = 5;
bool Bid::has_adomain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Bid::set_has_adomain() {
  _has_bits_[0] |= 0x00000010u;
}
void Bid::clear_has_adomain() {
  _has_bits_[0] &= ~0x00000010u;
}
void Bid::clear_adomain() {
  adomain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adomain();
}
 const ::std::string& Bid::adomain() const {
  // @@protoc_insertion_point(field_get:Bid.adomain)
  return adomain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_adomain(const ::std::string& value) {
  set_has_adomain();
  adomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.adomain)
}
 void Bid::set_adomain(const char* value) {
  set_has_adomain();
  adomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.adomain)
}
 void Bid::set_adomain(const char* value, size_t size) {
  set_has_adomain();
  adomain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.adomain)
}
 ::std::string* Bid::mutable_adomain() {
  set_has_adomain();
  // @@protoc_insertion_point(field_mutable:Bid.adomain)
  return adomain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_adomain() {
  // @@protoc_insertion_point(field_release:Bid.adomain)
  clear_has_adomain();
  return adomain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_adomain(::std::string* adomain) {
  if (adomain != NULL) {
    set_has_adomain();
  } else {
    clear_has_adomain();
  }
  adomain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adomain);
  // @@protoc_insertion_point(field_set_allocated:Bid.adomain)
}

// optional string bundle = 6;
bool Bid::has_bundle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Bid::set_has_bundle() {
  _has_bits_[0] |= 0x00000020u;
}
void Bid::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000020u;
}
void Bid::clear_bundle() {
  bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundle();
}
 const ::std::string& Bid::bundle() const {
  // @@protoc_insertion_point(field_get:Bid.bundle)
  return bundle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_bundle(const ::std::string& value) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.bundle)
}
 void Bid::set_bundle(const char* value) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.bundle)
}
 void Bid::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.bundle)
}
 ::std::string* Bid::mutable_bundle() {
  set_has_bundle();
  // @@protoc_insertion_point(field_mutable:Bid.bundle)
  return bundle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_bundle() {
  // @@protoc_insertion_point(field_release:Bid.bundle)
  clear_has_bundle();
  return bundle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_bundle(::std::string* bundle) {
  if (bundle != NULL) {
    set_has_bundle();
  } else {
    clear_has_bundle();
  }
  bundle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle);
  // @@protoc_insertion_point(field_set_allocated:Bid.bundle)
}

// required string iurl = 7;
bool Bid::has_iurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Bid::set_has_iurl() {
  _has_bits_[0] |= 0x00000040u;
}
void Bid::clear_has_iurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void Bid::clear_iurl() {
  iurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iurl();
}
 const ::std::string& Bid::iurl() const {
  // @@protoc_insertion_point(field_get:Bid.iurl)
  return iurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_iurl(const ::std::string& value) {
  set_has_iurl();
  iurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.iurl)
}
 void Bid::set_iurl(const char* value) {
  set_has_iurl();
  iurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.iurl)
}
 void Bid::set_iurl(const char* value, size_t size) {
  set_has_iurl();
  iurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.iurl)
}
 ::std::string* Bid::mutable_iurl() {
  set_has_iurl();
  // @@protoc_insertion_point(field_mutable:Bid.iurl)
  return iurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_iurl() {
  // @@protoc_insertion_point(field_release:Bid.iurl)
  clear_has_iurl();
  return iurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_iurl(::std::string* iurl) {
  if (iurl != NULL) {
    set_has_iurl();
  } else {
    clear_has_iurl();
  }
  iurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iurl);
  // @@protoc_insertion_point(field_set_allocated:Bid.iurl)
}

// required float w = 8;
bool Bid::has_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Bid::set_has_w() {
  _has_bits_[0] |= 0x00000080u;
}
void Bid::clear_has_w() {
  _has_bits_[0] &= ~0x00000080u;
}
void Bid::clear_w() {
  w_ = 0;
  clear_has_w();
}
 float Bid::w() const {
  // @@protoc_insertion_point(field_get:Bid.w)
  return w_;
}
 void Bid::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:Bid.w)
}

// required float h = 9;
bool Bid::has_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Bid::set_has_h() {
  _has_bits_[0] |= 0x00000100u;
}
void Bid::clear_has_h() {
  _has_bits_[0] &= ~0x00000100u;
}
void Bid::clear_h() {
  h_ = 0;
  clear_has_h();
}
 float Bid::h() const {
  // @@protoc_insertion_point(field_get:Bid.h)
  return h_;
}
 void Bid::set_h(float value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:Bid.h)
}

// optional string adid = 10;
bool Bid::has_adid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Bid::set_has_adid() {
  _has_bits_[0] |= 0x00000200u;
}
void Bid::clear_has_adid() {
  _has_bits_[0] &= ~0x00000200u;
}
void Bid::clear_adid() {
  adid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adid();
}
 const ::std::string& Bid::adid() const {
  // @@protoc_insertion_point(field_get:Bid.adid)
  return adid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_adid(const ::std::string& value) {
  set_has_adid();
  adid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.adid)
}
 void Bid::set_adid(const char* value) {
  set_has_adid();
  adid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.adid)
}
 void Bid::set_adid(const char* value, size_t size) {
  set_has_adid();
  adid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.adid)
}
 ::std::string* Bid::mutable_adid() {
  set_has_adid();
  // @@protoc_insertion_point(field_mutable:Bid.adid)
  return adid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_adid() {
  // @@protoc_insertion_point(field_release:Bid.adid)
  clear_has_adid();
  return adid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_adid(::std::string* adid) {
  if (adid != NULL) {
    set_has_adid();
  } else {
    clear_has_adid();
  }
  adid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adid);
  // @@protoc_insertion_point(field_set_allocated:Bid.adid)
}

// optional string nurl = 11;
bool Bid::has_nurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Bid::set_has_nurl() {
  _has_bits_[0] |= 0x00000400u;
}
void Bid::clear_has_nurl() {
  _has_bits_[0] &= ~0x00000400u;
}
void Bid::clear_nurl() {
  nurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nurl();
}
 const ::std::string& Bid::nurl() const {
  // @@protoc_insertion_point(field_get:Bid.nurl)
  return nurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_nurl(const ::std::string& value) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.nurl)
}
 void Bid::set_nurl(const char* value) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.nurl)
}
 void Bid::set_nurl(const char* value, size_t size) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.nurl)
}
 ::std::string* Bid::mutable_nurl() {
  set_has_nurl();
  // @@protoc_insertion_point(field_mutable:Bid.nurl)
  return nurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_nurl() {
  // @@protoc_insertion_point(field_release:Bid.nurl)
  clear_has_nurl();
  return nurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_nurl(::std::string* nurl) {
  if (nurl != NULL) {
    set_has_nurl();
  } else {
    clear_has_nurl();
  }
  nurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nurl);
  // @@protoc_insertion_point(field_set_allocated:Bid.nurl)
}

// optional string cid = 12;
bool Bid::has_cid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Bid::set_has_cid() {
  _has_bits_[0] |= 0x00000800u;
}
void Bid::clear_has_cid() {
  _has_bits_[0] &= ~0x00000800u;
}
void Bid::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cid();
}
 const ::std::string& Bid::cid() const {
  // @@protoc_insertion_point(field_get:Bid.cid)
  return cid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_cid(const ::std::string& value) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.cid)
}
 void Bid::set_cid(const char* value) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.cid)
}
 void Bid::set_cid(const char* value, size_t size) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.cid)
}
 ::std::string* Bid::mutable_cid() {
  set_has_cid();
  // @@protoc_insertion_point(field_mutable:Bid.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_cid() {
  // @@protoc_insertion_point(field_release:Bid.cid)
  clear_has_cid();
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    set_has_cid();
  } else {
    clear_has_cid();
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:Bid.cid)
}

// optional string crid = 13;
bool Bid::has_crid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Bid::set_has_crid() {
  _has_bits_[0] |= 0x00001000u;
}
void Bid::clear_has_crid() {
  _has_bits_[0] &= ~0x00001000u;
}
void Bid::clear_crid() {
  crid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_crid();
}
 const ::std::string& Bid::crid() const {
  // @@protoc_insertion_point(field_get:Bid.crid)
  return crid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_crid(const ::std::string& value) {
  set_has_crid();
  crid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.crid)
}
 void Bid::set_crid(const char* value) {
  set_has_crid();
  crid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.crid)
}
 void Bid::set_crid(const char* value, size_t size) {
  set_has_crid();
  crid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.crid)
}
 ::std::string* Bid::mutable_crid() {
  set_has_crid();
  // @@protoc_insertion_point(field_mutable:Bid.crid)
  return crid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_crid() {
  // @@protoc_insertion_point(field_release:Bid.crid)
  clear_has_crid();
  return crid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_crid(::std::string* crid) {
  if (crid != NULL) {
    set_has_crid();
  } else {
    clear_has_crid();
  }
  crid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crid);
  // @@protoc_insertion_point(field_set_allocated:Bid.crid)
}

// optional .ContentCategory cat = 14;
bool Bid::has_cat() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Bid::set_has_cat() {
  _has_bits_[0] |= 0x00002000u;
}
void Bid::clear_has_cat() {
  _has_bits_[0] &= ~0x00002000u;
}
void Bid::clear_cat() {
  cat_ = 801;
  clear_has_cat();
}
 ::ContentCategory Bid::cat() const {
  // @@protoc_insertion_point(field_get:Bid.cat)
  return static_cast< ::ContentCategory >(cat_);
}
 void Bid::set_cat(::ContentCategory value) {
  assert(::ContentCategory_IsValid(value));
  set_has_cat();
  cat_ = value;
  // @@protoc_insertion_point(field_set:Bid.cat)
}

// optional .CreativeAttribute attr = 15;
bool Bid::has_attr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Bid::set_has_attr() {
  _has_bits_[0] |= 0x00004000u;
}
void Bid::clear_has_attr() {
  _has_bits_[0] &= ~0x00004000u;
}
void Bid::clear_attr() {
  attr_ = 706;
  clear_has_attr();
}
 ::CreativeAttribute Bid::attr() const {
  // @@protoc_insertion_point(field_get:Bid.attr)
  return static_cast< ::CreativeAttribute >(attr_);
}
 void Bid::set_attr(::CreativeAttribute value) {
  assert(::CreativeAttribute_IsValid(value));
  set_has_attr();
  attr_ = value;
  // @@protoc_insertion_point(field_set:Bid.attr)
}

// required string curl = 16;
bool Bid::has_curl() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Bid::set_has_curl() {
  _has_bits_[0] |= 0x00008000u;
}
void Bid::clear_has_curl() {
  _has_bits_[0] &= ~0x00008000u;
}
void Bid::clear_curl() {
  curl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_curl();
}
 const ::std::string& Bid::curl() const {
  // @@protoc_insertion_point(field_get:Bid.curl)
  return curl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_curl(const ::std::string& value) {
  set_has_curl();
  curl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.curl)
}
 void Bid::set_curl(const char* value) {
  set_has_curl();
  curl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.curl)
}
 void Bid::set_curl(const char* value, size_t size) {
  set_has_curl();
  curl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.curl)
}
 ::std::string* Bid::mutable_curl() {
  set_has_curl();
  // @@protoc_insertion_point(field_mutable:Bid.curl)
  return curl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_curl() {
  // @@protoc_insertion_point(field_release:Bid.curl)
  clear_has_curl();
  return curl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_curl(::std::string* curl) {
  if (curl != NULL) {
    set_has_curl();
  } else {
    clear_has_curl();
  }
  curl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curl);
  // @@protoc_insertion_point(field_set_allocated:Bid.curl)
}

// required .AdType type = 17;
bool Bid::has_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Bid::set_has_type() {
  _has_bits_[0] |= 0x00010000u;
}
void Bid::clear_has_type() {
  _has_bits_[0] &= ~0x00010000u;
}
void Bid::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::AdType Bid::type() const {
  // @@protoc_insertion_point(field_get:Bid.type)
  return static_cast< ::AdType >(type_);
}
 void Bid::set_type(::AdType value) {
  assert(::AdType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Bid.type)
}

// repeated string extiurl = 18;
int Bid::extiurl_size() const {
  return extiurl_.size();
}
void Bid::clear_extiurl() {
  extiurl_.Clear();
}
 const ::std::string& Bid::extiurl(int index) const {
  // @@protoc_insertion_point(field_get:Bid.extiurl)
  return extiurl_.Get(index);
}
 ::std::string* Bid::mutable_extiurl(int index) {
  // @@protoc_insertion_point(field_mutable:Bid.extiurl)
  return extiurl_.Mutable(index);
}
 void Bid::set_extiurl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Bid.extiurl)
  extiurl_.Mutable(index)->assign(value);
}
 void Bid::set_extiurl(int index, const char* value) {
  extiurl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Bid.extiurl)
}
 void Bid::set_extiurl(int index, const char* value, size_t size) {
  extiurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Bid.extiurl)
}
 ::std::string* Bid::add_extiurl() {
  // @@protoc_insertion_point(field_add_mutable:Bid.extiurl)
  return extiurl_.Add();
}
 void Bid::add_extiurl(const ::std::string& value) {
  extiurl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Bid.extiurl)
}
 void Bid::add_extiurl(const char* value) {
  extiurl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Bid.extiurl)
}
 void Bid::add_extiurl(const char* value, size_t size) {
  extiurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Bid.extiurl)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Bid::extiurl() const {
  // @@protoc_insertion_point(field_list:Bid.extiurl)
  return extiurl_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Bid::mutable_extiurl() {
  // @@protoc_insertion_point(field_mutable_list:Bid.extiurl)
  return &extiurl_;
}

// optional string action = 19;
bool Bid::has_action() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Bid::set_has_action() {
  _has_bits_[0] |= 0x00040000u;
}
void Bid::clear_has_action() {
  _has_bits_[0] &= ~0x00040000u;
}
void Bid::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}
 const ::std::string& Bid::action() const {
  // @@protoc_insertion_point(field_get:Bid.action)
  return action_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_action(const ::std::string& value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Bid.action)
}
 void Bid::set_action(const char* value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Bid.action)
}
 void Bid::set_action(const char* value, size_t size) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Bid.action)
}
 ::std::string* Bid::mutable_action() {
  set_has_action();
  // @@protoc_insertion_point(field_mutable:Bid.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bid::release_action() {
  // @@protoc_insertion_point(field_release:Bid.action)
  clear_has_action();
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bid::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    set_has_action();
  } else {
    clear_has_action();
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:Bid.action)
}

// required .AdmType admtype = 20;
bool Bid::has_admtype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Bid::set_has_admtype() {
  _has_bits_[0] |= 0x00080000u;
}
void Bid::clear_has_admtype() {
  _has_bits_[0] &= ~0x00080000u;
}
void Bid::clear_admtype() {
  admtype_ = 1;
  clear_has_admtype();
}
 ::AdmType Bid::admtype() const {
  // @@protoc_insertion_point(field_get:Bid.admtype)
  return static_cast< ::AdmType >(admtype_);
}
 void Bid::set_admtype(::AdmType value) {
  assert(::AdmType_IsValid(value));
  set_has_admtype();
  admtype_ = value;
  // @@protoc_insertion_point(field_set:Bid.admtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
