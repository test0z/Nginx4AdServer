// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtty_bidding.proto

#ifndef PROTOBUF_mtty_5fbidding_2eproto__INCLUDED
#define PROTOBUF_mtty_5fbidding_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace dsp {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mtty_5fbidding_2eproto();
void protobuf_AssignDesc_mtty_5fbidding_2eproto();
void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

class BidRequest;
class BidRequest_App;
class BidRequest_Device;
class BidRequest_Imp;
class BidRequest_Imp_Banner;
class BidRequest_Imp_Native;
class BidRequest_Imp_Native_Asset;
class BidRequest_Imp_Native_Asset_Img;
class BidRequest_Imp_Native_Asset_Title;
class BidRequest_Imp_Pmp;
class BidRequest_Imp_Pmp_Deal;
class BidRequest_Site;
class BidRequest_User;
class BidResponse;
class BidResponse_SeatBid;
class BidResponse_SeatBid_Bid;
class BidResponse_SeatBid_Bid_Native;
class BidResponse_SeatBid_Bid_Native_Asset;

enum BidRequest_Device_OSType {
  BidRequest_Device_OSType_OS_WINDOWS = 1,
  BidRequest_Device_OSType_OS_MAC = 2,
  BidRequest_Device_OSType_OS_LINUX = 3,
  BidRequest_Device_OSType_OS_ANDROID = 4,
  BidRequest_Device_OSType_OS_IOS = 5,
  BidRequest_Device_OSType_OS_UNKNOWN = 6
};
bool BidRequest_Device_OSType_IsValid(int value);
const BidRequest_Device_OSType BidRequest_Device_OSType_OSType_MIN = BidRequest_Device_OSType_OS_WINDOWS;
const BidRequest_Device_OSType BidRequest_Device_OSType_OSType_MAX = BidRequest_Device_OSType_OS_UNKNOWN;
const int BidRequest_Device_OSType_OSType_ARRAYSIZE = BidRequest_Device_OSType_OSType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Device_OSType_descriptor();
inline const ::std::string& BidRequest_Device_OSType_Name(BidRequest_Device_OSType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Device_OSType_descriptor(), value);
}
inline bool BidRequest_Device_OSType_Parse(
    const ::std::string& name, BidRequest_Device_OSType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Device_OSType>(
    BidRequest_Device_OSType_descriptor(), name, value);
}
enum BidRequest_Device_DeviceType {
  BidRequest_Device_DeviceType_DEVICE_IPHONE = 1,
  BidRequest_Device_DeviceType_DEVICE_ANDOIDPHONE = 2,
  BidRequest_Device_DeviceType_DEVICE_IPAD = 3,
  BidRequest_Device_DeviceType_DEVICE_WINDOWSPHONE = 4,
  BidRequest_Device_DeviceType_DEVICE_ANDROIDPAD = 5,
  BidRequest_Device_DeviceType_DEVICE_TV = 6,
  BidRequest_Device_DeviceType_DEVICE_UNKNOWN = 7
};
bool BidRequest_Device_DeviceType_IsValid(int value);
const BidRequest_Device_DeviceType BidRequest_Device_DeviceType_DeviceType_MIN = BidRequest_Device_DeviceType_DEVICE_IPHONE;
const BidRequest_Device_DeviceType BidRequest_Device_DeviceType_DeviceType_MAX = BidRequest_Device_DeviceType_DEVICE_UNKNOWN;
const int BidRequest_Device_DeviceType_DeviceType_ARRAYSIZE = BidRequest_Device_DeviceType_DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor();
inline const ::std::string& BidRequest_Device_DeviceType_Name(BidRequest_Device_DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Device_DeviceType_descriptor(), value);
}
inline bool BidRequest_Device_DeviceType_Parse(
    const ::std::string& name, BidRequest_Device_DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Device_DeviceType>(
    BidRequest_Device_DeviceType_descriptor(), name, value);
}
// ===================================================================

class BidRequest_Imp_Banner : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Imp.Banner) */ {
 public:
  BidRequest_Imp_Banner();
  virtual ~BidRequest_Imp_Banner();

  BidRequest_Imp_Banner(const BidRequest_Imp_Banner& from);

  inline BidRequest_Imp_Banner& operator=(const BidRequest_Imp_Banner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Banner& default_instance();

  void Swap(BidRequest_Imp_Banner* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Imp_Banner* New() const { return New(NULL); }

  BidRequest_Imp_Banner* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Banner& from);
  void MergeFrom(const BidRequest_Imp_Banner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Imp_Banner* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // repeated string mimes = 3;
  int mimes_size() const;
  void clear_mimes();
  static const int kMimesFieldNumber = 3;
  const ::std::string& mimes(int index) const;
  ::std::string* mutable_mimes(int index);
  void set_mimes(int index, const ::std::string& value);
  void set_mimes(int index, const char* value);
  void set_mimes(int index, const char* value, size_t size);
  ::std::string* add_mimes();
  void add_mimes(const ::std::string& value);
  void add_mimes(const char* value);
  void add_mimes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mimes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mimes();

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Imp.Banner)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mimes_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Banner* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Native_Asset_Title : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Imp.Native.Asset.Title) */ {
 public:
  BidRequest_Imp_Native_Asset_Title();
  virtual ~BidRequest_Imp_Native_Asset_Title();

  BidRequest_Imp_Native_Asset_Title(const BidRequest_Imp_Native_Asset_Title& from);

  inline BidRequest_Imp_Native_Asset_Title& operator=(const BidRequest_Imp_Native_Asset_Title& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Native_Asset_Title& default_instance();

  void Swap(BidRequest_Imp_Native_Asset_Title* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Imp_Native_Asset_Title* New() const { return New(NULL); }

  BidRequest_Imp_Native_Asset_Title* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Native_Asset_Title& from);
  void MergeFrom(const BidRequest_Imp_Native_Asset_Title& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Imp_Native_Asset_Title* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 len = 1;
  bool has_len() const;
  void clear_len();
  static const int kLenFieldNumber = 1;
  ::google::protobuf::uint32 len() const;
  void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
 private:
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Native_Asset_Title* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Native_Asset_Img : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Imp.Native.Asset.Img) */ {
 public:
  BidRequest_Imp_Native_Asset_Img();
  virtual ~BidRequest_Imp_Native_Asset_Img();

  BidRequest_Imp_Native_Asset_Img(const BidRequest_Imp_Native_Asset_Img& from);

  inline BidRequest_Imp_Native_Asset_Img& operator=(const BidRequest_Imp_Native_Asset_Img& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Native_Asset_Img& default_instance();

  void Swap(BidRequest_Imp_Native_Asset_Img* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Imp_Native_Asset_Img* New() const { return New(NULL); }

  BidRequest_Imp_Native_Asset_Img* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Native_Asset_Img& from);
  void MergeFrom(const BidRequest_Imp_Native_Asset_Img& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Imp_Native_Asset_Img* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 w = 1;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 1;
  ::google::protobuf::uint32 w() const;
  void set_w(::google::protobuf::uint32 value);

  // required uint32 h = 2;
  bool has_h() const;
  void clear_h();
  static const int kHFieldNumber = 2;
  ::google::protobuf::uint32 h() const;
  void set_h(::google::protobuf::uint32 value);

  // repeated string mimes = 3;
  int mimes_size() const;
  void clear_mimes();
  static const int kMimesFieldNumber = 3;
  const ::std::string& mimes(int index) const;
  ::std::string* mutable_mimes(int index);
  void set_mimes(int index, const ::std::string& value);
  void set_mimes(int index, const char* value);
  void set_mimes(int index, const char* value, size_t size);
  ::std::string* add_mimes();
  void add_mimes(const ::std::string& value);
  void add_mimes(const char* value);
  void add_mimes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mimes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mimes();

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 w_;
  ::google::protobuf::uint32 h_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mimes_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Native_Asset_Img* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Native_Asset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Imp.Native.Asset) */ {
 public:
  BidRequest_Imp_Native_Asset();
  virtual ~BidRequest_Imp_Native_Asset();

  BidRequest_Imp_Native_Asset(const BidRequest_Imp_Native_Asset& from);

  inline BidRequest_Imp_Native_Asset& operator=(const BidRequest_Imp_Native_Asset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Native_Asset& default_instance();

  void Swap(BidRequest_Imp_Native_Asset* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Imp_Native_Asset* New() const { return New(NULL); }

  BidRequest_Imp_Native_Asset* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Native_Asset& from);
  void MergeFrom(const BidRequest_Imp_Native_Asset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Imp_Native_Asset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Native_Asset_Title Title;
  typedef BidRequest_Imp_Native_Asset_Img Img;

  // accessors -------------------------------------------------------

  // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Title title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::protocol::dsp::BidRequest_Imp_Native_Asset_Title& title() const;
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Title* mutable_title();
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Title* release_title();
  void set_allocated_title(::protocol::dsp::BidRequest_Imp_Native_Asset_Title* title);

  // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Img img = 2;
  bool has_img() const;
  void clear_img();
  static const int kImgFieldNumber = 2;
  const ::protocol::dsp::BidRequest_Imp_Native_Asset_Img& img() const;
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Img* mutable_img();
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Img* release_img();
  void set_allocated_img(::protocol::dsp::BidRequest_Imp_Native_Asset_Img* img);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Imp.Native.Asset)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_img();
  inline void clear_has_img();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Title* title_;
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Img* img_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Native_Asset* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Native : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Imp.Native) */ {
 public:
  BidRequest_Imp_Native();
  virtual ~BidRequest_Imp_Native();

  BidRequest_Imp_Native(const BidRequest_Imp_Native& from);

  inline BidRequest_Imp_Native& operator=(const BidRequest_Imp_Native& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Native& default_instance();

  void Swap(BidRequest_Imp_Native* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Imp_Native* New() const { return New(NULL); }

  BidRequest_Imp_Native* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Native& from);
  void MergeFrom(const BidRequest_Imp_Native& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Imp_Native* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Native_Asset Asset;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Imp.Native)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Native* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Pmp_Deal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Imp.Pmp.Deal) */ {
 public:
  BidRequest_Imp_Pmp_Deal();
  virtual ~BidRequest_Imp_Pmp_Deal();

  BidRequest_Imp_Pmp_Deal(const BidRequest_Imp_Pmp_Deal& from);

  inline BidRequest_Imp_Pmp_Deal& operator=(const BidRequest_Imp_Pmp_Deal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Pmp_Deal& default_instance();

  void Swap(BidRequest_Imp_Pmp_Deal* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Imp_Pmp_Deal* New() const { return New(NULL); }

  BidRequest_Imp_Pmp_Deal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Pmp_Deal& from);
  void MergeFrom(const BidRequest_Imp_Pmp_Deal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Imp_Pmp_Deal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dealId = 1;
  bool has_dealid() const;
  void clear_dealid();
  static const int kDealIdFieldNumber = 1;
  const ::std::string& dealid() const;
  void set_dealid(const ::std::string& value);
  void set_dealid(const char* value);
  void set_dealid(const char* value, size_t size);
  ::std::string* mutable_dealid();
  ::std::string* release_dealid();
  void set_allocated_dealid(::std::string* dealid);

  // optional float bidfloor = 2;
  bool has_bidfloor() const;
  void clear_bidfloor();
  static const int kBidfloorFieldNumber = 2;
  float bidfloor() const;
  void set_bidfloor(float value);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Imp.Pmp.Deal)
 private:
  inline void set_has_dealid();
  inline void clear_has_dealid();
  inline void set_has_bidfloor();
  inline void clear_has_bidfloor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dealid_;
  float bidfloor_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Pmp_Deal* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp_Pmp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Imp.Pmp) */ {
 public:
  BidRequest_Imp_Pmp();
  virtual ~BidRequest_Imp_Pmp();

  BidRequest_Imp_Pmp(const BidRequest_Imp_Pmp& from);

  inline BidRequest_Imp_Pmp& operator=(const BidRequest_Imp_Pmp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp_Pmp& default_instance();

  void Swap(BidRequest_Imp_Pmp* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Imp_Pmp* New() const { return New(NULL); }

  BidRequest_Imp_Pmp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp_Pmp& from);
  void MergeFrom(const BidRequest_Imp_Pmp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Imp_Pmp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Pmp_Deal Deal;

  // accessors -------------------------------------------------------

  // repeated .protocol.dsp.BidRequest.Imp.Pmp.Deal deals = 1;
  int deals_size() const;
  void clear_deals();
  static const int kDealsFieldNumber = 1;
  const ::protocol::dsp::BidRequest_Imp_Pmp_Deal& deals(int index) const;
  ::protocol::dsp::BidRequest_Imp_Pmp_Deal* mutable_deals(int index);
  ::protocol::dsp::BidRequest_Imp_Pmp_Deal* add_deals();
  ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Pmp_Deal >*
      mutable_deals();
  const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Pmp_Deal >&
      deals() const;

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Imp.Pmp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Pmp_Deal > deals_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp_Pmp* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Imp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Imp) */ {
 public:
  BidRequest_Imp();
  virtual ~BidRequest_Imp();

  BidRequest_Imp(const BidRequest_Imp& from);

  inline BidRequest_Imp& operator=(const BidRequest_Imp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Imp& default_instance();

  void Swap(BidRequest_Imp* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Imp* New() const { return New(NULL); }

  BidRequest_Imp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Imp& from);
  void MergeFrom(const BidRequest_Imp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Imp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp_Banner Banner;
  typedef BidRequest_Imp_Native Native;
  typedef BidRequest_Imp_Pmp Pmp;

  // accessors -------------------------------------------------------

  // required string impid = 1;
  bool has_impid() const;
  void clear_impid();
  static const int kImpidFieldNumber = 1;
  const ::std::string& impid() const;
  void set_impid(const ::std::string& value);
  void set_impid(const char* value);
  void set_impid(const char* value, size_t size);
  ::std::string* mutable_impid();
  ::std::string* release_impid();
  void set_allocated_impid(::std::string* impid);

  // required string tagid = 2;
  bool has_tagid() const;
  void clear_tagid();
  static const int kTagidFieldNumber = 2;
  const ::std::string& tagid() const;
  void set_tagid(const ::std::string& value);
  void set_tagid(const char* value);
  void set_tagid(const char* value, size_t size);
  ::std::string* mutable_tagid();
  ::std::string* release_tagid();
  void set_allocated_tagid(::std::string* tagid);

  // required float bidfloor = 3;
  bool has_bidfloor() const;
  void clear_bidfloor();
  static const int kBidfloorFieldNumber = 3;
  float bidfloor() const;
  void set_bidfloor(float value);

  // optional .protocol.dsp.BidRequest.Imp.Banner banner = 4;
  bool has_banner() const;
  void clear_banner();
  static const int kBannerFieldNumber = 4;
  const ::protocol::dsp::BidRequest_Imp_Banner& banner() const;
  ::protocol::dsp::BidRequest_Imp_Banner* mutable_banner();
  ::protocol::dsp::BidRequest_Imp_Banner* release_banner();
  void set_allocated_banner(::protocol::dsp::BidRequest_Imp_Banner* banner);

  // optional .protocol.dsp.BidRequest.Imp.Native native = 5;
  bool has_native() const;
  void clear_native();
  static const int kNativeFieldNumber = 5;
  const ::protocol::dsp::BidRequest_Imp_Native& native() const;
  ::protocol::dsp::BidRequest_Imp_Native* mutable_native();
  ::protocol::dsp::BidRequest_Imp_Native* release_native();
  void set_allocated_native(::protocol::dsp::BidRequest_Imp_Native* native);

  // optional .protocol.dsp.BidRequest.Imp.Pmp pmp = 6;
  bool has_pmp() const;
  void clear_pmp();
  static const int kPmpFieldNumber = 6;
  const ::protocol::dsp::BidRequest_Imp_Pmp& pmp() const;
  ::protocol::dsp::BidRequest_Imp_Pmp* mutable_pmp();
  ::protocol::dsp::BidRequest_Imp_Pmp* release_pmp();
  void set_allocated_pmp(::protocol::dsp::BidRequest_Imp_Pmp* pmp);

  // required uint32 secure = 7 [default = 0];
  bool has_secure() const;
  void clear_secure();
  static const int kSecureFieldNumber = 7;
  ::google::protobuf::uint32 secure() const;
  void set_secure(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Imp)
 private:
  inline void set_has_impid();
  inline void clear_has_impid();
  inline void set_has_tagid();
  inline void clear_has_tagid();
  inline void set_has_bidfloor();
  inline void clear_has_bidfloor();
  inline void set_has_banner();
  inline void clear_has_banner();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_pmp();
  inline void clear_has_pmp();
  inline void set_has_secure();
  inline void clear_has_secure();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr impid_;
  ::google::protobuf::internal::ArenaStringPtr tagid_;
  ::protocol::dsp::BidRequest_Imp_Banner* banner_;
  ::protocol::dsp::BidRequest_Imp_Native* native_;
  float bidfloor_;
  ::google::protobuf::uint32 secure_;
  ::protocol::dsp::BidRequest_Imp_Pmp* pmp_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Imp* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Site : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Site) */ {
 public:
  BidRequest_Site();
  virtual ~BidRequest_Site();

  BidRequest_Site(const BidRequest_Site& from);

  inline BidRequest_Site& operator=(const BidRequest_Site& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Site& default_instance();

  void Swap(BidRequest_Site* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Site* New() const { return New(NULL); }

  BidRequest_Site* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Site& from);
  void MergeFrom(const BidRequest_Site& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Site* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string ref = 2;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 2;
  const ::std::string& ref() const;
  void set_ref(const ::std::string& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  ::std::string* mutable_ref();
  ::std::string* release_ref();
  void set_allocated_ref(::std::string* ref);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Site)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ref();
  inline void clear_has_ref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ref_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Site* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_App : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.App) */ {
 public:
  BidRequest_App();
  virtual ~BidRequest_App();

  BidRequest_App(const BidRequest_App& from);

  inline BidRequest_App& operator=(const BidRequest_App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_App& default_instance();

  void Swap(BidRequest_App* other);

  // implements Message ----------------------------------------------

  inline BidRequest_App* New() const { return New(NULL); }

  BidRequest_App* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_App& from);
  void MergeFrom(const BidRequest_App& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_App* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string appname = 1;
  bool has_appname() const;
  void clear_appname();
  static const int kAppnameFieldNumber = 1;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // optional string packagename = 2;
  bool has_packagename() const;
  void clear_packagename();
  static const int kPackagenameFieldNumber = 2;
  const ::std::string& packagename() const;
  void set_packagename(const ::std::string& value);
  void set_packagename(const char* value);
  void set_packagename(const char* value, size_t size);
  ::std::string* mutable_packagename();
  ::std::string* release_packagename();
  void set_allocated_packagename(::std::string* packagename);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.App)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_packagename();
  inline void clear_has_packagename();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr packagename_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_App* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.Device) */ {
 public:
  BidRequest_Device();
  virtual ~BidRequest_Device();

  BidRequest_Device(const BidRequest_Device& from);

  inline BidRequest_Device& operator=(const BidRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Device& default_instance();

  void Swap(BidRequest_Device* other);

  // implements Message ----------------------------------------------

  inline BidRequest_Device* New() const { return New(NULL); }

  BidRequest_Device* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Device& from);
  void MergeFrom(const BidRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Device_OSType OSType;
  static const OSType OS_WINDOWS =
    BidRequest_Device_OSType_OS_WINDOWS;
  static const OSType OS_MAC =
    BidRequest_Device_OSType_OS_MAC;
  static const OSType OS_LINUX =
    BidRequest_Device_OSType_OS_LINUX;
  static const OSType OS_ANDROID =
    BidRequest_Device_OSType_OS_ANDROID;
  static const OSType OS_IOS =
    BidRequest_Device_OSType_OS_IOS;
  static const OSType OS_UNKNOWN =
    BidRequest_Device_OSType_OS_UNKNOWN;
  static inline bool OSType_IsValid(int value) {
    return BidRequest_Device_OSType_IsValid(value);
  }
  static const OSType OSType_MIN =
    BidRequest_Device_OSType_OSType_MIN;
  static const OSType OSType_MAX =
    BidRequest_Device_OSType_OSType_MAX;
  static const int OSType_ARRAYSIZE =
    BidRequest_Device_OSType_OSType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OSType_descriptor() {
    return BidRequest_Device_OSType_descriptor();
  }
  static inline const ::std::string& OSType_Name(OSType value) {
    return BidRequest_Device_OSType_Name(value);
  }
  static inline bool OSType_Parse(const ::std::string& name,
      OSType* value) {
    return BidRequest_Device_OSType_Parse(name, value);
  }

  typedef BidRequest_Device_DeviceType DeviceType;
  static const DeviceType DEVICE_IPHONE =
    BidRequest_Device_DeviceType_DEVICE_IPHONE;
  static const DeviceType DEVICE_ANDOIDPHONE =
    BidRequest_Device_DeviceType_DEVICE_ANDOIDPHONE;
  static const DeviceType DEVICE_IPAD =
    BidRequest_Device_DeviceType_DEVICE_IPAD;
  static const DeviceType DEVICE_WINDOWSPHONE =
    BidRequest_Device_DeviceType_DEVICE_WINDOWSPHONE;
  static const DeviceType DEVICE_ANDROIDPAD =
    BidRequest_Device_DeviceType_DEVICE_ANDROIDPAD;
  static const DeviceType DEVICE_TV =
    BidRequest_Device_DeviceType_DEVICE_TV;
  static const DeviceType DEVICE_UNKNOWN =
    BidRequest_Device_DeviceType_DEVICE_UNKNOWN;
  static inline bool DeviceType_IsValid(int value) {
    return BidRequest_Device_DeviceType_IsValid(value);
  }
  static const DeviceType DeviceType_MIN =
    BidRequest_Device_DeviceType_DeviceType_MIN;
  static const DeviceType DeviceType_MAX =
    BidRequest_Device_DeviceType_DeviceType_MAX;
  static const int DeviceType_ARRAYSIZE =
    BidRequest_Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceType_descriptor() {
    return BidRequest_Device_DeviceType_descriptor();
  }
  static inline const ::std::string& DeviceType_Name(DeviceType value) {
    return BidRequest_Device_DeviceType_Name(value);
  }
  static inline bool DeviceType_Parse(const ::std::string& name,
      DeviceType* value) {
    return BidRequest_Device_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string ua = 1 [default = ""];
  bool has_ua() const;
  void clear_ua();
  static const int kUaFieldNumber = 1;
  const ::std::string& ua() const;
  void set_ua(const ::std::string& value);
  void set_ua(const char* value);
  void set_ua(const char* value, size_t size);
  ::std::string* mutable_ua();
  ::std::string* release_ua();
  void set_allocated_ua(::std::string* ua);

  // required .protocol.dsp.BidRequest.Device.OSType os = 2 [default = OS_UNKNOWN];
  bool has_os() const;
  void clear_os();
  static const int kOsFieldNumber = 2;
  ::protocol::dsp::BidRequest_Device_OSType os() const;
  void set_os(::protocol::dsp::BidRequest_Device_OSType value);

  // required .protocol.dsp.BidRequest.Device.DeviceType devtype = 3 [default = DEVICE_UNKNOWN];
  bool has_devtype() const;
  void clear_devtype();
  static const int kDevtypeFieldNumber = 3;
  ::protocol::dsp::BidRequest_Device_DeviceType devtype() const;
  void set_devtype(::protocol::dsp::BidRequest_Device_DeviceType value);

  // optional string idfamd5 = 4;
  bool has_idfamd5() const;
  void clear_idfamd5();
  static const int kIdfamd5FieldNumber = 4;
  const ::std::string& idfamd5() const;
  void set_idfamd5(const ::std::string& value);
  void set_idfamd5(const char* value);
  void set_idfamd5(const char* value, size_t size);
  ::std::string* mutable_idfamd5();
  ::std::string* release_idfamd5();
  void set_allocated_idfamd5(::std::string* idfamd5);

  // optional string imeimd5 = 5;
  bool has_imeimd5() const;
  void clear_imeimd5();
  static const int kImeimd5FieldNumber = 5;
  const ::std::string& imeimd5() const;
  void set_imeimd5(const ::std::string& value);
  void set_imeimd5(const char* value);
  void set_imeimd5(const char* value, size_t size);
  ::std::string* mutable_imeimd5();
  ::std::string* release_imeimd5();
  void set_allocated_imeimd5(::std::string* imeimd5);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.Device)
 private:
  inline void set_has_ua();
  inline void clear_has_ua();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_devtype();
  inline void clear_has_devtype();
  inline void set_has_idfamd5();
  inline void clear_has_idfamd5();
  inline void set_has_imeimd5();
  inline void clear_has_imeimd5();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ua_;
  int os_;
  int devtype_;
  ::google::protobuf::internal::ArenaStringPtr idfamd5_;
  ::google::protobuf::internal::ArenaStringPtr imeimd5_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest.User) */ {
 public:
  BidRequest_User();
  virtual ~BidRequest_User();

  BidRequest_User(const BidRequest_User& from);

  inline BidRequest_User& operator=(const BidRequest_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_User& default_instance();

  void Swap(BidRequest_User* other);

  // implements Message ----------------------------------------------

  inline BidRequest_User* New() const { return New(NULL); }

  BidRequest_User* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_User& from);
  void MergeFrom(const BidRequest_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest_User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string muid = 1;
  bool has_muid() const;
  void clear_muid();
  static const int kMuidFieldNumber = 1;
  const ::std::string& muid() const;
  void set_muid(const ::std::string& value);
  void set_muid(const char* value);
  void set_muid(const char* value, size_t size);
  ::std::string* mutable_muid();
  ::std::string* release_muid();
  void set_allocated_muid(::std::string* muid);

  // repeated string tags = 2;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest.User)
 private:
  inline void set_has_muid();
  inline void clear_has_muid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr muid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_User* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidRequest) */ {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  inline BidRequest* New() const { return New(NULL); }

  BidRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Imp Imp;
  typedef BidRequest_Site Site;
  typedef BidRequest_App App;
  typedef BidRequest_Device Device;
  typedef BidRequest_User User;

  // accessors -------------------------------------------------------

  // required string bid = 1;
  bool has_bid() const;
  void clear_bid();
  static const int kBidFieldNumber = 1;
  const ::std::string& bid() const;
  void set_bid(const ::std::string& value);
  void set_bid(const char* value);
  void set_bid(const char* value, size_t size);
  ::std::string* mutable_bid();
  ::std::string* release_bid();
  void set_allocated_bid(::std::string* bid);

  // optional string ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // repeated .protocol.dsp.BidRequest.Imp imp = 3;
  int imp_size() const;
  void clear_imp();
  static const int kImpFieldNumber = 3;
  const ::protocol::dsp::BidRequest_Imp& imp(int index) const;
  ::protocol::dsp::BidRequest_Imp* mutable_imp(int index);
  ::protocol::dsp::BidRequest_Imp* add_imp();
  ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp >*
      mutable_imp();
  const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp >&
      imp() const;

  // optional .protocol.dsp.BidRequest.Site site = 4;
  bool has_site() const;
  void clear_site();
  static const int kSiteFieldNumber = 4;
  const ::protocol::dsp::BidRequest_Site& site() const;
  ::protocol::dsp::BidRequest_Site* mutable_site();
  ::protocol::dsp::BidRequest_Site* release_site();
  void set_allocated_site(::protocol::dsp::BidRequest_Site* site);

  // optional .protocol.dsp.BidRequest.App app = 5;
  bool has_app() const;
  void clear_app();
  static const int kAppFieldNumber = 5;
  const ::protocol::dsp::BidRequest_App& app() const;
  ::protocol::dsp::BidRequest_App* mutable_app();
  ::protocol::dsp::BidRequest_App* release_app();
  void set_allocated_app(::protocol::dsp::BidRequest_App* app);

  // optional .protocol.dsp.BidRequest.Device device = 6;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 6;
  const ::protocol::dsp::BidRequest_Device& device() const;
  ::protocol::dsp::BidRequest_Device* mutable_device();
  ::protocol::dsp::BidRequest_Device* release_device();
  void set_allocated_device(::protocol::dsp::BidRequest_Device* device);

  // optional .protocol.dsp.BidRequest.User user = 7;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 7;
  const ::protocol::dsp::BidRequest_User& user() const;
  ::protocol::dsp::BidRequest_User* mutable_user();
  ::protocol::dsp::BidRequest_User* release_user();
  void set_allocated_user(::protocol::dsp::BidRequest_User* user);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidRequest)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_site();
  inline void clear_has_site();
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp > imp_;
  ::protocol::dsp::BidRequest_Site* site_;
  ::protocol::dsp::BidRequest_App* app_;
  ::protocol::dsp::BidRequest_Device* device_;
  ::protocol::dsp::BidRequest_User* user_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid_Bid_Native_Asset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset) */ {
 public:
  BidResponse_SeatBid_Bid_Native_Asset();
  virtual ~BidResponse_SeatBid_Bid_Native_Asset();

  BidResponse_SeatBid_Bid_Native_Asset(const BidResponse_SeatBid_Bid_Native_Asset& from);

  inline BidResponse_SeatBid_Bid_Native_Asset& operator=(const BidResponse_SeatBid_Bid_Native_Asset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid_Bid_Native_Asset& default_instance();

  void Swap(BidResponse_SeatBid_Bid_Native_Asset* other);

  // implements Message ----------------------------------------------

  inline BidResponse_SeatBid_Bid_Native_Asset* New() const { return New(NULL); }

  BidResponse_SeatBid_Bid_Native_Asset* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid_Bid_Native_Asset& from);
  void MergeFrom(const BidResponse_SeatBid_Bid_Native_Asset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidResponse_SeatBid_Bid_Native_Asset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional string imgurl = 2;
  bool has_imgurl() const;
  void clear_imgurl();
  static const int kImgurlFieldNumber = 2;
  const ::std::string& imgurl() const;
  void set_imgurl(const ::std::string& value);
  void set_imgurl(const char* value);
  void set_imgurl(const char* value, size_t size);
  ::std::string* mutable_imgurl();
  ::std::string* release_imgurl();
  void set_allocated_imgurl(::std::string* imgurl);

  // optional uint32 imgw = 3;
  bool has_imgw() const;
  void clear_imgw();
  static const int kImgwFieldNumber = 3;
  ::google::protobuf::uint32 imgw() const;
  void set_imgw(::google::protobuf::uint32 value);

  // optional uint32 imgh = 4;
  bool has_imgh() const;
  void clear_imgh();
  static const int kImghFieldNumber = 4;
  ::google::protobuf::uint32 imgh() const;
  void set_imgh(::google::protobuf::uint32 value);

  // optional string data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_imgurl();
  inline void clear_has_imgurl();
  inline void set_has_imgw();
  inline void clear_has_imgw();
  inline void set_has_imgh();
  inline void clear_has_imgh();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr imgurl_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 imgw_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 imgh_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid_Bid_Native_Asset* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid_Bid_Native : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidResponse.SeatBid.Bid.Native) */ {
 public:
  BidResponse_SeatBid_Bid_Native();
  virtual ~BidResponse_SeatBid_Bid_Native();

  BidResponse_SeatBid_Bid_Native(const BidResponse_SeatBid_Bid_Native& from);

  inline BidResponse_SeatBid_Bid_Native& operator=(const BidResponse_SeatBid_Bid_Native& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid_Bid_Native& default_instance();

  void Swap(BidResponse_SeatBid_Bid_Native* other);

  // implements Message ----------------------------------------------

  inline BidResponse_SeatBid_Bid_Native* New() const { return New(NULL); }

  BidResponse_SeatBid_Bid_Native* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid_Bid_Native& from);
  void MergeFrom(const BidResponse_SeatBid_Bid_Native& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidResponse_SeatBid_Bid_Native* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid_Bid_Native_Asset Asset;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidResponse.SeatBid.Bid.Native)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid_Bid_Native* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid_Bid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidResponse.SeatBid.Bid) */ {
 public:
  BidResponse_SeatBid_Bid();
  virtual ~BidResponse_SeatBid_Bid();

  BidResponse_SeatBid_Bid(const BidResponse_SeatBid_Bid& from);

  inline BidResponse_SeatBid_Bid& operator=(const BidResponse_SeatBid_Bid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid_Bid& default_instance();

  void Swap(BidResponse_SeatBid_Bid* other);

  // implements Message ----------------------------------------------

  inline BidResponse_SeatBid_Bid* New() const { return New(NULL); }

  BidResponse_SeatBid_Bid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid_Bid& from);
  void MergeFrom(const BidResponse_SeatBid_Bid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidResponse_SeatBid_Bid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid_Bid_Native Native;

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string impid = 2;
  bool has_impid() const;
  void clear_impid();
  static const int kImpidFieldNumber = 2;
  const ::std::string& impid() const;
  void set_impid(const ::std::string& value);
  void set_impid(const char* value);
  void set_impid(const char* value, size_t size);
  ::std::string* mutable_impid();
  ::std::string* release_impid();
  void set_allocated_impid(::std::string* impid);

  // optional .protocol.dsp.BidResponse.SeatBid.Bid.Native native = 3;
  bool has_native() const;
  void clear_native();
  static const int kNativeFieldNumber = 3;
  const ::protocol::dsp::BidResponse_SeatBid_Bid_Native& native() const;
  ::protocol::dsp::BidResponse_SeatBid_Bid_Native* mutable_native();
  ::protocol::dsp::BidResponse_SeatBid_Bid_Native* release_native();
  void set_allocated_native(::protocol::dsp::BidResponse_SeatBid_Bid_Native* native);

  // required float price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  float price() const;
  void set_price(float value);

  // required string nurl = 5;
  bool has_nurl() const;
  void clear_nurl();
  static const int kNurlFieldNumber = 5;
  const ::std::string& nurl() const;
  void set_nurl(const ::std::string& value);
  void set_nurl(const char* value);
  void set_nurl(const char* value, size_t size);
  ::std::string* mutable_nurl();
  ::std::string* release_nurl();
  void set_allocated_nurl(::std::string* nurl);

  // required uint32 admtype = 6;
  bool has_admtype() const;
  void clear_admtype();
  static const int kAdmtypeFieldNumber = 6;
  ::google::protobuf::uint32 admtype() const;
  void set_admtype(::google::protobuf::uint32 value);

  // required string adm = 7;
  bool has_adm() const;
  void clear_adm();
  static const int kAdmFieldNumber = 7;
  const ::std::string& adm() const;
  void set_adm(const ::std::string& value);
  void set_adm(const char* value);
  void set_adm(const char* value, size_t size);
  ::std::string* mutable_adm();
  ::std::string* release_adm();
  void set_allocated_adm(::std::string* adm);

  // repeated string pvm = 8;
  int pvm_size() const;
  void clear_pvm();
  static const int kPvmFieldNumber = 8;
  const ::std::string& pvm(int index) const;
  ::std::string* mutable_pvm(int index);
  void set_pvm(int index, const ::std::string& value);
  void set_pvm(int index, const char* value);
  void set_pvm(int index, const char* value, size_t size);
  ::std::string* add_pvm();
  void add_pvm(const ::std::string& value);
  void add_pvm(const char* value);
  void add_pvm(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pvm() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pvm();

  // required string clickm = 9;
  bool has_clickm() const;
  void clear_clickm();
  static const int kClickmFieldNumber = 9;
  const ::std::string& clickm() const;
  void set_clickm(const ::std::string& value);
  void set_clickm(const char* value);
  void set_clickm(const char* value, size_t size);
  ::std::string* mutable_clickm();
  ::std::string* release_clickm();
  void set_allocated_clickm(::std::string* clickm);

  // optional string dealId = 10;
  bool has_dealid() const;
  void clear_dealid();
  static const int kDealIdFieldNumber = 10;
  const ::std::string& dealid() const;
  void set_dealid(const ::std::string& value);
  void set_dealid(const char* value);
  void set_dealid(const char* value, size_t size);
  ::std::string* mutable_dealid();
  ::std::string* release_dealid();
  void set_allocated_dealid(::std::string* dealid);

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidResponse.SeatBid.Bid)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_impid();
  inline void clear_has_impid();
  inline void set_has_native();
  inline void clear_has_native();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_nurl();
  inline void clear_has_nurl();
  inline void set_has_admtype();
  inline void clear_has_admtype();
  inline void set_has_adm();
  inline void clear_has_adm();
  inline void set_has_clickm();
  inline void clear_has_clickm();
  inline void set_has_dealid();
  inline void clear_has_dealid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr impid_;
  ::protocol::dsp::BidResponse_SeatBid_Bid_Native* native_;
  ::google::protobuf::internal::ArenaStringPtr nurl_;
  float price_;
  ::google::protobuf::uint32 admtype_;
  ::google::protobuf::internal::ArenaStringPtr adm_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pvm_;
  ::google::protobuf::internal::ArenaStringPtr clickm_;
  ::google::protobuf::internal::ArenaStringPtr dealid_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid_Bid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidResponse.SeatBid) */ {
 public:
  BidResponse_SeatBid();
  virtual ~BidResponse_SeatBid();

  BidResponse_SeatBid(const BidResponse_SeatBid& from);

  inline BidResponse_SeatBid& operator=(const BidResponse_SeatBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid& default_instance();

  void Swap(BidResponse_SeatBid* other);

  // implements Message ----------------------------------------------

  inline BidResponse_SeatBid* New() const { return New(NULL); }

  BidResponse_SeatBid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid& from);
  void MergeFrom(const BidResponse_SeatBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidResponse_SeatBid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid_Bid Bid;

  // accessors -------------------------------------------------------

  // repeated .protocol.dsp.BidResponse.SeatBid.Bid bid = 1;
  int bid_size() const;
  void clear_bid();
  static const int kBidFieldNumber = 1;
  const ::protocol::dsp::BidResponse_SeatBid_Bid& bid(int index) const;
  ::protocol::dsp::BidResponse_SeatBid_Bid* mutable_bid(int index);
  ::protocol::dsp::BidResponse_SeatBid_Bid* add_bid();
  ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid >*
      mutable_bid();
  const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid >&
      bid() const;

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidResponse.SeatBid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid > bid_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.dsp.BidResponse) */ {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  inline BidResponse* New() const { return New(NULL); }

  BidResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BidResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_SeatBid SeatBid;

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string bidid = 2;
  bool has_bidid() const;
  void clear_bidid();
  static const int kBididFieldNumber = 2;
  const ::std::string& bidid() const;
  void set_bidid(const ::std::string& value);
  void set_bidid(const char* value);
  void set_bidid(const char* value, size_t size);
  ::std::string* mutable_bidid();
  ::std::string* release_bidid();
  void set_allocated_bidid(::std::string* bidid);

  // repeated .protocol.dsp.BidResponse.SeatBid seatbid = 3;
  int seatbid_size() const;
  void clear_seatbid();
  static const int kSeatbidFieldNumber = 3;
  const ::protocol::dsp::BidResponse_SeatBid& seatbid(int index) const;
  ::protocol::dsp::BidResponse_SeatBid* mutable_seatbid(int index);
  ::protocol::dsp::BidResponse_SeatBid* add_seatbid();
  ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid >*
      mutable_seatbid();
  const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid >&
      seatbid() const;

  // @@protoc_insertion_point(class_scope:protocol.dsp.BidResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bidid();
  inline void clear_has_bidid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr bidid_;
  ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid > seatbid_;
  friend void  protobuf_AddDesc_mtty_5fbidding_2eproto();
  friend void protobuf_AssignDesc_mtty_5fbidding_2eproto();
  friend void protobuf_ShutdownFile_mtty_5fbidding_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BidRequest_Imp_Banner

// required uint32 width = 1;
inline bool BidRequest_Imp_Banner::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp_Banner::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp_Banner::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 BidRequest_Imp_Banner::width() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Banner.width)
  return width_;
}
inline void BidRequest_Imp_Banner::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Banner.width)
}

// required uint32 height = 2;
inline bool BidRequest_Imp_Banner::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp_Banner::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp_Banner::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp_Banner::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 BidRequest_Imp_Banner::height() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Banner.height)
  return height_;
}
inline void BidRequest_Imp_Banner::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Banner.height)
}

// repeated string mimes = 3;
inline int BidRequest_Imp_Banner::mimes_size() const {
  return mimes_.size();
}
inline void BidRequest_Imp_Banner::clear_mimes() {
  mimes_.Clear();
}
inline const ::std::string& BidRequest_Imp_Banner::mimes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return mimes_.Get(index);
}
inline ::std::string* BidRequest_Imp_Banner::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return mimes_.Mutable(index);
}
inline void BidRequest_Imp_Banner::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Banner.mimes)
  mimes_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp_Banner::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
inline void BidRequest_Imp_Banner::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
inline ::std::string* BidRequest_Imp_Banner::add_mimes() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return mimes_.Add();
}
inline void BidRequest_Imp_Banner::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
inline void BidRequest_Imp_Banner::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
inline void BidRequest_Imp_Banner::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Banner::mimes() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return mimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Banner::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return &mimes_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native_Asset_Title

// required uint32 len = 1;
inline bool BidRequest_Imp_Native_Asset_Title::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp_Native_Asset_Title::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp_Native_Asset_Title::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp_Native_Asset_Title::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 BidRequest_Imp_Native_Asset_Title::len() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.Title.len)
  return len_;
}
inline void BidRequest_Imp_Native_Asset_Title::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Native.Asset.Title.len)
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native_Asset_Img

// required uint32 w = 1;
inline bool BidRequest_Imp_Native_Asset_Img::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp_Native_Asset_Img::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp_Native_Asset_Img::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp_Native_Asset_Img::clear_w() {
  w_ = 0u;
  clear_has_w();
}
inline ::google::protobuf::uint32 BidRequest_Imp_Native_Asset_Img::w() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.Img.w)
  return w_;
}
inline void BidRequest_Imp_Native_Asset_Img::set_w(::google::protobuf::uint32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Native.Asset.Img.w)
}

// required uint32 h = 2;
inline bool BidRequest_Imp_Native_Asset_Img::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp_Native_Asset_Img::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp_Native_Asset_Img::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp_Native_Asset_Img::clear_h() {
  h_ = 0u;
  clear_has_h();
}
inline ::google::protobuf::uint32 BidRequest_Imp_Native_Asset_Img::h() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.Img.h)
  return h_;
}
inline void BidRequest_Imp_Native_Asset_Img::set_h(::google::protobuf::uint32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Native.Asset.Img.h)
}

// repeated string mimes = 3;
inline int BidRequest_Imp_Native_Asset_Img::mimes_size() const {
  return mimes_.size();
}
inline void BidRequest_Imp_Native_Asset_Img::clear_mimes() {
  mimes_.Clear();
}
inline const ::std::string& BidRequest_Imp_Native_Asset_Img::mimes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return mimes_.Get(index);
}
inline ::std::string* BidRequest_Imp_Native_Asset_Img::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return mimes_.Mutable(index);
}
inline void BidRequest_Imp_Native_Asset_Img::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  mimes_.Mutable(index)->assign(value);
}
inline void BidRequest_Imp_Native_Asset_Img::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
inline void BidRequest_Imp_Native_Asset_Img::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
inline ::std::string* BidRequest_Imp_Native_Asset_Img::add_mimes() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return mimes_.Add();
}
inline void BidRequest_Imp_Native_Asset_Img::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
inline void BidRequest_Imp_Native_Asset_Img::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
inline void BidRequest_Imp_Native_Asset_Img::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Native_Asset_Img::mimes() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return mimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Native_Asset_Img::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return &mimes_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native_Asset

// optional .protocol.dsp.BidRequest.Imp.Native.Asset.Title title = 1;
inline bool BidRequest_Imp_Native_Asset::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp_Native_Asset::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp_Native_Asset::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp_Native_Asset::clear_title() {
  if (title_ != NULL) title_->::protocol::dsp::BidRequest_Imp_Native_Asset_Title::Clear();
  clear_has_title();
}
inline const ::protocol::dsp::BidRequest_Imp_Native_Asset_Title& BidRequest_Imp_Native_Asset::title() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.title)
  return title_ != NULL ? *title_ : *default_instance_->title_;
}
inline ::protocol::dsp::BidRequest_Imp_Native_Asset_Title* BidRequest_Imp_Native_Asset::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    title_ = new ::protocol::dsp::BidRequest_Imp_Native_Asset_Title;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Native.Asset.title)
  return title_;
}
inline ::protocol::dsp::BidRequest_Imp_Native_Asset_Title* BidRequest_Imp_Native_Asset::release_title() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.Native.Asset.title)
  clear_has_title();
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Title* temp = title_;
  title_ = NULL;
  return temp;
}
inline void BidRequest_Imp_Native_Asset::set_allocated_title(::protocol::dsp::BidRequest_Imp_Native_Asset_Title* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.Native.Asset.title)
}

// optional .protocol.dsp.BidRequest.Imp.Native.Asset.Img img = 2;
inline bool BidRequest_Imp_Native_Asset::has_img() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp_Native_Asset::set_has_img() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp_Native_Asset::clear_has_img() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp_Native_Asset::clear_img() {
  if (img_ != NULL) img_->::protocol::dsp::BidRequest_Imp_Native_Asset_Img::Clear();
  clear_has_img();
}
inline const ::protocol::dsp::BidRequest_Imp_Native_Asset_Img& BidRequest_Imp_Native_Asset::img() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
inline ::protocol::dsp::BidRequest_Imp_Native_Asset_Img* BidRequest_Imp_Native_Asset::mutable_img() {
  set_has_img();
  if (img_ == NULL) {
    img_ = new ::protocol::dsp::BidRequest_Imp_Native_Asset_Img;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Native.Asset.img)
  return img_;
}
inline ::protocol::dsp::BidRequest_Imp_Native_Asset_Img* BidRequest_Imp_Native_Asset::release_img() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.Native.Asset.img)
  clear_has_img();
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Img* temp = img_;
  img_ = NULL;
  return temp;
}
inline void BidRequest_Imp_Native_Asset::set_allocated_img(::protocol::dsp::BidRequest_Imp_Native_Asset_Img* img) {
  delete img_;
  img_ = img;
  if (img) {
    set_has_img();
  } else {
    clear_has_img();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.Native.Asset.img)
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native

// -------------------------------------------------------------------

// BidRequest_Imp_Pmp_Deal

// optional string dealId = 1;
inline bool BidRequest_Imp_Pmp_Deal::has_dealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp_Pmp_Deal::set_has_dealid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_dealid() {
  dealid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dealid();
}
inline const ::std::string& BidRequest_Imp_Pmp_Deal::dealid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
  return dealid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Imp_Pmp_Deal::set_dealid(const ::std::string& value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
}
inline void BidRequest_Imp_Pmp_Deal::set_dealid(const char* value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
}
inline void BidRequest_Imp_Pmp_Deal::set_dealid(const char* value, size_t size) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::mutable_dealid() {
  set_has_dealid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
  return dealid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_Imp_Pmp_Deal::release_dealid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
  clear_has_dealid();
  return dealid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Imp_Pmp_Deal::set_allocated_dealid(::std::string* dealid) {
  if (dealid != NULL) {
    set_has_dealid();
  } else {
    clear_has_dealid();
  }
  dealid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
}

// optional float bidfloor = 2;
inline bool BidRequest_Imp_Pmp_Deal::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp_Pmp_Deal::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp_Pmp_Deal::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
inline float BidRequest_Imp_Pmp_Deal::bidfloor() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Pmp.Deal.bidfloor)
  return bidfloor_;
}
inline void BidRequest_Imp_Pmp_Deal::set_bidfloor(float value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Pmp.Deal.bidfloor)
}

// -------------------------------------------------------------------

// BidRequest_Imp_Pmp

// repeated .protocol.dsp.BidRequest.Imp.Pmp.Deal deals = 1;
inline int BidRequest_Imp_Pmp::deals_size() const {
  return deals_.size();
}
inline void BidRequest_Imp_Pmp::clear_deals() {
  deals_.Clear();
}
inline const ::protocol::dsp::BidRequest_Imp_Pmp_Deal& BidRequest_Imp_Pmp::deals(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return deals_.Get(index);
}
inline ::protocol::dsp::BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp::mutable_deals(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return deals_.Mutable(index);
}
inline ::protocol::dsp::BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp::add_deals() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return deals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Pmp_Deal >*
BidRequest_Imp_Pmp::mutable_deals() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return &deals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Pmp_Deal >&
BidRequest_Imp_Pmp::deals() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return deals_;
}

// -------------------------------------------------------------------

// BidRequest_Imp

// required string impid = 1;
inline bool BidRequest_Imp::has_impid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Imp::set_has_impid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Imp::clear_has_impid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Imp::clear_impid() {
  impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_impid();
}
inline const ::std::string& BidRequest_Imp::impid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.impid)
  return impid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Imp::set_impid(const ::std::string& value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.impid)
}
inline void BidRequest_Imp::set_impid(const char* value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.impid)
}
inline void BidRequest_Imp::set_impid(const char* value, size_t size) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.impid)
}
inline ::std::string* BidRequest_Imp::mutable_impid() {
  set_has_impid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.impid)
  return impid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_Imp::release_impid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.impid)
  clear_has_impid();
  return impid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Imp::set_allocated_impid(::std::string* impid) {
  if (impid != NULL) {
    set_has_impid();
  } else {
    clear_has_impid();
  }
  impid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.impid)
}

// required string tagid = 2;
inline bool BidRequest_Imp::has_tagid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Imp::set_has_tagid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Imp::clear_has_tagid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Imp::clear_tagid() {
  tagid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagid();
}
inline const ::std::string& BidRequest_Imp::tagid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.tagid)
  return tagid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Imp::set_tagid(const ::std::string& value) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.tagid)
}
inline void BidRequest_Imp::set_tagid(const char* value) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.tagid)
}
inline void BidRequest_Imp::set_tagid(const char* value, size_t size) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.tagid)
}
inline ::std::string* BidRequest_Imp::mutable_tagid() {
  set_has_tagid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.tagid)
  return tagid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_Imp::release_tagid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.tagid)
  clear_has_tagid();
  return tagid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Imp::set_allocated_tagid(::std::string* tagid) {
  if (tagid != NULL) {
    set_has_tagid();
  } else {
    clear_has_tagid();
  }
  tagid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.tagid)
}

// required float bidfloor = 3;
inline bool BidRequest_Imp::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Imp::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Imp::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Imp::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
inline float BidRequest_Imp::bidfloor() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.bidfloor)
  return bidfloor_;
}
inline void BidRequest_Imp::set_bidfloor(float value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.bidfloor)
}

// optional .protocol.dsp.BidRequest.Imp.Banner banner = 4;
inline bool BidRequest_Imp::has_banner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Imp::set_has_banner() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Imp::clear_has_banner() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Imp::clear_banner() {
  if (banner_ != NULL) banner_->::protocol::dsp::BidRequest_Imp_Banner::Clear();
  clear_has_banner();
}
inline const ::protocol::dsp::BidRequest_Imp_Banner& BidRequest_Imp::banner() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.banner)
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
inline ::protocol::dsp::BidRequest_Imp_Banner* BidRequest_Imp::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) {
    banner_ = new ::protocol::dsp::BidRequest_Imp_Banner;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.banner)
  return banner_;
}
inline ::protocol::dsp::BidRequest_Imp_Banner* BidRequest_Imp::release_banner() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.banner)
  clear_has_banner();
  ::protocol::dsp::BidRequest_Imp_Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
inline void BidRequest_Imp::set_allocated_banner(::protocol::dsp::BidRequest_Imp_Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.banner)
}

// optional .protocol.dsp.BidRequest.Imp.Native native = 5;
inline bool BidRequest_Imp::has_native() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Imp::set_has_native() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Imp::clear_has_native() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Imp::clear_native() {
  if (native_ != NULL) native_->::protocol::dsp::BidRequest_Imp_Native::Clear();
  clear_has_native();
}
inline const ::protocol::dsp::BidRequest_Imp_Native& BidRequest_Imp::native() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.native)
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
inline ::protocol::dsp::BidRequest_Imp_Native* BidRequest_Imp::mutable_native() {
  set_has_native();
  if (native_ == NULL) {
    native_ = new ::protocol::dsp::BidRequest_Imp_Native;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.native)
  return native_;
}
inline ::protocol::dsp::BidRequest_Imp_Native* BidRequest_Imp::release_native() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.native)
  clear_has_native();
  ::protocol::dsp::BidRequest_Imp_Native* temp = native_;
  native_ = NULL;
  return temp;
}
inline void BidRequest_Imp::set_allocated_native(::protocol::dsp::BidRequest_Imp_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.native)
}

// optional .protocol.dsp.BidRequest.Imp.Pmp pmp = 6;
inline bool BidRequest_Imp::has_pmp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Imp::set_has_pmp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Imp::clear_has_pmp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Imp::clear_pmp() {
  if (pmp_ != NULL) pmp_->::protocol::dsp::BidRequest_Imp_Pmp::Clear();
  clear_has_pmp();
}
inline const ::protocol::dsp::BidRequest_Imp_Pmp& BidRequest_Imp::pmp() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.pmp)
  return pmp_ != NULL ? *pmp_ : *default_instance_->pmp_;
}
inline ::protocol::dsp::BidRequest_Imp_Pmp* BidRequest_Imp::mutable_pmp() {
  set_has_pmp();
  if (pmp_ == NULL) {
    pmp_ = new ::protocol::dsp::BidRequest_Imp_Pmp;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.pmp)
  return pmp_;
}
inline ::protocol::dsp::BidRequest_Imp_Pmp* BidRequest_Imp::release_pmp() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.pmp)
  clear_has_pmp();
  ::protocol::dsp::BidRequest_Imp_Pmp* temp = pmp_;
  pmp_ = NULL;
  return temp;
}
inline void BidRequest_Imp::set_allocated_pmp(::protocol::dsp::BidRequest_Imp_Pmp* pmp) {
  delete pmp_;
  pmp_ = pmp;
  if (pmp) {
    set_has_pmp();
  } else {
    clear_has_pmp();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.pmp)
}

// required uint32 secure = 7 [default = 0];
inline bool BidRequest_Imp::has_secure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Imp::set_has_secure() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Imp::clear_has_secure() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Imp::clear_secure() {
  secure_ = 0u;
  clear_has_secure();
}
inline ::google::protobuf::uint32 BidRequest_Imp::secure() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.secure)
  return secure_;
}
inline void BidRequest_Imp::set_secure(::google::protobuf::uint32 value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.secure)
}

// -------------------------------------------------------------------

// BidRequest_Site

// optional string name = 1;
inline bool BidRequest_Site::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Site::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Site::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Site::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BidRequest_Site::name() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Site.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Site::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Site.name)
}
inline void BidRequest_Site::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Site.name)
}
inline void BidRequest_Site::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Site.name)
}
inline ::std::string* BidRequest_Site::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Site.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_Site::release_name() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Site.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Site::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Site.name)
}

// optional string ref = 2;
inline bool BidRequest_Site::has_ref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Site::set_has_ref() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Site::clear_has_ref() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Site::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ref();
}
inline const ::std::string& BidRequest_Site::ref() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Site.ref)
  return ref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Site::set_ref(const ::std::string& value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Site.ref)
}
inline void BidRequest_Site::set_ref(const char* value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Site.ref)
}
inline void BidRequest_Site::set_ref(const char* value, size_t size) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Site.ref)
}
inline ::std::string* BidRequest_Site::mutable_ref() {
  set_has_ref();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Site.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_Site::release_ref() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Site.ref)
  clear_has_ref();
  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Site::set_allocated_ref(::std::string* ref) {
  if (ref != NULL) {
    set_has_ref();
  } else {
    clear_has_ref();
  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Site.ref)
}

// -------------------------------------------------------------------

// BidRequest_App

// optional string appname = 1;
inline bool BidRequest_App::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_App::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_App::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_App::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appname();
}
inline const ::std::string& BidRequest_App::appname() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.App.appname)
  return appname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_App::set_appname(const ::std::string& value) {
  set_has_appname();
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.App.appname)
}
inline void BidRequest_App::set_appname(const char* value) {
  set_has_appname();
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.App.appname)
}
inline void BidRequest_App::set_appname(const char* value, size_t size) {
  set_has_appname();
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.App.appname)
}
inline ::std::string* BidRequest_App::mutable_appname() {
  set_has_appname();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.App.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_App::release_appname() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.App.appname)
  clear_has_appname();
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_App::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    set_has_appname();
  } else {
    clear_has_appname();
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.App.appname)
}

// optional string packagename = 2;
inline bool BidRequest_App::has_packagename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_App::set_has_packagename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_App::clear_has_packagename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_App::clear_packagename() {
  packagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packagename();
}
inline const ::std::string& BidRequest_App::packagename() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.App.packagename)
  return packagename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_App::set_packagename(const ::std::string& value) {
  set_has_packagename();
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.App.packagename)
}
inline void BidRequest_App::set_packagename(const char* value) {
  set_has_packagename();
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.App.packagename)
}
inline void BidRequest_App::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.App.packagename)
}
inline ::std::string* BidRequest_App::mutable_packagename() {
  set_has_packagename();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.App.packagename)
  return packagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_App::release_packagename() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.App.packagename)
  clear_has_packagename();
  return packagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_App::set_allocated_packagename(::std::string* packagename) {
  if (packagename != NULL) {
    set_has_packagename();
  } else {
    clear_has_packagename();
  }
  packagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packagename);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.App.packagename)
}

// -------------------------------------------------------------------

// BidRequest_Device

// required string ua = 1 [default = ""];
inline bool BidRequest_Device::has_ua() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Device::set_has_ua() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Device::clear_ua() {
  ua_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ua();
}
inline const ::std::string& BidRequest_Device::ua() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.ua)
  return ua_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Device::set_ua(const ::std::string& value) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.ua)
}
inline void BidRequest_Device::set_ua(const char* value) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Device.ua)
}
inline void BidRequest_Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Device.ua)
}
inline ::std::string* BidRequest_Device::mutable_ua() {
  set_has_ua();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Device.ua)
  return ua_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_Device::release_ua() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Device.ua)
  clear_has_ua();
  return ua_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Device::set_allocated_ua(::std::string* ua) {
  if (ua != NULL) {
    set_has_ua();
  } else {
    clear_has_ua();
  }
  ua_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ua);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Device.ua)
}

// required .protocol.dsp.BidRequest.Device.OSType os = 2 [default = OS_UNKNOWN];
inline bool BidRequest_Device::has_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Device::set_has_os() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Device::clear_os() {
  os_ = 6;
  clear_has_os();
}
inline ::protocol::dsp::BidRequest_Device_OSType BidRequest_Device::os() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.os)
  return static_cast< ::protocol::dsp::BidRequest_Device_OSType >(os_);
}
inline void BidRequest_Device::set_os(::protocol::dsp::BidRequest_Device_OSType value) {
  assert(::protocol::dsp::BidRequest_Device_OSType_IsValid(value));
  set_has_os();
  os_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.os)
}

// required .protocol.dsp.BidRequest.Device.DeviceType devtype = 3 [default = DEVICE_UNKNOWN];
inline bool BidRequest_Device::has_devtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Device::set_has_devtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Device::clear_has_devtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Device::clear_devtype() {
  devtype_ = 7;
  clear_has_devtype();
}
inline ::protocol::dsp::BidRequest_Device_DeviceType BidRequest_Device::devtype() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.devtype)
  return static_cast< ::protocol::dsp::BidRequest_Device_DeviceType >(devtype_);
}
inline void BidRequest_Device::set_devtype(::protocol::dsp::BidRequest_Device_DeviceType value) {
  assert(::protocol::dsp::BidRequest_Device_DeviceType_IsValid(value));
  set_has_devtype();
  devtype_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.devtype)
}

// optional string idfamd5 = 4;
inline bool BidRequest_Device::has_idfamd5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Device::set_has_idfamd5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Device::clear_has_idfamd5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Device::clear_idfamd5() {
  idfamd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idfamd5();
}
inline const ::std::string& BidRequest_Device::idfamd5() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.idfamd5)
  return idfamd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Device::set_idfamd5(const ::std::string& value) {
  set_has_idfamd5();
  idfamd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.idfamd5)
}
inline void BidRequest_Device::set_idfamd5(const char* value) {
  set_has_idfamd5();
  idfamd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Device.idfamd5)
}
inline void BidRequest_Device::set_idfamd5(const char* value, size_t size) {
  set_has_idfamd5();
  idfamd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Device.idfamd5)
}
inline ::std::string* BidRequest_Device::mutable_idfamd5() {
  set_has_idfamd5();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Device.idfamd5)
  return idfamd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_Device::release_idfamd5() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Device.idfamd5)
  clear_has_idfamd5();
  return idfamd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Device::set_allocated_idfamd5(::std::string* idfamd5) {
  if (idfamd5 != NULL) {
    set_has_idfamd5();
  } else {
    clear_has_idfamd5();
  }
  idfamd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idfamd5);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Device.idfamd5)
}

// optional string imeimd5 = 5;
inline bool BidRequest_Device::has_imeimd5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Device::set_has_imeimd5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Device::clear_has_imeimd5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Device::clear_imeimd5() {
  imeimd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imeimd5();
}
inline const ::std::string& BidRequest_Device::imeimd5() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.imeimd5)
  return imeimd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Device::set_imeimd5(const ::std::string& value) {
  set_has_imeimd5();
  imeimd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.imeimd5)
}
inline void BidRequest_Device::set_imeimd5(const char* value) {
  set_has_imeimd5();
  imeimd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Device.imeimd5)
}
inline void BidRequest_Device::set_imeimd5(const char* value, size_t size) {
  set_has_imeimd5();
  imeimd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Device.imeimd5)
}
inline ::std::string* BidRequest_Device::mutable_imeimd5() {
  set_has_imeimd5();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Device.imeimd5)
  return imeimd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_Device::release_imeimd5() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Device.imeimd5)
  clear_has_imeimd5();
  return imeimd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_Device::set_allocated_imeimd5(::std::string* imeimd5) {
  if (imeimd5 != NULL) {
    set_has_imeimd5();
  } else {
    clear_has_imeimd5();
  }
  imeimd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imeimd5);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Device.imeimd5)
}

// -------------------------------------------------------------------

// BidRequest_User

// required string muid = 1;
inline bool BidRequest_User::has_muid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_User::set_has_muid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_User::clear_has_muid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_User::clear_muid() {
  muid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_muid();
}
inline const ::std::string& BidRequest_User::muid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.User.muid)
  return muid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_User::set_muid(const ::std::string& value) {
  set_has_muid();
  muid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.User.muid)
}
inline void BidRequest_User::set_muid(const char* value) {
  set_has_muid();
  muid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.User.muid)
}
inline void BidRequest_User::set_muid(const char* value, size_t size) {
  set_has_muid();
  muid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.User.muid)
}
inline ::std::string* BidRequest_User::mutable_muid() {
  set_has_muid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.User.muid)
  return muid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest_User::release_muid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.User.muid)
  clear_has_muid();
  return muid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest_User::set_allocated_muid(::std::string* muid) {
  if (muid != NULL) {
    set_has_muid();
  } else {
    clear_has_muid();
  }
  muid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), muid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.User.muid)
}

// repeated string tags = 2;
inline int BidRequest_User::tags_size() const {
  return tags_.size();
}
inline void BidRequest_User::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& BidRequest_User::tags(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.User.tags)
  return tags_.Get(index);
}
inline ::std::string* BidRequest_User::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.User.tags)
  return tags_.Mutable(index);
}
inline void BidRequest_User::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.User.tags)
  tags_.Mutable(index)->assign(value);
}
inline void BidRequest_User::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.User.tags)
}
inline void BidRequest_User::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.User.tags)
}
inline ::std::string* BidRequest_User::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidRequest.User.tags)
  return tags_.Add();
}
inline void BidRequest_User::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.User.tags)
}
inline void BidRequest_User::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidRequest.User.tags)
}
inline void BidRequest_User::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidRequest.User.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_User::tags() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.User.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_User::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.User.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// BidRequest

// required string bid = 1;
inline bool BidRequest::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_bid() {
  bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bid();
}
inline const ::std::string& BidRequest::bid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.bid)
  return bid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_bid(const ::std::string& value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.bid)
}
inline void BidRequest::set_bid(const char* value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.bid)
}
inline void BidRequest::set_bid(const char* value, size_t size) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.bid)
}
inline ::std::string* BidRequest::mutable_bid() {
  set_has_bid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.bid)
  return bid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest::release_bid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.bid)
  clear_has_bid();
  return bid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_bid(::std::string* bid) {
  if (bid != NULL) {
    set_has_bid();
  } else {
    clear_has_bid();
  }
  bid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.bid)
}

// optional string ip = 2;
inline bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& BidRequest::ip() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.ip)
}
inline void BidRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.ip)
}
inline void BidRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.ip)
}
inline ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidRequest::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.ip)
}

// repeated .protocol.dsp.BidRequest.Imp imp = 3;
inline int BidRequest::imp_size() const {
  return imp_.size();
}
inline void BidRequest::clear_imp() {
  imp_.Clear();
}
inline const ::protocol::dsp::BidRequest_Imp& BidRequest::imp(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.imp)
  return imp_.Get(index);
}
inline ::protocol::dsp::BidRequest_Imp* BidRequest::mutable_imp(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.imp)
  return imp_.Mutable(index);
}
inline ::protocol::dsp::BidRequest_Imp* BidRequest::add_imp() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.imp)
  return imp_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp >*
BidRequest::mutable_imp() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.imp)
  return &imp_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp >&
BidRequest::imp() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.imp)
  return imp_;
}

// optional .protocol.dsp.BidRequest.Site site = 4;
inline bool BidRequest::has_site() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest::set_has_site() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest::clear_has_site() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest::clear_site() {
  if (site_ != NULL) site_->::protocol::dsp::BidRequest_Site::Clear();
  clear_has_site();
}
inline const ::protocol::dsp::BidRequest_Site& BidRequest::site() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.site)
  return site_ != NULL ? *site_ : *default_instance_->site_;
}
inline ::protocol::dsp::BidRequest_Site* BidRequest::mutable_site() {
  set_has_site();
  if (site_ == NULL) {
    site_ = new ::protocol::dsp::BidRequest_Site;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.site)
  return site_;
}
inline ::protocol::dsp::BidRequest_Site* BidRequest::release_site() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.site)
  clear_has_site();
  ::protocol::dsp::BidRequest_Site* temp = site_;
  site_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_site(::protocol::dsp::BidRequest_Site* site) {
  delete site_;
  site_ = site;
  if (site) {
    set_has_site();
  } else {
    clear_has_site();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.site)
}

// optional .protocol.dsp.BidRequest.App app = 5;
inline bool BidRequest::has_app() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest::set_has_app() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest::clear_app() {
  if (app_ != NULL) app_->::protocol::dsp::BidRequest_App::Clear();
  clear_has_app();
}
inline const ::protocol::dsp::BidRequest_App& BidRequest::app() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.app)
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
inline ::protocol::dsp::BidRequest_App* BidRequest::mutable_app() {
  set_has_app();
  if (app_ == NULL) {
    app_ = new ::protocol::dsp::BidRequest_App;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.app)
  return app_;
}
inline ::protocol::dsp::BidRequest_App* BidRequest::release_app() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.app)
  clear_has_app();
  ::protocol::dsp::BidRequest_App* temp = app_;
  app_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_app(::protocol::dsp::BidRequest_App* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.app)
}

// optional .protocol.dsp.BidRequest.Device device = 6;
inline bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_device() {
  if (device_ != NULL) device_->::protocol::dsp::BidRequest_Device::Clear();
  clear_has_device();
}
inline const ::protocol::dsp::BidRequest_Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::protocol::dsp::BidRequest_Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) {
    device_ = new ::protocol::dsp::BidRequest_Device;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.device)
  return device_;
}
inline ::protocol::dsp::BidRequest_Device* BidRequest::release_device() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.device)
  clear_has_device();
  ::protocol::dsp::BidRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_device(::protocol::dsp::BidRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.device)
}

// optional .protocol.dsp.BidRequest.User user = 7;
inline bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest::clear_user() {
  if (user_ != NULL) user_->::protocol::dsp::BidRequest_User::Clear();
  clear_has_user();
}
inline const ::protocol::dsp::BidRequest_User& BidRequest::user() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::protocol::dsp::BidRequest_User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::protocol::dsp::BidRequest_User;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.user)
  return user_;
}
inline ::protocol::dsp::BidRequest_User* BidRequest::release_user() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.user)
  clear_has_user();
  ::protocol::dsp::BidRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_user(::protocol::dsp::BidRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.user)
}

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid_Native_Asset

// optional uint32 type = 1;
inline bool BidResponse_SeatBid_Bid_Native_Asset::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 BidResponse_SeatBid_Bid_Native_Asset::type() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.type)
  return type_;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.type)
}

// optional string imgurl = 2;
inline bool BidResponse_SeatBid_Bid_Native_Asset::has_imgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_has_imgurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_imgurl() {
  imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgurl();
}
inline const ::std::string& BidResponse_SeatBid_Bid_Native_Asset::imgurl() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
  return imgurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_imgurl(const char* value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
}
inline ::std::string* BidResponse_SeatBid_Bid_Native_Asset::mutable_imgurl() {
  set_has_imgurl();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
  return imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse_SeatBid_Bid_Native_Asset::release_imgurl() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
  clear_has_imgurl();
  return imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl != NULL) {
    set_has_imgurl();
  } else {
    clear_has_imgurl();
  }
  imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgurl);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
}

// optional uint32 imgw = 3;
inline bool BidResponse_SeatBid_Bid_Native_Asset::has_imgw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_has_imgw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_has_imgw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_imgw() {
  imgw_ = 0u;
  clear_has_imgw();
}
inline ::google::protobuf::uint32 BidResponse_SeatBid_Bid_Native_Asset::imgw() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgw)
  return imgw_;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_imgw(::google::protobuf::uint32 value) {
  set_has_imgw();
  imgw_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgw)
}

// optional uint32 imgh = 4;
inline bool BidResponse_SeatBid_Bid_Native_Asset::has_imgh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_has_imgh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_has_imgh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_imgh() {
  imgh_ = 0u;
  clear_has_imgh();
}
inline ::google::protobuf::uint32 BidResponse_SeatBid_Bid_Native_Asset::imgh() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgh)
  return imgh_;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_imgh(::google::protobuf::uint32 value) {
  set_has_imgh();
  imgh_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgh)
}

// optional string data = 5;
inline bool BidResponse_SeatBid_Bid_Native_Asset::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse_SeatBid_Bid_Native_Asset::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& BidResponse_SeatBid_Bid_Native_Asset::data() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
}
inline ::std::string* BidResponse_SeatBid_Bid_Native_Asset::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse_SeatBid_Bid_Native_Asset::release_data() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid_Native_Asset::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
}

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid_Native

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid

// required string id = 1;
inline bool BidResponse_SeatBid_Bid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_SeatBid_Bid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_SeatBid_Bid::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BidResponse_SeatBid_Bid::id() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.id)
}
inline void BidResponse_SeatBid_Bid::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.id)
}
inline void BidResponse_SeatBid_Bid::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.id)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse_SeatBid_Bid::release_id() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.id)
}

// required string impid = 2;
inline bool BidResponse_SeatBid_Bid::has_impid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_impid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_SeatBid_Bid::clear_has_impid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_SeatBid_Bid::clear_impid() {
  impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_impid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::impid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.impid)
  return impid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_impid(const ::std::string& value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.impid)
}
inline void BidResponse_SeatBid_Bid::set_impid(const char* value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.impid)
}
inline void BidResponse_SeatBid_Bid::set_impid(const char* value, size_t size) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.impid)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_impid() {
  set_has_impid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.impid)
  return impid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse_SeatBid_Bid::release_impid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.impid)
  clear_has_impid();
  return impid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_allocated_impid(::std::string* impid) {
  if (impid != NULL) {
    set_has_impid();
  } else {
    clear_has_impid();
  }
  impid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.impid)
}

// optional .protocol.dsp.BidResponse.SeatBid.Bid.Native native = 3;
inline bool BidResponse_SeatBid_Bid::has_native() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_native() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_SeatBid_Bid::clear_has_native() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_SeatBid_Bid::clear_native() {
  if (native_ != NULL) native_->::protocol::dsp::BidResponse_SeatBid_Bid_Native::Clear();
  clear_has_native();
}
inline const ::protocol::dsp::BidResponse_SeatBid_Bid_Native& BidResponse_SeatBid_Bid::native() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.native)
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
inline ::protocol::dsp::BidResponse_SeatBid_Bid_Native* BidResponse_SeatBid_Bid::mutable_native() {
  set_has_native();
  if (native_ == NULL) {
    native_ = new ::protocol::dsp::BidResponse_SeatBid_Bid_Native;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.native)
  return native_;
}
inline ::protocol::dsp::BidResponse_SeatBid_Bid_Native* BidResponse_SeatBid_Bid::release_native() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.native)
  clear_has_native();
  ::protocol::dsp::BidResponse_SeatBid_Bid_Native* temp = native_;
  native_ = NULL;
  return temp;
}
inline void BidResponse_SeatBid_Bid::set_allocated_native(::protocol::dsp::BidResponse_SeatBid_Bid_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.native)
}

// required float price = 4;
inline bool BidResponse_SeatBid_Bid::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_SeatBid_Bid::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_SeatBid_Bid::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline float BidResponse_SeatBid_Bid::price() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.price)
  return price_;
}
inline void BidResponse_SeatBid_Bid::set_price(float value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.price)
}

// required string nurl = 5;
inline bool BidResponse_SeatBid_Bid::has_nurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_nurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidResponse_SeatBid_Bid::clear_has_nurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidResponse_SeatBid_Bid::clear_nurl() {
  nurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nurl();
}
inline const ::std::string& BidResponse_SeatBid_Bid::nurl() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
  return nurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_nurl(const ::std::string& value) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
}
inline void BidResponse_SeatBid_Bid::set_nurl(const char* value) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
}
inline void BidResponse_SeatBid_Bid::set_nurl(const char* value, size_t size) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_nurl() {
  set_has_nurl();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
  return nurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse_SeatBid_Bid::release_nurl() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
  clear_has_nurl();
  return nurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_allocated_nurl(::std::string* nurl) {
  if (nurl != NULL) {
    set_has_nurl();
  } else {
    clear_has_nurl();
  }
  nurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nurl);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
}

// required uint32 admtype = 6;
inline bool BidResponse_SeatBid_Bid::has_admtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_admtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidResponse_SeatBid_Bid::clear_has_admtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidResponse_SeatBid_Bid::clear_admtype() {
  admtype_ = 0u;
  clear_has_admtype();
}
inline ::google::protobuf::uint32 BidResponse_SeatBid_Bid::admtype() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.admtype)
  return admtype_;
}
inline void BidResponse_SeatBid_Bid::set_admtype(::google::protobuf::uint32 value) {
  set_has_admtype();
  admtype_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.admtype)
}

// required string adm = 7;
inline bool BidResponse_SeatBid_Bid::has_adm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_adm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidResponse_SeatBid_Bid::clear_has_adm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidResponse_SeatBid_Bid::clear_adm() {
  adm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adm();
}
inline const ::std::string& BidResponse_SeatBid_Bid::adm() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.adm)
  return adm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_adm(const ::std::string& value) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.adm)
}
inline void BidResponse_SeatBid_Bid::set_adm(const char* value) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.adm)
}
inline void BidResponse_SeatBid_Bid::set_adm(const char* value, size_t size) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.adm)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_adm() {
  set_has_adm();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.adm)
  return adm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse_SeatBid_Bid::release_adm() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.adm)
  clear_has_adm();
  return adm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_allocated_adm(::std::string* adm) {
  if (adm != NULL) {
    set_has_adm();
  } else {
    clear_has_adm();
  }
  adm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adm);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.adm)
}

// repeated string pvm = 8;
inline int BidResponse_SeatBid_Bid::pvm_size() const {
  return pvm_.size();
}
inline void BidResponse_SeatBid_Bid::clear_pvm() {
  pvm_.Clear();
}
inline const ::std::string& BidResponse_SeatBid_Bid::pvm(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return pvm_.Get(index);
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_pvm(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return pvm_.Mutable(index);
}
inline void BidResponse_SeatBid_Bid::set_pvm(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  pvm_.Mutable(index)->assign(value);
}
inline void BidResponse_SeatBid_Bid::set_pvm(int index, const char* value) {
  pvm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
inline void BidResponse_SeatBid_Bid::set_pvm(int index, const char* value, size_t size) {
  pvm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
inline ::std::string* BidResponse_SeatBid_Bid::add_pvm() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return pvm_.Add();
}
inline void BidResponse_SeatBid_Bid::add_pvm(const ::std::string& value) {
  pvm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
inline void BidResponse_SeatBid_Bid::add_pvm(const char* value) {
  pvm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
inline void BidResponse_SeatBid_Bid::add_pvm(const char* value, size_t size) {
  pvm_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::pvm() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return pvm_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_pvm() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return &pvm_;
}

// required string clickm = 9;
inline bool BidResponse_SeatBid_Bid::has_clickm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_clickm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidResponse_SeatBid_Bid::clear_has_clickm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidResponse_SeatBid_Bid::clear_clickm() {
  clickm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clickm();
}
inline const ::std::string& BidResponse_SeatBid_Bid::clickm() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
  return clickm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_clickm(const ::std::string& value) {
  set_has_clickm();
  clickm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
}
inline void BidResponse_SeatBid_Bid::set_clickm(const char* value) {
  set_has_clickm();
  clickm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
}
inline void BidResponse_SeatBid_Bid::set_clickm(const char* value, size_t size) {
  set_has_clickm();
  clickm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_clickm() {
  set_has_clickm();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
  return clickm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse_SeatBid_Bid::release_clickm() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
  clear_has_clickm();
  return clickm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_allocated_clickm(::std::string* clickm) {
  if (clickm != NULL) {
    set_has_clickm();
  } else {
    clear_has_clickm();
  }
  clickm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clickm);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
}

// optional string dealId = 10;
inline bool BidResponse_SeatBid_Bid::has_dealid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidResponse_SeatBid_Bid::set_has_dealid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidResponse_SeatBid_Bid::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidResponse_SeatBid_Bid::clear_dealid() {
  dealid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dealid();
}
inline const ::std::string& BidResponse_SeatBid_Bid::dealid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
  return dealid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_dealid(const ::std::string& value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
}
inline void BidResponse_SeatBid_Bid::set_dealid(const char* value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
}
inline void BidResponse_SeatBid_Bid::set_dealid(const char* value, size_t size) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
}
inline ::std::string* BidResponse_SeatBid_Bid::mutable_dealid() {
  set_has_dealid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
  return dealid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse_SeatBid_Bid::release_dealid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
  clear_has_dealid();
  return dealid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse_SeatBid_Bid::set_allocated_dealid(::std::string* dealid) {
  if (dealid != NULL) {
    set_has_dealid();
  } else {
    clear_has_dealid();
  }
  dealid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
}

// -------------------------------------------------------------------

// BidResponse_SeatBid

// repeated .protocol.dsp.BidResponse.SeatBid.Bid bid = 1;
inline int BidResponse_SeatBid::bid_size() const {
  return bid_.size();
}
inline void BidResponse_SeatBid::clear_bid() {
  bid_.Clear();
}
inline const ::protocol::dsp::BidResponse_SeatBid_Bid& BidResponse_SeatBid::bid(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.bid)
  return bid_.Get(index);
}
inline ::protocol::dsp::BidResponse_SeatBid_Bid* BidResponse_SeatBid::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.bid)
  return bid_.Mutable(index);
}
inline ::protocol::dsp::BidResponse_SeatBid_Bid* BidResponse_SeatBid::add_bid() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidResponse.SeatBid.bid)
  return bid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid >*
BidResponse_SeatBid::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidResponse.SeatBid.bid)
  return &bid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid >&
BidResponse_SeatBid::bid() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidResponse.SeatBid.bid)
  return bid_;
}

// -------------------------------------------------------------------

// BidResponse

// required string id = 1;
inline bool BidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.id)
}
inline void BidResponse::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.id)
}
inline void BidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.id)
}
inline ::std::string* BidResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse::release_id() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.id)
}

// optional string bidid = 2;
inline bool BidResponse::has_bidid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse::set_has_bidid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse::clear_has_bidid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse::clear_bidid() {
  bidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bidid();
}
inline const ::std::string& BidResponse::bidid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.bidid)
  return bidid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse::set_bidid(const ::std::string& value) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.bidid)
}
inline void BidResponse::set_bidid(const char* value) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.bidid)
}
inline void BidResponse::set_bidid(const char* value, size_t size) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.bidid)
}
inline ::std::string* BidResponse::mutable_bidid() {
  set_has_bidid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.bidid)
  return bidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidResponse::release_bidid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.bidid)
  clear_has_bidid();
  return bidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidResponse::set_allocated_bidid(::std::string* bidid) {
  if (bidid != NULL) {
    set_has_bidid();
  } else {
    clear_has_bidid();
  }
  bidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bidid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.bidid)
}

// repeated .protocol.dsp.BidResponse.SeatBid seatbid = 3;
inline int BidResponse::seatbid_size() const {
  return seatbid_.size();
}
inline void BidResponse::clear_seatbid() {
  seatbid_.Clear();
}
inline const ::protocol::dsp::BidResponse_SeatBid& BidResponse::seatbid(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.seatbid)
  return seatbid_.Get(index);
}
inline ::protocol::dsp::BidResponse_SeatBid* BidResponse::mutable_seatbid(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.seatbid)
  return seatbid_.Mutable(index);
}
inline ::protocol::dsp::BidResponse_SeatBid* BidResponse::add_seatbid() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidResponse.seatbid)
  return seatbid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid >*
BidResponse::mutable_seatbid() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidResponse.seatbid)
  return &seatbid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid >&
BidResponse::seatbid() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidResponse.seatbid)
  return seatbid_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dsp
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::dsp::BidRequest_Device_OSType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::dsp::BidRequest_Device_OSType>() {
  return ::protocol::dsp::BidRequest_Device_OSType_descriptor();
}
template <> struct is_proto_enum< ::protocol::dsp::BidRequest_Device_DeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::dsp::BidRequest_Device_DeviceType>() {
  return ::protocol::dsp::BidRequest_Device_DeviceType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mtty_5fbidding_2eproto__INCLUDED
