// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtty_bidding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mtty_bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace dsp {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Banner_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Native_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_Asset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Native_Asset_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_Asset_Title_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Native_Asset_Title_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_Asset_Img_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Native_Asset_Img_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Pmp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_Deal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Pmp_Deal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_App_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_OSType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_Native_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_Native_Asset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_Native_Asset_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mtty_5fbidding_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mtty_5fbidding_2eproto() {
  protobuf_AddDesc_mtty_5fbidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mtty_bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, imp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
  };
  BidRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _internal_metadata_),
      -1);
  BidRequest_Imp_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Imp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, tagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, pmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, secure_),
  };
  BidRequest_Imp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_descriptor_,
      BidRequest_Imp::default_instance_,
      BidRequest_Imp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Imp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _internal_metadata_),
      -1);
  BidRequest_Imp_Banner_descriptor_ = BidRequest_Imp_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Banner_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, mimes_),
  };
  BidRequest_Imp_Banner_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Banner_descriptor_,
      BidRequest_Imp_Banner::default_instance_,
      BidRequest_Imp_Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Imp_Banner),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, _internal_metadata_),
      -1);
  BidRequest_Imp_Native_descriptor_ = BidRequest_Imp_descriptor_->nested_type(1);
  static const int BidRequest_Imp_Native_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, assets_),
  };
  BidRequest_Imp_Native_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Native_descriptor_,
      BidRequest_Imp_Native::default_instance_,
      BidRequest_Imp_Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Imp_Native),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _internal_metadata_),
      -1);
  BidRequest_Imp_Native_Asset_descriptor_ = BidRequest_Imp_Native_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Native_Asset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset, img_),
  };
  BidRequest_Imp_Native_Asset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Native_Asset_descriptor_,
      BidRequest_Imp_Native_Asset::default_instance_,
      BidRequest_Imp_Native_Asset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Imp_Native_Asset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset, _internal_metadata_),
      -1);
  BidRequest_Imp_Native_Asset_Title_descriptor_ = BidRequest_Imp_Native_Asset_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Native_Asset_Title_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset_Title, len_),
  };
  BidRequest_Imp_Native_Asset_Title_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Native_Asset_Title_descriptor_,
      BidRequest_Imp_Native_Asset_Title::default_instance_,
      BidRequest_Imp_Native_Asset_Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset_Title, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Imp_Native_Asset_Title),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset_Title, _internal_metadata_),
      -1);
  BidRequest_Imp_Native_Asset_Img_descriptor_ = BidRequest_Imp_Native_Asset_descriptor_->nested_type(1);
  static const int BidRequest_Imp_Native_Asset_Img_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset_Img, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset_Img, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset_Img, mimes_),
  };
  BidRequest_Imp_Native_Asset_Img_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Native_Asset_Img_descriptor_,
      BidRequest_Imp_Native_Asset_Img::default_instance_,
      BidRequest_Imp_Native_Asset_Img_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset_Img, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Imp_Native_Asset_Img),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native_Asset_Img, _internal_metadata_),
      -1);
  BidRequest_Imp_Pmp_descriptor_ = BidRequest_Imp_descriptor_->nested_type(2);
  static const int BidRequest_Imp_Pmp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, deals_),
  };
  BidRequest_Imp_Pmp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Pmp_descriptor_,
      BidRequest_Imp_Pmp::default_instance_,
      BidRequest_Imp_Pmp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Imp_Pmp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, _internal_metadata_),
      -1);
  BidRequest_Imp_Pmp_Deal_descriptor_ = BidRequest_Imp_Pmp_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Pmp_Deal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, bidfloor_),
  };
  BidRequest_Imp_Pmp_Deal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Pmp_Deal_descriptor_,
      BidRequest_Imp_Pmp_Deal::default_instance_,
      BidRequest_Imp_Pmp_Deal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Imp_Pmp_Deal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, _internal_metadata_),
      -1);
  BidRequest_Site_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_Site_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, ref_),
  };
  BidRequest_Site_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Site_descriptor_,
      BidRequest_Site::default_instance_,
      BidRequest_Site_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Site),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, _internal_metadata_),
      -1);
  BidRequest_App_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_App_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, packagename_),
  };
  BidRequest_App_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_App_descriptor_,
      BidRequest_App::default_instance_,
      BidRequest_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_App),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _internal_metadata_),
      -1);
  BidRequest_Device_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Device_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, devtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, idfamd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, imeimd5_),
  };
  BidRequest_Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Device_descriptor_,
      BidRequest_Device::default_instance_,
      BidRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _internal_metadata_),
      -1);
  BidRequest_Device_OSType_descriptor_ = BidRequest_Device_descriptor_->enum_type(0);
  BidRequest_Device_DeviceType_descriptor_ = BidRequest_Device_descriptor_->enum_type(1);
  BidRequest_User_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_User_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, muid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, tags_),
  };
  BidRequest_User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_User_descriptor_,
      BidRequest_User::default_instance_,
      BidRequest_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidRequest_User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _internal_metadata_),
      -1);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seatbid_),
  };
  BidResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _internal_metadata_),
      -1);
  BidResponse_SeatBid_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, bid_),
  };
  BidResponse_SeatBid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_SeatBid_descriptor_,
      BidResponse_SeatBid::default_instance_,
      BidResponse_SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_SeatBid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _internal_metadata_),
      -1);
  BidResponse_SeatBid_Bid_descriptor_ = BidResponse_SeatBid_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_Bid_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, nurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, admtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, pvm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, clickm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, cm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, dealid_),
  };
  BidResponse_SeatBid_Bid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_SeatBid_Bid_descriptor_,
      BidResponse_SeatBid_Bid::default_instance_,
      BidResponse_SeatBid_Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_SeatBid_Bid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _internal_metadata_),
      -1);
  BidResponse_SeatBid_Bid_Native_descriptor_ = BidResponse_SeatBid_Bid_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_Bid_Native_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native, assets_),
  };
  BidResponse_SeatBid_Bid_Native_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_SeatBid_Bid_Native_descriptor_,
      BidResponse_SeatBid_Bid_Native::default_instance_,
      BidResponse_SeatBid_Bid_Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_SeatBid_Bid_Native),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native, _internal_metadata_),
      -1);
  BidResponse_SeatBid_Bid_Native_Asset_descriptor_ = BidResponse_SeatBid_Bid_Native_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_Bid_Native_Asset_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native_Asset, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native_Asset, imgurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native_Asset, imgw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native_Asset, imgh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native_Asset, data_),
  };
  BidResponse_SeatBid_Bid_Native_Asset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_SeatBid_Bid_Native_Asset_descriptor_,
      BidResponse_SeatBid_Bid_Native_Asset::default_instance_,
      BidResponse_SeatBid_Bid_Native_Asset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native_Asset, _has_bits_[0]),
      -1,
      -1,
      sizeof(BidResponse_SeatBid_Bid_Native_Asset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid_Native_Asset, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mtty_5fbidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_descriptor_, &BidRequest_Imp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Banner_descriptor_, &BidRequest_Imp_Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Native_descriptor_, &BidRequest_Imp_Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Native_Asset_descriptor_, &BidRequest_Imp_Native_Asset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Native_Asset_Title_descriptor_, &BidRequest_Imp_Native_Asset_Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Native_Asset_Img_descriptor_, &BidRequest_Imp_Native_Asset_Img::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Pmp_descriptor_, &BidRequest_Imp_Pmp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Pmp_Deal_descriptor_, &BidRequest_Imp_Pmp_Deal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Site_descriptor_, &BidRequest_Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_App_descriptor_, &BidRequest_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Device_descriptor_, &BidRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_User_descriptor_, &BidRequest_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_SeatBid_descriptor_, &BidResponse_SeatBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_SeatBid_Bid_descriptor_, &BidResponse_SeatBid_Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_SeatBid_Bid_Native_descriptor_, &BidResponse_SeatBid_Bid_Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_SeatBid_Bid_Native_Asset_descriptor_, &BidResponse_SeatBid_Bid_Native_Asset::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mtty_5fbidding_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Imp::default_instance_;
  delete BidRequest_Imp_reflection_;
  delete BidRequest_Imp_Banner::default_instance_;
  delete BidRequest_Imp_Banner_reflection_;
  delete BidRequest_Imp_Native::default_instance_;
  delete BidRequest_Imp_Native_reflection_;
  delete BidRequest_Imp_Native_Asset::default_instance_;
  delete BidRequest_Imp_Native_Asset_reflection_;
  delete BidRequest_Imp_Native_Asset_Title::default_instance_;
  delete BidRequest_Imp_Native_Asset_Title_reflection_;
  delete BidRequest_Imp_Native_Asset_Img::default_instance_;
  delete BidRequest_Imp_Native_Asset_Img_reflection_;
  delete BidRequest_Imp_Pmp::default_instance_;
  delete BidRequest_Imp_Pmp_reflection_;
  delete BidRequest_Imp_Pmp_Deal::default_instance_;
  delete BidRequest_Imp_Pmp_Deal_reflection_;
  delete BidRequest_Site::default_instance_;
  delete BidRequest_Site_reflection_;
  delete BidRequest_App::default_instance_;
  delete BidRequest_App_reflection_;
  delete BidRequest_Device::default_instance_;
  delete BidRequest_Device_reflection_;
  delete BidRequest_User::default_instance_;
  delete BidRequest_User_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_SeatBid::default_instance_;
  delete BidResponse_SeatBid_reflection_;
  delete BidResponse_SeatBid_Bid::default_instance_;
  delete BidResponse_SeatBid_Bid_reflection_;
  delete BidResponse_SeatBid_Bid_Native::default_instance_;
  delete BidResponse_SeatBid_Bid_Native_reflection_;
  delete BidResponse_SeatBid_Bid_Native_Asset::default_instance_;
  delete BidResponse_SeatBid_Bid_Native_Asset_reflection_;
}

void protobuf_AddDesc_mtty_5fbidding_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mtty_5fbidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022mtty_bidding.proto\022\014protocol.dsp\"\322\013\n\nB"
    "idRequest\022\013\n\003bid\030\001 \002(\t\022\n\n\002ip\030\002 \001(\t\022)\n\003im"
    "p\030\003 \003(\0132\034.protocol.dsp.BidRequest.Imp\022+\n"
    "\004site\030\004 \001(\0132\035.protocol.dsp.BidRequest.Si"
    "te\022)\n\003app\030\005 \001(\0132\034.protocol.dsp.BidReques"
    "t.App\022/\n\006device\030\006 \001(\0132\037.protocol.dsp.Bid"
    "Request.Device\022+\n\004user\030\007 \001(\0132\035.protocol."
    "dsp.BidRequest.User\032\216\005\n\003Imp\022\r\n\005impid\030\001 \002"
    "(\t\022\r\n\005tagid\030\002 \002(\t\022\020\n\010bidfloor\030\003 \002(\002\0223\n\006b"
    "anner\030\004 \001(\0132#.protocol.dsp.BidRequest.Im"
    "p.Banner\0223\n\006native\030\005 \001(\0132#.protocol.dsp."
    "BidRequest.Imp.Native\022-\n\003pmp\030\006 \001(\0132 .pro"
    "tocol.dsp.BidRequest.Imp.Pmp\022\021\n\006secure\030\007"
    " \002(\r:\0010\0326\n\006Banner\022\r\n\005width\030\001 \002(\r\022\016\n\006heig"
    "ht\030\002 \002(\r\022\r\n\005mimes\030\003 \003(\t\032\213\002\n\006Native\0229\n\006as"
    "sets\030\001 \003(\0132).protocol.dsp.BidRequest.Imp"
    ".Native.Asset\032\305\001\n\005Asset\022>\n\005title\030\001 \001(\0132/"
    ".protocol.dsp.BidRequest.Imp.Native.Asse"
    "t.Title\022:\n\003img\030\002 \001(\0132-.protocol.dsp.BidR"
    "equest.Imp.Native.Asset.Img\032\024\n\005Title\022\013\n\003"
    "len\030\001 \002(\r\032*\n\003Img\022\t\n\001w\030\001 \002(\r\022\t\n\001h\030\002 \002(\r\022\r"
    "\n\005mimes\030\003 \003(\t\032e\n\003Pmp\0224\n\005deals\030\001 \003(\0132%.pr"
    "otocol.dsp.BidRequest.Imp.Pmp.Deal\032(\n\004De"
    "al\022\016\n\006dealId\030\001 \001(\t\022\020\n\010bidfloor\030\002 \001(\002\032!\n\004"
    "Site\022\014\n\004name\030\001 \001(\t\022\013\n\003ref\030\002 \001(\t\032+\n\003App\022\017"
    "\n\007appname\030\001 \001(\t\022\023\n\013packagename\030\002 \001(\t\032\304\003\n"
    "\006Device\022\014\n\002ua\030\001 \002(\t:\000\022>\n\002os\030\002 \002(\0162&.prot"
    "ocol.dsp.BidRequest.Device.OSType:\nOS_UN"
    "KNOWN\022K\n\007devtype\030\003 \002(\0162*.protocol.dsp.Bi"
    "dRequest.Device.DeviceType:\016DEVICE_UNKNO"
    "WN\022\017\n\007idfamd5\030\004 \001(\t\022\017\n\007imeimd5\030\005 \001(\t\"^\n\006"
    "OSType\022\016\n\nOS_WINDOWS\020\001\022\n\n\006OS_MAC\020\002\022\014\n\010OS"
    "_LINUX\020\003\022\016\n\nOS_ANDROID\020\004\022\n\n\006OS_IOS\020\005\022\016\n\n"
    "OS_UNKNOWN\020\006\"\234\001\n\nDeviceType\022\021\n\rDEVICE_IP"
    "HONE\020\001\022\027\n\023DEVICE_ANDROIDPHONE\020\002\022\017\n\013DEVIC"
    "E_IPAD\020\003\022\027\n\023DEVICE_WINDOWSPHONE\020\004\022\025\n\021DEV"
    "ICE_ANDROIDPAD\020\005\022\r\n\tDEVICE_TV\020\006\022\022\n\016DEVIC"
    "E_UNKNOWN\020\007\032\"\n\004User\022\014\n\004muid\030\001 \002(\t\022\014\n\004tag"
    "s\030\002 \003(\t\"\221\004\n\013BidResponse\022\n\n\002id\030\001 \002(\t\022\r\n\005b"
    "idid\030\002 \001(\t\0222\n\007seatbid\030\003 \003(\0132!.protocol.d"
    "sp.BidResponse.SeatBid\032\262\003\n\007SeatBid\0222\n\003bi"
    "d\030\001 \003(\0132%.protocol.dsp.BidResponse.SeatB"
    "id.Bid\032\362\002\n\003Bid\022\n\n\002id\030\001 \002(\t\022\r\n\005impid\030\002 \002("
    "\t\022<\n\006native\030\003 \001(\0132,.protocol.dsp.BidResp"
    "onse.SeatBid.Bid.Native\022\r\n\005price\030\004 \002(\002\022\014"
    "\n\004nurl\030\005 \002(\t\022\017\n\007admtype\030\006 \002(\r\022\013\n\003adm\030\007 \002"
    "(\t\022\013\n\003pvm\030\010 \003(\t\022\016\n\006clickm\030\t \002(\t\022\n\n\002cm\030\n "
    "\003(\t\022\016\n\006dealId\030\013 \001(\t\032\235\001\n\006Native\022B\n\006assets"
    "\030\001 \003(\01322.protocol.dsp.BidResponse.SeatBi"
    "d.Bid.Native.Asset\032O\n\005Asset\022\014\n\004type\030\001 \001("
    "\r\022\016\n\006imgurl\030\002 \001(\t\022\014\n\004imgw\030\003 \001(\r\022\014\n\004imgh\030"
    "\004 \001(\r\022\014\n\004data\030\005 \001(\t", 2059);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mtty_bidding.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_Imp::default_instance_ = new BidRequest_Imp();
  BidRequest_Imp_Banner::default_instance_ = new BidRequest_Imp_Banner();
  BidRequest_Imp_Native::default_instance_ = new BidRequest_Imp_Native();
  BidRequest_Imp_Native_Asset::default_instance_ = new BidRequest_Imp_Native_Asset();
  BidRequest_Imp_Native_Asset_Title::default_instance_ = new BidRequest_Imp_Native_Asset_Title();
  BidRequest_Imp_Native_Asset_Img::default_instance_ = new BidRequest_Imp_Native_Asset_Img();
  BidRequest_Imp_Pmp::default_instance_ = new BidRequest_Imp_Pmp();
  BidRequest_Imp_Pmp_Deal::default_instance_ = new BidRequest_Imp_Pmp_Deal();
  BidRequest_Site::default_instance_ = new BidRequest_Site();
  BidRequest_App::default_instance_ = new BidRequest_App();
  BidRequest_Device::default_instance_ = new BidRequest_Device();
  BidRequest_User::default_instance_ = new BidRequest_User();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_SeatBid::default_instance_ = new BidResponse_SeatBid();
  BidResponse_SeatBid_Bid::default_instance_ = new BidResponse_SeatBid_Bid();
  BidResponse_SeatBid_Bid_Native::default_instance_ = new BidResponse_SeatBid_Bid_Native();
  BidResponse_SeatBid_Bid_Native_Asset::default_instance_ = new BidResponse_SeatBid_Bid_Native_Asset();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Banner::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Native::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Native_Asset::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Native_Asset_Title::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Native_Asset_Img::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Pmp::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Pmp_Deal::default_instance_->InitAsDefaultInstance();
  BidRequest_Site::default_instance_->InitAsDefaultInstance();
  BidRequest_App::default_instance_->InitAsDefaultInstance();
  BidRequest_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_User::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid_Native::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid_Native_Asset::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mtty_5fbidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mtty_5fbidding_2eproto {
  StaticDescriptorInitializer_mtty_5fbidding_2eproto() {
    protobuf_AddDesc_mtty_5fbidding_2eproto();
  }
} static_descriptor_initializer_mtty_5fbidding_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Banner::kWidthFieldNumber;
const int BidRequest_Imp_Banner::kHeightFieldNumber;
const int BidRequest_Imp_Banner::kMimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Banner::BidRequest_Imp_Banner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Imp.Banner)
}

void BidRequest_Imp_Banner::InitAsDefaultInstance() {
}

BidRequest_Imp_Banner::BidRequest_Imp_Banner(const BidRequest_Imp_Banner& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Imp.Banner)
}

void BidRequest_Imp_Banner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Banner::~BidRequest_Imp_Banner() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Imp.Banner)
  SharedDtor();
}

void BidRequest_Imp_Banner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Banner_descriptor_;
}

const BidRequest_Imp_Banner& BidRequest_Imp_Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Banner* BidRequest_Imp_Banner::default_instance_ = NULL;

BidRequest_Imp_Banner* BidRequest_Imp_Banner::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Banner* n = new BidRequest_Imp_Banner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Banner::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Imp.Banner)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Imp_Banner, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Imp_Banner*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  mimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Imp.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 3;
      case 3: {
        if (tag == 26) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Imp.Banner.mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mimes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Imp.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Imp.Banner)
  return false;
#undef DO_
}

void BidRequest_Imp_Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Imp.Banner)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // repeated string mimes = 3;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.Banner.mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mimes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Imp.Banner)
}

::google::protobuf::uint8* BidRequest_Imp_Banner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Imp.Banner)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // repeated string mimes = 3;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.Banner.mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mimes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Imp.Banner)
  return target;
}

int BidRequest_Imp_Banner::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.dsp.BidRequest.Imp.Banner)
  int total_size = 0;

  if (has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
int BidRequest_Imp_Banner::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Imp.Banner)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string mimes = 3;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Banner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Imp.Banner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Banner* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Banner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Imp.Banner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Imp.Banner)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Banner::MergeFrom(const BidRequest_Imp_Banner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Imp.Banner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mimes_.MergeFrom(from.mimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Banner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Imp.Banner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Banner::CopyFrom(const BidRequest_Imp_Banner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Imp.Banner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Banner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_Imp_Banner::Swap(BidRequest_Imp_Banner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Banner::InternalSwap(BidRequest_Imp_Banner* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  mimes_.UnsafeArenaSwap(&other->mimes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Imp_Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Banner_descriptor_;
  metadata.reflection = BidRequest_Imp_Banner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Native_Asset_Title::kLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Native_Asset_Title::BidRequest_Imp_Native_Asset_Title()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
}

void BidRequest_Imp_Native_Asset_Title::InitAsDefaultInstance() {
}

BidRequest_Imp_Native_Asset_Title::BidRequest_Imp_Native_Asset_Title(const BidRequest_Imp_Native_Asset_Title& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
}

void BidRequest_Imp_Native_Asset_Title::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Native_Asset_Title::~BidRequest_Imp_Native_Asset_Title() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  SharedDtor();
}

void BidRequest_Imp_Native_Asset_Title::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Native_Asset_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_Asset_Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Native_Asset_Title_descriptor_;
}

const BidRequest_Imp_Native_Asset_Title& BidRequest_Imp_Native_Asset_Title::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Native_Asset_Title* BidRequest_Imp_Native_Asset_Title::default_instance_ = NULL;

BidRequest_Imp_Native_Asset_Title* BidRequest_Imp_Native_Asset_Title::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Native_Asset_Title* n = new BidRequest_Imp_Native_Asset_Title;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Native_Asset_Title::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Native_Asset_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 len = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  return false;
#undef DO_
}

void BidRequest_Imp_Native_Asset_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  // required uint32 len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
}

::google::protobuf::uint8* BidRequest_Imp_Native_Asset_Title::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  // required uint32 len = 1;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  return target;
}

int BidRequest_Imp_Native_Asset_Title::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  int total_size = 0;

  // required uint32 len = 1;
  if (has_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->len());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Native_Asset_Title::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Native_Asset_Title* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Native_Asset_Title>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Native_Asset_Title::MergeFrom(const BidRequest_Imp_Native_Asset_Title& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Native_Asset_Title::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Native_Asset_Title::CopyFrom(const BidRequest_Imp_Native_Asset_Title& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Imp.Native.Asset.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Native_Asset_Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_Imp_Native_Asset_Title::Swap(BidRequest_Imp_Native_Asset_Title* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Native_Asset_Title::InternalSwap(BidRequest_Imp_Native_Asset_Title* other) {
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Imp_Native_Asset_Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Native_Asset_Title_descriptor_;
  metadata.reflection = BidRequest_Imp_Native_Asset_Title_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Native_Asset_Img::kWFieldNumber;
const int BidRequest_Imp_Native_Asset_Img::kHFieldNumber;
const int BidRequest_Imp_Native_Asset_Img::kMimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Native_Asset_Img::BidRequest_Imp_Native_Asset_Img()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
}

void BidRequest_Imp_Native_Asset_Img::InitAsDefaultInstance() {
}

BidRequest_Imp_Native_Asset_Img::BidRequest_Imp_Native_Asset_Img(const BidRequest_Imp_Native_Asset_Img& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
}

void BidRequest_Imp_Native_Asset_Img::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  w_ = 0u;
  h_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Native_Asset_Img::~BidRequest_Imp_Native_Asset_Img() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  SharedDtor();
}

void BidRequest_Imp_Native_Asset_Img::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Native_Asset_Img::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_Asset_Img::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Native_Asset_Img_descriptor_;
}

const BidRequest_Imp_Native_Asset_Img& BidRequest_Imp_Native_Asset_Img::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Native_Asset_Img* BidRequest_Imp_Native_Asset_Img::default_instance_ = NULL;

BidRequest_Imp_Native_Asset_Img* BidRequest_Imp_Native_Asset_Img::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Native_Asset_Img* n = new BidRequest_Imp_Native_Asset_Img;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Native_Asset_Img::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Imp_Native_Asset_Img, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Imp_Native_Asset_Img*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(w_, h_);

#undef ZR_HELPER_
#undef ZR_

  mimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Native_Asset_Img::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 w = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_h;
        break;
      }

      // required uint32 h = 2;
      case 2: {
        if (tag == 16) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 3;
      case 3: {
        if (tag == 26) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mimes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  return false;
#undef DO_
}

void BidRequest_Imp_Native_Asset_Img::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  // required uint32 w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->w(), output);
  }

  // required uint32 h = 2;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->h(), output);
  }

  // repeated string mimes = 3;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mimes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
}

::google::protobuf::uint8* BidRequest_Imp_Native_Asset_Img::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  // required uint32 w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->w(), target);
  }

  // required uint32 h = 2;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->h(), target);
  }

  // repeated string mimes = 3;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mimes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  return target;
}

int BidRequest_Imp_Native_Asset_Img::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  int total_size = 0;

  if (has_w()) {
    // required uint32 w = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->w());
  }

  if (has_h()) {
    // required uint32 h = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h());
  }

  return total_size;
}
int BidRequest_Imp_Native_Asset_Img::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 w = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->w());

    // required uint32 h = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string mimes = 3;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Native_Asset_Img::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Native_Asset_Img* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Native_Asset_Img>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Native_Asset_Img::MergeFrom(const BidRequest_Imp_Native_Asset_Img& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mimes_.MergeFrom(from.mimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Native_Asset_Img::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Native_Asset_Img::CopyFrom(const BidRequest_Imp_Native_Asset_Img& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Imp.Native.Asset.Img)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Native_Asset_Img::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BidRequest_Imp_Native_Asset_Img::Swap(BidRequest_Imp_Native_Asset_Img* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Native_Asset_Img::InternalSwap(BidRequest_Imp_Native_Asset_Img* other) {
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  mimes_.UnsafeArenaSwap(&other->mimes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Imp_Native_Asset_Img::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Native_Asset_Img_descriptor_;
  metadata.reflection = BidRequest_Imp_Native_Asset_Img_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Native_Asset::kTitleFieldNumber;
const int BidRequest_Imp_Native_Asset::kImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Native_Asset::BidRequest_Imp_Native_Asset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Imp.Native.Asset)
}

void BidRequest_Imp_Native_Asset::InitAsDefaultInstance() {
  title_ = const_cast< ::protocol::dsp::BidRequest_Imp_Native_Asset_Title*>(&::protocol::dsp::BidRequest_Imp_Native_Asset_Title::default_instance());
  img_ = const_cast< ::protocol::dsp::BidRequest_Imp_Native_Asset_Img*>(&::protocol::dsp::BidRequest_Imp_Native_Asset_Img::default_instance());
}

BidRequest_Imp_Native_Asset::BidRequest_Imp_Native_Asset(const BidRequest_Imp_Native_Asset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Imp.Native.Asset)
}

void BidRequest_Imp_Native_Asset::SharedCtor() {
  _cached_size_ = 0;
  title_ = NULL;
  img_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Native_Asset::~BidRequest_Imp_Native_Asset() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Imp.Native.Asset)
  SharedDtor();
}

void BidRequest_Imp_Native_Asset::SharedDtor() {
  if (this != default_instance_) {
    delete title_;
    delete img_;
  }
}

void BidRequest_Imp_Native_Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_Asset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Native_Asset_descriptor_;
}

const BidRequest_Imp_Native_Asset& BidRequest_Imp_Native_Asset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Native_Asset* BidRequest_Imp_Native_Asset::default_instance_ = NULL;

BidRequest_Imp_Native_Asset* BidRequest_Imp_Native_Asset::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Native_Asset* n = new BidRequest_Imp_Native_Asset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Native_Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_title()) {
      if (title_ != NULL) title_->::protocol::dsp::BidRequest_Imp_Native_Asset_Title::Clear();
    }
    if (has_img()) {
      if (img_ != NULL) img_->::protocol::dsp::BidRequest_Imp_Native_Asset_Img::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Native_Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Title title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_img;
        break;
      }

      // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Img img = 2;
      case 2: {
        if (tag == 18) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Imp.Native.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Imp.Native.Asset)
  return false;
#undef DO_
}

void BidRequest_Imp_Native_Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Title title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->title_, output);
  }

  // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Img img = 2;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->img_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Imp.Native.Asset)
}

::google::protobuf::uint8* BidRequest_Imp_Native_Asset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Title title = 1;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->title_, false, target);
  }

  // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Img img = 2;
  if (has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->img_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Imp.Native.Asset)
  return target;
}

int BidRequest_Imp_Native_Asset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Title title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->title_);
    }

    // optional .protocol.dsp.BidRequest.Imp.Native.Asset.Img img = 2;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->img_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Native_Asset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Native_Asset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Native_Asset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Imp.Native.Asset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Imp.Native.Asset)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Native_Asset::MergeFrom(const BidRequest_Imp_Native_Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      mutable_title()->::protocol::dsp::BidRequest_Imp_Native_Asset_Title::MergeFrom(from.title());
    }
    if (from.has_img()) {
      mutable_img()->::protocol::dsp::BidRequest_Imp_Native_Asset_Img::MergeFrom(from.img());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Native_Asset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Native_Asset::CopyFrom(const BidRequest_Imp_Native_Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Imp.Native.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Native_Asset::IsInitialized() const {

  if (has_title()) {
    if (!this->title_->IsInitialized()) return false;
  }
  if (has_img()) {
    if (!this->img_->IsInitialized()) return false;
  }
  return true;
}

void BidRequest_Imp_Native_Asset::Swap(BidRequest_Imp_Native_Asset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Native_Asset::InternalSwap(BidRequest_Imp_Native_Asset* other) {
  std::swap(title_, other->title_);
  std::swap(img_, other->img_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Imp_Native_Asset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Native_Asset_descriptor_;
  metadata.reflection = BidRequest_Imp_Native_Asset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Native::kAssetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Native::BidRequest_Imp_Native()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Imp.Native)
}

void BidRequest_Imp_Native::InitAsDefaultInstance() {
}

BidRequest_Imp_Native::BidRequest_Imp_Native(const BidRequest_Imp_Native& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Imp.Native)
}

void BidRequest_Imp_Native::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Native::~BidRequest_Imp_Native() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Imp.Native)
  SharedDtor();
}

void BidRequest_Imp_Native::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Native_descriptor_;
}

const BidRequest_Imp_Native& BidRequest_Imp_Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Native* BidRequest_Imp_Native::default_instance_ = NULL;

BidRequest_Imp_Native* BidRequest_Imp_Native::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Native* n = new BidRequest_Imp_Native;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Native::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Imp.Native)
  assets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Imp.Native)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.dsp.BidRequest.Imp.Native.Asset assets = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_assets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Imp.Native)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Imp.Native)
  return false;
#undef DO_
}

void BidRequest_Imp_Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Imp.Native)
  // repeated .protocol.dsp.BidRequest.Imp.Native.Asset assets = 1;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Imp.Native)
}

::google::protobuf::uint8* BidRequest_Imp_Native::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Imp.Native)
  // repeated .protocol.dsp.BidRequest.Imp.Native.Asset assets = 1;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->assets(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Imp.Native)
  return target;
}

int BidRequest_Imp_Native::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Imp.Native)
  int total_size = 0;

  // repeated .protocol.dsp.BidRequest.Imp.Native.Asset assets = 1;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assets(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Native::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Imp.Native)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Native* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Native>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Imp.Native)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Imp.Native)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Native::MergeFrom(const BidRequest_Imp_Native& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Imp.Native)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assets_.MergeFrom(from.assets_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Native::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Imp.Native)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Native::CopyFrom(const BidRequest_Imp_Native& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Imp.Native)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Native::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->assets())) return false;
  return true;
}

void BidRequest_Imp_Native::Swap(BidRequest_Imp_Native* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Native::InternalSwap(BidRequest_Imp_Native* other) {
  assets_.UnsafeArenaSwap(&other->assets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Imp_Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Native_descriptor_;
  metadata.reflection = BidRequest_Imp_Native_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Pmp_Deal::kDealIdFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kBidfloorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Pmp_Deal::BidRequest_Imp_Pmp_Deal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Imp.Pmp.Deal)
}

void BidRequest_Imp_Pmp_Deal::InitAsDefaultInstance() {
}

BidRequest_Imp_Pmp_Deal::BidRequest_Imp_Pmp_Deal(const BidRequest_Imp_Pmp_Deal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Imp.Pmp.Deal)
}

void BidRequest_Imp_Pmp_Deal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dealid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Pmp_Deal::~BidRequest_Imp_Pmp_Deal() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  SharedDtor();
}

void BidRequest_Imp_Pmp_Deal::SharedDtor() {
  dealid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Pmp_Deal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_Deal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Pmp_Deal_descriptor_;
}

const BidRequest_Imp_Pmp_Deal& BidRequest_Imp_Pmp_Deal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp_Deal::default_instance_ = NULL;

BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp_Deal::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Pmp_Deal* n = new BidRequest_Imp_Pmp_Deal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Pmp_Deal::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_dealid()) {
      dealid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bidfloor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Pmp_Deal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dealId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dealid().data(), this->dealid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_bidfloor;
        break;
      }

      // optional float bidfloor = 2;
      case 2: {
        if (tag == 21) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  return false;
#undef DO_
}

void BidRequest_Imp_Pmp_Deal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  // optional string dealId = 1;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dealid(), output);
  }

  // optional float bidfloor = 2;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bidfloor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Imp.Pmp.Deal)
}

::google::protobuf::uint8* BidRequest_Imp_Pmp_Deal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  // optional string dealId = 1;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dealid(), target);
  }

  // optional float bidfloor = 2;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bidfloor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  return target;
}

int BidRequest_Imp_Pmp_Deal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string dealId = 1;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealid());
    }

    // optional float bidfloor = 2;
    if (has_bidfloor()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Pmp_Deal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Pmp_Deal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Pmp_Deal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Imp.Pmp.Deal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Imp.Pmp.Deal)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Pmp_Deal::MergeFrom(const BidRequest_Imp_Pmp_Deal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dealid()) {
      set_has_dealid();
      dealid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dealid_);
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Pmp_Deal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Pmp_Deal::CopyFrom(const BidRequest_Imp_Pmp_Deal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Imp.Pmp.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Pmp_Deal::IsInitialized() const {

  return true;
}

void BidRequest_Imp_Pmp_Deal::Swap(BidRequest_Imp_Pmp_Deal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Pmp_Deal::InternalSwap(BidRequest_Imp_Pmp_Deal* other) {
  dealid_.Swap(&other->dealid_);
  std::swap(bidfloor_, other->bidfloor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Imp_Pmp_Deal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Pmp_Deal_descriptor_;
  metadata.reflection = BidRequest_Imp_Pmp_Deal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Pmp::kDealsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Pmp::BidRequest_Imp_Pmp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Imp.Pmp)
}

void BidRequest_Imp_Pmp::InitAsDefaultInstance() {
}

BidRequest_Imp_Pmp::BidRequest_Imp_Pmp(const BidRequest_Imp_Pmp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Imp.Pmp)
}

void BidRequest_Imp_Pmp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Pmp::~BidRequest_Imp_Pmp() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Imp.Pmp)
  SharedDtor();
}

void BidRequest_Imp_Pmp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Pmp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Pmp_descriptor_;
}

const BidRequest_Imp_Pmp& BidRequest_Imp_Pmp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Pmp* BidRequest_Imp_Pmp::default_instance_ = NULL;

BidRequest_Imp_Pmp* BidRequest_Imp_Pmp::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Pmp* n = new BidRequest_Imp_Pmp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Pmp::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Imp.Pmp)
  deals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Pmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Imp.Pmp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.dsp.BidRequest.Imp.Pmp.Deal deals = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_deals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_deals;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Imp.Pmp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Imp.Pmp)
  return false;
#undef DO_
}

void BidRequest_Imp_Pmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Imp.Pmp)
  // repeated .protocol.dsp.BidRequest.Imp.Pmp.Deal deals = 1;
  for (unsigned int i = 0, n = this->deals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deals(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Imp.Pmp)
}

::google::protobuf::uint8* BidRequest_Imp_Pmp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Imp.Pmp)
  // repeated .protocol.dsp.BidRequest.Imp.Pmp.Deal deals = 1;
  for (unsigned int i = 0, n = this->deals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->deals(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Imp.Pmp)
  return target;
}

int BidRequest_Imp_Pmp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Imp.Pmp)
  int total_size = 0;

  // repeated .protocol.dsp.BidRequest.Imp.Pmp.Deal deals = 1;
  total_size += 1 * this->deals_size();
  for (int i = 0; i < this->deals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deals(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Pmp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Imp.Pmp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Pmp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Pmp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Imp.Pmp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Imp.Pmp)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Pmp::MergeFrom(const BidRequest_Imp_Pmp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Imp.Pmp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  deals_.MergeFrom(from.deals_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Pmp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Imp.Pmp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Pmp::CopyFrom(const BidRequest_Imp_Pmp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Imp.Pmp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Pmp::IsInitialized() const {

  return true;
}

void BidRequest_Imp_Pmp::Swap(BidRequest_Imp_Pmp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Pmp::InternalSwap(BidRequest_Imp_Pmp* other) {
  deals_.UnsafeArenaSwap(&other->deals_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Imp_Pmp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Pmp_descriptor_;
  metadata.reflection = BidRequest_Imp_Pmp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp::kImpidFieldNumber;
const int BidRequest_Imp::kTagidFieldNumber;
const int BidRequest_Imp::kBidfloorFieldNumber;
const int BidRequest_Imp::kBannerFieldNumber;
const int BidRequest_Imp::kNativeFieldNumber;
const int BidRequest_Imp::kPmpFieldNumber;
const int BidRequest_Imp::kSecureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp::BidRequest_Imp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Imp)
}

void BidRequest_Imp::InitAsDefaultInstance() {
  banner_ = const_cast< ::protocol::dsp::BidRequest_Imp_Banner*>(&::protocol::dsp::BidRequest_Imp_Banner::default_instance());
  native_ = const_cast< ::protocol::dsp::BidRequest_Imp_Native*>(&::protocol::dsp::BidRequest_Imp_Native::default_instance());
  pmp_ = const_cast< ::protocol::dsp::BidRequest_Imp_Pmp*>(&::protocol::dsp::BidRequest_Imp_Pmp::default_instance());
}

BidRequest_Imp::BidRequest_Imp(const BidRequest_Imp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Imp)
}

void BidRequest_Imp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  impid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0;
  banner_ = NULL;
  native_ = NULL;
  pmp_ = NULL;
  secure_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp::~BidRequest_Imp() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Imp)
  SharedDtor();
}

void BidRequest_Imp::SharedDtor() {
  impid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete banner_;
    delete native_;
    delete pmp_;
  }
}

void BidRequest_Imp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_descriptor_;
}

const BidRequest_Imp& BidRequest_Imp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Imp* BidRequest_Imp::default_instance_ = NULL;

BidRequest_Imp* BidRequest_Imp::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp* n = new BidRequest_Imp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Imp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Imp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Imp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(bidfloor_, secure_);
    if (has_impid()) {
      impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tagid()) {
      tagid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::protocol::dsp::BidRequest_Imp_Banner::Clear();
    }
    if (has_native()) {
      if (native_ != NULL) native_->::protocol::dsp::BidRequest_Imp_Native::Clear();
    }
    if (has_pmp()) {
      if (pmp_ != NULL) pmp_->::protocol::dsp::BidRequest_Imp_Pmp::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Imp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string impid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Imp.impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tagid;
        break;
      }

      // required string tagid = 2;
      case 2: {
        if (tag == 18) {
         parse_tagid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagid().data(), this->tagid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Imp.tagid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_bidfloor;
        break;
      }

      // required float bidfloor = 3;
      case 3: {
        if (tag == 29) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_banner;
        break;
      }

      // optional .protocol.dsp.BidRequest.Imp.Banner banner = 4;
      case 4: {
        if (tag == 34) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_native;
        break;
      }

      // optional .protocol.dsp.BidRequest.Imp.Native native = 5;
      case 5: {
        if (tag == 42) {
         parse_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pmp;
        break;
      }

      // optional .protocol.dsp.BidRequest.Imp.Pmp pmp = 6;
      case 6: {
        if (tag == 50) {
         parse_pmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pmp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_secure;
        break;
      }

      // required uint32 secure = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Imp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Imp)
  return false;
#undef DO_
}

void BidRequest_Imp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Imp)
  // required string impid = 1;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->impid(), output);
  }

  // required string tagid = 2;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagid().data(), this->tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.tagid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tagid(), output);
  }

  // required float bidfloor = 3;
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bidfloor(), output);
  }

  // optional .protocol.dsp.BidRequest.Imp.Banner banner = 4;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->banner_, output);
  }

  // optional .protocol.dsp.BidRequest.Imp.Native native = 5;
  if (has_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->native_, output);
  }

  // optional .protocol.dsp.BidRequest.Imp.Pmp pmp = 6;
  if (has_pmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pmp_, output);
  }

  // required uint32 secure = 7 [default = 0];
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->secure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Imp)
}

::google::protobuf::uint8* BidRequest_Imp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Imp)
  // required string impid = 1;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->impid(), target);
  }

  // required string tagid = 2;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagid().data(), this->tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Imp.tagid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tagid(), target);
  }

  // required float bidfloor = 3;
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bidfloor(), target);
  }

  // optional .protocol.dsp.BidRequest.Imp.Banner banner = 4;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->banner_, false, target);
  }

  // optional .protocol.dsp.BidRequest.Imp.Native native = 5;
  if (has_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->native_, false, target);
  }

  // optional .protocol.dsp.BidRequest.Imp.Pmp pmp = 6;
  if (has_pmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->pmp_, false, target);
  }

  // required uint32 secure = 7 [default = 0];
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->secure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Imp)
  return target;
}

int BidRequest_Imp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.dsp.BidRequest.Imp)
  int total_size = 0;

  if (has_impid()) {
    // required string impid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->impid());
  }

  if (has_tagid()) {
    // required string tagid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tagid());
  }

  if (has_bidfloor()) {
    // required float bidfloor = 3;
    total_size += 1 + 4;
  }

  if (has_secure()) {
    // required uint32 secure = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secure());
  }

  return total_size;
}
int BidRequest_Imp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Imp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000047) ^ 0x00000047) == 0) {  // All required fields are present.
    // required string impid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->impid());

    // required string tagid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tagid());

    // required float bidfloor = 3;
    total_size += 1 + 4;

    // required uint32 secure = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secure());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 56u) {
    // optional .protocol.dsp.BidRequest.Imp.Banner banner = 4;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->banner_);
    }

    // optional .protocol.dsp.BidRequest.Imp.Native native = 5;
    if (has_native()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->native_);
    }

    // optional .protocol.dsp.BidRequest.Imp.Pmp pmp = 6;
    if (has_pmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pmp_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Imp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Imp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Imp)
    MergeFrom(*source);
  }
}

void BidRequest_Imp::MergeFrom(const BidRequest_Imp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Imp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impid()) {
      set_has_impid();
      impid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.impid_);
    }
    if (from.has_tagid()) {
      set_has_tagid();
      tagid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagid_);
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
    if (from.has_banner()) {
      mutable_banner()->::protocol::dsp::BidRequest_Imp_Banner::MergeFrom(from.banner());
    }
    if (from.has_native()) {
      mutable_native()->::protocol::dsp::BidRequest_Imp_Native::MergeFrom(from.native());
    }
    if (from.has_pmp()) {
      mutable_pmp()->::protocol::dsp::BidRequest_Imp_Pmp::MergeFrom(from.pmp());
    }
    if (from.has_secure()) {
      set_secure(from.secure());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Imp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp::CopyFrom(const BidRequest_Imp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Imp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000047) != 0x00000047) return false;

  if (has_banner()) {
    if (!this->banner_->IsInitialized()) return false;
  }
  if (has_native()) {
    if (!this->native_->IsInitialized()) return false;
  }
  return true;
}

void BidRequest_Imp::Swap(BidRequest_Imp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp::InternalSwap(BidRequest_Imp* other) {
  impid_.Swap(&other->impid_);
  tagid_.Swap(&other->tagid_);
  std::swap(bidfloor_, other->bidfloor_);
  std::swap(banner_, other->banner_);
  std::swap(native_, other->native_);
  std::swap(pmp_, other->pmp_);
  std::swap(secure_, other->secure_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Imp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_descriptor_;
  metadata.reflection = BidRequest_Imp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Site::kNameFieldNumber;
const int BidRequest_Site::kRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Site::BidRequest_Site()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Site)
}

void BidRequest_Site::InitAsDefaultInstance() {
}

BidRequest_Site::BidRequest_Site(const BidRequest_Site& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Site)
}

void BidRequest_Site::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Site::~BidRequest_Site() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Site)
  SharedDtor();
}

void BidRequest_Site::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Site_descriptor_;
}

const BidRequest_Site& BidRequest_Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Site* BidRequest_Site::default_instance_ = NULL;

BidRequest_Site* BidRequest_Site::New(::google::protobuf::Arena* arena) const {
  BidRequest_Site* n = new BidRequest_Site;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Site::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Site)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ref()) {
      ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Site)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Site.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ref;
        break;
      }

      // optional string ref = 2;
      case 2: {
        if (tag == 18) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Site.ref");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Site)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Site)
  return false;
#undef DO_
}

void BidRequest_Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Site)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Site.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Site.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ref(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Site)
}

::google::protobuf::uint8* BidRequest_Site::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Site)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Site.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Site.ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ref(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Site)
  return target;
}

int BidRequest_Site::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Site)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ref = 2;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Site::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Site)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Site* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Site>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Site)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Site)
    MergeFrom(*source);
  }
}

void BidRequest_Site::MergeFrom(const BidRequest_Site& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Site)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_ref()) {
      set_has_ref();
      ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Site::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Site::CopyFrom(const BidRequest_Site& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Site::IsInitialized() const {

  return true;
}

void BidRequest_Site::Swap(BidRequest_Site* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Site::InternalSwap(BidRequest_Site* other) {
  name_.Swap(&other->name_);
  ref_.Swap(&other->ref_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Site_descriptor_;
  metadata.reflection = BidRequest_Site_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_App::kAppnameFieldNumber;
const int BidRequest_App::kPackagenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_App::BidRequest_App()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.App)
}

void BidRequest_App::InitAsDefaultInstance() {
}

BidRequest_App::BidRequest_App(const BidRequest_App& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.App)
}

void BidRequest_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  appname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_App::~BidRequest_App() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.App)
  SharedDtor();
}

void BidRequest_App::SharedDtor() {
  appname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  packagename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_App_descriptor_;
}

const BidRequest_App& BidRequest_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_App* BidRequest_App::default_instance_ = NULL;

BidRequest_App* BidRequest_App::New(::google::protobuf::Arena* arena) const {
  BidRequest_App* n = new BidRequest_App;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_App::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.App)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_appname()) {
      appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_packagename()) {
      packagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.App.appname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_packagename;
        break;
      }

      // optional string packagename = 2;
      case 2: {
        if (tag == 18) {
         parse_packagename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packagename().data(), this->packagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.App.packagename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.App)
  return false;
#undef DO_
}

void BidRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.App)
  // optional string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.App.appname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->appname(), output);
  }

  // optional string packagename = 2;
  if (has_packagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packagename().data(), this->packagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.App.packagename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->packagename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.App)
}

::google::protobuf::uint8* BidRequest_App::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.App)
  // optional string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.App.appname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // optional string packagename = 2;
  if (has_packagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packagename().data(), this->packagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.App.packagename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->packagename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.App)
  return target;
}

int BidRequest_App::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.App)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // optional string packagename = 2;
    if (has_packagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packagename());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.App)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_App* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_App>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.App)
    MergeFrom(*source);
  }
}

void BidRequest_App::MergeFrom(const BidRequest_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.App)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_has_appname();
      appname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appname_);
    }
    if (from.has_packagename()) {
      set_has_packagename();
      packagename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packagename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_App::CopyFrom(const BidRequest_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_App::IsInitialized() const {

  return true;
}

void BidRequest_App::Swap(BidRequest_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_App::InternalSwap(BidRequest_App* other) {
  appname_.Swap(&other->appname_);
  packagename_.Swap(&other->packagename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_App_descriptor_;
  metadata.reflection = BidRequest_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Device_OSType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_OSType_descriptor_;
}
bool BidRequest_Device_OSType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Device_OSType BidRequest_Device::OS_WINDOWS;
const BidRequest_Device_OSType BidRequest_Device::OS_MAC;
const BidRequest_Device_OSType BidRequest_Device::OS_LINUX;
const BidRequest_Device_OSType BidRequest_Device::OS_ANDROID;
const BidRequest_Device_OSType BidRequest_Device::OS_IOS;
const BidRequest_Device_OSType BidRequest_Device::OS_UNKNOWN;
const BidRequest_Device_OSType BidRequest_Device::OSType_MIN;
const BidRequest_Device_OSType BidRequest_Device::OSType_MAX;
const int BidRequest_Device::OSType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_DeviceType_descriptor_;
}
bool BidRequest_Device_DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Device_DeviceType BidRequest_Device::DEVICE_IPHONE;
const BidRequest_Device_DeviceType BidRequest_Device::DEVICE_ANDROIDPHONE;
const BidRequest_Device_DeviceType BidRequest_Device::DEVICE_IPAD;
const BidRequest_Device_DeviceType BidRequest_Device::DEVICE_WINDOWSPHONE;
const BidRequest_Device_DeviceType BidRequest_Device::DEVICE_ANDROIDPAD;
const BidRequest_Device_DeviceType BidRequest_Device::DEVICE_TV;
const BidRequest_Device_DeviceType BidRequest_Device::DEVICE_UNKNOWN;
const BidRequest_Device_DeviceType BidRequest_Device::DeviceType_MIN;
const BidRequest_Device_DeviceType BidRequest_Device::DeviceType_MAX;
const int BidRequest_Device::DeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Device::kUaFieldNumber;
const int BidRequest_Device::kOsFieldNumber;
const int BidRequest_Device::kDevtypeFieldNumber;
const int BidRequest_Device::kIdfamd5FieldNumber;
const int BidRequest_Device::kImeimd5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Device::BidRequest_Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.Device)
}

void BidRequest_Device::InitAsDefaultInstance() {
}

BidRequest_Device::BidRequest_Device(const BidRequest_Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.Device)
}

void BidRequest_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ua_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = 6;
  devtype_ = 7;
  idfamd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imeimd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Device::~BidRequest_Device() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.Device)
  SharedDtor();
}

void BidRequest_Device::SharedDtor() {
  ua_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfamd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imeimd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_descriptor_;
}

const BidRequest_Device& BidRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_Device* BidRequest_Device::default_instance_ = NULL;

BidRequest_Device* BidRequest_Device::New(::google::protobuf::Arena* arena) const {
  BidRequest_Device* n = new BidRequest_Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.Device)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_ua()) {
      ua_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    os_ = 6;
    devtype_ = 7;
    if (has_idfamd5()) {
      idfamd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_imeimd5()) {
      imeimd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ua = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Device.ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_os;
        break;
      }

      // required .protocol.dsp.BidRequest.Device.OSType os = 2 [default = OS_UNKNOWN];
      case 2: {
        if (tag == 16) {
         parse_os:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::dsp::BidRequest_Device_OSType_IsValid(value)) {
            set_os(static_cast< ::protocol::dsp::BidRequest_Device_OSType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_devtype;
        break;
      }

      // required .protocol.dsp.BidRequest.Device.DeviceType devtype = 3 [default = DEVICE_UNKNOWN];
      case 3: {
        if (tag == 24) {
         parse_devtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::dsp::BidRequest_Device_DeviceType_IsValid(value)) {
            set_devtype(static_cast< ::protocol::dsp::BidRequest_Device_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_idfamd5;
        break;
      }

      // optional string idfamd5 = 4;
      case 4: {
        if (tag == 34) {
         parse_idfamd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfamd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfamd5().data(), this->idfamd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Device.idfamd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_imeimd5;
        break;
      }

      // optional string imeimd5 = 5;
      case 5: {
        if (tag == 42) {
         parse_imeimd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imeimd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imeimd5().data(), this->imeimd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.Device.imeimd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.Device)
  return false;
#undef DO_
}

void BidRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.Device)
  // required string ua = 1 [default = ""];
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Device.ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ua(), output);
  }

  // required .protocol.dsp.BidRequest.Device.OSType os = 2 [default = OS_UNKNOWN];
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->os(), output);
  }

  // required .protocol.dsp.BidRequest.Device.DeviceType devtype = 3 [default = DEVICE_UNKNOWN];
  if (has_devtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->devtype(), output);
  }

  // optional string idfamd5 = 4;
  if (has_idfamd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfamd5().data(), this->idfamd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Device.idfamd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->idfamd5(), output);
  }

  // optional string imeimd5 = 5;
  if (has_imeimd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imeimd5().data(), this->imeimd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Device.imeimd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->imeimd5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.Device)
}

::google::protobuf::uint8* BidRequest_Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.Device)
  // required string ua = 1 [default = ""];
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Device.ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ua(), target);
  }

  // required .protocol.dsp.BidRequest.Device.OSType os = 2 [default = OS_UNKNOWN];
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->os(), target);
  }

  // required .protocol.dsp.BidRequest.Device.DeviceType devtype = 3 [default = DEVICE_UNKNOWN];
  if (has_devtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->devtype(), target);
  }

  // optional string idfamd5 = 4;
  if (has_idfamd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfamd5().data(), this->idfamd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Device.idfamd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->idfamd5(), target);
  }

  // optional string imeimd5 = 5;
  if (has_imeimd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imeimd5().data(), this->imeimd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.Device.imeimd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->imeimd5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.Device)
  return target;
}

int BidRequest_Device::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.dsp.BidRequest.Device)
  int total_size = 0;

  if (has_ua()) {
    // required string ua = 1 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ua());
  }

  if (has_os()) {
    // required .protocol.dsp.BidRequest.Device.OSType os = 2 [default = OS_UNKNOWN];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os());
  }

  if (has_devtype()) {
    // required .protocol.dsp.BidRequest.Device.DeviceType devtype = 3 [default = DEVICE_UNKNOWN];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->devtype());
  }

  return total_size;
}
int BidRequest_Device::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.Device)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string ua = 1 [default = ""];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ua());

    // required .protocol.dsp.BidRequest.Device.OSType os = 2 [default = OS_UNKNOWN];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os());

    // required .protocol.dsp.BidRequest.Device.DeviceType devtype = 3 [default = DEVICE_UNKNOWN];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->devtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional string idfamd5 = 4;
    if (has_idfamd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfamd5());
    }

    // optional string imeimd5 = 5;
    if (has_imeimd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imeimd5());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.Device)
    MergeFrom(*source);
  }
}

void BidRequest_Device::MergeFrom(const BidRequest_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ua()) {
      set_has_ua();
      ua_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ua_);
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_devtype()) {
      set_devtype(from.devtype());
    }
    if (from.has_idfamd5()) {
      set_has_idfamd5();
      idfamd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.idfamd5_);
    }
    if (from.has_imeimd5()) {
      set_has_imeimd5();
      imeimd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imeimd5_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Device::CopyFrom(const BidRequest_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Device::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BidRequest_Device::Swap(BidRequest_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Device::InternalSwap(BidRequest_Device* other) {
  ua_.Swap(&other->ua_);
  std::swap(os_, other->os_);
  std::swap(devtype_, other->devtype_);
  idfamd5_.Swap(&other->idfamd5_);
  imeimd5_.Swap(&other->imeimd5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Device_descriptor_;
  metadata.reflection = BidRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_User::kMuidFieldNumber;
const int BidRequest_User::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_User::BidRequest_User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest.User)
}

void BidRequest_User::InitAsDefaultInstance() {
}

BidRequest_User::BidRequest_User(const BidRequest_User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest.User)
}

void BidRequest_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  muid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User::~BidRequest_User() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest.User)
  SharedDtor();
}

void BidRequest_User::SharedDtor() {
  muid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_descriptor_;
}

const BidRequest_User& BidRequest_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest_User* BidRequest_User::default_instance_ = NULL;

BidRequest_User* BidRequest_User::New(::google::protobuf::Arena* arena) const {
  BidRequest_User* n = new BidRequest_User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_User::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest.User)
  if (has_muid()) {
    muid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string muid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_muid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->muid().data(), this->muid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.User.muid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.User.tags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest.User)
  return false;
#undef DO_
}

void BidRequest_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest.User)
  // required string muid = 1;
  if (has_muid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->muid().data(), this->muid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.User.muid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->muid(), output);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.User.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest.User)
}

::google::protobuf::uint8* BidRequest_User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest.User)
  // required string muid = 1;
  if (has_muid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->muid().data(), this->muid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.User.muid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->muid(), target);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.User.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest.User)
  return target;
}

int BidRequest_User::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest.User)
  int total_size = 0;

  // required string muid = 1;
  if (has_muid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->muid());
  }
  // repeated string tags = 2;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_User* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest.User)
    MergeFrom(*source);
  }
}

void BidRequest_User::MergeFrom(const BidRequest_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_muid()) {
      set_has_muid();
      muid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.muid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User::CopyFrom(const BidRequest_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BidRequest_User::Swap(BidRequest_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_User::InternalSwap(BidRequest_User* other) {
  muid_.Swap(&other->muid_);
  tags_.UnsafeArenaSwap(&other->tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_descriptor_;
  metadata.reflection = BidRequest_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest::kBidFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kImpFieldNumber;
const int BidRequest::kSiteFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest::BidRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  site_ = const_cast< ::protocol::dsp::BidRequest_Site*>(&::protocol::dsp::BidRequest_Site::default_instance());
  app_ = const_cast< ::protocol::dsp::BidRequest_App*>(&::protocol::dsp::BidRequest_App::default_instance());
  device_ = const_cast< ::protocol::dsp::BidRequest_Device*>(&::protocol::dsp::BidRequest_Device::default_instance());
  user_ = const_cast< ::protocol::dsp::BidRequest_User*>(&::protocol::dsp::BidRequest_User::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  site_ = NULL;
  app_ = NULL;
  device_ = NULL;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  bid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete site_;
    delete app_;
    delete device_;
    delete user_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New(::google::protobuf::Arena* arena) const {
  BidRequest* n = new BidRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidRequest)
  if (_has_bits_[0 / 32] & 123u) {
    if (has_bid()) {
      bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_site()) {
      if (site_ != NULL) site_->::protocol::dsp::BidRequest_Site::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::protocol::dsp::BidRequest_App::Clear();
    }
    if (has_device()) {
      if (device_ != NULL) device_->::protocol::dsp::BidRequest_Device::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::protocol::dsp::BidRequest_User::Clear();
    }
  }
  imp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.bid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidRequest.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imp;
        break;
      }

      // repeated .protocol.dsp.BidRequest.Imp imp = 3;
      case 3: {
        if (tag == 26) {
         parse_imp:
          DO_(input->IncrementRecursionDepth());
         parse_loop_imp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_imp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_imp;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_site;
        break;
      }

      // optional .protocol.dsp.BidRequest.Site site = 4;
      case 4: {
        if (tag == 34) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_app;
        break;
      }

      // optional .protocol.dsp.BidRequest.App app = 5;
      case 5: {
        if (tag == 42) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_device;
        break;
      }

      // optional .protocol.dsp.BidRequest.Device device = 6;
      case 6: {
        if (tag == 50) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user;
        break;
      }

      // optional .protocol.dsp.BidRequest.User user = 7;
      case 7: {
        if (tag == 58) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidRequest)
  // required string bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.bid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bid(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // repeated .protocol.dsp.BidRequest.Imp imp = 3;
  for (unsigned int i = 0, n = this->imp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->imp(i), output);
  }

  // optional .protocol.dsp.BidRequest.Site site = 4;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->site_, output);
  }

  // optional .protocol.dsp.BidRequest.App app = 5;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->app_, output);
  }

  // optional .protocol.dsp.BidRequest.Device device = 6;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->device_, output);
  }

  // optional .protocol.dsp.BidRequest.User user = 7;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->user_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidRequest)
}

::google::protobuf::uint8* BidRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidRequest)
  // required string bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.bid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bid(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidRequest.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // repeated .protocol.dsp.BidRequest.Imp imp = 3;
  for (unsigned int i = 0, n = this->imp_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->imp(i), false, target);
  }

  // optional .protocol.dsp.BidRequest.Site site = 4;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->site_, false, target);
  }

  // optional .protocol.dsp.BidRequest.App app = 5;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->app_, false, target);
  }

  // optional .protocol.dsp.BidRequest.Device device = 6;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->device_, false, target);
  }

  // optional .protocol.dsp.BidRequest.User user = 7;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->user_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidRequest)
  int total_size = 0;

  // required string bid = 1;
  if (has_bid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bid());
  }
  if (_has_bits_[1 / 32] & 122u) {
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional .protocol.dsp.BidRequest.Site site = 4;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->site_);
    }

    // optional .protocol.dsp.BidRequest.App app = 5;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->app_);
    }

    // optional .protocol.dsp.BidRequest.Device device = 6;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_);
    }

    // optional .protocol.dsp.BidRequest.User user = 7;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

  }
  // repeated .protocol.dsp.BidRequest.Imp imp = 3;
  total_size += 1 * this->imp_size();
  for (int i = 0; i < this->imp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imp(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidRequest)
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  imp_.MergeFrom(from.imp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_has_bid();
      bid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bid_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_site()) {
      mutable_site()->::protocol::dsp::BidRequest_Site::MergeFrom(from.site());
    }
    if (from.has_app()) {
      mutable_app()->::protocol::dsp::BidRequest_App::MergeFrom(from.app());
    }
    if (from.has_device()) {
      mutable_device()->::protocol::dsp::BidRequest_Device::MergeFrom(from.device());
    }
    if (from.has_user()) {
      mutable_user()->::protocol::dsp::BidRequest_User::MergeFrom(from.user());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->imp())) return false;
  if (has_device()) {
    if (!this->device_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest::InternalSwap(BidRequest* other) {
  bid_.Swap(&other->bid_);
  ip_.Swap(&other->ip_);
  imp_.UnsafeArenaSwap(&other->imp_);
  std::swap(site_, other->site_);
  std::swap(app_, other->app_);
  std::swap(device_, other->device_);
  std::swap(user_, other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidRequest_Imp_Banner

// required uint32 width = 1;
bool BidRequest_Imp_Banner::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp_Banner::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp_Banner::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp_Banner::clear_width() {
  width_ = 0u;
  clear_has_width();
}
 ::google::protobuf::uint32 BidRequest_Imp_Banner::width() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Banner.width)
  return width_;
}
 void BidRequest_Imp_Banner::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Banner.width)
}

// required uint32 height = 2;
bool BidRequest_Imp_Banner::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp_Banner::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp_Banner::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp_Banner::clear_height() {
  height_ = 0u;
  clear_has_height();
}
 ::google::protobuf::uint32 BidRequest_Imp_Banner::height() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Banner.height)
  return height_;
}
 void BidRequest_Imp_Banner::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Banner.height)
}

// repeated string mimes = 3;
int BidRequest_Imp_Banner::mimes_size() const {
  return mimes_.size();
}
void BidRequest_Imp_Banner::clear_mimes() {
  mimes_.Clear();
}
 const ::std::string& BidRequest_Imp_Banner::mimes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return mimes_.Get(index);
}
 ::std::string* BidRequest_Imp_Banner::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return mimes_.Mutable(index);
}
 void BidRequest_Imp_Banner::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Banner.mimes)
  mimes_.Mutable(index)->assign(value);
}
 void BidRequest_Imp_Banner::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
 void BidRequest_Imp_Banner::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
 ::std::string* BidRequest_Imp_Banner::add_mimes() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return mimes_.Add();
}
 void BidRequest_Imp_Banner::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
 void BidRequest_Imp_Banner::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
 void BidRequest_Imp_Banner::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidRequest.Imp.Banner.mimes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Banner::mimes() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return mimes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Banner::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.Imp.Banner.mimes)
  return &mimes_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native_Asset_Title

// required uint32 len = 1;
bool BidRequest_Imp_Native_Asset_Title::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp_Native_Asset_Title::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp_Native_Asset_Title::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp_Native_Asset_Title::clear_len() {
  len_ = 0u;
  clear_has_len();
}
 ::google::protobuf::uint32 BidRequest_Imp_Native_Asset_Title::len() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.Title.len)
  return len_;
}
 void BidRequest_Imp_Native_Asset_Title::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Native.Asset.Title.len)
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native_Asset_Img

// required uint32 w = 1;
bool BidRequest_Imp_Native_Asset_Img::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp_Native_Asset_Img::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp_Native_Asset_Img::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp_Native_Asset_Img::clear_w() {
  w_ = 0u;
  clear_has_w();
}
 ::google::protobuf::uint32 BidRequest_Imp_Native_Asset_Img::w() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.Img.w)
  return w_;
}
 void BidRequest_Imp_Native_Asset_Img::set_w(::google::protobuf::uint32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Native.Asset.Img.w)
}

// required uint32 h = 2;
bool BidRequest_Imp_Native_Asset_Img::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp_Native_Asset_Img::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp_Native_Asset_Img::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp_Native_Asset_Img::clear_h() {
  h_ = 0u;
  clear_has_h();
}
 ::google::protobuf::uint32 BidRequest_Imp_Native_Asset_Img::h() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.Img.h)
  return h_;
}
 void BidRequest_Imp_Native_Asset_Img::set_h(::google::protobuf::uint32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Native.Asset.Img.h)
}

// repeated string mimes = 3;
int BidRequest_Imp_Native_Asset_Img::mimes_size() const {
  return mimes_.size();
}
void BidRequest_Imp_Native_Asset_Img::clear_mimes() {
  mimes_.Clear();
}
 const ::std::string& BidRequest_Imp_Native_Asset_Img::mimes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return mimes_.Get(index);
}
 ::std::string* BidRequest_Imp_Native_Asset_Img::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return mimes_.Mutable(index);
}
 void BidRequest_Imp_Native_Asset_Img::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  mimes_.Mutable(index)->assign(value);
}
 void BidRequest_Imp_Native_Asset_Img::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
 void BidRequest_Imp_Native_Asset_Img::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
 ::std::string* BidRequest_Imp_Native_Asset_Img::add_mimes() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return mimes_.Add();
}
 void BidRequest_Imp_Native_Asset_Img::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
 void BidRequest_Imp_Native_Asset_Img::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
 void BidRequest_Imp_Native_Asset_Img::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Native_Asset_Img::mimes() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return mimes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Native_Asset_Img::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.Imp.Native.Asset.Img.mimes)
  return &mimes_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native_Asset

// optional .protocol.dsp.BidRequest.Imp.Native.Asset.Title title = 1;
bool BidRequest_Imp_Native_Asset::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp_Native_Asset::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp_Native_Asset::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp_Native_Asset::clear_title() {
  if (title_ != NULL) title_->::protocol::dsp::BidRequest_Imp_Native_Asset_Title::Clear();
  clear_has_title();
}
const ::protocol::dsp::BidRequest_Imp_Native_Asset_Title& BidRequest_Imp_Native_Asset::title() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.title)
  return title_ != NULL ? *title_ : *default_instance_->title_;
}
::protocol::dsp::BidRequest_Imp_Native_Asset_Title* BidRequest_Imp_Native_Asset::mutable_title() {
  set_has_title();
  if (title_ == NULL) {
    title_ = new ::protocol::dsp::BidRequest_Imp_Native_Asset_Title;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Native.Asset.title)
  return title_;
}
::protocol::dsp::BidRequest_Imp_Native_Asset_Title* BidRequest_Imp_Native_Asset::release_title() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.Native.Asset.title)
  clear_has_title();
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Title* temp = title_;
  title_ = NULL;
  return temp;
}
void BidRequest_Imp_Native_Asset::set_allocated_title(::protocol::dsp::BidRequest_Imp_Native_Asset_Title* title) {
  delete title_;
  title_ = title;
  if (title) {
    set_has_title();
  } else {
    clear_has_title();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.Native.Asset.title)
}

// optional .protocol.dsp.BidRequest.Imp.Native.Asset.Img img = 2;
bool BidRequest_Imp_Native_Asset::has_img() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp_Native_Asset::set_has_img() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp_Native_Asset::clear_has_img() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp_Native_Asset::clear_img() {
  if (img_ != NULL) img_->::protocol::dsp::BidRequest_Imp_Native_Asset_Img::Clear();
  clear_has_img();
}
const ::protocol::dsp::BidRequest_Imp_Native_Asset_Img& BidRequest_Imp_Native_Asset::img() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.Asset.img)
  return img_ != NULL ? *img_ : *default_instance_->img_;
}
::protocol::dsp::BidRequest_Imp_Native_Asset_Img* BidRequest_Imp_Native_Asset::mutable_img() {
  set_has_img();
  if (img_ == NULL) {
    img_ = new ::protocol::dsp::BidRequest_Imp_Native_Asset_Img;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Native.Asset.img)
  return img_;
}
::protocol::dsp::BidRequest_Imp_Native_Asset_Img* BidRequest_Imp_Native_Asset::release_img() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.Native.Asset.img)
  clear_has_img();
  ::protocol::dsp::BidRequest_Imp_Native_Asset_Img* temp = img_;
  img_ = NULL;
  return temp;
}
void BidRequest_Imp_Native_Asset::set_allocated_img(::protocol::dsp::BidRequest_Imp_Native_Asset_Img* img) {
  delete img_;
  img_ = img;
  if (img) {
    set_has_img();
  } else {
    clear_has_img();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.Native.Asset.img)
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native

// repeated .protocol.dsp.BidRequest.Imp.Native.Asset assets = 1;
int BidRequest_Imp_Native::assets_size() const {
  return assets_.size();
}
void BidRequest_Imp_Native::clear_assets() {
  assets_.Clear();
}
const ::protocol::dsp::BidRequest_Imp_Native_Asset& BidRequest_Imp_Native::assets(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Native.assets)
  return assets_.Get(index);
}
::protocol::dsp::BidRequest_Imp_Native_Asset* BidRequest_Imp_Native::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Native.assets)
  return assets_.Mutable(index);
}
::protocol::dsp::BidRequest_Imp_Native_Asset* BidRequest_Imp_Native::add_assets() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.Imp.Native.assets)
  return assets_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Native_Asset >*
BidRequest_Imp_Native::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.Imp.Native.assets)
  return &assets_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Native_Asset >&
BidRequest_Imp_Native::assets() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.Imp.Native.assets)
  return assets_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Pmp_Deal

// optional string dealId = 1;
bool BidRequest_Imp_Pmp_Deal::has_dealid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp_Pmp_Deal::set_has_dealid() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp_Pmp_Deal::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp_Pmp_Deal::clear_dealid() {
  dealid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dealid();
}
 const ::std::string& BidRequest_Imp_Pmp_Deal::dealid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
  return dealid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp_Pmp_Deal::set_dealid(const ::std::string& value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
}
 void BidRequest_Imp_Pmp_Deal::set_dealid(const char* value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
}
 void BidRequest_Imp_Pmp_Deal::set_dealid(const char* value, size_t size) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
}
 ::std::string* BidRequest_Imp_Pmp_Deal::mutable_dealid() {
  set_has_dealid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
  return dealid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp_Pmp_Deal::release_dealid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
  clear_has_dealid();
  return dealid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp_Pmp_Deal::set_allocated_dealid(::std::string* dealid) {
  if (dealid != NULL) {
    set_has_dealid();
  } else {
    clear_has_dealid();
  }
  dealid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.Pmp.Deal.dealId)
}

// optional float bidfloor = 2;
bool BidRequest_Imp_Pmp_Deal::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp_Pmp_Deal::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp_Pmp_Deal::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp_Pmp_Deal::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
 float BidRequest_Imp_Pmp_Deal::bidfloor() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Pmp.Deal.bidfloor)
  return bidfloor_;
}
 void BidRequest_Imp_Pmp_Deal::set_bidfloor(float value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.Pmp.Deal.bidfloor)
}

// -------------------------------------------------------------------

// BidRequest_Imp_Pmp

// repeated .protocol.dsp.BidRequest.Imp.Pmp.Deal deals = 1;
int BidRequest_Imp_Pmp::deals_size() const {
  return deals_.size();
}
void BidRequest_Imp_Pmp::clear_deals() {
  deals_.Clear();
}
const ::protocol::dsp::BidRequest_Imp_Pmp_Deal& BidRequest_Imp_Pmp::deals(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return deals_.Get(index);
}
::protocol::dsp::BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp::mutable_deals(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return deals_.Mutable(index);
}
::protocol::dsp::BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp::add_deals() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return deals_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Pmp_Deal >*
BidRequest_Imp_Pmp::mutable_deals() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return &deals_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp_Pmp_Deal >&
BidRequest_Imp_Pmp::deals() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.Imp.Pmp.deals)
  return deals_;
}

// -------------------------------------------------------------------

// BidRequest_Imp

// required string impid = 1;
bool BidRequest_Imp::has_impid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp::set_has_impid() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp::clear_has_impid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp::clear_impid() {
  impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_impid();
}
 const ::std::string& BidRequest_Imp::impid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.impid)
  return impid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_impid(const ::std::string& value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.impid)
}
 void BidRequest_Imp::set_impid(const char* value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.impid)
}
 void BidRequest_Imp::set_impid(const char* value, size_t size) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.impid)
}
 ::std::string* BidRequest_Imp::mutable_impid() {
  set_has_impid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.impid)
  return impid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp::release_impid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.impid)
  clear_has_impid();
  return impid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_allocated_impid(::std::string* impid) {
  if (impid != NULL) {
    set_has_impid();
  } else {
    clear_has_impid();
  }
  impid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.impid)
}

// required string tagid = 2;
bool BidRequest_Imp::has_tagid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp::set_has_tagid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp::clear_has_tagid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp::clear_tagid() {
  tagid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagid();
}
 const ::std::string& BidRequest_Imp::tagid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.tagid)
  return tagid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_tagid(const ::std::string& value) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.tagid)
}
 void BidRequest_Imp::set_tagid(const char* value) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Imp.tagid)
}
 void BidRequest_Imp::set_tagid(const char* value, size_t size) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Imp.tagid)
}
 ::std::string* BidRequest_Imp::mutable_tagid() {
  set_has_tagid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.tagid)
  return tagid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp::release_tagid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.tagid)
  clear_has_tagid();
  return tagid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_allocated_tagid(::std::string* tagid) {
  if (tagid != NULL) {
    set_has_tagid();
  } else {
    clear_has_tagid();
  }
  tagid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.tagid)
}

// required float bidfloor = 3;
bool BidRequest_Imp::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Imp::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Imp::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Imp::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
 float BidRequest_Imp::bidfloor() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.bidfloor)
  return bidfloor_;
}
 void BidRequest_Imp::set_bidfloor(float value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.bidfloor)
}

// optional .protocol.dsp.BidRequest.Imp.Banner banner = 4;
bool BidRequest_Imp::has_banner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Imp::set_has_banner() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Imp::clear_has_banner() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Imp::clear_banner() {
  if (banner_ != NULL) banner_->::protocol::dsp::BidRequest_Imp_Banner::Clear();
  clear_has_banner();
}
const ::protocol::dsp::BidRequest_Imp_Banner& BidRequest_Imp::banner() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.banner)
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
::protocol::dsp::BidRequest_Imp_Banner* BidRequest_Imp::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) {
    banner_ = new ::protocol::dsp::BidRequest_Imp_Banner;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.banner)
  return banner_;
}
::protocol::dsp::BidRequest_Imp_Banner* BidRequest_Imp::release_banner() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.banner)
  clear_has_banner();
  ::protocol::dsp::BidRequest_Imp_Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
void BidRequest_Imp::set_allocated_banner(::protocol::dsp::BidRequest_Imp_Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.banner)
}

// optional .protocol.dsp.BidRequest.Imp.Native native = 5;
bool BidRequest_Imp::has_native() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Imp::set_has_native() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Imp::clear_has_native() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Imp::clear_native() {
  if (native_ != NULL) native_->::protocol::dsp::BidRequest_Imp_Native::Clear();
  clear_has_native();
}
const ::protocol::dsp::BidRequest_Imp_Native& BidRequest_Imp::native() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.native)
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
::protocol::dsp::BidRequest_Imp_Native* BidRequest_Imp::mutable_native() {
  set_has_native();
  if (native_ == NULL) {
    native_ = new ::protocol::dsp::BidRequest_Imp_Native;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.native)
  return native_;
}
::protocol::dsp::BidRequest_Imp_Native* BidRequest_Imp::release_native() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.native)
  clear_has_native();
  ::protocol::dsp::BidRequest_Imp_Native* temp = native_;
  native_ = NULL;
  return temp;
}
void BidRequest_Imp::set_allocated_native(::protocol::dsp::BidRequest_Imp_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.native)
}

// optional .protocol.dsp.BidRequest.Imp.Pmp pmp = 6;
bool BidRequest_Imp::has_pmp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Imp::set_has_pmp() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Imp::clear_has_pmp() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Imp::clear_pmp() {
  if (pmp_ != NULL) pmp_->::protocol::dsp::BidRequest_Imp_Pmp::Clear();
  clear_has_pmp();
}
const ::protocol::dsp::BidRequest_Imp_Pmp& BidRequest_Imp::pmp() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.pmp)
  return pmp_ != NULL ? *pmp_ : *default_instance_->pmp_;
}
::protocol::dsp::BidRequest_Imp_Pmp* BidRequest_Imp::mutable_pmp() {
  set_has_pmp();
  if (pmp_ == NULL) {
    pmp_ = new ::protocol::dsp::BidRequest_Imp_Pmp;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Imp.pmp)
  return pmp_;
}
::protocol::dsp::BidRequest_Imp_Pmp* BidRequest_Imp::release_pmp() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Imp.pmp)
  clear_has_pmp();
  ::protocol::dsp::BidRequest_Imp_Pmp* temp = pmp_;
  pmp_ = NULL;
  return temp;
}
void BidRequest_Imp::set_allocated_pmp(::protocol::dsp::BidRequest_Imp_Pmp* pmp) {
  delete pmp_;
  pmp_ = pmp;
  if (pmp) {
    set_has_pmp();
  } else {
    clear_has_pmp();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Imp.pmp)
}

// required uint32 secure = 7 [default = 0];
bool BidRequest_Imp::has_secure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Imp::set_has_secure() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Imp::clear_has_secure() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Imp::clear_secure() {
  secure_ = 0u;
  clear_has_secure();
}
 ::google::protobuf::uint32 BidRequest_Imp::secure() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Imp.secure)
  return secure_;
}
 void BidRequest_Imp::set_secure(::google::protobuf::uint32 value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Imp.secure)
}

// -------------------------------------------------------------------

// BidRequest_Site

// optional string name = 1;
bool BidRequest_Site::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Site::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Site::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Site::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BidRequest_Site::name() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Site.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Site.name)
}
 void BidRequest_Site::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Site.name)
}
 void BidRequest_Site::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Site.name)
}
 ::std::string* BidRequest_Site::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Site.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_name() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Site.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Site.name)
}

// optional string ref = 2;
bool BidRequest_Site::has_ref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Site::set_has_ref() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Site::clear_has_ref() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Site::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ref();
}
 const ::std::string& BidRequest_Site::ref() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Site.ref)
  return ref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_ref(const ::std::string& value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Site.ref)
}
 void BidRequest_Site::set_ref(const char* value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Site.ref)
}
 void BidRequest_Site::set_ref(const char* value, size_t size) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Site.ref)
}
 ::std::string* BidRequest_Site::mutable_ref() {
  set_has_ref();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Site.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_ref() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Site.ref)
  clear_has_ref();
  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_ref(::std::string* ref) {
  if (ref != NULL) {
    set_has_ref();
  } else {
    clear_has_ref();
  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Site.ref)
}

// -------------------------------------------------------------------

// BidRequest_App

// optional string appname = 1;
bool BidRequest_App::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_App::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_App::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_App::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appname();
}
 const ::std::string& BidRequest_App::appname() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.App.appname)
  return appname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_appname(const ::std::string& value) {
  set_has_appname();
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.App.appname)
}
 void BidRequest_App::set_appname(const char* value) {
  set_has_appname();
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.App.appname)
}
 void BidRequest_App::set_appname(const char* value, size_t size) {
  set_has_appname();
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.App.appname)
}
 ::std::string* BidRequest_App::mutable_appname() {
  set_has_appname();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.App.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_appname() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.App.appname)
  clear_has_appname();
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    set_has_appname();
  } else {
    clear_has_appname();
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.App.appname)
}

// optional string packagename = 2;
bool BidRequest_App::has_packagename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_App::set_has_packagename() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_App::clear_has_packagename() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_App::clear_packagename() {
  packagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_packagename();
}
 const ::std::string& BidRequest_App::packagename() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.App.packagename)
  return packagename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_packagename(const ::std::string& value) {
  set_has_packagename();
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.App.packagename)
}
 void BidRequest_App::set_packagename(const char* value) {
  set_has_packagename();
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.App.packagename)
}
 void BidRequest_App::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  packagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.App.packagename)
}
 ::std::string* BidRequest_App::mutable_packagename() {
  set_has_packagename();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.App.packagename)
  return packagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_packagename() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.App.packagename)
  clear_has_packagename();
  return packagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_packagename(::std::string* packagename) {
  if (packagename != NULL) {
    set_has_packagename();
  } else {
    clear_has_packagename();
  }
  packagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packagename);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.App.packagename)
}

// -------------------------------------------------------------------

// BidRequest_Device

// required string ua = 1 [default = ""];
bool BidRequest_Device::has_ua() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Device::set_has_ua() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Device::clear_ua() {
  ua_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ua();
}
 const ::std::string& BidRequest_Device::ua() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.ua)
  return ua_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_ua(const ::std::string& value) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.ua)
}
 void BidRequest_Device::set_ua(const char* value) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Device.ua)
}
 void BidRequest_Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Device.ua)
}
 ::std::string* BidRequest_Device::mutable_ua() {
  set_has_ua();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Device.ua)
  return ua_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_ua() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Device.ua)
  clear_has_ua();
  return ua_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_ua(::std::string* ua) {
  if (ua != NULL) {
    set_has_ua();
  } else {
    clear_has_ua();
  }
  ua_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ua);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Device.ua)
}

// required .protocol.dsp.BidRequest.Device.OSType os = 2 [default = OS_UNKNOWN];
bool BidRequest_Device::has_os() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Device::set_has_os() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Device::clear_os() {
  os_ = 6;
  clear_has_os();
}
 ::protocol::dsp::BidRequest_Device_OSType BidRequest_Device::os() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.os)
  return static_cast< ::protocol::dsp::BidRequest_Device_OSType >(os_);
}
 void BidRequest_Device::set_os(::protocol::dsp::BidRequest_Device_OSType value) {
  assert(::protocol::dsp::BidRequest_Device_OSType_IsValid(value));
  set_has_os();
  os_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.os)
}

// required .protocol.dsp.BidRequest.Device.DeviceType devtype = 3 [default = DEVICE_UNKNOWN];
bool BidRequest_Device::has_devtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Device::set_has_devtype() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Device::clear_has_devtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Device::clear_devtype() {
  devtype_ = 7;
  clear_has_devtype();
}
 ::protocol::dsp::BidRequest_Device_DeviceType BidRequest_Device::devtype() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.devtype)
  return static_cast< ::protocol::dsp::BidRequest_Device_DeviceType >(devtype_);
}
 void BidRequest_Device::set_devtype(::protocol::dsp::BidRequest_Device_DeviceType value) {
  assert(::protocol::dsp::BidRequest_Device_DeviceType_IsValid(value));
  set_has_devtype();
  devtype_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.devtype)
}

// optional string idfamd5 = 4;
bool BidRequest_Device::has_idfamd5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Device::set_has_idfamd5() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Device::clear_has_idfamd5() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Device::clear_idfamd5() {
  idfamd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idfamd5();
}
 const ::std::string& BidRequest_Device::idfamd5() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.idfamd5)
  return idfamd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_idfamd5(const ::std::string& value) {
  set_has_idfamd5();
  idfamd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.idfamd5)
}
 void BidRequest_Device::set_idfamd5(const char* value) {
  set_has_idfamd5();
  idfamd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Device.idfamd5)
}
 void BidRequest_Device::set_idfamd5(const char* value, size_t size) {
  set_has_idfamd5();
  idfamd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Device.idfamd5)
}
 ::std::string* BidRequest_Device::mutable_idfamd5() {
  set_has_idfamd5();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Device.idfamd5)
  return idfamd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_idfamd5() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Device.idfamd5)
  clear_has_idfamd5();
  return idfamd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_idfamd5(::std::string* idfamd5) {
  if (idfamd5 != NULL) {
    set_has_idfamd5();
  } else {
    clear_has_idfamd5();
  }
  idfamd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idfamd5);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Device.idfamd5)
}

// optional string imeimd5 = 5;
bool BidRequest_Device::has_imeimd5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Device::set_has_imeimd5() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Device::clear_has_imeimd5() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Device::clear_imeimd5() {
  imeimd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imeimd5();
}
 const ::std::string& BidRequest_Device::imeimd5() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.Device.imeimd5)
  return imeimd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_imeimd5(const ::std::string& value) {
  set_has_imeimd5();
  imeimd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.Device.imeimd5)
}
 void BidRequest_Device::set_imeimd5(const char* value) {
  set_has_imeimd5();
  imeimd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.Device.imeimd5)
}
 void BidRequest_Device::set_imeimd5(const char* value, size_t size) {
  set_has_imeimd5();
  imeimd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.Device.imeimd5)
}
 ::std::string* BidRequest_Device::mutable_imeimd5() {
  set_has_imeimd5();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.Device.imeimd5)
  return imeimd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_imeimd5() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.Device.imeimd5)
  clear_has_imeimd5();
  return imeimd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_imeimd5(::std::string* imeimd5) {
  if (imeimd5 != NULL) {
    set_has_imeimd5();
  } else {
    clear_has_imeimd5();
  }
  imeimd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imeimd5);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.Device.imeimd5)
}

// -------------------------------------------------------------------

// BidRequest_User

// required string muid = 1;
bool BidRequest_User::has_muid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_User::set_has_muid() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_User::clear_has_muid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_User::clear_muid() {
  muid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_muid();
}
 const ::std::string& BidRequest_User::muid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.User.muid)
  return muid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_muid(const ::std::string& value) {
  set_has_muid();
  muid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.User.muid)
}
 void BidRequest_User::set_muid(const char* value) {
  set_has_muid();
  muid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.User.muid)
}
 void BidRequest_User::set_muid(const char* value, size_t size) {
  set_has_muid();
  muid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.User.muid)
}
 ::std::string* BidRequest_User::mutable_muid() {
  set_has_muid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.User.muid)
  return muid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_User::release_muid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.User.muid)
  clear_has_muid();
  return muid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_allocated_muid(::std::string* muid) {
  if (muid != NULL) {
    set_has_muid();
  } else {
    clear_has_muid();
  }
  muid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), muid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.User.muid)
}

// repeated string tags = 2;
int BidRequest_User::tags_size() const {
  return tags_.size();
}
void BidRequest_User::clear_tags() {
  tags_.Clear();
}
 const ::std::string& BidRequest_User::tags(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.User.tags)
  return tags_.Get(index);
}
 ::std::string* BidRequest_User::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.User.tags)
  return tags_.Mutable(index);
}
 void BidRequest_User::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.User.tags)
  tags_.Mutable(index)->assign(value);
}
 void BidRequest_User::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.User.tags)
}
 void BidRequest_User::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.User.tags)
}
 ::std::string* BidRequest_User::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidRequest.User.tags)
  return tags_.Add();
}
 void BidRequest_User::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.User.tags)
}
 void BidRequest_User::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidRequest.User.tags)
}
 void BidRequest_User::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidRequest.User.tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_User::tags() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.User.tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_User::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.User.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// BidRequest

// required string bid = 1;
bool BidRequest::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest::clear_bid() {
  bid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bid();
}
 const ::std::string& BidRequest::bid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.bid)
  return bid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_bid(const ::std::string& value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.bid)
}
 void BidRequest::set_bid(const char* value) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.bid)
}
 void BidRequest::set_bid(const char* value, size_t size) {
  set_has_bid();
  bid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.bid)
}
 ::std::string* BidRequest::mutable_bid() {
  set_has_bid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.bid)
  return bid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_bid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.bid)
  clear_has_bid();
  return bid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_bid(::std::string* bid) {
  if (bid != NULL) {
    set_has_bid();
  } else {
    clear_has_bid();
  }
  bid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.bid)
}

// optional string ip = 2;
bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& BidRequest::ip() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidRequest.ip)
}
 void BidRequest::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidRequest.ip)
}
 void BidRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidRequest.ip)
}
 ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.ip)
}

// repeated .protocol.dsp.BidRequest.Imp imp = 3;
int BidRequest::imp_size() const {
  return imp_.size();
}
void BidRequest::clear_imp() {
  imp_.Clear();
}
const ::protocol::dsp::BidRequest_Imp& BidRequest::imp(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.imp)
  return imp_.Get(index);
}
::protocol::dsp::BidRequest_Imp* BidRequest::mutable_imp(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.imp)
  return imp_.Mutable(index);
}
::protocol::dsp::BidRequest_Imp* BidRequest::add_imp() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidRequest.imp)
  return imp_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp >*
BidRequest::mutable_imp() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidRequest.imp)
  return &imp_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidRequest_Imp >&
BidRequest::imp() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidRequest.imp)
  return imp_;
}

// optional .protocol.dsp.BidRequest.Site site = 4;
bool BidRequest::has_site() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest::set_has_site() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest::clear_has_site() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest::clear_site() {
  if (site_ != NULL) site_->::protocol::dsp::BidRequest_Site::Clear();
  clear_has_site();
}
const ::protocol::dsp::BidRequest_Site& BidRequest::site() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.site)
  return site_ != NULL ? *site_ : *default_instance_->site_;
}
::protocol::dsp::BidRequest_Site* BidRequest::mutable_site() {
  set_has_site();
  if (site_ == NULL) {
    site_ = new ::protocol::dsp::BidRequest_Site;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.site)
  return site_;
}
::protocol::dsp::BidRequest_Site* BidRequest::release_site() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.site)
  clear_has_site();
  ::protocol::dsp::BidRequest_Site* temp = site_;
  site_ = NULL;
  return temp;
}
void BidRequest::set_allocated_site(::protocol::dsp::BidRequest_Site* site) {
  delete site_;
  site_ = site;
  if (site) {
    set_has_site();
  } else {
    clear_has_site();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.site)
}

// optional .protocol.dsp.BidRequest.App app = 5;
bool BidRequest::has_app() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest::set_has_app() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest::clear_app() {
  if (app_ != NULL) app_->::protocol::dsp::BidRequest_App::Clear();
  clear_has_app();
}
const ::protocol::dsp::BidRequest_App& BidRequest::app() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.app)
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
::protocol::dsp::BidRequest_App* BidRequest::mutable_app() {
  set_has_app();
  if (app_ == NULL) {
    app_ = new ::protocol::dsp::BidRequest_App;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.app)
  return app_;
}
::protocol::dsp::BidRequest_App* BidRequest::release_app() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.app)
  clear_has_app();
  ::protocol::dsp::BidRequest_App* temp = app_;
  app_ = NULL;
  return temp;
}
void BidRequest::set_allocated_app(::protocol::dsp::BidRequest_App* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.app)
}

// optional .protocol.dsp.BidRequest.Device device = 6;
bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest::clear_device() {
  if (device_ != NULL) device_->::protocol::dsp::BidRequest_Device::Clear();
  clear_has_device();
}
const ::protocol::dsp::BidRequest_Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
::protocol::dsp::BidRequest_Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) {
    device_ = new ::protocol::dsp::BidRequest_Device;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.device)
  return device_;
}
::protocol::dsp::BidRequest_Device* BidRequest::release_device() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.device)
  clear_has_device();
  ::protocol::dsp::BidRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
void BidRequest::set_allocated_device(::protocol::dsp::BidRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.device)
}

// optional .protocol.dsp.BidRequest.User user = 7;
bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest::clear_user() {
  if (user_ != NULL) user_->::protocol::dsp::BidRequest_User::Clear();
  clear_has_user();
}
const ::protocol::dsp::BidRequest_User& BidRequest::user() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
::protocol::dsp::BidRequest_User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::protocol::dsp::BidRequest_User;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidRequest.user)
  return user_;
}
::protocol::dsp::BidRequest_User* BidRequest::release_user() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidRequest.user)
  clear_has_user();
  ::protocol::dsp::BidRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
void BidRequest::set_allocated_user(::protocol::dsp::BidRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidRequest.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_SeatBid_Bid_Native_Asset::kTypeFieldNumber;
const int BidResponse_SeatBid_Bid_Native_Asset::kImgurlFieldNumber;
const int BidResponse_SeatBid_Bid_Native_Asset::kImgwFieldNumber;
const int BidResponse_SeatBid_Bid_Native_Asset::kImghFieldNumber;
const int BidResponse_SeatBid_Bid_Native_Asset::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_SeatBid_Bid_Native_Asset::BidResponse_SeatBid_Bid_Native_Asset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
}

void BidResponse_SeatBid_Bid_Native_Asset::InitAsDefaultInstance() {
}

BidResponse_SeatBid_Bid_Native_Asset::BidResponse_SeatBid_Bid_Native_Asset(const BidResponse_SeatBid_Bid_Native_Asset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
}

void BidResponse_SeatBid_Bid_Native_Asset::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  imgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgw_ = 0u;
  imgh_ = 0u;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid_Bid_Native_Asset::~BidResponse_SeatBid_Bid_Native_Asset() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  SharedDtor();
}

void BidResponse_SeatBid_Bid_Native_Asset::SharedDtor() {
  imgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid_Bid_Native_Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_Native_Asset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_Native_Asset_descriptor_;
}

const BidResponse_SeatBid_Bid_Native_Asset& BidResponse_SeatBid_Bid_Native_Asset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid_Native_Asset* BidResponse_SeatBid_Bid_Native_Asset::default_instance_ = NULL;

BidResponse_SeatBid_Bid_Native_Asset* BidResponse_SeatBid_Bid_Native_Asset::New(::google::protobuf::Arena* arena) const {
  BidResponse_SeatBid_Bid_Native_Asset* n = new BidResponse_SeatBid_Bid_Native_Asset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_SeatBid_Bid_Native_Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse_SeatBid_Bid_Native_Asset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_SeatBid_Bid_Native_Asset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(type_, imgw_);
    if (has_imgurl()) {
      imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    imgh_ = 0u;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_SeatBid_Bid_Native_Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imgurl;
        break;
      }

      // optional string imgurl = 2;
      case 2: {
        if (tag == 18) {
         parse_imgurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgurl().data(), this->imgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_imgw;
        break;
      }

      // optional uint32 imgw = 3;
      case 3: {
        if (tag == 24) {
         parse_imgw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgw_)));
          set_has_imgw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_imgh;
        break;
      }

      // optional uint32 imgh = 4;
      case 4: {
        if (tag == 32) {
         parse_imgh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgh_)));
          set_has_imgh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional string data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid_Native_Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string imgurl = 2;
  if (has_imgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imgurl(), output);
  }

  // optional uint32 imgw = 3;
  if (has_imgw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imgw(), output);
  }

  // optional uint32 imgh = 4;
  if (has_imgh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->imgh(), output);
  }

  // optional string data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid_Native_Asset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string imgurl = 2;
  if (has_imgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgurl().data(), this->imgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imgurl(), target);
  }

  // optional uint32 imgw = 3;
  if (has_imgw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imgw(), target);
  }

  // optional uint32 imgh = 4;
  if (has_imgh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->imgh(), target);
  }

  // optional string data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  return target;
}

int BidResponse_SeatBid_Bid_Native_Asset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string imgurl = 2;
    if (has_imgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgurl());
    }

    // optional uint32 imgw = 3;
    if (has_imgw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imgw());
    }

    // optional uint32 imgh = 4;
    if (has_imgh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imgh());
    }

    // optional string data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid_Native_Asset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_SeatBid_Bid_Native_Asset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_SeatBid_Bid_Native_Asset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid_Native_Asset::MergeFrom(const BidResponse_SeatBid_Bid_Native_Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_imgurl()) {
      set_has_imgurl();
      imgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgurl_);
    }
    if (from.has_imgw()) {
      set_imgw(from.imgw());
    }
    if (from.has_imgh()) {
      set_imgh(from.imgh());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_SeatBid_Bid_Native_Asset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid_Native_Asset::CopyFrom(const BidResponse_SeatBid_Bid_Native_Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid_Native_Asset::IsInitialized() const {

  return true;
}

void BidResponse_SeatBid_Bid_Native_Asset::Swap(BidResponse_SeatBid_Bid_Native_Asset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_SeatBid_Bid_Native_Asset::InternalSwap(BidResponse_SeatBid_Bid_Native_Asset* other) {
  std::swap(type_, other->type_);
  imgurl_.Swap(&other->imgurl_);
  std::swap(imgw_, other->imgw_);
  std::swap(imgh_, other->imgh_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid_Native_Asset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_Native_Asset_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_Native_Asset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_SeatBid_Bid_Native::kAssetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_SeatBid_Bid_Native::BidResponse_SeatBid_Bid_Native()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidResponse.SeatBid.Bid.Native)
}

void BidResponse_SeatBid_Bid_Native::InitAsDefaultInstance() {
}

BidResponse_SeatBid_Bid_Native::BidResponse_SeatBid_Bid_Native(const BidResponse_SeatBid_Bid_Native& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidResponse.SeatBid.Bid.Native)
}

void BidResponse_SeatBid_Bid_Native::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid_Bid_Native::~BidResponse_SeatBid_Bid_Native() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  SharedDtor();
}

void BidResponse_SeatBid_Bid_Native::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid_Bid_Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_Native_descriptor_;
}

const BidResponse_SeatBid_Bid_Native& BidResponse_SeatBid_Bid_Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid_Native* BidResponse_SeatBid_Bid_Native::default_instance_ = NULL;

BidResponse_SeatBid_Bid_Native* BidResponse_SeatBid_Bid_Native::New(::google::protobuf::Arena* arena) const {
  BidResponse_SeatBid_Bid_Native* n = new BidResponse_SeatBid_Bid_Native;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_SeatBid_Bid_Native::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  assets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_SeatBid_Bid_Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset assets = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_assets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid_Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  // repeated .protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset assets = 1;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidResponse.SeatBid.Bid.Native)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid_Native::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  // repeated .protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset assets = 1;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->assets(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  return target;
}

int BidResponse_SeatBid_Bid_Native::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  int total_size = 0;

  // repeated .protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset assets = 1;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assets(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid_Native::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_SeatBid_Bid_Native* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_SeatBid_Bid_Native>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidResponse.SeatBid.Bid.Native)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidResponse.SeatBid.Bid.Native)
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid_Native::MergeFrom(const BidResponse_SeatBid_Bid_Native& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assets_.MergeFrom(from.assets_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_SeatBid_Bid_Native::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid_Native::CopyFrom(const BidResponse_SeatBid_Bid_Native& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidResponse.SeatBid.Bid.Native)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid_Native::IsInitialized() const {

  return true;
}

void BidResponse_SeatBid_Bid_Native::Swap(BidResponse_SeatBid_Bid_Native* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_SeatBid_Bid_Native::InternalSwap(BidResponse_SeatBid_Bid_Native* other) {
  assets_.UnsafeArenaSwap(&other->assets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid_Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_Native_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_Native_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_SeatBid_Bid::kIdFieldNumber;
const int BidResponse_SeatBid_Bid::kImpidFieldNumber;
const int BidResponse_SeatBid_Bid::kNativeFieldNumber;
const int BidResponse_SeatBid_Bid::kPriceFieldNumber;
const int BidResponse_SeatBid_Bid::kNurlFieldNumber;
const int BidResponse_SeatBid_Bid::kAdmtypeFieldNumber;
const int BidResponse_SeatBid_Bid::kAdmFieldNumber;
const int BidResponse_SeatBid_Bid::kPvmFieldNumber;
const int BidResponse_SeatBid_Bid::kClickmFieldNumber;
const int BidResponse_SeatBid_Bid::kCmFieldNumber;
const int BidResponse_SeatBid_Bid::kDealIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_SeatBid_Bid::BidResponse_SeatBid_Bid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidResponse.SeatBid.Bid)
}

void BidResponse_SeatBid_Bid::InitAsDefaultInstance() {
  native_ = const_cast< ::protocol::dsp::BidResponse_SeatBid_Bid_Native*>(&::protocol::dsp::BidResponse_SeatBid_Bid_Native::default_instance());
}

BidResponse_SeatBid_Bid::BidResponse_SeatBid_Bid(const BidResponse_SeatBid_Bid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidResponse.SeatBid.Bid)
}

void BidResponse_SeatBid_Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  native_ = NULL;
  price_ = 0;
  nurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  admtype_ = 0u;
  adm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clickm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid_Bid::~BidResponse_SeatBid_Bid() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidResponse.SeatBid.Bid)
  SharedDtor();
}

void BidResponse_SeatBid_Bid::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clickm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete native_;
  }
}

void BidResponse_SeatBid_Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_descriptor_;
}

const BidResponse_SeatBid_Bid& BidResponse_SeatBid_Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid* BidResponse_SeatBid_Bid::default_instance_ = NULL;

BidResponse_SeatBid_Bid* BidResponse_SeatBid_Bid::New(::google::protobuf::Arena* arena) const {
  BidResponse_SeatBid_Bid* n = new BidResponse_SeatBid_Bid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_SeatBid_Bid::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidResponse.SeatBid.Bid)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidResponse_SeatBid_Bid, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidResponse_SeatBid_Bid*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(price_, admtype_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_impid()) {
      impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_native()) {
      if (native_ != NULL) native_->::protocol::dsp::BidResponse_SeatBid_Bid_Native::Clear();
    }
    if (has_nurl()) {
      nurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_adm()) {
      adm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1280u) {
    if (has_clickm()) {
      clickm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dealid()) {
      dealid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  pvm_.Clear();
  cm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_SeatBid_Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidResponse.SeatBid.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impid;
        break;
      }

      // required string impid = 2;
      case 2: {
        if (tag == 18) {
         parse_impid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_native;
        break;
      }

      // optional .protocol.dsp.BidResponse.SeatBid.Bid.Native native = 3;
      case 3: {
        if (tag == 26) {
         parse_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_price;
        break;
      }

      // required float price = 4;
      case 4: {
        if (tag == 37) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nurl;
        break;
      }

      // required string nurl = 5;
      case 5: {
        if (tag == 42) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.nurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_admtype;
        break;
      }

      // required uint32 admtype = 6;
      case 6: {
        if (tag == 48) {
         parse_admtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &admtype_)));
          set_has_admtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_adm;
        break;
      }

      // required string adm = 7;
      case 7: {
        if (tag == 58) {
         parse_adm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adm().data(), this->adm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.adm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pvm;
        break;
      }

      // repeated string pvm = 8;
      case 8: {
        if (tag == 66) {
         parse_pvm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pvm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pvm(this->pvm_size() - 1).data(),
            this->pvm(this->pvm_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.pvm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pvm;
        if (input->ExpectTag(74)) goto parse_clickm;
        break;
      }

      // required string clickm = 9;
      case 9: {
        if (tag == 74) {
         parse_clickm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clickm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clickm().data(), this->clickm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.clickm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cm;
        break;
      }

      // repeated string cm = 10;
      case 10: {
        if (tag == 82) {
         parse_cm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cm(this->cm_size() - 1).data(),
            this->cm(this->cm_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.cm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cm;
        if (input->ExpectTag(90)) goto parse_dealId;
        break;
      }

      // optional string dealId = 11;
      case 11: {
        if (tag == 90) {
         parse_dealId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dealid().data(), this->dealid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.SeatBid.Bid.dealId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidResponse.SeatBid.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidResponse.SeatBid.Bid)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidResponse.SeatBid.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->impid(), output);
  }

  // optional .protocol.dsp.BidResponse.SeatBid.Bid.Native native = 3;
  if (has_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->native_, output);
  }

  // required float price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->price(), output);
  }

  // required string nurl = 5;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.nurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nurl(), output);
  }

  // required uint32 admtype = 6;
  if (has_admtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->admtype(), output);
  }

  // required string adm = 7;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.adm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->adm(), output);
  }

  // repeated string pvm = 8;
  for (int i = 0; i < this->pvm_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pvm(i).data(), this->pvm(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.pvm");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pvm(i), output);
  }

  // required string clickm = 9;
  if (has_clickm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clickm().data(), this->clickm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.clickm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clickm(), output);
  }

  // repeated string cm = 10;
  for (int i = 0; i < this->cm_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cm(i).data(), this->cm(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.cm");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->cm(i), output);
  }

  // optional string dealId = 11;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.dealId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dealid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidResponse.SeatBid.Bid)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidResponse.SeatBid.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impid(), target);
  }

  // optional .protocol.dsp.BidResponse.SeatBid.Bid.Native native = 3;
  if (has_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->native_, false, target);
  }

  // required float price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->price(), target);
  }

  // required string nurl = 5;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.nurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nurl(), target);
  }

  // required uint32 admtype = 6;
  if (has_admtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->admtype(), target);
  }

  // required string adm = 7;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.adm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->adm(), target);
  }

  // repeated string pvm = 8;
  for (int i = 0; i < this->pvm_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pvm(i).data(), this->pvm(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.pvm");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->pvm(i), target);
  }

  // required string clickm = 9;
  if (has_clickm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clickm().data(), this->clickm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.clickm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clickm(), target);
  }

  // repeated string cm = 10;
  for (int i = 0; i < this->cm_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cm(i).data(), this->cm(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.cm");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->cm(i), target);
  }

  // optional string dealId = 11;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.SeatBid.Bid.dealId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dealid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidResponse.SeatBid.Bid)
  return target;
}

int BidResponse_SeatBid_Bid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protocol.dsp.BidResponse.SeatBid.Bid)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_impid()) {
    // required string impid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->impid());
  }

  if (has_price()) {
    // required float price = 4;
    total_size += 1 + 4;
  }

  if (has_nurl()) {
    // required string nurl = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nurl());
  }

  if (has_admtype()) {
    // required uint32 admtype = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->admtype());
  }

  if (has_adm()) {
    // required string adm = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adm());
  }

  if (has_clickm()) {
    // required string clickm = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clickm());
  }

  return total_size;
}
int BidResponse_SeatBid_Bid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidResponse.SeatBid.Bid)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000017b) ^ 0x0000017b) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string impid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->impid());

    // required float price = 4;
    total_size += 1 + 4;

    // required string nurl = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nurl());

    // required uint32 admtype = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->admtype());

    // required string adm = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adm());

    // required string clickm = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clickm());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .protocol.dsp.BidResponse.SeatBid.Bid.Native native = 3;
  if (has_native()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->native_);
  }

  // optional string dealId = 11;
  if (has_dealid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dealid());
  }

  // repeated string pvm = 8;
  total_size += 1 * this->pvm_size();
  for (int i = 0; i < this->pvm_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pvm(i));
  }

  // repeated string cm = 10;
  total_size += 1 * this->cm_size();
  for (int i = 0; i < this->cm_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cm(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidResponse.SeatBid.Bid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_SeatBid_Bid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_SeatBid_Bid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidResponse.SeatBid.Bid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidResponse.SeatBid.Bid)
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid::MergeFrom(const BidResponse_SeatBid_Bid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidResponse.SeatBid.Bid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pvm_.MergeFrom(from.pvm_);
  cm_.MergeFrom(from.cm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_impid()) {
      set_has_impid();
      impid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.impid_);
    }
    if (from.has_native()) {
      mutable_native()->::protocol::dsp::BidResponse_SeatBid_Bid_Native::MergeFrom(from.native());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_nurl()) {
      set_has_nurl();
      nurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nurl_);
    }
    if (from.has_admtype()) {
      set_admtype(from.admtype());
    }
    if (from.has_adm()) {
      set_has_adm();
      adm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adm_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clickm()) {
      set_has_clickm();
      clickm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clickm_);
    }
    if (from.has_dealid()) {
      set_has_dealid();
      dealid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dealid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_SeatBid_Bid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidResponse.SeatBid.Bid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid::CopyFrom(const BidResponse_SeatBid_Bid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidResponse.SeatBid.Bid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017b) != 0x0000017b) return false;

  return true;
}

void BidResponse_SeatBid_Bid::Swap(BidResponse_SeatBid_Bid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_SeatBid_Bid::InternalSwap(BidResponse_SeatBid_Bid* other) {
  id_.Swap(&other->id_);
  impid_.Swap(&other->impid_);
  std::swap(native_, other->native_);
  std::swap(price_, other->price_);
  nurl_.Swap(&other->nurl_);
  std::swap(admtype_, other->admtype_);
  adm_.Swap(&other->adm_);
  pvm_.UnsafeArenaSwap(&other->pvm_);
  clickm_.Swap(&other->clickm_);
  cm_.UnsafeArenaSwap(&other->cm_);
  dealid_.Swap(&other->dealid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_SeatBid::kBidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_SeatBid::BidResponse_SeatBid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidResponse.SeatBid)
}

void BidResponse_SeatBid::InitAsDefaultInstance() {
}

BidResponse_SeatBid::BidResponse_SeatBid(const BidResponse_SeatBid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidResponse.SeatBid)
}

void BidResponse_SeatBid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid::~BidResponse_SeatBid() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidResponse.SeatBid)
  SharedDtor();
}

void BidResponse_SeatBid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_descriptor_;
}

const BidResponse_SeatBid& BidResponse_SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid* BidResponse_SeatBid::default_instance_ = NULL;

BidResponse_SeatBid* BidResponse_SeatBid::New(::google::protobuf::Arena* arena) const {
  BidResponse_SeatBid* n = new BidResponse_SeatBid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_SeatBid::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidResponse.SeatBid)
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidResponse.SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.dsp.BidResponse.SeatBid.Bid bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_bid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidResponse.SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidResponse.SeatBid)
  return false;
#undef DO_
}

void BidResponse_SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidResponse.SeatBid)
  // repeated .protocol.dsp.BidResponse.SeatBid.Bid bid = 1;
  for (unsigned int i = 0, n = this->bid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidResponse.SeatBid)
}

::google::protobuf::uint8* BidResponse_SeatBid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidResponse.SeatBid)
  // repeated .protocol.dsp.BidResponse.SeatBid.Bid bid = 1;
  for (unsigned int i = 0, n = this->bid_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bid(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidResponse.SeatBid)
  return target;
}

int BidResponse_SeatBid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidResponse.SeatBid)
  int total_size = 0;

  // repeated .protocol.dsp.BidResponse.SeatBid.Bid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidResponse.SeatBid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_SeatBid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_SeatBid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidResponse.SeatBid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidResponse.SeatBid)
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid::MergeFrom(const BidResponse_SeatBid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidResponse.SeatBid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bid_.MergeFrom(from.bid_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidResponse.SeatBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid::CopyFrom(const BidResponse_SeatBid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidResponse.SeatBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;
  return true;
}

void BidResponse_SeatBid::Swap(BidResponse_SeatBid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_SeatBid::InternalSwap(BidResponse_SeatBid* other) {
  bid_.UnsafeArenaSwap(&other->bid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse_SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse::kIdFieldNumber;
const int BidResponse::kBididFieldNumber;
const int BidResponse::kSeatbidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse::BidResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.dsp.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.dsp.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:protocol.dsp.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mtty_5fbidding_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New(::google::protobuf::Arena* arena) const {
  BidResponse* n = new BidResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.dsp.BidResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bidid()) {
      bidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.dsp.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bidid;
        break;
      }

      // optional string bidid = 2;
      case 2: {
        if (tag == 18) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.dsp.BidResponse.bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_seatbid;
        break;
      }

      // repeated .protocol.dsp.BidResponse.SeatBid seatbid = 3;
      case 3: {
        if (tag == 26) {
         parse_seatbid:
          DO_(input->IncrementRecursionDepth());
         parse_loop_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_seatbid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.dsp.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.dsp.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.dsp.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string bidid = 2;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bidid(), output);
  }

  // repeated .protocol.dsp.BidResponse.SeatBid seatbid = 3;
  for (unsigned int i = 0, n = this->seatbid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seatbid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.dsp.BidResponse)
}

::google::protobuf::uint8* BidResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.dsp.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string bidid = 2;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.dsp.BidResponse.bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bidid(), target);
  }

  // repeated .protocol.dsp.BidResponse.SeatBid seatbid = 3;
  for (unsigned int i = 0, n = this->seatbid_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->seatbid(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.dsp.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.dsp.BidResponse)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // optional string bidid = 2;
  if (has_bidid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bidid());
  }

  // repeated .protocol.dsp.BidResponse.SeatBid seatbid = 3;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.dsp.BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.dsp.BidResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.dsp.BidResponse)
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.dsp.BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_bidid()) {
      set_has_bidid();
      bidid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bidid_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.dsp.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.dsp.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;
  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse::InternalSwap(BidResponse* other) {
  id_.Swap(&other->id_);
  bidid_.Swap(&other->bidid_);
  seatbid_.UnsafeArenaSwap(&other->seatbid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidResponse_SeatBid_Bid_Native_Asset

// optional uint32 type = 1;
bool BidResponse_SeatBid_Bid_Native_Asset::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_SeatBid_Bid_Native_Asset::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 BidResponse_SeatBid_Bid_Native_Asset::type() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.type)
  return type_;
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.type)
}

// optional string imgurl = 2;
bool BidResponse_SeatBid_Bid_Native_Asset::has_imgurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_SeatBid_Bid_Native_Asset::set_has_imgurl() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_has_imgurl() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_imgurl() {
  imgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imgurl();
}
 const ::std::string& BidResponse_SeatBid_Bid_Native_Asset::imgurl() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
  return imgurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_imgurl(const ::std::string& value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_imgurl(const char* value) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_imgurl(const char* value, size_t size) {
  set_has_imgurl();
  imgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
}
 ::std::string* BidResponse_SeatBid_Bid_Native_Asset::mutable_imgurl() {
  set_has_imgurl();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
  return imgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid_Native_Asset::release_imgurl() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
  clear_has_imgurl();
  return imgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_allocated_imgurl(::std::string* imgurl) {
  if (imgurl != NULL) {
    set_has_imgurl();
  } else {
    clear_has_imgurl();
  }
  imgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgurl);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgurl)
}

// optional uint32 imgw = 3;
bool BidResponse_SeatBid_Bid_Native_Asset::has_imgw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_SeatBid_Bid_Native_Asset::set_has_imgw() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_has_imgw() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_imgw() {
  imgw_ = 0u;
  clear_has_imgw();
}
 ::google::protobuf::uint32 BidResponse_SeatBid_Bid_Native_Asset::imgw() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgw)
  return imgw_;
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_imgw(::google::protobuf::uint32 value) {
  set_has_imgw();
  imgw_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgw)
}

// optional uint32 imgh = 4;
bool BidResponse_SeatBid_Bid_Native_Asset::has_imgh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_SeatBid_Bid_Native_Asset::set_has_imgh() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_has_imgh() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_imgh() {
  imgh_ = 0u;
  clear_has_imgh();
}
 ::google::protobuf::uint32 BidResponse_SeatBid_Bid_Native_Asset::imgh() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgh)
  return imgh_;
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_imgh(::google::protobuf::uint32 value) {
  set_has_imgh();
  imgh_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.imgh)
}

// optional string data = 5;
bool BidResponse_SeatBid_Bid_Native_Asset::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse_SeatBid_Bid_Native_Asset::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse_SeatBid_Bid_Native_Asset::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& BidResponse_SeatBid_Bid_Native_Asset::data() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
}
 ::std::string* BidResponse_SeatBid_Bid_Native_Asset::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid_Native_Asset::release_data() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid_Native_Asset::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset.data)
}

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid_Native

// repeated .protocol.dsp.BidResponse.SeatBid.Bid.Native.Asset assets = 1;
int BidResponse_SeatBid_Bid_Native::assets_size() const {
  return assets_.size();
}
void BidResponse_SeatBid_Bid_Native::clear_assets() {
  assets_.Clear();
}
const ::protocol::dsp::BidResponse_SeatBid_Bid_Native_Asset& BidResponse_SeatBid_Bid_Native::assets(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.Native.assets)
  return assets_.Get(index);
}
::protocol::dsp::BidResponse_SeatBid_Bid_Native_Asset* BidResponse_SeatBid_Bid_Native::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.Native.assets)
  return assets_.Mutable(index);
}
::protocol::dsp::BidResponse_SeatBid_Bid_Native_Asset* BidResponse_SeatBid_Bid_Native::add_assets() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidResponse.SeatBid.Bid.Native.assets)
  return assets_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid_Native_Asset >*
BidResponse_SeatBid_Bid_Native::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidResponse.SeatBid.Bid.Native.assets)
  return &assets_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid_Native_Asset >&
BidResponse_SeatBid_Bid_Native::assets() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidResponse.SeatBid.Bid.Native.assets)
  return assets_;
}

// -------------------------------------------------------------------

// BidResponse_SeatBid_Bid

// required string id = 1;
bool BidResponse_SeatBid_Bid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_SeatBid_Bid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_SeatBid_Bid::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidResponse_SeatBid_Bid::id() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.id)
}
 void BidResponse_SeatBid_Bid::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.id)
}
 void BidResponse_SeatBid_Bid::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.id)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_id() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.id)
}

// required string impid = 2;
bool BidResponse_SeatBid_Bid::has_impid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_impid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_SeatBid_Bid::clear_has_impid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_SeatBid_Bid::clear_impid() {
  impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_impid();
}
 const ::std::string& BidResponse_SeatBid_Bid::impid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.impid)
  return impid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_impid(const ::std::string& value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.impid)
}
 void BidResponse_SeatBid_Bid::set_impid(const char* value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.impid)
}
 void BidResponse_SeatBid_Bid::set_impid(const char* value, size_t size) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.impid)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_impid() {
  set_has_impid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.impid)
  return impid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_impid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.impid)
  clear_has_impid();
  return impid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_impid(::std::string* impid) {
  if (impid != NULL) {
    set_has_impid();
  } else {
    clear_has_impid();
  }
  impid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.impid)
}

// optional .protocol.dsp.BidResponse.SeatBid.Bid.Native native = 3;
bool BidResponse_SeatBid_Bid::has_native() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_native() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_SeatBid_Bid::clear_has_native() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_SeatBid_Bid::clear_native() {
  if (native_ != NULL) native_->::protocol::dsp::BidResponse_SeatBid_Bid_Native::Clear();
  clear_has_native();
}
const ::protocol::dsp::BidResponse_SeatBid_Bid_Native& BidResponse_SeatBid_Bid::native() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.native)
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
::protocol::dsp::BidResponse_SeatBid_Bid_Native* BidResponse_SeatBid_Bid::mutable_native() {
  set_has_native();
  if (native_ == NULL) {
    native_ = new ::protocol::dsp::BidResponse_SeatBid_Bid_Native;
  }
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.native)
  return native_;
}
::protocol::dsp::BidResponse_SeatBid_Bid_Native* BidResponse_SeatBid_Bid::release_native() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.native)
  clear_has_native();
  ::protocol::dsp::BidResponse_SeatBid_Bid_Native* temp = native_;
  native_ = NULL;
  return temp;
}
void BidResponse_SeatBid_Bid::set_allocated_native(::protocol::dsp::BidResponse_SeatBid_Bid_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.native)
}

// required float price = 4;
bool BidResponse_SeatBid_Bid::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_SeatBid_Bid::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_SeatBid_Bid::clear_price() {
  price_ = 0;
  clear_has_price();
}
 float BidResponse_SeatBid_Bid::price() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.price)
  return price_;
}
 void BidResponse_SeatBid_Bid::set_price(float value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.price)
}

// required string nurl = 5;
bool BidResponse_SeatBid_Bid::has_nurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_nurl() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse_SeatBid_Bid::clear_has_nurl() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse_SeatBid_Bid::clear_nurl() {
  nurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nurl();
}
 const ::std::string& BidResponse_SeatBid_Bid::nurl() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
  return nurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_nurl(const ::std::string& value) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
}
 void BidResponse_SeatBid_Bid::set_nurl(const char* value) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
}
 void BidResponse_SeatBid_Bid::set_nurl(const char* value, size_t size) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_nurl() {
  set_has_nurl();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
  return nurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_nurl() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
  clear_has_nurl();
  return nurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_nurl(::std::string* nurl) {
  if (nurl != NULL) {
    set_has_nurl();
  } else {
    clear_has_nurl();
  }
  nurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nurl);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.nurl)
}

// required uint32 admtype = 6;
bool BidResponse_SeatBid_Bid::has_admtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_admtype() {
  _has_bits_[0] |= 0x00000020u;
}
void BidResponse_SeatBid_Bid::clear_has_admtype() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidResponse_SeatBid_Bid::clear_admtype() {
  admtype_ = 0u;
  clear_has_admtype();
}
 ::google::protobuf::uint32 BidResponse_SeatBid_Bid::admtype() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.admtype)
  return admtype_;
}
 void BidResponse_SeatBid_Bid::set_admtype(::google::protobuf::uint32 value) {
  set_has_admtype();
  admtype_ = value;
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.admtype)
}

// required string adm = 7;
bool BidResponse_SeatBid_Bid::has_adm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_adm() {
  _has_bits_[0] |= 0x00000040u;
}
void BidResponse_SeatBid_Bid::clear_has_adm() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidResponse_SeatBid_Bid::clear_adm() {
  adm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adm();
}
 const ::std::string& BidResponse_SeatBid_Bid::adm() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.adm)
  return adm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_adm(const ::std::string& value) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.adm)
}
 void BidResponse_SeatBid_Bid::set_adm(const char* value) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.adm)
}
 void BidResponse_SeatBid_Bid::set_adm(const char* value, size_t size) {
  set_has_adm();
  adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.adm)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_adm() {
  set_has_adm();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.adm)
  return adm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_adm() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.adm)
  clear_has_adm();
  return adm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_adm(::std::string* adm) {
  if (adm != NULL) {
    set_has_adm();
  } else {
    clear_has_adm();
  }
  adm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adm);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.adm)
}

// repeated string pvm = 8;
int BidResponse_SeatBid_Bid::pvm_size() const {
  return pvm_.size();
}
void BidResponse_SeatBid_Bid::clear_pvm() {
  pvm_.Clear();
}
 const ::std::string& BidResponse_SeatBid_Bid::pvm(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return pvm_.Get(index);
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_pvm(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return pvm_.Mutable(index);
}
 void BidResponse_SeatBid_Bid::set_pvm(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  pvm_.Mutable(index)->assign(value);
}
 void BidResponse_SeatBid_Bid::set_pvm(int index, const char* value) {
  pvm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
 void BidResponse_SeatBid_Bid::set_pvm(int index, const char* value, size_t size) {
  pvm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
 ::std::string* BidResponse_SeatBid_Bid::add_pvm() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return pvm_.Add();
}
 void BidResponse_SeatBid_Bid::add_pvm(const ::std::string& value) {
  pvm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
 void BidResponse_SeatBid_Bid::add_pvm(const char* value) {
  pvm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
 void BidResponse_SeatBid_Bid::add_pvm(const char* value, size_t size) {
  pvm_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::pvm() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return pvm_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_pvm() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidResponse.SeatBid.Bid.pvm)
  return &pvm_;
}

// required string clickm = 9;
bool BidResponse_SeatBid_Bid::has_clickm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_clickm() {
  _has_bits_[0] |= 0x00000100u;
}
void BidResponse_SeatBid_Bid::clear_has_clickm() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidResponse_SeatBid_Bid::clear_clickm() {
  clickm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clickm();
}
 const ::std::string& BidResponse_SeatBid_Bid::clickm() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
  return clickm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_clickm(const ::std::string& value) {
  set_has_clickm();
  clickm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
}
 void BidResponse_SeatBid_Bid::set_clickm(const char* value) {
  set_has_clickm();
  clickm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
}
 void BidResponse_SeatBid_Bid::set_clickm(const char* value, size_t size) {
  set_has_clickm();
  clickm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_clickm() {
  set_has_clickm();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
  return clickm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_clickm() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
  clear_has_clickm();
  return clickm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_clickm(::std::string* clickm) {
  if (clickm != NULL) {
    set_has_clickm();
  } else {
    clear_has_clickm();
  }
  clickm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clickm);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.clickm)
}

// repeated string cm = 10;
int BidResponse_SeatBid_Bid::cm_size() const {
  return cm_.size();
}
void BidResponse_SeatBid_Bid::clear_cm() {
  cm_.Clear();
}
 const ::std::string& BidResponse_SeatBid_Bid::cm(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.cm)
  return cm_.Get(index);
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_cm(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.cm)
  return cm_.Mutable(index);
}
 void BidResponse_SeatBid_Bid::set_cm(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.cm)
  cm_.Mutable(index)->assign(value);
}
 void BidResponse_SeatBid_Bid::set_cm(int index, const char* value) {
  cm_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.cm)
}
 void BidResponse_SeatBid_Bid::set_cm(int index, const char* value, size_t size) {
  cm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.cm)
}
 ::std::string* BidResponse_SeatBid_Bid::add_cm() {
  // @@protoc_insertion_point(field_add_mutable:protocol.dsp.BidResponse.SeatBid.Bid.cm)
  return cm_.Add();
}
 void BidResponse_SeatBid_Bid::add_cm(const ::std::string& value) {
  cm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.dsp.BidResponse.SeatBid.Bid.cm)
}
 void BidResponse_SeatBid_Bid::add_cm(const char* value) {
  cm_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.dsp.BidResponse.SeatBid.Bid.cm)
}
 void BidResponse_SeatBid_Bid::add_cm(const char* value, size_t size) {
  cm_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.dsp.BidResponse.SeatBid.Bid.cm)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::cm() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidResponse.SeatBid.Bid.cm)
  return cm_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_cm() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidResponse.SeatBid.Bid.cm)
  return &cm_;
}

// optional string dealId = 11;
bool BidResponse_SeatBid_Bid::has_dealid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_dealid() {
  _has_bits_[0] |= 0x00000400u;
}
void BidResponse_SeatBid_Bid::clear_has_dealid() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidResponse_SeatBid_Bid::clear_dealid() {
  dealid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dealid();
}
 const ::std::string& BidResponse_SeatBid_Bid::dealid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
  return dealid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_dealid(const ::std::string& value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
}
 void BidResponse_SeatBid_Bid::set_dealid(const char* value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
}
 void BidResponse_SeatBid_Bid::set_dealid(const char* value, size_t size) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_dealid() {
  set_has_dealid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
  return dealid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_dealid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
  clear_has_dealid();
  return dealid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_dealid(::std::string* dealid) {
  if (dealid != NULL) {
    set_has_dealid();
  } else {
    clear_has_dealid();
  }
  dealid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.SeatBid.Bid.dealId)
}

// -------------------------------------------------------------------

// BidResponse_SeatBid

// repeated .protocol.dsp.BidResponse.SeatBid.Bid bid = 1;
int BidResponse_SeatBid::bid_size() const {
  return bid_.size();
}
void BidResponse_SeatBid::clear_bid() {
  bid_.Clear();
}
const ::protocol::dsp::BidResponse_SeatBid_Bid& BidResponse_SeatBid::bid(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.SeatBid.bid)
  return bid_.Get(index);
}
::protocol::dsp::BidResponse_SeatBid_Bid* BidResponse_SeatBid::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.SeatBid.bid)
  return bid_.Mutable(index);
}
::protocol::dsp::BidResponse_SeatBid_Bid* BidResponse_SeatBid::add_bid() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidResponse.SeatBid.bid)
  return bid_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid >*
BidResponse_SeatBid::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidResponse.SeatBid.bid)
  return &bid_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid_Bid >&
BidResponse_SeatBid::bid() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidResponse.SeatBid.bid)
  return bid_;
}

// -------------------------------------------------------------------

// BidResponse

// required string id = 1;
bool BidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.id)
}
 void BidResponse::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.id)
}
 void BidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.id)
}
 ::std::string* BidResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_id() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.id)
}

// optional string bidid = 2;
bool BidResponse::has_bidid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse::set_has_bidid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse::clear_has_bidid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse::clear_bidid() {
  bidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bidid();
}
 const ::std::string& BidResponse::bidid() const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.bidid)
  return bidid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_bidid(const ::std::string& value) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.dsp.BidResponse.bidid)
}
 void BidResponse::set_bidid(const char* value) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.dsp.BidResponse.bidid)
}
 void BidResponse::set_bidid(const char* value, size_t size) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.dsp.BidResponse.bidid)
}
 ::std::string* BidResponse::mutable_bidid() {
  set_has_bidid();
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.bidid)
  return bidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_bidid() {
  // @@protoc_insertion_point(field_release:protocol.dsp.BidResponse.bidid)
  clear_has_bidid();
  return bidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_bidid(::std::string* bidid) {
  if (bidid != NULL) {
    set_has_bidid();
  } else {
    clear_has_bidid();
  }
  bidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bidid);
  // @@protoc_insertion_point(field_set_allocated:protocol.dsp.BidResponse.bidid)
}

// repeated .protocol.dsp.BidResponse.SeatBid seatbid = 3;
int BidResponse::seatbid_size() const {
  return seatbid_.size();
}
void BidResponse::clear_seatbid() {
  seatbid_.Clear();
}
const ::protocol::dsp::BidResponse_SeatBid& BidResponse::seatbid(int index) const {
  // @@protoc_insertion_point(field_get:protocol.dsp.BidResponse.seatbid)
  return seatbid_.Get(index);
}
::protocol::dsp::BidResponse_SeatBid* BidResponse::mutable_seatbid(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.dsp.BidResponse.seatbid)
  return seatbid_.Mutable(index);
}
::protocol::dsp::BidResponse_SeatBid* BidResponse::add_seatbid() {
  // @@protoc_insertion_point(field_add:protocol.dsp.BidResponse.seatbid)
  return seatbid_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid >*
BidResponse::mutable_seatbid() {
  // @@protoc_insertion_point(field_mutable_list:protocol.dsp.BidResponse.seatbid)
  return &seatbid_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::dsp::BidResponse_SeatBid >&
BidResponse::seatbid() const {
  // @@protoc_insertion_point(field_list:protocol.dsp.BidResponse.seatbid)
  return seatbid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dsp
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
