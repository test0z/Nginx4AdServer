// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdt.proto

#ifndef PROTOBUF_gdt_2eproto__INCLUDED
#define PROTOBUF_gdt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace gdt {
namespace adx {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gdt_2eproto();
void protobuf_AssignDesc_gdt_2eproto();
void protobuf_ShutdownFile_gdt_2eproto();

class BidRequest;
class BidRequest_Impression;
class BidRequest_Impression_Native;
class BidRequest_Device;
class BidRequest_User;
class BidRequest_User_Demographic;
class BidRequest_User_Vertical;
class BidRequest_Geo;
class BidRequest_App;
class BidResponse;
class BidResponse_Bid;
class BidResponse_SeatBid;

enum BidRequest_Impression_Native_Fields {
  BidRequest_Impression_Native_Fields_kHeadline = 1,
  BidRequest_Impression_Native_Fields_kIcon = 2,
  BidRequest_Impression_Native_Fields_kImage = 4,
  BidRequest_Impression_Native_Fields_kDescription = 8
};
bool BidRequest_Impression_Native_Fields_IsValid(int value);
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native_Fields_Fields_MIN = BidRequest_Impression_Native_Fields_kHeadline;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native_Fields_Fields_MAX = BidRequest_Impression_Native_Fields_kDescription;
const int BidRequest_Impression_Native_Fields_Fields_ARRAYSIZE = BidRequest_Impression_Native_Fields_Fields_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Fields_descriptor();
inline const ::std::string& BidRequest_Impression_Native_Fields_Name(BidRequest_Impression_Native_Fields value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Impression_Native_Fields_descriptor(), value);
}
inline bool BidRequest_Impression_Native_Fields_Parse(
    const ::std::string& name, BidRequest_Impression_Native_Fields* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Impression_Native_Fields>(
    BidRequest_Impression_Native_Fields_descriptor(), name, value);
}
enum BidRequest_Impression_Native_Type {
  BidRequest_Impression_Native_Type_kLink = 0,
  BidRequest_Impression_Native_Type_kApp = 1
};
bool BidRequest_Impression_Native_Type_IsValid(int value);
const BidRequest_Impression_Native_Type BidRequest_Impression_Native_Type_Type_MIN = BidRequest_Impression_Native_Type_kLink;
const BidRequest_Impression_Native_Type BidRequest_Impression_Native_Type_Type_MAX = BidRequest_Impression_Native_Type_kApp;
const int BidRequest_Impression_Native_Type_Type_ARRAYSIZE = BidRequest_Impression_Native_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Type_descriptor();
inline const ::std::string& BidRequest_Impression_Native_Type_Name(BidRequest_Impression_Native_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Impression_Native_Type_descriptor(), value);
}
inline bool BidRequest_Impression_Native_Type_Parse(
    const ::std::string& name, BidRequest_Impression_Native_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Impression_Native_Type>(
    BidRequest_Impression_Native_Type_descriptor(), name, value);
}
enum BidRequest_User_Demographic_Gender {
  BidRequest_User_Demographic_Gender_GENDER_UNKNOWN = 0,
  BidRequest_User_Demographic_Gender_GENDER_MALE = 1,
  BidRequest_User_Demographic_Gender_GENDER_FEMALE = 2
};
bool BidRequest_User_Demographic_Gender_IsValid(int value);
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic_Gender_Gender_MIN = BidRequest_User_Demographic_Gender_GENDER_UNKNOWN;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic_Gender_Gender_MAX = BidRequest_User_Demographic_Gender_GENDER_FEMALE;
const int BidRequest_User_Demographic_Gender_Gender_ARRAYSIZE = BidRequest_User_Demographic_Gender_Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Gender_descriptor();
inline const ::std::string& BidRequest_User_Demographic_Gender_Name(BidRequest_User_Demographic_Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_User_Demographic_Gender_descriptor(), value);
}
inline bool BidRequest_User_Demographic_Gender_Parse(
    const ::std::string& name, BidRequest_User_Demographic_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_User_Demographic_Gender>(
    BidRequest_User_Demographic_Gender_descriptor(), name, value);
}
enum BidRequest_User_Demographic_Education {
  BidRequest_User_Demographic_Education_EDUCATION_UNKNOWN = 0,
  BidRequest_User_Demographic_Education_EDUCATION_DOCTOR = 1,
  BidRequest_User_Demographic_Education_EDUCATION_MASTER = 2,
  BidRequest_User_Demographic_Education_EDUCATION_COLLEGE = 3,
  BidRequest_User_Demographic_Education_EDUCATION_HIGH_SCHOOL = 4,
  BidRequest_User_Demographic_Education_EDUCATION_MIDDLE_SCHOOL = 5,
  BidRequest_User_Demographic_Education_EDUCATION_PRIMARY_SCHOOL = 6
};
bool BidRequest_User_Demographic_Education_IsValid(int value);
const BidRequest_User_Demographic_Education BidRequest_User_Demographic_Education_Education_MIN = BidRequest_User_Demographic_Education_EDUCATION_UNKNOWN;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic_Education_Education_MAX = BidRequest_User_Demographic_Education_EDUCATION_PRIMARY_SCHOOL;
const int BidRequest_User_Demographic_Education_Education_ARRAYSIZE = BidRequest_User_Demographic_Education_Education_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Education_descriptor();
inline const ::std::string& BidRequest_User_Demographic_Education_Name(BidRequest_User_Demographic_Education value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_User_Demographic_Education_descriptor(), value);
}
inline bool BidRequest_User_Demographic_Education_Parse(
    const ::std::string& name, BidRequest_User_Demographic_Education* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_User_Demographic_Education>(
    BidRequest_User_Demographic_Education_descriptor(), name, value);
}
enum BidRequest_DeviceType {
  BidRequest_DeviceType_kDeviceTypeUnknown = 0,
  BidRequest_DeviceType_kDeviceTypePC = 1,
  BidRequest_DeviceType_kDeviceTypeMobile = 2,
  BidRequest_DeviceType_kDeviceTypePad = 3
};
bool BidRequest_DeviceType_IsValid(int value);
const BidRequest_DeviceType BidRequest_DeviceType_DeviceType_MIN = BidRequest_DeviceType_kDeviceTypeUnknown;
const BidRequest_DeviceType BidRequest_DeviceType_DeviceType_MAX = BidRequest_DeviceType_kDeviceTypePad;
const int BidRequest_DeviceType_DeviceType_ARRAYSIZE = BidRequest_DeviceType_DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_DeviceType_descriptor();
inline const ::std::string& BidRequest_DeviceType_Name(BidRequest_DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_DeviceType_descriptor(), value);
}
inline bool BidRequest_DeviceType_Parse(
    const ::std::string& name, BidRequest_DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_DeviceType>(
    BidRequest_DeviceType_descriptor(), name, value);
}
enum BidRequest_Carrier {
  BidRequest_Carrier_kCarrierUnknown = 0,
  BidRequest_Carrier_kCarrierChinaMobile = 1,
  BidRequest_Carrier_kCarrierChinaUnicom = 2,
  BidRequest_Carrier_kCarrierChinaTelecom = 3
};
bool BidRequest_Carrier_IsValid(int value);
const BidRequest_Carrier BidRequest_Carrier_Carrier_MIN = BidRequest_Carrier_kCarrierUnknown;
const BidRequest_Carrier BidRequest_Carrier_Carrier_MAX = BidRequest_Carrier_kCarrierChinaTelecom;
const int BidRequest_Carrier_Carrier_ARRAYSIZE = BidRequest_Carrier_Carrier_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_Carrier_descriptor();
inline const ::std::string& BidRequest_Carrier_Name(BidRequest_Carrier value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_Carrier_descriptor(), value);
}
inline bool BidRequest_Carrier_Parse(
    const ::std::string& name, BidRequest_Carrier* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_Carrier>(
    BidRequest_Carrier_descriptor(), name, value);
}
enum BidRequest_ConnectionType {
  BidRequest_ConnectionType_kConnTypeUnknown = 0,
  BidRequest_ConnectionType_kConnTypeWifi = 1,
  BidRequest_ConnectionType_kConnType2G = 2,
  BidRequest_ConnectionType_kConnType3G = 3,
  BidRequest_ConnectionType_kConnType4G = 4
};
bool BidRequest_ConnectionType_IsValid(int value);
const BidRequest_ConnectionType BidRequest_ConnectionType_ConnectionType_MIN = BidRequest_ConnectionType_kConnTypeUnknown;
const BidRequest_ConnectionType BidRequest_ConnectionType_ConnectionType_MAX = BidRequest_ConnectionType_kConnType4G;
const int BidRequest_ConnectionType_ConnectionType_ARRAYSIZE = BidRequest_ConnectionType_ConnectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_ConnectionType_descriptor();
inline const ::std::string& BidRequest_ConnectionType_Name(BidRequest_ConnectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_ConnectionType_descriptor(), value);
}
inline bool BidRequest_ConnectionType_Parse(
    const ::std::string& name, BidRequest_ConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_ConnectionType>(
    BidRequest_ConnectionType_descriptor(), name, value);
}
enum BidRequest_OperatingSystem {
  BidRequest_OperatingSystem_kOSUnknown = 0,
  BidRequest_OperatingSystem_kOSIOS = 1,
  BidRequest_OperatingSystem_kOSAndroid = 2,
  BidRequest_OperatingSystem_kOSWindows = 3,
  BidRequest_OperatingSystem_kOSSymbian = 4,
  BidRequest_OperatingSystem_kOSJava = 5
};
bool BidRequest_OperatingSystem_IsValid(int value);
const BidRequest_OperatingSystem BidRequest_OperatingSystem_OperatingSystem_MIN = BidRequest_OperatingSystem_kOSUnknown;
const BidRequest_OperatingSystem BidRequest_OperatingSystem_OperatingSystem_MAX = BidRequest_OperatingSystem_kOSJava;
const int BidRequest_OperatingSystem_OperatingSystem_ARRAYSIZE = BidRequest_OperatingSystem_OperatingSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* BidRequest_OperatingSystem_descriptor();
inline const ::std::string& BidRequest_OperatingSystem_Name(BidRequest_OperatingSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    BidRequest_OperatingSystem_descriptor(), value);
}
inline bool BidRequest_OperatingSystem_Parse(
    const ::std::string& name, BidRequest_OperatingSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BidRequest_OperatingSystem>(
    BidRequest_OperatingSystem_descriptor(), name, value);
}
// ===================================================================

class BidRequest_Impression_Native : public ::google::protobuf::Message {
 public:
  BidRequest_Impression_Native();
  virtual ~BidRequest_Impression_Native();

  BidRequest_Impression_Native(const BidRequest_Impression_Native& from);

  inline BidRequest_Impression_Native& operator=(const BidRequest_Impression_Native& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Impression_Native& default_instance();

  void Swap(BidRequest_Impression_Native* other);

  // implements Message ----------------------------------------------

  BidRequest_Impression_Native* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Impression_Native& from);
  void MergeFrom(const BidRequest_Impression_Native& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Impression_Native_Fields Fields;
  static const Fields kHeadline = BidRequest_Impression_Native_Fields_kHeadline;
  static const Fields kIcon = BidRequest_Impression_Native_Fields_kIcon;
  static const Fields kImage = BidRequest_Impression_Native_Fields_kImage;
  static const Fields kDescription = BidRequest_Impression_Native_Fields_kDescription;
  static inline bool Fields_IsValid(int value) {
    return BidRequest_Impression_Native_Fields_IsValid(value);
  }
  static const Fields Fields_MIN =
    BidRequest_Impression_Native_Fields_Fields_MIN;
  static const Fields Fields_MAX =
    BidRequest_Impression_Native_Fields_Fields_MAX;
  static const int Fields_ARRAYSIZE =
    BidRequest_Impression_Native_Fields_Fields_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Fields_descriptor() {
    return BidRequest_Impression_Native_Fields_descriptor();
  }
  static inline const ::std::string& Fields_Name(Fields value) {
    return BidRequest_Impression_Native_Fields_Name(value);
  }
  static inline bool Fields_Parse(const ::std::string& name,
      Fields* value) {
    return BidRequest_Impression_Native_Fields_Parse(name, value);
  }

  typedef BidRequest_Impression_Native_Type Type;
  static const Type kLink = BidRequest_Impression_Native_Type_kLink;
  static const Type kApp = BidRequest_Impression_Native_Type_kApp;
  static inline bool Type_IsValid(int value) {
    return BidRequest_Impression_Native_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BidRequest_Impression_Native_Type_Type_MIN;
  static const Type Type_MAX =
    BidRequest_Impression_Native_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BidRequest_Impression_Native_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BidRequest_Impression_Native_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BidRequest_Impression_Native_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BidRequest_Impression_Native_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 required_fields = 1;
  inline bool has_required_fields() const;
  inline void clear_required_fields();
  static const int kRequiredFieldsFieldNumber = 1;
  inline ::google::protobuf::uint64 required_fields() const;
  inline void set_required_fields(::google::protobuf::uint64 value);

  // optional .protocol.gdt.adx.BidRequest.Impression.Native.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::protocol::gdt::adx::BidRequest_Impression_Native_Type type() const;
  inline void set_type(::protocol::gdt::adx::BidRequest_Impression_Native_Type value);

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest.Impression.Native)
 private:
  inline void set_has_required_fields();
  inline void clear_has_required_fields();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 required_fields_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Impression_Native* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Impression : public ::google::protobuf::Message {
 public:
  BidRequest_Impression();
  virtual ~BidRequest_Impression();

  BidRequest_Impression(const BidRequest_Impression& from);

  inline BidRequest_Impression& operator=(const BidRequest_Impression& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Impression& default_instance();

  void Swap(BidRequest_Impression* other);

  // implements Message ----------------------------------------------

  BidRequest_Impression* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Impression& from);
  void MergeFrom(const BidRequest_Impression& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Impression_Native Native;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int64 placement_id = 2;
  inline bool has_placement_id() const;
  inline void clear_placement_id();
  static const int kPlacementIdFieldNumber = 2;
  inline ::google::protobuf::int64 placement_id() const;
  inline void set_placement_id(::google::protobuf::int64 value);

  // repeated int32 creative_specs = 3;
  inline int creative_specs_size() const;
  inline void clear_creative_specs();
  static const int kCreativeSpecsFieldNumber = 3;
  inline ::google::protobuf::int32 creative_specs(int index) const;
  inline void set_creative_specs(int index, ::google::protobuf::int32 value);
  inline void add_creative_specs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      creative_specs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_creative_specs();

  // optional int32 bid_floor = 4;
  inline bool has_bid_floor() const;
  inline void clear_bid_floor();
  static const int kBidFloorFieldNumber = 4;
  inline ::google::protobuf::int32 bid_floor() const;
  inline void set_bid_floor(::google::protobuf::int32 value);

  // repeated int64 blocking_industry_id = 5;
  inline int blocking_industry_id_size() const;
  inline void clear_blocking_industry_id();
  static const int kBlockingIndustryIdFieldNumber = 5;
  inline ::google::protobuf::int64 blocking_industry_id(int index) const;
  inline void set_blocking_industry_id(int index, ::google::protobuf::int64 value);
  inline void add_blocking_industry_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      blocking_industry_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_blocking_industry_id();

  // repeated .protocol.gdt.adx.BidRequest.Impression.Native natives = 6;
  inline int natives_size() const;
  inline void clear_natives();
  static const int kNativesFieldNumber = 6;
  inline const ::protocol::gdt::adx::BidRequest_Impression_Native& natives(int index) const;
  inline ::protocol::gdt::adx::BidRequest_Impression_Native* mutable_natives(int index);
  inline ::protocol::gdt::adx::BidRequest_Impression_Native* add_natives();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression_Native >&
      natives() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression_Native >*
      mutable_natives();

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest.Impression)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_placement_id();
  inline void clear_has_placement_id();
  inline void set_has_bid_floor();
  inline void clear_has_bid_floor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int64 placement_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > creative_specs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > blocking_industry_id_;
  ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression_Native > natives_;
  ::google::protobuf::int32 bid_floor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Impression* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Device : public ::google::protobuf::Message {
 public:
  BidRequest_Device();
  virtual ~BidRequest_Device();

  BidRequest_Device(const BidRequest_Device& from);

  inline BidRequest_Device& operator=(const BidRequest_Device& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Device& default_instance();

  void Swap(BidRequest_Device* other);

  // implements Message ----------------------------------------------

  BidRequest_Device* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Device& from);
  void MergeFrom(const BidRequest_Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .protocol.gdt.adx.BidRequest.DeviceType device_type = 2;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 2;
  inline ::protocol::gdt::adx::BidRequest_DeviceType device_type() const;
  inline void set_device_type(::protocol::gdt::adx::BidRequest_DeviceType value);

  // optional .protocol.gdt.adx.BidRequest.OperatingSystem os = 3;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 3;
  inline ::protocol::gdt::adx::BidRequest_OperatingSystem os() const;
  inline void set_os(::protocol::gdt::adx::BidRequest_OperatingSystem value);

  // optional string os_version = 4;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 4;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  inline void set_allocated_os_version(::std::string* os_version);

  // optional string user_agent = 5;
  inline bool has_user_agent() const;
  inline void clear_user_agent();
  static const int kUserAgentFieldNumber = 5;
  inline const ::std::string& user_agent() const;
  inline void set_user_agent(const ::std::string& value);
  inline void set_user_agent(const char* value);
  inline void set_user_agent(const char* value, size_t size);
  inline ::std::string* mutable_user_agent();
  inline ::std::string* release_user_agent();
  inline void set_allocated_user_agent(::std::string* user_agent);

  // optional int32 screen_width = 6;
  inline bool has_screen_width() const;
  inline void clear_screen_width();
  static const int kScreenWidthFieldNumber = 6;
  inline ::google::protobuf::int32 screen_width() const;
  inline void set_screen_width(::google::protobuf::int32 value);

  // optional int32 screen_height = 7;
  inline bool has_screen_height() const;
  inline void clear_screen_height();
  static const int kScreenHeightFieldNumber = 7;
  inline ::google::protobuf::int32 screen_height() const;
  inline void set_screen_height(::google::protobuf::int32 value);

  // optional int32 dpi = 8;
  inline bool has_dpi() const;
  inline void clear_dpi();
  static const int kDpiFieldNumber = 8;
  inline ::google::protobuf::int32 dpi() const;
  inline void set_dpi(::google::protobuf::int32 value);

  // optional .protocol.gdt.adx.BidRequest.Carrier carrier = 9;
  inline bool has_carrier() const;
  inline void clear_carrier();
  static const int kCarrierFieldNumber = 9;
  inline ::protocol::gdt::adx::BidRequest_Carrier carrier() const;
  inline void set_carrier(::protocol::gdt::adx::BidRequest_Carrier value);

  // optional .protocol.gdt.adx.BidRequest.ConnectionType connection_type = 10;
  inline bool has_connection_type() const;
  inline void clear_connection_type();
  static const int kConnectionTypeFieldNumber = 10;
  inline ::protocol::gdt::adx::BidRequest_ConnectionType connection_type() const;
  inline void set_connection_type(::protocol::gdt::adx::BidRequest_ConnectionType value);

  // optional string brand_and_model = 11;
  inline bool has_brand_and_model() const;
  inline void clear_brand_and_model();
  static const int kBrandAndModelFieldNumber = 11;
  inline const ::std::string& brand_and_model() const;
  inline void set_brand_and_model(const ::std::string& value);
  inline void set_brand_and_model(const char* value);
  inline void set_brand_and_model(const char* value, size_t size);
  inline ::std::string* mutable_brand_and_model();
  inline ::std::string* release_brand_and_model();
  inline void set_allocated_brand_and_model(::std::string* brand_and_model);

  // optional string language = 12;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 12;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest.Device)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_os();
  inline void clear_has_os();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_user_agent();
  inline void clear_has_user_agent();
  inline void set_has_screen_width();
  inline void clear_has_screen_width();
  inline void set_has_screen_height();
  inline void clear_has_screen_height();
  inline void set_has_dpi();
  inline void clear_has_dpi();
  inline void set_has_carrier();
  inline void clear_has_carrier();
  inline void set_has_connection_type();
  inline void clear_has_connection_type();
  inline void set_has_brand_and_model();
  inline void clear_has_brand_and_model();
  inline void set_has_language();
  inline void clear_has_language();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  int device_type_;
  int os_;
  ::std::string* os_version_;
  ::std::string* user_agent_;
  ::google::protobuf::int32 screen_width_;
  ::google::protobuf::int32 screen_height_;
  ::google::protobuf::int32 dpi_;
  int carrier_;
  ::std::string* brand_and_model_;
  ::std::string* language_;
  int connection_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Device* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_User_Demographic : public ::google::protobuf::Message {
 public:
  BidRequest_User_Demographic();
  virtual ~BidRequest_User_Demographic();

  BidRequest_User_Demographic(const BidRequest_User_Demographic& from);

  inline BidRequest_User_Demographic& operator=(const BidRequest_User_Demographic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_User_Demographic& default_instance();

  void Swap(BidRequest_User_Demographic* other);

  // implements Message ----------------------------------------------

  BidRequest_User_Demographic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_User_Demographic& from);
  void MergeFrom(const BidRequest_User_Demographic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_User_Demographic_Gender Gender;
  static const Gender GENDER_UNKNOWN = BidRequest_User_Demographic_Gender_GENDER_UNKNOWN;
  static const Gender GENDER_MALE = BidRequest_User_Demographic_Gender_GENDER_MALE;
  static const Gender GENDER_FEMALE = BidRequest_User_Demographic_Gender_GENDER_FEMALE;
  static inline bool Gender_IsValid(int value) {
    return BidRequest_User_Demographic_Gender_IsValid(value);
  }
  static const Gender Gender_MIN =
    BidRequest_User_Demographic_Gender_Gender_MIN;
  static const Gender Gender_MAX =
    BidRequest_User_Demographic_Gender_Gender_MAX;
  static const int Gender_ARRAYSIZE =
    BidRequest_User_Demographic_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Gender_descriptor() {
    return BidRequest_User_Demographic_Gender_descriptor();
  }
  static inline const ::std::string& Gender_Name(Gender value) {
    return BidRequest_User_Demographic_Gender_Name(value);
  }
  static inline bool Gender_Parse(const ::std::string& name,
      Gender* value) {
    return BidRequest_User_Demographic_Gender_Parse(name, value);
  }

  typedef BidRequest_User_Demographic_Education Education;
  static const Education EDUCATION_UNKNOWN = BidRequest_User_Demographic_Education_EDUCATION_UNKNOWN;
  static const Education EDUCATION_DOCTOR = BidRequest_User_Demographic_Education_EDUCATION_DOCTOR;
  static const Education EDUCATION_MASTER = BidRequest_User_Demographic_Education_EDUCATION_MASTER;
  static const Education EDUCATION_COLLEGE = BidRequest_User_Demographic_Education_EDUCATION_COLLEGE;
  static const Education EDUCATION_HIGH_SCHOOL = BidRequest_User_Demographic_Education_EDUCATION_HIGH_SCHOOL;
  static const Education EDUCATION_MIDDLE_SCHOOL = BidRequest_User_Demographic_Education_EDUCATION_MIDDLE_SCHOOL;
  static const Education EDUCATION_PRIMARY_SCHOOL = BidRequest_User_Demographic_Education_EDUCATION_PRIMARY_SCHOOL;
  static inline bool Education_IsValid(int value) {
    return BidRequest_User_Demographic_Education_IsValid(value);
  }
  static const Education Education_MIN =
    BidRequest_User_Demographic_Education_Education_MIN;
  static const Education Education_MAX =
    BidRequest_User_Demographic_Education_Education_MAX;
  static const int Education_ARRAYSIZE =
    BidRequest_User_Demographic_Education_Education_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Education_descriptor() {
    return BidRequest_User_Demographic_Education_descriptor();
  }
  static inline const ::std::string& Education_Name(Education value) {
    return BidRequest_User_Demographic_Education_Name(value);
  }
  static inline bool Education_Parse(const ::std::string& name,
      Education* value) {
    return BidRequest_User_Demographic_Education_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .protocol.gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 1;
  inline ::protocol::gdt::adx::BidRequest_User_Demographic_Gender gender() const;
  inline void set_gender(::protocol::gdt::adx::BidRequest_User_Demographic_Gender value);

  // optional .protocol.gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
  inline bool has_education() const;
  inline void clear_education();
  static const int kEducationFieldNumber = 2;
  inline ::protocol::gdt::adx::BidRequest_User_Demographic_Education education() const;
  inline void set_education(::protocol::gdt::adx::BidRequest_User_Demographic_Education value);

  // optional int32 age_low = 3 [default = 0];
  inline bool has_age_low() const;
  inline void clear_age_low();
  static const int kAgeLowFieldNumber = 3;
  inline ::google::protobuf::int32 age_low() const;
  inline void set_age_low(::google::protobuf::int32 value);

  // optional int32 age_high = 4 [default = 999];
  inline bool has_age_high() const;
  inline void clear_age_high();
  static const int kAgeHighFieldNumber = 4;
  inline ::google::protobuf::int32 age_high() const;
  inline void set_age_high(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest.User.Demographic)
 private:
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_education();
  inline void clear_has_education();
  inline void set_has_age_low();
  inline void clear_has_age_low();
  inline void set_has_age_high();
  inline void clear_has_age_high();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int gender_;
  int education_;
  ::google::protobuf::int32 age_low_;
  ::google::protobuf::int32 age_high_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_User_Demographic* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_User_Vertical : public ::google::protobuf::Message {
 public:
  BidRequest_User_Vertical();
  virtual ~BidRequest_User_Vertical();

  BidRequest_User_Vertical(const BidRequest_User_Vertical& from);

  inline BidRequest_User_Vertical& operator=(const BidRequest_User_Vertical& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_User_Vertical& default_instance();

  void Swap(BidRequest_User_Vertical* other);

  // implements Message ----------------------------------------------

  BidRequest_User_Vertical* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_User_Vertical& from);
  void MergeFrom(const BidRequest_User_Vertical& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional float weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline float weight() const;
  inline void set_weight(float value);

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest.User.Vertical)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  float weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_User_Vertical* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_User : public ::google::protobuf::Message {
 public:
  BidRequest_User();
  virtual ~BidRequest_User();

  BidRequest_User(const BidRequest_User& from);

  inline BidRequest_User& operator=(const BidRequest_User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_User& default_instance();

  void Swap(BidRequest_User* other);

  // implements Message ----------------------------------------------

  BidRequest_User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_User& from);
  void MergeFrom(const BidRequest_User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_User_Demographic Demographic;
  typedef BidRequest_User_Vertical Vertical;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional .protocol.gdt.adx.BidRequest.User.Demographic user_demographic = 2;
  inline bool has_user_demographic() const;
  inline void clear_user_demographic();
  static const int kUserDemographicFieldNumber = 2;
  inline const ::protocol::gdt::adx::BidRequest_User_Demographic& user_demographic() const;
  inline ::protocol::gdt::adx::BidRequest_User_Demographic* mutable_user_demographic();
  inline ::protocol::gdt::adx::BidRequest_User_Demographic* release_user_demographic();
  inline void set_allocated_user_demographic(::protocol::gdt::adx::BidRequest_User_Demographic* user_demographic);

  // repeated .protocol.gdt.adx.BidRequest.User.Vertical verticals = 3;
  inline int verticals_size() const;
  inline void clear_verticals();
  static const int kVerticalsFieldNumber = 3;
  inline const ::protocol::gdt::adx::BidRequest_User_Vertical& verticals(int index) const;
  inline ::protocol::gdt::adx::BidRequest_User_Vertical* mutable_verticals(int index);
  inline ::protocol::gdt::adx::BidRequest_User_Vertical* add_verticals();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_User_Vertical >&
      verticals() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_User_Vertical >*
      mutable_verticals();

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest.User)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user_demographic();
  inline void clear_has_user_demographic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::protocol::gdt::adx::BidRequest_User_Demographic* user_demographic_;
  ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_User_Vertical > verticals_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_User* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_Geo : public ::google::protobuf::Message {
 public:
  BidRequest_Geo();
  virtual ~BidRequest_Geo();

  BidRequest_Geo(const BidRequest_Geo& from);

  inline BidRequest_Geo& operator=(const BidRequest_Geo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_Geo& default_instance();

  void Swap(BidRequest_Geo* other);

  // implements Message ----------------------------------------------

  BidRequest_Geo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_Geo& from);
  void MergeFrom(const BidRequest_Geo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline ::google::protobuf::int32 latitude() const;
  inline void set_latitude(::google::protobuf::int32 value);

  // optional int32 longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline ::google::protobuf::int32 longitude() const;
  inline void set_longitude(::google::protobuf::int32 value);

  // optional double accuracy = 3;
  inline bool has_accuracy() const;
  inline void clear_accuracy();
  static const int kAccuracyFieldNumber = 3;
  inline double accuracy() const;
  inline void set_accuracy(double value);

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest.Geo)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_accuracy();
  inline void clear_has_accuracy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 latitude_;
  ::google::protobuf::int32 longitude_;
  double accuracy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_Geo* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest_App : public ::google::protobuf::Message {
 public:
  BidRequest_App();
  virtual ~BidRequest_App();

  BidRequest_App(const BidRequest_App& from);

  inline BidRequest_App& operator=(const BidRequest_App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest_App& default_instance();

  void Swap(BidRequest_App* other);

  // implements Message ----------------------------------------------

  BidRequest_App* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest_App& from);
  void MergeFrom(const BidRequest_App& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 industry_id = 1;
  inline bool has_industry_id() const;
  inline void clear_industry_id();
  static const int kIndustryIdFieldNumber = 1;
  inline ::google::protobuf::int64 industry_id() const;
  inline void set_industry_id(::google::protobuf::int64 value);

  // optional string app_bundle_id = 2;
  inline bool has_app_bundle_id() const;
  inline void clear_app_bundle_id();
  static const int kAppBundleIdFieldNumber = 2;
  inline const ::std::string& app_bundle_id() const;
  inline void set_app_bundle_id(const ::std::string& value);
  inline void set_app_bundle_id(const char* value);
  inline void set_app_bundle_id(const char* value, size_t size);
  inline ::std::string* mutable_app_bundle_id();
  inline ::std::string* release_app_bundle_id();
  inline void set_allocated_app_bundle_id(::std::string* app_bundle_id);

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest.App)
 private:
  inline void set_has_industry_id();
  inline void clear_has_industry_id();
  inline void set_has_app_bundle_id();
  inline void clear_has_app_bundle_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 industry_id_;
  ::std::string* app_bundle_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest_App* default_instance_;
};
// -------------------------------------------------------------------

class BidRequest : public ::google::protobuf::Message {
 public:
  BidRequest();
  virtual ~BidRequest();

  BidRequest(const BidRequest& from);

  inline BidRequest& operator=(const BidRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidRequest& default_instance();

  void Swap(BidRequest* other);

  // implements Message ----------------------------------------------

  BidRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidRequest& from);
  void MergeFrom(const BidRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidRequest_Impression Impression;
  typedef BidRequest_Device Device;
  typedef BidRequest_User User;
  typedef BidRequest_Geo Geo;
  typedef BidRequest_App App;

  typedef BidRequest_DeviceType DeviceType;
  static const DeviceType kDeviceTypeUnknown = BidRequest_DeviceType_kDeviceTypeUnknown;
  static const DeviceType kDeviceTypePC = BidRequest_DeviceType_kDeviceTypePC;
  static const DeviceType kDeviceTypeMobile = BidRequest_DeviceType_kDeviceTypeMobile;
  static const DeviceType kDeviceTypePad = BidRequest_DeviceType_kDeviceTypePad;
  static inline bool DeviceType_IsValid(int value) {
    return BidRequest_DeviceType_IsValid(value);
  }
  static const DeviceType DeviceType_MIN =
    BidRequest_DeviceType_DeviceType_MIN;
  static const DeviceType DeviceType_MAX =
    BidRequest_DeviceType_DeviceType_MAX;
  static const int DeviceType_ARRAYSIZE =
    BidRequest_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceType_descriptor() {
    return BidRequest_DeviceType_descriptor();
  }
  static inline const ::std::string& DeviceType_Name(DeviceType value) {
    return BidRequest_DeviceType_Name(value);
  }
  static inline bool DeviceType_Parse(const ::std::string& name,
      DeviceType* value) {
    return BidRequest_DeviceType_Parse(name, value);
  }

  typedef BidRequest_Carrier Carrier;
  static const Carrier kCarrierUnknown = BidRequest_Carrier_kCarrierUnknown;
  static const Carrier kCarrierChinaMobile = BidRequest_Carrier_kCarrierChinaMobile;
  static const Carrier kCarrierChinaUnicom = BidRequest_Carrier_kCarrierChinaUnicom;
  static const Carrier kCarrierChinaTelecom = BidRequest_Carrier_kCarrierChinaTelecom;
  static inline bool Carrier_IsValid(int value) {
    return BidRequest_Carrier_IsValid(value);
  }
  static const Carrier Carrier_MIN =
    BidRequest_Carrier_Carrier_MIN;
  static const Carrier Carrier_MAX =
    BidRequest_Carrier_Carrier_MAX;
  static const int Carrier_ARRAYSIZE =
    BidRequest_Carrier_Carrier_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Carrier_descriptor() {
    return BidRequest_Carrier_descriptor();
  }
  static inline const ::std::string& Carrier_Name(Carrier value) {
    return BidRequest_Carrier_Name(value);
  }
  static inline bool Carrier_Parse(const ::std::string& name,
      Carrier* value) {
    return BidRequest_Carrier_Parse(name, value);
  }

  typedef BidRequest_ConnectionType ConnectionType;
  static const ConnectionType kConnTypeUnknown = BidRequest_ConnectionType_kConnTypeUnknown;
  static const ConnectionType kConnTypeWifi = BidRequest_ConnectionType_kConnTypeWifi;
  static const ConnectionType kConnType2G = BidRequest_ConnectionType_kConnType2G;
  static const ConnectionType kConnType3G = BidRequest_ConnectionType_kConnType3G;
  static const ConnectionType kConnType4G = BidRequest_ConnectionType_kConnType4G;
  static inline bool ConnectionType_IsValid(int value) {
    return BidRequest_ConnectionType_IsValid(value);
  }
  static const ConnectionType ConnectionType_MIN =
    BidRequest_ConnectionType_ConnectionType_MIN;
  static const ConnectionType ConnectionType_MAX =
    BidRequest_ConnectionType_ConnectionType_MAX;
  static const int ConnectionType_ARRAYSIZE =
    BidRequest_ConnectionType_ConnectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectionType_descriptor() {
    return BidRequest_ConnectionType_descriptor();
  }
  static inline const ::std::string& ConnectionType_Name(ConnectionType value) {
    return BidRequest_ConnectionType_Name(value);
  }
  static inline bool ConnectionType_Parse(const ::std::string& name,
      ConnectionType* value) {
    return BidRequest_ConnectionType_Parse(name, value);
  }

  typedef BidRequest_OperatingSystem OperatingSystem;
  static const OperatingSystem kOSUnknown = BidRequest_OperatingSystem_kOSUnknown;
  static const OperatingSystem kOSIOS = BidRequest_OperatingSystem_kOSIOS;
  static const OperatingSystem kOSAndroid = BidRequest_OperatingSystem_kOSAndroid;
  static const OperatingSystem kOSWindows = BidRequest_OperatingSystem_kOSWindows;
  static const OperatingSystem kOSSymbian = BidRequest_OperatingSystem_kOSSymbian;
  static const OperatingSystem kOSJava = BidRequest_OperatingSystem_kOSJava;
  static inline bool OperatingSystem_IsValid(int value) {
    return BidRequest_OperatingSystem_IsValid(value);
  }
  static const OperatingSystem OperatingSystem_MIN =
    BidRequest_OperatingSystem_OperatingSystem_MIN;
  static const OperatingSystem OperatingSystem_MAX =
    BidRequest_OperatingSystem_OperatingSystem_MAX;
  static const int OperatingSystem_ARRAYSIZE =
    BidRequest_OperatingSystem_OperatingSystem_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperatingSystem_descriptor() {
    return BidRequest_OperatingSystem_descriptor();
  }
  static inline const ::std::string& OperatingSystem_Name(OperatingSystem value) {
    return BidRequest_OperatingSystem_Name(value);
  }
  static inline bool OperatingSystem_Parse(const ::std::string& name,
      OperatingSystem* value) {
    return BidRequest_OperatingSystem_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bool is_ping = 2 [default = false];
  inline bool has_is_ping() const;
  inline void clear_is_ping();
  static const int kIsPingFieldNumber = 2;
  inline bool is_ping() const;
  inline void set_is_ping(bool value);

  // optional bool is_test = 3 [default = false];
  inline bool has_is_test() const;
  inline void clear_is_test();
  static const int kIsTestFieldNumber = 3;
  inline bool is_test() const;
  inline void set_is_test(bool value);

  // repeated .protocol.gdt.adx.BidRequest.Impression impressions = 4;
  inline int impressions_size() const;
  inline void clear_impressions();
  static const int kImpressionsFieldNumber = 4;
  inline const ::protocol::gdt::adx::BidRequest_Impression& impressions(int index) const;
  inline ::protocol::gdt::adx::BidRequest_Impression* mutable_impressions(int index);
  inline ::protocol::gdt::adx::BidRequest_Impression* add_impressions();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression >&
      impressions() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression >*
      mutable_impressions();

  // optional .protocol.gdt.adx.BidRequest.Device device = 5;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 5;
  inline const ::protocol::gdt::adx::BidRequest_Device& device() const;
  inline ::protocol::gdt::adx::BidRequest_Device* mutable_device();
  inline ::protocol::gdt::adx::BidRequest_Device* release_device();
  inline void set_allocated_device(::protocol::gdt::adx::BidRequest_Device* device);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 area_code = 7;
  inline bool has_area_code() const;
  inline void clear_area_code();
  static const int kAreaCodeFieldNumber = 7;
  inline ::google::protobuf::int32 area_code() const;
  inline void set_area_code(::google::protobuf::int32 value);

  // optional .protocol.gdt.adx.BidRequest.User user = 8;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 8;
  inline const ::protocol::gdt::adx::BidRequest_User& user() const;
  inline ::protocol::gdt::adx::BidRequest_User* mutable_user();
  inline ::protocol::gdt::adx::BidRequest_User* release_user();
  inline void set_allocated_user(::protocol::gdt::adx::BidRequest_User* user);

  // optional .protocol.gdt.adx.BidRequest.Geo geo = 9;
  inline bool has_geo() const;
  inline void clear_geo();
  static const int kGeoFieldNumber = 9;
  inline const ::protocol::gdt::adx::BidRequest_Geo& geo() const;
  inline ::protocol::gdt::adx::BidRequest_Geo* mutable_geo();
  inline ::protocol::gdt::adx::BidRequest_Geo* release_geo();
  inline void set_allocated_geo(::protocol::gdt::adx::BidRequest_Geo* geo);

  // optional .protocol.gdt.adx.BidRequest.App app = 10;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 10;
  inline const ::protocol::gdt::adx::BidRequest_App& app() const;
  inline ::protocol::gdt::adx::BidRequest_App* mutable_app();
  inline ::protocol::gdt::adx::BidRequest_App* release_app();
  inline void set_allocated_app(::protocol::gdt::adx::BidRequest_App* app);

  // optional uint64 boss_qq = 11;
  inline bool has_boss_qq() const;
  inline void clear_boss_qq();
  static const int kBossQqFieldNumber = 11;
  inline ::google::protobuf::uint64 boss_qq() const;
  inline void set_boss_qq(::google::protobuf::uint64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidRequest)
  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_ping();
  inline void clear_has_is_ping();
  inline void set_has_is_test();
  inline void clear_has_is_test();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_area_code();
  inline void clear_has_area_code();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_geo();
  inline void clear_has_geo();
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_boss_qq();
  inline void clear_has_boss_qq();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression > impressions_;
  bool is_ping_;
  bool is_test_;
  ::google::protobuf::int32 area_code_;
  ::protocol::gdt::adx::BidRequest_Device* device_;
  ::std::string* ip_;
  ::protocol::gdt::adx::BidRequest_User* user_;
  ::protocol::gdt::adx::BidRequest_Geo* geo_;
  ::protocol::gdt::adx::BidRequest_App* app_;
  ::google::protobuf::uint64 boss_qq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidRequest* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_Bid : public ::google::protobuf::Message {
 public:
  BidResponse_Bid();
  virtual ~BidResponse_Bid();

  BidResponse_Bid(const BidResponse_Bid& from);

  inline BidResponse_Bid& operator=(const BidResponse_Bid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_Bid& default_instance();

  void Swap(BidResponse_Bid* other);

  // implements Message ----------------------------------------------

  BidResponse_Bid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_Bid& from);
  void MergeFrom(const BidResponse_Bid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string creative_id = 1;
  inline bool has_creative_id() const;
  inline void clear_creative_id();
  static const int kCreativeIdFieldNumber = 1;
  inline const ::std::string& creative_id() const;
  inline void set_creative_id(const ::std::string& value);
  inline void set_creative_id(const char* value);
  inline void set_creative_id(const char* value, size_t size);
  inline ::std::string* mutable_creative_id();
  inline ::std::string* release_creative_id();
  inline void set_allocated_creative_id(::std::string* creative_id);

  // optional int32 bid_price = 2;
  inline bool has_bid_price() const;
  inline void clear_bid_price();
  static const int kBidPriceFieldNumber = 2;
  inline ::google::protobuf::int32 bid_price() const;
  inline void set_bid_price(::google::protobuf::int32 value);

  // optional string impression_param = 3;
  inline bool has_impression_param() const;
  inline void clear_impression_param();
  static const int kImpressionParamFieldNumber = 3;
  inline const ::std::string& impression_param() const;
  inline void set_impression_param(const ::std::string& value);
  inline void set_impression_param(const char* value);
  inline void set_impression_param(const char* value, size_t size);
  inline ::std::string* mutable_impression_param();
  inline ::std::string* release_impression_param();
  inline void set_allocated_impression_param(::std::string* impression_param);

  // optional string click_param = 4;
  inline bool has_click_param() const;
  inline void clear_click_param();
  static const int kClickParamFieldNumber = 4;
  inline const ::std::string& click_param() const;
  inline void set_click_param(const ::std::string& value);
  inline void set_click_param(const char* value);
  inline void set_click_param(const char* value, size_t size);
  inline ::std::string* mutable_click_param();
  inline ::std::string* release_click_param();
  inline void set_allocated_click_param(::std::string* click_param);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidResponse_Bid)
  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidResponse.Bid)
 private:
  inline void set_has_creative_id();
  inline void clear_has_creative_id();
  inline void set_has_bid_price();
  inline void clear_has_bid_price();
  inline void set_has_impression_param();
  inline void clear_has_impression_param();
  inline void set_has_click_param();
  inline void clear_has_click_param();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* creative_id_;
  ::std::string* impression_param_;
  ::std::string* click_param_;
  ::google::protobuf::int32 bid_price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_Bid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse_SeatBid : public ::google::protobuf::Message {
 public:
  BidResponse_SeatBid();
  virtual ~BidResponse_SeatBid();

  BidResponse_SeatBid(const BidResponse_SeatBid& from);

  inline BidResponse_SeatBid& operator=(const BidResponse_SeatBid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse_SeatBid& default_instance();

  void Swap(BidResponse_SeatBid* other);

  // implements Message ----------------------------------------------

  BidResponse_SeatBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse_SeatBid& from);
  void MergeFrom(const BidResponse_SeatBid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string impression_id = 1;
  inline bool has_impression_id() const;
  inline void clear_impression_id();
  static const int kImpressionIdFieldNumber = 1;
  inline const ::std::string& impression_id() const;
  inline void set_impression_id(const ::std::string& value);
  inline void set_impression_id(const char* value);
  inline void set_impression_id(const char* value, size_t size);
  inline ::std::string* mutable_impression_id();
  inline ::std::string* release_impression_id();
  inline void set_allocated_impression_id(::std::string* impression_id);

  // repeated .protocol.gdt.adx.BidResponse.Bid bids = 2;
  inline int bids_size() const;
  inline void clear_bids();
  static const int kBidsFieldNumber = 2;
  inline const ::protocol::gdt::adx::BidResponse_Bid& bids(int index) const;
  inline ::protocol::gdt::adx::BidResponse_Bid* mutable_bids(int index);
  inline ::protocol::gdt::adx::BidResponse_Bid* add_bids();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_Bid >&
      bids() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_Bid >*
      mutable_bids();

  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidResponse.SeatBid)
 private:
  inline void set_has_impression_id();
  inline void clear_has_impression_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* impression_id_;
  ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_Bid > bids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidResponse_SeatBid* default_instance_;
};
// -------------------------------------------------------------------

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();

  BidResponse(const BidResponse& from);

  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();

  void Swap(BidResponse* other);

  // implements Message ----------------------------------------------

  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BidResponse_Bid Bid;
  typedef BidResponse_SeatBid SeatBid;

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline const ::std::string& request_id() const;
  inline void set_request_id(const ::std::string& value);
  inline void set_request_id(const char* value);
  inline void set_request_id(const char* value, size_t size);
  inline ::std::string* mutable_request_id();
  inline ::std::string* release_request_id();
  inline void set_allocated_request_id(::std::string* request_id);

  // repeated .protocol.gdt.adx.BidResponse.SeatBid seat_bids = 2;
  inline int seat_bids_size() const;
  inline void clear_seat_bids();
  static const int kSeatBidsFieldNumber = 2;
  inline const ::protocol::gdt::adx::BidResponse_SeatBid& seat_bids(int index) const;
  inline ::protocol::gdt::adx::BidResponse_SeatBid* mutable_seat_bids(int index);
  inline ::protocol::gdt::adx::BidResponse_SeatBid* add_seat_bids();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_SeatBid >&
      seat_bids() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_SeatBid >*
      mutable_seat_bids();

  // optional int32 processing_time_ms = 3;
  inline bool has_processing_time_ms() const;
  inline void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 3;
  inline ::google::protobuf::int32 processing_time_ms() const;
  inline void set_processing_time_ms(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BidResponse)
  // @@protoc_insertion_point(class_scope:protocol.gdt.adx.BidResponse)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_processing_time_ms();
  inline void clear_has_processing_time_ms();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* request_id_;
  ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_SeatBid > seat_bids_;
  ::google::protobuf::int32 processing_time_ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gdt_2eproto();
  friend void protobuf_AssignDesc_gdt_2eproto();
  friend void protobuf_ShutdownFile_gdt_2eproto();

  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BidRequest_Impression_Native

// optional uint64 required_fields = 1;
inline bool BidRequest_Impression_Native::has_required_fields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Impression_Native::set_has_required_fields() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Impression_Native::clear_has_required_fields() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Impression_Native::clear_required_fields() {
  required_fields_ = GOOGLE_ULONGLONG(0);
  clear_has_required_fields();
}
inline ::google::protobuf::uint64 BidRequest_Impression_Native::required_fields() const {
  return required_fields_;
}
inline void BidRequest_Impression_Native::set_required_fields(::google::protobuf::uint64 value) {
  set_has_required_fields();
  required_fields_ = value;
}

// optional .protocol.gdt.adx.BidRequest.Impression.Native.Type type = 2;
inline bool BidRequest_Impression_Native::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Impression_Native::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Impression_Native::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Impression_Native::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::protocol::gdt::adx::BidRequest_Impression_Native_Type BidRequest_Impression_Native::type() const {
  return static_cast< ::protocol::gdt::adx::BidRequest_Impression_Native_Type >(type_);
}
inline void BidRequest_Impression_Native::set_type(::protocol::gdt::adx::BidRequest_Impression_Native_Type value) {
  assert(::protocol::gdt::adx::BidRequest_Impression_Native_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// BidRequest_Impression

// optional string id = 1;
inline bool BidRequest_Impression::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Impression::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Impression::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Impression::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Impression::id() const {
  return *id_;
}
inline void BidRequest_Impression::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest_Impression::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest_Impression::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Impression::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidRequest_Impression::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Impression::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 placement_id = 2;
inline bool BidRequest_Impression::has_placement_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Impression::set_has_placement_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Impression::clear_has_placement_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Impression::clear_placement_id() {
  placement_id_ = GOOGLE_LONGLONG(0);
  clear_has_placement_id();
}
inline ::google::protobuf::int64 BidRequest_Impression::placement_id() const {
  return placement_id_;
}
inline void BidRequest_Impression::set_placement_id(::google::protobuf::int64 value) {
  set_has_placement_id();
  placement_id_ = value;
}

// repeated int32 creative_specs = 3;
inline int BidRequest_Impression::creative_specs_size() const {
  return creative_specs_.size();
}
inline void BidRequest_Impression::clear_creative_specs() {
  creative_specs_.Clear();
}
inline ::google::protobuf::int32 BidRequest_Impression::creative_specs(int index) const {
  return creative_specs_.Get(index);
}
inline void BidRequest_Impression::set_creative_specs(int index, ::google::protobuf::int32 value) {
  creative_specs_.Set(index, value);
}
inline void BidRequest_Impression::add_creative_specs(::google::protobuf::int32 value) {
  creative_specs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BidRequest_Impression::creative_specs() const {
  return creative_specs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BidRequest_Impression::mutable_creative_specs() {
  return &creative_specs_;
}

// optional int32 bid_floor = 4;
inline bool BidRequest_Impression::has_bid_floor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Impression::set_has_bid_floor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Impression::clear_has_bid_floor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Impression::clear_bid_floor() {
  bid_floor_ = 0;
  clear_has_bid_floor();
}
inline ::google::protobuf::int32 BidRequest_Impression::bid_floor() const {
  return bid_floor_;
}
inline void BidRequest_Impression::set_bid_floor(::google::protobuf::int32 value) {
  set_has_bid_floor();
  bid_floor_ = value;
}

// repeated int64 blocking_industry_id = 5;
inline int BidRequest_Impression::blocking_industry_id_size() const {
  return blocking_industry_id_.size();
}
inline void BidRequest_Impression::clear_blocking_industry_id() {
  blocking_industry_id_.Clear();
}
inline ::google::protobuf::int64 BidRequest_Impression::blocking_industry_id(int index) const {
  return blocking_industry_id_.Get(index);
}
inline void BidRequest_Impression::set_blocking_industry_id(int index, ::google::protobuf::int64 value) {
  blocking_industry_id_.Set(index, value);
}
inline void BidRequest_Impression::add_blocking_industry_id(::google::protobuf::int64 value) {
  blocking_industry_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BidRequest_Impression::blocking_industry_id() const {
  return blocking_industry_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BidRequest_Impression::mutable_blocking_industry_id() {
  return &blocking_industry_id_;
}

// repeated .protocol.gdt.adx.BidRequest.Impression.Native natives = 6;
inline int BidRequest_Impression::natives_size() const {
  return natives_.size();
}
inline void BidRequest_Impression::clear_natives() {
  natives_.Clear();
}
inline const ::protocol::gdt::adx::BidRequest_Impression_Native& BidRequest_Impression::natives(int index) const {
  return natives_.Get(index);
}
inline ::protocol::gdt::adx::BidRequest_Impression_Native* BidRequest_Impression::mutable_natives(int index) {
  return natives_.Mutable(index);
}
inline ::protocol::gdt::adx::BidRequest_Impression_Native* BidRequest_Impression::add_natives() {
  return natives_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression_Native >&
BidRequest_Impression::natives() const {
  return natives_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression_Native >*
BidRequest_Impression::mutable_natives() {
  return &natives_;
}

// -------------------------------------------------------------------

// BidRequest_Device

// optional string id = 1;
inline bool BidRequest_Device::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Device::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Device::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Device::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_Device::id() const {
  return *id_;
}
inline void BidRequest_Device::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest_Device::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest_Device::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Device::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidRequest_Device::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .protocol.gdt.adx.BidRequest.DeviceType device_type = 2;
inline bool BidRequest_Device::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Device::set_has_device_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Device::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Device::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::protocol::gdt::adx::BidRequest_DeviceType BidRequest_Device::device_type() const {
  return static_cast< ::protocol::gdt::adx::BidRequest_DeviceType >(device_type_);
}
inline void BidRequest_Device::set_device_type(::protocol::gdt::adx::BidRequest_DeviceType value) {
  assert(::protocol::gdt::adx::BidRequest_DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
}

// optional .protocol.gdt.adx.BidRequest.OperatingSystem os = 3;
inline bool BidRequest_Device::has_os() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Device::set_has_os() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Device::clear_os() {
  os_ = 0;
  clear_has_os();
}
inline ::protocol::gdt::adx::BidRequest_OperatingSystem BidRequest_Device::os() const {
  return static_cast< ::protocol::gdt::adx::BidRequest_OperatingSystem >(os_);
}
inline void BidRequest_Device::set_os(::protocol::gdt::adx::BidRequest_OperatingSystem value) {
  assert(::protocol::gdt::adx::BidRequest_OperatingSystem_IsValid(value));
  set_has_os();
  os_ = value;
}

// optional string os_version = 4;
inline bool BidRequest_Device::has_os_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_Device::set_has_os_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_Device::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_Device::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& BidRequest_Device::os_version() const {
  return *os_version_;
}
inline void BidRequest_Device::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void BidRequest_Device::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void BidRequest_Device::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Device::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* BidRequest_Device::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_os_version(::std::string* os_version) {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (os_version) {
    set_has_os_version();
    os_version_ = os_version;
  } else {
    clear_has_os_version();
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_agent = 5;
inline bool BidRequest_Device::has_user_agent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest_Device::set_has_user_agent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest_Device::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest_Device::clear_user_agent() {
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    user_agent_->clear();
  }
  clear_has_user_agent();
}
inline const ::std::string& BidRequest_Device::user_agent() const {
  return *user_agent_;
}
inline void BidRequest_Device::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
}
inline void BidRequest_Device::set_user_agent(const char* value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
}
inline void BidRequest_Device::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Device::mutable_user_agent() {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  return user_agent_;
}
inline ::std::string* BidRequest_Device::release_user_agent() {
  clear_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_agent_;
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (user_agent) {
    set_has_user_agent();
    user_agent_ = user_agent;
  } else {
    clear_has_user_agent();
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 screen_width = 6;
inline bool BidRequest_Device::has_screen_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest_Device::set_has_screen_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest_Device::clear_has_screen_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest_Device::clear_screen_width() {
  screen_width_ = 0;
  clear_has_screen_width();
}
inline ::google::protobuf::int32 BidRequest_Device::screen_width() const {
  return screen_width_;
}
inline void BidRequest_Device::set_screen_width(::google::protobuf::int32 value) {
  set_has_screen_width();
  screen_width_ = value;
}

// optional int32 screen_height = 7;
inline bool BidRequest_Device::has_screen_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest_Device::set_has_screen_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest_Device::clear_has_screen_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest_Device::clear_screen_height() {
  screen_height_ = 0;
  clear_has_screen_height();
}
inline ::google::protobuf::int32 BidRequest_Device::screen_height() const {
  return screen_height_;
}
inline void BidRequest_Device::set_screen_height(::google::protobuf::int32 value) {
  set_has_screen_height();
  screen_height_ = value;
}

// optional int32 dpi = 8;
inline bool BidRequest_Device::has_dpi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest_Device::set_has_dpi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest_Device::clear_has_dpi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest_Device::clear_dpi() {
  dpi_ = 0;
  clear_has_dpi();
}
inline ::google::protobuf::int32 BidRequest_Device::dpi() const {
  return dpi_;
}
inline void BidRequest_Device::set_dpi(::google::protobuf::int32 value) {
  set_has_dpi();
  dpi_ = value;
}

// optional .protocol.gdt.adx.BidRequest.Carrier carrier = 9;
inline bool BidRequest_Device::has_carrier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest_Device::set_has_carrier() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest_Device::clear_has_carrier() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest_Device::clear_carrier() {
  carrier_ = 0;
  clear_has_carrier();
}
inline ::protocol::gdt::adx::BidRequest_Carrier BidRequest_Device::carrier() const {
  return static_cast< ::protocol::gdt::adx::BidRequest_Carrier >(carrier_);
}
inline void BidRequest_Device::set_carrier(::protocol::gdt::adx::BidRequest_Carrier value) {
  assert(::protocol::gdt::adx::BidRequest_Carrier_IsValid(value));
  set_has_carrier();
  carrier_ = value;
}

// optional .protocol.gdt.adx.BidRequest.ConnectionType connection_type = 10;
inline bool BidRequest_Device::has_connection_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest_Device::set_has_connection_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest_Device::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest_Device::clear_connection_type() {
  connection_type_ = 0;
  clear_has_connection_type();
}
inline ::protocol::gdt::adx::BidRequest_ConnectionType BidRequest_Device::connection_type() const {
  return static_cast< ::protocol::gdt::adx::BidRequest_ConnectionType >(connection_type_);
}
inline void BidRequest_Device::set_connection_type(::protocol::gdt::adx::BidRequest_ConnectionType value) {
  assert(::protocol::gdt::adx::BidRequest_ConnectionType_IsValid(value));
  set_has_connection_type();
  connection_type_ = value;
}

// optional string brand_and_model = 11;
inline bool BidRequest_Device::has_brand_and_model() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest_Device::set_has_brand_and_model() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest_Device::clear_has_brand_and_model() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest_Device::clear_brand_and_model() {
  if (brand_and_model_ != &::google::protobuf::internal::kEmptyString) {
    brand_and_model_->clear();
  }
  clear_has_brand_and_model();
}
inline const ::std::string& BidRequest_Device::brand_and_model() const {
  return *brand_and_model_;
}
inline void BidRequest_Device::set_brand_and_model(const ::std::string& value) {
  set_has_brand_and_model();
  if (brand_and_model_ == &::google::protobuf::internal::kEmptyString) {
    brand_and_model_ = new ::std::string;
  }
  brand_and_model_->assign(value);
}
inline void BidRequest_Device::set_brand_and_model(const char* value) {
  set_has_brand_and_model();
  if (brand_and_model_ == &::google::protobuf::internal::kEmptyString) {
    brand_and_model_ = new ::std::string;
  }
  brand_and_model_->assign(value);
}
inline void BidRequest_Device::set_brand_and_model(const char* value, size_t size) {
  set_has_brand_and_model();
  if (brand_and_model_ == &::google::protobuf::internal::kEmptyString) {
    brand_and_model_ = new ::std::string;
  }
  brand_and_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Device::mutable_brand_and_model() {
  set_has_brand_and_model();
  if (brand_and_model_ == &::google::protobuf::internal::kEmptyString) {
    brand_and_model_ = new ::std::string;
  }
  return brand_and_model_;
}
inline ::std::string* BidRequest_Device::release_brand_and_model() {
  clear_has_brand_and_model();
  if (brand_and_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brand_and_model_;
    brand_and_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_brand_and_model(::std::string* brand_and_model) {
  if (brand_and_model_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_and_model_;
  }
  if (brand_and_model) {
    set_has_brand_and_model();
    brand_and_model_ = brand_and_model;
  } else {
    clear_has_brand_and_model();
    brand_and_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string language = 12;
inline bool BidRequest_Device::has_language() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidRequest_Device::set_has_language() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidRequest_Device::clear_has_language() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidRequest_Device::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& BidRequest_Device::language() const {
  return *language_;
}
inline void BidRequest_Device::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void BidRequest_Device::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void BidRequest_Device::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_Device::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* BidRequest_Device::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_Device::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidRequest_User_Demographic

// optional .protocol.gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
inline bool BidRequest_User_Demographic::has_gender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_User_Demographic::set_has_gender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_User_Demographic::clear_has_gender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_User_Demographic::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::protocol::gdt::adx::BidRequest_User_Demographic_Gender BidRequest_User_Demographic::gender() const {
  return static_cast< ::protocol::gdt::adx::BidRequest_User_Demographic_Gender >(gender_);
}
inline void BidRequest_User_Demographic::set_gender(::protocol::gdt::adx::BidRequest_User_Demographic_Gender value) {
  assert(::protocol::gdt::adx::BidRequest_User_Demographic_Gender_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional .protocol.gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
inline bool BidRequest_User_Demographic::has_education() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_User_Demographic::set_has_education() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_User_Demographic::clear_has_education() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_User_Demographic::clear_education() {
  education_ = 0;
  clear_has_education();
}
inline ::protocol::gdt::adx::BidRequest_User_Demographic_Education BidRequest_User_Demographic::education() const {
  return static_cast< ::protocol::gdt::adx::BidRequest_User_Demographic_Education >(education_);
}
inline void BidRequest_User_Demographic::set_education(::protocol::gdt::adx::BidRequest_User_Demographic_Education value) {
  assert(::protocol::gdt::adx::BidRequest_User_Demographic_Education_IsValid(value));
  set_has_education();
  education_ = value;
}

// optional int32 age_low = 3 [default = 0];
inline bool BidRequest_User_Demographic::has_age_low() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_User_Demographic::set_has_age_low() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_User_Demographic::clear_has_age_low() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_User_Demographic::clear_age_low() {
  age_low_ = 0;
  clear_has_age_low();
}
inline ::google::protobuf::int32 BidRequest_User_Demographic::age_low() const {
  return age_low_;
}
inline void BidRequest_User_Demographic::set_age_low(::google::protobuf::int32 value) {
  set_has_age_low();
  age_low_ = value;
}

// optional int32 age_high = 4 [default = 999];
inline bool BidRequest_User_Demographic::has_age_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidRequest_User_Demographic::set_has_age_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidRequest_User_Demographic::clear_has_age_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidRequest_User_Demographic::clear_age_high() {
  age_high_ = 999;
  clear_has_age_high();
}
inline ::google::protobuf::int32 BidRequest_User_Demographic::age_high() const {
  return age_high_;
}
inline void BidRequest_User_Demographic::set_age_high(::google::protobuf::int32 value) {
  set_has_age_high();
  age_high_ = value;
}

// -------------------------------------------------------------------

// BidRequest_User_Vertical

// optional uint32 id = 1;
inline bool BidRequest_User_Vertical::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_User_Vertical::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_User_Vertical::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_User_Vertical::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BidRequest_User_Vertical::id() const {
  return id_;
}
inline void BidRequest_User_Vertical::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional float weight = 2;
inline bool BidRequest_User_Vertical::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_User_Vertical::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_User_Vertical::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_User_Vertical::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float BidRequest_User_Vertical::weight() const {
  return weight_;
}
inline void BidRequest_User_Vertical::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// BidRequest_User

// optional string id = 1;
inline bool BidRequest_User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_User::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest_User::id() const {
  return *id_;
}
inline void BidRequest_User::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest_User::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest_User::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_User::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidRequest_User::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_User::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .protocol.gdt.adx.BidRequest.User.Demographic user_demographic = 2;
inline bool BidRequest_User::has_user_demographic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_User::set_has_user_demographic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_User::clear_has_user_demographic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_User::clear_user_demographic() {
  if (user_demographic_ != NULL) user_demographic_->::protocol::gdt::adx::BidRequest_User_Demographic::Clear();
  clear_has_user_demographic();
}
inline const ::protocol::gdt::adx::BidRequest_User_Demographic& BidRequest_User::user_demographic() const {
  return user_demographic_ != NULL ? *user_demographic_ : *default_instance_->user_demographic_;
}
inline ::protocol::gdt::adx::BidRequest_User_Demographic* BidRequest_User::mutable_user_demographic() {
  set_has_user_demographic();
  if (user_demographic_ == NULL) user_demographic_ = new ::protocol::gdt::adx::BidRequest_User_Demographic;
  return user_demographic_;
}
inline ::protocol::gdt::adx::BidRequest_User_Demographic* BidRequest_User::release_user_demographic() {
  clear_has_user_demographic();
  ::protocol::gdt::adx::BidRequest_User_Demographic* temp = user_demographic_;
  user_demographic_ = NULL;
  return temp;
}
inline void BidRequest_User::set_allocated_user_demographic(::protocol::gdt::adx::BidRequest_User_Demographic* user_demographic) {
  delete user_demographic_;
  user_demographic_ = user_demographic;
  if (user_demographic) {
    set_has_user_demographic();
  } else {
    clear_has_user_demographic();
  }
}

// repeated .protocol.gdt.adx.BidRequest.User.Vertical verticals = 3;
inline int BidRequest_User::verticals_size() const {
  return verticals_.size();
}
inline void BidRequest_User::clear_verticals() {
  verticals_.Clear();
}
inline const ::protocol::gdt::adx::BidRequest_User_Vertical& BidRequest_User::verticals(int index) const {
  return verticals_.Get(index);
}
inline ::protocol::gdt::adx::BidRequest_User_Vertical* BidRequest_User::mutable_verticals(int index) {
  return verticals_.Mutable(index);
}
inline ::protocol::gdt::adx::BidRequest_User_Vertical* BidRequest_User::add_verticals() {
  return verticals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_User_Vertical >&
BidRequest_User::verticals() const {
  return verticals_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_User_Vertical >*
BidRequest_User::mutable_verticals() {
  return &verticals_;
}

// -------------------------------------------------------------------

// BidRequest_Geo

// optional int32 latitude = 1;
inline bool BidRequest_Geo::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_Geo::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_Geo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_Geo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline ::google::protobuf::int32 BidRequest_Geo::latitude() const {
  return latitude_;
}
inline void BidRequest_Geo::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
}

// optional int32 longitude = 2;
inline bool BidRequest_Geo::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_Geo::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_Geo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_Geo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline ::google::protobuf::int32 BidRequest_Geo::longitude() const {
  return longitude_;
}
inline void BidRequest_Geo::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
}

// optional double accuracy = 3;
inline bool BidRequest_Geo::has_accuracy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest_Geo::set_has_accuracy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest_Geo::clear_has_accuracy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest_Geo::clear_accuracy() {
  accuracy_ = 0;
  clear_has_accuracy();
}
inline double BidRequest_Geo::accuracy() const {
  return accuracy_;
}
inline void BidRequest_Geo::set_accuracy(double value) {
  set_has_accuracy();
  accuracy_ = value;
}

// -------------------------------------------------------------------

// BidRequest_App

// optional int64 industry_id = 1;
inline bool BidRequest_App::has_industry_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest_App::set_has_industry_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest_App::clear_has_industry_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest_App::clear_industry_id() {
  industry_id_ = GOOGLE_LONGLONG(0);
  clear_has_industry_id();
}
inline ::google::protobuf::int64 BidRequest_App::industry_id() const {
  return industry_id_;
}
inline void BidRequest_App::set_industry_id(::google::protobuf::int64 value) {
  set_has_industry_id();
  industry_id_ = value;
}

// optional string app_bundle_id = 2;
inline bool BidRequest_App::has_app_bundle_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest_App::set_has_app_bundle_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest_App::clear_has_app_bundle_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest_App::clear_app_bundle_id() {
  if (app_bundle_id_ != &::google::protobuf::internal::kEmptyString) {
    app_bundle_id_->clear();
  }
  clear_has_app_bundle_id();
}
inline const ::std::string& BidRequest_App::app_bundle_id() const {
  return *app_bundle_id_;
}
inline void BidRequest_App::set_app_bundle_id(const ::std::string& value) {
  set_has_app_bundle_id();
  if (app_bundle_id_ == &::google::protobuf::internal::kEmptyString) {
    app_bundle_id_ = new ::std::string;
  }
  app_bundle_id_->assign(value);
}
inline void BidRequest_App::set_app_bundle_id(const char* value) {
  set_has_app_bundle_id();
  if (app_bundle_id_ == &::google::protobuf::internal::kEmptyString) {
    app_bundle_id_ = new ::std::string;
  }
  app_bundle_id_->assign(value);
}
inline void BidRequest_App::set_app_bundle_id(const char* value, size_t size) {
  set_has_app_bundle_id();
  if (app_bundle_id_ == &::google::protobuf::internal::kEmptyString) {
    app_bundle_id_ = new ::std::string;
  }
  app_bundle_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest_App::mutable_app_bundle_id() {
  set_has_app_bundle_id();
  if (app_bundle_id_ == &::google::protobuf::internal::kEmptyString) {
    app_bundle_id_ = new ::std::string;
  }
  return app_bundle_id_;
}
inline ::std::string* BidRequest_App::release_app_bundle_id() {
  clear_has_app_bundle_id();
  if (app_bundle_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_bundle_id_;
    app_bundle_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest_App::set_allocated_app_bundle_id(::std::string* app_bundle_id) {
  if (app_bundle_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_bundle_id_;
  }
  if (app_bundle_id) {
    set_has_app_bundle_id();
    app_bundle_id_ = app_bundle_id;
  } else {
    clear_has_app_bundle_id();
    app_bundle_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidRequest

// optional string id = 1;
inline bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BidRequest::id() const {
  return *id_;
}
inline void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BidRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_ping = 2 [default = false];
inline bool BidRequest::has_is_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidRequest::set_has_is_ping() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidRequest::clear_has_is_ping() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidRequest::clear_is_ping() {
  is_ping_ = false;
  clear_has_is_ping();
}
inline bool BidRequest::is_ping() const {
  return is_ping_;
}
inline void BidRequest::set_is_ping(bool value) {
  set_has_is_ping();
  is_ping_ = value;
}

// optional bool is_test = 3 [default = false];
inline bool BidRequest::has_is_test() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidRequest::set_has_is_test() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidRequest::clear_has_is_test() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidRequest::clear_is_test() {
  is_test_ = false;
  clear_has_is_test();
}
inline bool BidRequest::is_test() const {
  return is_test_;
}
inline void BidRequest::set_is_test(bool value) {
  set_has_is_test();
  is_test_ = value;
}

// repeated .protocol.gdt.adx.BidRequest.Impression impressions = 4;
inline int BidRequest::impressions_size() const {
  return impressions_.size();
}
inline void BidRequest::clear_impressions() {
  impressions_.Clear();
}
inline const ::protocol::gdt::adx::BidRequest_Impression& BidRequest::impressions(int index) const {
  return impressions_.Get(index);
}
inline ::protocol::gdt::adx::BidRequest_Impression* BidRequest::mutable_impressions(int index) {
  return impressions_.Mutable(index);
}
inline ::protocol::gdt::adx::BidRequest_Impression* BidRequest::add_impressions() {
  return impressions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression >&
BidRequest::impressions() const {
  return impressions_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidRequest_Impression >*
BidRequest::mutable_impressions() {
  return &impressions_;
}

// optional .protocol.gdt.adx.BidRequest.Device device = 5;
inline bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidRequest::clear_device() {
  if (device_ != NULL) device_->::protocol::gdt::adx::BidRequest_Device::Clear();
  clear_has_device();
}
inline const ::protocol::gdt::adx::BidRequest_Device& BidRequest::device() const {
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
inline ::protocol::gdt::adx::BidRequest_Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) device_ = new ::protocol::gdt::adx::BidRequest_Device;
  return device_;
}
inline ::protocol::gdt::adx::BidRequest_Device* BidRequest::release_device() {
  clear_has_device();
  ::protocol::gdt::adx::BidRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_device(::protocol::gdt::adx::BidRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
}

// optional string ip = 6;
inline bool BidRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BidRequest::ip() const {
  return *ip_;
}
inline void BidRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void BidRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void BidRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* BidRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 area_code = 7;
inline bool BidRequest::has_area_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidRequest::set_has_area_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidRequest::clear_has_area_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidRequest::clear_area_code() {
  area_code_ = 0;
  clear_has_area_code();
}
inline ::google::protobuf::int32 BidRequest::area_code() const {
  return area_code_;
}
inline void BidRequest::set_area_code(::google::protobuf::int32 value) {
  set_has_area_code();
  area_code_ = value;
}

// optional .protocol.gdt.adx.BidRequest.User user = 8;
inline bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidRequest::clear_user() {
  if (user_ != NULL) user_->::protocol::gdt::adx::BidRequest_User::Clear();
  clear_has_user();
}
inline const ::protocol::gdt::adx::BidRequest_User& BidRequest::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::protocol::gdt::adx::BidRequest_User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::protocol::gdt::adx::BidRequest_User;
  return user_;
}
inline ::protocol::gdt::adx::BidRequest_User* BidRequest::release_user() {
  clear_has_user();
  ::protocol::gdt::adx::BidRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_user(::protocol::gdt::adx::BidRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// optional .protocol.gdt.adx.BidRequest.Geo geo = 9;
inline bool BidRequest::has_geo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidRequest::set_has_geo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidRequest::clear_has_geo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidRequest::clear_geo() {
  if (geo_ != NULL) geo_->::protocol::gdt::adx::BidRequest_Geo::Clear();
  clear_has_geo();
}
inline const ::protocol::gdt::adx::BidRequest_Geo& BidRequest::geo() const {
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
inline ::protocol::gdt::adx::BidRequest_Geo* BidRequest::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) geo_ = new ::protocol::gdt::adx::BidRequest_Geo;
  return geo_;
}
inline ::protocol::gdt::adx::BidRequest_Geo* BidRequest::release_geo() {
  clear_has_geo();
  ::protocol::gdt::adx::BidRequest_Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_geo(::protocol::gdt::adx::BidRequest_Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
}

// optional .protocol.gdt.adx.BidRequest.App app = 10;
inline bool BidRequest::has_app() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidRequest::set_has_app() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidRequest::clear_has_app() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidRequest::clear_app() {
  if (app_ != NULL) app_->::protocol::gdt::adx::BidRequest_App::Clear();
  clear_has_app();
}
inline const ::protocol::gdt::adx::BidRequest_App& BidRequest::app() const {
  return app_ != NULL ? *app_ : *default_instance_->app_;
}
inline ::protocol::gdt::adx::BidRequest_App* BidRequest::mutable_app() {
  set_has_app();
  if (app_ == NULL) app_ = new ::protocol::gdt::adx::BidRequest_App;
  return app_;
}
inline ::protocol::gdt::adx::BidRequest_App* BidRequest::release_app() {
  clear_has_app();
  ::protocol::gdt::adx::BidRequest_App* temp = app_;
  app_ = NULL;
  return temp;
}
inline void BidRequest::set_allocated_app(::protocol::gdt::adx::BidRequest_App* app) {
  delete app_;
  app_ = app;
  if (app) {
    set_has_app();
  } else {
    clear_has_app();
  }
}

// optional uint64 boss_qq = 11;
inline bool BidRequest::has_boss_qq() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidRequest::set_has_boss_qq() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidRequest::clear_has_boss_qq() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidRequest::clear_boss_qq() {
  boss_qq_ = GOOGLE_ULONGLONG(0);
  clear_has_boss_qq();
}
inline ::google::protobuf::uint64 BidRequest::boss_qq() const {
  return boss_qq_;
}
inline void BidRequest::set_boss_qq(::google::protobuf::uint64 value) {
  set_has_boss_qq();
  boss_qq_ = value;
}

// -------------------------------------------------------------------

// BidResponse_Bid

// optional string creative_id = 1;
inline bool BidResponse_Bid::has_creative_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_Bid::set_has_creative_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_Bid::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_Bid::clear_creative_id() {
  if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
    creative_id_->clear();
  }
  clear_has_creative_id();
}
inline const ::std::string& BidResponse_Bid::creative_id() const {
  return *creative_id_;
}
inline void BidResponse_Bid::set_creative_id(const ::std::string& value) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(value);
}
inline void BidResponse_Bid::set_creative_id(const char* value) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(value);
}
inline void BidResponse_Bid::set_creative_id(const char* value, size_t size) {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    creative_id_ = new ::std::string;
  }
  creative_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Bid::mutable_creative_id() {
  set_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    creative_id_ = new ::std::string;
  }
  return creative_id_;
}
inline ::std::string* BidResponse_Bid::release_creative_id() {
  clear_has_creative_id();
  if (creative_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creative_id_;
    creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_Bid::set_allocated_creative_id(::std::string* creative_id) {
  if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_id_;
  }
  if (creative_id) {
    set_has_creative_id();
    creative_id_ = creative_id;
  } else {
    clear_has_creative_id();
    creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bid_price = 2;
inline bool BidResponse_Bid::has_bid_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidResponse_Bid::set_has_bid_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidResponse_Bid::clear_has_bid_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidResponse_Bid::clear_bid_price() {
  bid_price_ = 0;
  clear_has_bid_price();
}
inline ::google::protobuf::int32 BidResponse_Bid::bid_price() const {
  return bid_price_;
}
inline void BidResponse_Bid::set_bid_price(::google::protobuf::int32 value) {
  set_has_bid_price();
  bid_price_ = value;
}

// optional string impression_param = 3;
inline bool BidResponse_Bid::has_impression_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse_Bid::set_has_impression_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse_Bid::clear_has_impression_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse_Bid::clear_impression_param() {
  if (impression_param_ != &::google::protobuf::internal::kEmptyString) {
    impression_param_->clear();
  }
  clear_has_impression_param();
}
inline const ::std::string& BidResponse_Bid::impression_param() const {
  return *impression_param_;
}
inline void BidResponse_Bid::set_impression_param(const ::std::string& value) {
  set_has_impression_param();
  if (impression_param_ == &::google::protobuf::internal::kEmptyString) {
    impression_param_ = new ::std::string;
  }
  impression_param_->assign(value);
}
inline void BidResponse_Bid::set_impression_param(const char* value) {
  set_has_impression_param();
  if (impression_param_ == &::google::protobuf::internal::kEmptyString) {
    impression_param_ = new ::std::string;
  }
  impression_param_->assign(value);
}
inline void BidResponse_Bid::set_impression_param(const char* value, size_t size) {
  set_has_impression_param();
  if (impression_param_ == &::google::protobuf::internal::kEmptyString) {
    impression_param_ = new ::std::string;
  }
  impression_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Bid::mutable_impression_param() {
  set_has_impression_param();
  if (impression_param_ == &::google::protobuf::internal::kEmptyString) {
    impression_param_ = new ::std::string;
  }
  return impression_param_;
}
inline ::std::string* BidResponse_Bid::release_impression_param() {
  clear_has_impression_param();
  if (impression_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = impression_param_;
    impression_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_Bid::set_allocated_impression_param(::std::string* impression_param) {
  if (impression_param_ != &::google::protobuf::internal::kEmptyString) {
    delete impression_param_;
  }
  if (impression_param) {
    set_has_impression_param();
    impression_param_ = impression_param;
  } else {
    clear_has_impression_param();
    impression_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string click_param = 4;
inline bool BidResponse_Bid::has_click_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidResponse_Bid::set_has_click_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidResponse_Bid::clear_has_click_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidResponse_Bid::clear_click_param() {
  if (click_param_ != &::google::protobuf::internal::kEmptyString) {
    click_param_->clear();
  }
  clear_has_click_param();
}
inline const ::std::string& BidResponse_Bid::click_param() const {
  return *click_param_;
}
inline void BidResponse_Bid::set_click_param(const ::std::string& value) {
  set_has_click_param();
  if (click_param_ == &::google::protobuf::internal::kEmptyString) {
    click_param_ = new ::std::string;
  }
  click_param_->assign(value);
}
inline void BidResponse_Bid::set_click_param(const char* value) {
  set_has_click_param();
  if (click_param_ == &::google::protobuf::internal::kEmptyString) {
    click_param_ = new ::std::string;
  }
  click_param_->assign(value);
}
inline void BidResponse_Bid::set_click_param(const char* value, size_t size) {
  set_has_click_param();
  if (click_param_ == &::google::protobuf::internal::kEmptyString) {
    click_param_ = new ::std::string;
  }
  click_param_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_Bid::mutable_click_param() {
  set_has_click_param();
  if (click_param_ == &::google::protobuf::internal::kEmptyString) {
    click_param_ = new ::std::string;
  }
  return click_param_;
}
inline ::std::string* BidResponse_Bid::release_click_param() {
  clear_has_click_param();
  if (click_param_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = click_param_;
    click_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_Bid::set_allocated_click_param(::std::string* click_param) {
  if (click_param_ != &::google::protobuf::internal::kEmptyString) {
    delete click_param_;
  }
  if (click_param) {
    set_has_click_param();
    click_param_ = click_param;
  } else {
    clear_has_click_param();
    click_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BidResponse_SeatBid

// optional string impression_id = 1;
inline bool BidResponse_SeatBid::has_impression_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse_SeatBid::set_has_impression_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse_SeatBid::clear_has_impression_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse_SeatBid::clear_impression_id() {
  if (impression_id_ != &::google::protobuf::internal::kEmptyString) {
    impression_id_->clear();
  }
  clear_has_impression_id();
}
inline const ::std::string& BidResponse_SeatBid::impression_id() const {
  return *impression_id_;
}
inline void BidResponse_SeatBid::set_impression_id(const ::std::string& value) {
  set_has_impression_id();
  if (impression_id_ == &::google::protobuf::internal::kEmptyString) {
    impression_id_ = new ::std::string;
  }
  impression_id_->assign(value);
}
inline void BidResponse_SeatBid::set_impression_id(const char* value) {
  set_has_impression_id();
  if (impression_id_ == &::google::protobuf::internal::kEmptyString) {
    impression_id_ = new ::std::string;
  }
  impression_id_->assign(value);
}
inline void BidResponse_SeatBid::set_impression_id(const char* value, size_t size) {
  set_has_impression_id();
  if (impression_id_ == &::google::protobuf::internal::kEmptyString) {
    impression_id_ = new ::std::string;
  }
  impression_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse_SeatBid::mutable_impression_id() {
  set_has_impression_id();
  if (impression_id_ == &::google::protobuf::internal::kEmptyString) {
    impression_id_ = new ::std::string;
  }
  return impression_id_;
}
inline ::std::string* BidResponse_SeatBid::release_impression_id() {
  clear_has_impression_id();
  if (impression_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = impression_id_;
    impression_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse_SeatBid::set_allocated_impression_id(::std::string* impression_id) {
  if (impression_id_ != &::google::protobuf::internal::kEmptyString) {
    delete impression_id_;
  }
  if (impression_id) {
    set_has_impression_id();
    impression_id_ = impression_id;
  } else {
    clear_has_impression_id();
    impression_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protocol.gdt.adx.BidResponse.Bid bids = 2;
inline int BidResponse_SeatBid::bids_size() const {
  return bids_.size();
}
inline void BidResponse_SeatBid::clear_bids() {
  bids_.Clear();
}
inline const ::protocol::gdt::adx::BidResponse_Bid& BidResponse_SeatBid::bids(int index) const {
  return bids_.Get(index);
}
inline ::protocol::gdt::adx::BidResponse_Bid* BidResponse_SeatBid::mutable_bids(int index) {
  return bids_.Mutable(index);
}
inline ::protocol::gdt::adx::BidResponse_Bid* BidResponse_SeatBid::add_bids() {
  return bids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_Bid >&
BidResponse_SeatBid::bids() const {
  return bids_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_Bid >*
BidResponse_SeatBid::mutable_bids() {
  return &bids_;
}

// -------------------------------------------------------------------

// BidResponse

// optional string request_id = 1;
inline bool BidResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidResponse::clear_request_id() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    request_id_->clear();
  }
  clear_has_request_id();
}
inline const ::std::string& BidResponse::request_id() const {
  return *request_id_;
}
inline void BidResponse::set_request_id(const ::std::string& value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::kEmptyString) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
}
inline void BidResponse::set_request_id(const char* value) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::kEmptyString) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(value);
}
inline void BidResponse::set_request_id(const char* value, size_t size) {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::kEmptyString) {
    request_id_ = new ::std::string;
  }
  request_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse::mutable_request_id() {
  set_has_request_id();
  if (request_id_ == &::google::protobuf::internal::kEmptyString) {
    request_id_ = new ::std::string;
  }
  return request_id_;
}
inline ::std::string* BidResponse::release_request_id() {
  clear_has_request_id();
  if (request_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_id_;
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BidResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (request_id) {
    set_has_request_id();
    request_id_ = request_id;
  } else {
    clear_has_request_id();
    request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .protocol.gdt.adx.BidResponse.SeatBid seat_bids = 2;
inline int BidResponse::seat_bids_size() const {
  return seat_bids_.size();
}
inline void BidResponse::clear_seat_bids() {
  seat_bids_.Clear();
}
inline const ::protocol::gdt::adx::BidResponse_SeatBid& BidResponse::seat_bids(int index) const {
  return seat_bids_.Get(index);
}
inline ::protocol::gdt::adx::BidResponse_SeatBid* BidResponse::mutable_seat_bids(int index) {
  return seat_bids_.Mutable(index);
}
inline ::protocol::gdt::adx::BidResponse_SeatBid* BidResponse::add_seat_bids() {
  return seat_bids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_SeatBid >&
BidResponse::seat_bids() const {
  return seat_bids_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::gdt::adx::BidResponse_SeatBid >*
BidResponse::mutable_seat_bids() {
  return &seat_bids_;
}

// optional int32 processing_time_ms = 3;
inline bool BidResponse::has_processing_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidResponse::set_has_processing_time_ms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidResponse::clear_has_processing_time_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidResponse::clear_processing_time_ms() {
  processing_time_ms_ = 0;
  clear_has_processing_time_ms();
}
inline ::google::protobuf::int32 BidResponse::processing_time_ms() const {
  return processing_time_ms_;
}
inline void BidResponse::set_processing_time_ms(::google::protobuf::int32 value) {
  set_has_processing_time_ms();
  processing_time_ms_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace adx
}  // namespace gdt
}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::gdt::adx::BidRequest_Impression_Native_Fields>() {
  return ::protocol::gdt::adx::BidRequest_Impression_Native_Fields_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::gdt::adx::BidRequest_Impression_Native_Type>() {
  return ::protocol::gdt::adx::BidRequest_Impression_Native_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::gdt::adx::BidRequest_User_Demographic_Gender>() {
  return ::protocol::gdt::adx::BidRequest_User_Demographic_Gender_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::gdt::adx::BidRequest_User_Demographic_Education>() {
  return ::protocol::gdt::adx::BidRequest_User_Demographic_Education_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::gdt::adx::BidRequest_DeviceType>() {
  return ::protocol::gdt::adx::BidRequest_DeviceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::gdt::adx::BidRequest_Carrier>() {
  return ::protocol::gdt::adx::BidRequest_Carrier_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::gdt::adx::BidRequest_ConnectionType>() {
  return ::protocol::gdt::adx::BidRequest_ConnectionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::gdt::adx::BidRequest_OperatingSystem>() {
  return ::protocol::gdt::adx::BidRequest_OperatingSystem_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gdt_2eproto__INCLUDED
