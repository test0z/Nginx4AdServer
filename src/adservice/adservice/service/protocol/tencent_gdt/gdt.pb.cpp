// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gdt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
namespace gdt {
namespace adx {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Impression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Impression_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Impression_Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Impression_Native_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Fields_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_Demographic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_Demographic_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Education_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_Vertical_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_Vertical_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_App_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Carrier_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_ConnectionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_OperatingSystem_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_Bid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gdt_2eproto() {
  protobuf_AddDesc_gdt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gdt.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, is_test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, impressions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, area_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, boss_qq_),
  };
  BidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest));
  BidRequest_Impression_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Impression_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, placement_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, creative_specs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, bid_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, blocking_industry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, natives_),
  };
  BidRequest_Impression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Impression_descriptor_,
      BidRequest_Impression::default_instance_,
      BidRequest_Impression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Impression));
  BidRequest_Impression_Native_descriptor_ = BidRequest_Impression_descriptor_->nested_type(0);
  static const int BidRequest_Impression_Native_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression_Native, required_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression_Native, type_),
  };
  BidRequest_Impression_Native_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Impression_Native_descriptor_,
      BidRequest_Impression_Native::default_instance_,
      BidRequest_Impression_Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression_Native, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Impression_Native, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Impression_Native));
  BidRequest_Impression_Native_Fields_descriptor_ = BidRequest_Impression_Native_descriptor_->enum_type(0);
  BidRequest_Impression_Native_Type_descriptor_ = BidRequest_Impression_Native_descriptor_->enum_type(1);
  BidRequest_Device_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_Device_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, screen_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, screen_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, dpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, connection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, brand_and_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, language_),
  };
  BidRequest_Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Device_descriptor_,
      BidRequest_Device::default_instance_,
      BidRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Device));
  BidRequest_User_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_User_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, user_demographic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, verticals_),
  };
  BidRequest_User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_User_descriptor_,
      BidRequest_User::default_instance_,
      BidRequest_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_User));
  BidRequest_User_Demographic_descriptor_ = BidRequest_User_descriptor_->nested_type(0);
  static const int BidRequest_User_Demographic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, education_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, age_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, age_high_),
  };
  BidRequest_User_Demographic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_User_Demographic_descriptor_,
      BidRequest_User_Demographic::default_instance_,
      BidRequest_User_Demographic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Demographic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_User_Demographic));
  BidRequest_User_Demographic_Gender_descriptor_ = BidRequest_User_Demographic_descriptor_->enum_type(0);
  BidRequest_User_Demographic_Education_descriptor_ = BidRequest_User_Demographic_descriptor_->enum_type(1);
  BidRequest_User_Vertical_descriptor_ = BidRequest_User_descriptor_->nested_type(1);
  static const int BidRequest_User_Vertical_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Vertical, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Vertical, weight_),
  };
  BidRequest_User_Vertical_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_User_Vertical_descriptor_,
      BidRequest_User_Vertical::default_instance_,
      BidRequest_User_Vertical_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Vertical, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User_Vertical, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_User_Vertical));
  BidRequest_Geo_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Geo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, accuracy_),
  };
  BidRequest_Geo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_Geo_descriptor_,
      BidRequest_Geo::default_instance_,
      BidRequest_Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_Geo));
  BidRequest_App_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_App_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, industry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, app_bundle_id_),
  };
  BidRequest_App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidRequest_App_descriptor_,
      BidRequest_App::default_instance_,
      BidRequest_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidRequest_App));
  BidRequest_DeviceType_descriptor_ = BidRequest_descriptor_->enum_type(0);
  BidRequest_Carrier_descriptor_ = BidRequest_descriptor_->enum_type(1);
  BidRequest_ConnectionType_descriptor_ = BidRequest_descriptor_->enum_type(2);
  BidRequest_OperatingSystem_descriptor_ = BidRequest_descriptor_->enum_type(3);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seat_bids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, processing_time_ms_),
  };
  BidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse));
  BidResponse_Bid_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_Bid_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, impression_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, click_param_),
  };
  BidResponse_Bid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_Bid_descriptor_,
      BidResponse_Bid::default_instance_,
      BidResponse_Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_Bid, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_Bid));
  BidResponse_SeatBid_descriptor_ = BidResponse_descriptor_->nested_type(1);
  static const int BidResponse_SeatBid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, impression_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, bids_),
  };
  BidResponse_SeatBid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidResponse_SeatBid_descriptor_,
      BidResponse_SeatBid::default_instance_,
      BidResponse_SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidResponse_SeatBid));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gdt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Impression_descriptor_, &BidRequest_Impression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Impression_Native_descriptor_, &BidRequest_Impression_Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Device_descriptor_, &BidRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_User_descriptor_, &BidRequest_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_User_Demographic_descriptor_, &BidRequest_User_Demographic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_User_Vertical_descriptor_, &BidRequest_User_Vertical::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_Geo_descriptor_, &BidRequest_Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidRequest_App_descriptor_, &BidRequest_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_Bid_descriptor_, &BidResponse_Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidResponse_SeatBid_descriptor_, &BidResponse_SeatBid::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gdt_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Impression::default_instance_;
  delete BidRequest_Impression_reflection_;
  delete BidRequest_Impression_Native::default_instance_;
  delete BidRequest_Impression_Native_reflection_;
  delete BidRequest_Device::default_instance_;
  delete BidRequest_Device_reflection_;
  delete BidRequest_User::default_instance_;
  delete BidRequest_User_reflection_;
  delete BidRequest_User_Demographic::default_instance_;
  delete BidRequest_User_Demographic_reflection_;
  delete BidRequest_User_Vertical::default_instance_;
  delete BidRequest_User_Vertical_reflection_;
  delete BidRequest_Geo::default_instance_;
  delete BidRequest_Geo_reflection_;
  delete BidRequest_App::default_instance_;
  delete BidRequest_App_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse_Bid::default_instance_;
  delete BidResponse_Bid_reflection_;
  delete BidResponse_SeatBid::default_instance_;
  delete BidResponse_SeatBid_reflection_;
}

void protobuf_AddDesc_gdt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tgdt.proto\022\020protocol.gdt.adx\"\357\022\n\nBidReq"
    "uest\022\n\n\002id\030\001 \001(\t\022\026\n\007is_ping\030\002 \001(\010:\005false"
    "\022\026\n\007is_test\030\003 \001(\010:\005false\022<\n\013impressions\030"
    "\004 \003(\0132\'.protocol.gdt.adx.BidRequest.Impr"
    "ession\0223\n\006device\030\005 \001(\0132#.protocol.gdt.ad"
    "x.BidRequest.Device\022\n\n\002ip\030\006 \001(\t\022\021\n\tarea_"
    "code\030\007 \001(\005\022/\n\004user\030\010 \001(\0132!.protocol.gdt."
    "adx.BidRequest.User\022-\n\003geo\030\t \001(\0132 .proto"
    "col.gdt.adx.BidRequest.Geo\022-\n\003app\030\n \001(\0132"
    " .protocol.gdt.adx.BidRequest.App\022\017\n\007bos"
    "s_qq\030\013 \001(\004\032\376\002\n\nImpression\022\n\n\002id\030\001 \001(\t\022\024\n"
    "\014placement_id\030\002 \001(\003\022\026\n\016creative_specs\030\003 "
    "\003(\005\022\021\n\tbid_floor\030\004 \001(\005\022\034\n\024blocking_indus"
    "try_id\030\005 \003(\003\022\?\n\007natives\030\006 \003(\0132..protocol"
    ".gdt.adx.BidRequest.Impression.Native\032\303\001"
    "\n\006Native\022\027\n\017required_fields\030\001 \001(\004\022A\n\004typ"
    "e\030\002 \001(\01623.protocol.gdt.adx.BidRequest.Im"
    "pression.Native.Type\"@\n\006Fields\022\r\n\tkHeadl"
    "ine\020\001\022\t\n\005kIcon\020\002\022\n\n\006kImage\020\004\022\020\n\014kDescrip"
    "tion\020\010\"\033\n\004Type\022\t\n\005kLink\020\000\022\010\n\004kApp\020\001\032\226\003\n\006"
    "Device\022\n\n\002id\030\001 \001(\t\022<\n\013device_type\030\002 \001(\0162"
    "\'.protocol.gdt.adx.BidRequest.DeviceType"
    "\0228\n\002os\030\003 \001(\0162,.protocol.gdt.adx.BidReque"
    "st.OperatingSystem\022\022\n\nos_version\030\004 \001(\t\022\022"
    "\n\nuser_agent\030\005 \001(\t\022\024\n\014screen_width\030\006 \001(\005"
    "\022\025\n\rscreen_height\030\007 \001(\005\022\013\n\003dpi\030\010 \001(\005\0225\n\007"
    "carrier\030\t \001(\0162$.protocol.gdt.adx.BidRequ"
    "est.Carrier\022D\n\017connection_type\030\n \001(\0162+.p"
    "rotocol.gdt.adx.BidRequest.ConnectionTyp"
    "e\022\027\n\017brand_and_model\030\013 \001(\t\022\020\n\010language\030\014"
    " \001(\t\032\262\005\n\004User\022\n\n\002id\030\001 \001(\t\022G\n\020user_demogr"
    "aphic\030\002 \001(\0132-.protocol.gdt.adx.BidReques"
    "t.User.Demographic\022=\n\tverticals\030\003 \003(\0132*."
    "protocol.gdt.adx.BidRequest.User.Vertica"
    "l\032\355\003\n\013Demographic\022T\n\006gender\030\001 \001(\01624.prot"
    "ocol.gdt.adx.BidRequest.User.Demographic"
    ".Gender:\016GENDER_UNKNOWN\022]\n\teducation\030\002 \001"
    "(\01627.protocol.gdt.adx.BidRequest.User.De"
    "mographic.Education:\021EDUCATION_UNKNOWN\022\022"
    "\n\007age_low\030\003 \001(\005:\0010\022\025\n\010age_high\030\004 \001(\005:\00399"
    "9\"@\n\006Gender\022\022\n\016GENDER_UNKNOWN\020\000\022\017\n\013GENDE"
    "R_MALE\020\001\022\021\n\rGENDER_FEMALE\020\002\"\273\001\n\tEducatio"
    "n\022\025\n\021EDUCATION_UNKNOWN\020\000\022\024\n\020EDUCATION_DO"
    "CTOR\020\001\022\024\n\020EDUCATION_MASTER\020\002\022\025\n\021EDUCATIO"
    "N_COLLEGE\020\003\022\031\n\025EDUCATION_HIGH_SCHOOL\020\004\022\033"
    "\n\027EDUCATION_MIDDLE_SCHOOL\020\005\022\034\n\030EDUCATION"
    "_PRIMARY_SCHOOL\020\006\032&\n\010Vertical\022\n\n\002id\030\001 \001("
    "\r\022\016\n\006weight\030\002 \001(\002\032<\n\003Geo\022\020\n\010latitude\030\001 \001"
    "(\005\022\021\n\tlongitude\030\002 \001(\005\022\020\n\010accuracy\030\003 \001(\001\032"
    "1\n\003App\022\023\n\013industry_id\030\001 \001(\003\022\025\n\rapp_bundl"
    "e_id\030\002 \001(\t\"b\n\nDeviceType\022\026\n\022kDeviceTypeU"
    "nknown\020\000\022\021\n\rkDeviceTypePC\020\001\022\025\n\021kDeviceTy"
    "peMobile\020\002\022\022\n\016kDeviceTypePad\020\003\"j\n\007Carrie"
    "r\022\023\n\017kCarrierUnknown\020\000\022\027\n\023kCarrierChinaM"
    "obile\020\001\022\027\n\023kCarrierChinaUnicom\020\002\022\030\n\024kCar"
    "rierChinaTelecom\020\003\"l\n\016ConnectionType\022\024\n\020"
    "kConnTypeUnknown\020\000\022\021\n\rkConnTypeWifi\020\001\022\017\n"
    "\013kConnType2G\020\002\022\017\n\013kConnType3G\020\003\022\017\n\013kConn"
    "Type4G\020\004\"j\n\017OperatingSystem\022\016\n\nkOSUnknow"
    "n\020\000\022\n\n\006kOSIOS\020\001\022\016\n\nkOSAndroid\020\002\022\016\n\nkOSWi"
    "ndows\020\003\022\016\n\nkOSSymbian\020\004\022\013\n\007kOSJava\020\005*\t\010\220"
    "N\020\200\200\200\200\002\"\276\002\n\013BidResponse\022\022\n\nrequest_id\030\001 "
    "\001(\t\0228\n\tseat_bids\030\002 \003(\0132%.protocol.gdt.ad"
    "x.BidResponse.SeatBid\022\032\n\022processing_time"
    "_ms\030\003 \001(\005\032g\n\003Bid\022\023\n\013creative_id\030\001 \001(\t\022\021\n"
    "\tbid_price\030\002 \001(\005\022\030\n\020impression_param\030\003 \001"
    "(\t\022\023\n\013click_param\030\004 \001(\t*\t\010\220N\020\200\200\200\200\002\032Q\n\007Se"
    "atBid\022\025\n\rimpression_id\030\001 \001(\t\022/\n\004bids\030\002 \003"
    "(\0132!.protocol.gdt.adx.BidResponse.Bid*\t\010"
    "\220N\020\200\200\200\200\002", 2768);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gdt.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_Impression::default_instance_ = new BidRequest_Impression();
  BidRequest_Impression_Native::default_instance_ = new BidRequest_Impression_Native();
  BidRequest_Device::default_instance_ = new BidRequest_Device();
  BidRequest_User::default_instance_ = new BidRequest_User();
  BidRequest_User_Demographic::default_instance_ = new BidRequest_User_Demographic();
  BidRequest_User_Vertical::default_instance_ = new BidRequest_User_Vertical();
  BidRequest_Geo::default_instance_ = new BidRequest_Geo();
  BidRequest_App::default_instance_ = new BidRequest_App();
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_Bid::default_instance_ = new BidResponse_Bid();
  BidResponse_SeatBid::default_instance_ = new BidResponse_SeatBid();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Impression::default_instance_->InitAsDefaultInstance();
  BidRequest_Impression_Native::default_instance_->InitAsDefaultInstance();
  BidRequest_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_User::default_instance_->InitAsDefaultInstance();
  BidRequest_User_Demographic::default_instance_->InitAsDefaultInstance();
  BidRequest_User_Vertical::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo::default_instance_->InitAsDefaultInstance();
  BidRequest_App::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_Bid::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gdt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gdt_2eproto {
  StaticDescriptorInitializer_gdt_2eproto() {
    protobuf_AddDesc_gdt_2eproto();
  }
} static_descriptor_initializer_gdt_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_DeviceType_descriptor_;
}
bool BidRequest_DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_DeviceType BidRequest::kDeviceTypeUnknown;
const BidRequest_DeviceType BidRequest::kDeviceTypePC;
const BidRequest_DeviceType BidRequest::kDeviceTypeMobile;
const BidRequest_DeviceType BidRequest::kDeviceTypePad;
const BidRequest_DeviceType BidRequest::DeviceType_MIN;
const BidRequest_DeviceType BidRequest::DeviceType_MAX;
const int BidRequest::DeviceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Carrier_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Carrier_descriptor_;
}
bool BidRequest_Carrier_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Carrier BidRequest::kCarrierUnknown;
const BidRequest_Carrier BidRequest::kCarrierChinaMobile;
const BidRequest_Carrier BidRequest::kCarrierChinaUnicom;
const BidRequest_Carrier BidRequest::kCarrierChinaTelecom;
const BidRequest_Carrier BidRequest::Carrier_MIN;
const BidRequest_Carrier BidRequest::Carrier_MAX;
const int BidRequest::Carrier_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_ConnectionType_descriptor_;
}
bool BidRequest_ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_ConnectionType BidRequest::kConnTypeUnknown;
const BidRequest_ConnectionType BidRequest::kConnTypeWifi;
const BidRequest_ConnectionType BidRequest::kConnType2G;
const BidRequest_ConnectionType BidRequest::kConnType3G;
const BidRequest_ConnectionType BidRequest::kConnType4G;
const BidRequest_ConnectionType BidRequest::ConnectionType_MIN;
const BidRequest_ConnectionType BidRequest::ConnectionType_MAX;
const int BidRequest::ConnectionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_OperatingSystem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_OperatingSystem_descriptor_;
}
bool BidRequest_OperatingSystem_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_OperatingSystem BidRequest::kOSUnknown;
const BidRequest_OperatingSystem BidRequest::kOSIOS;
const BidRequest_OperatingSystem BidRequest::kOSAndroid;
const BidRequest_OperatingSystem BidRequest::kOSWindows;
const BidRequest_OperatingSystem BidRequest::kOSSymbian;
const BidRequest_OperatingSystem BidRequest::kOSJava;
const BidRequest_OperatingSystem BidRequest::OperatingSystem_MIN;
const BidRequest_OperatingSystem BidRequest::OperatingSystem_MAX;
const int BidRequest::OperatingSystem_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Fields_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Impression_Native_Fields_descriptor_;
}
bool BidRequest_Impression_Native_Fields_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::kHeadline;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::kIcon;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::kImage;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::kDescription;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::Fields_MIN;
const BidRequest_Impression_Native_Fields BidRequest_Impression_Native::Fields_MAX;
const int BidRequest_Impression_Native::Fields_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_Impression_Native_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Impression_Native_Type_descriptor_;
}
bool BidRequest_Impression_Native_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_Impression_Native_Type BidRequest_Impression_Native::kLink;
const BidRequest_Impression_Native_Type BidRequest_Impression_Native::kApp;
const BidRequest_Impression_Native_Type BidRequest_Impression_Native::Type_MIN;
const BidRequest_Impression_Native_Type BidRequest_Impression_Native::Type_MAX;
const int BidRequest_Impression_Native::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_Impression_Native::kRequiredFieldsFieldNumber;
const int BidRequest_Impression_Native::kTypeFieldNumber;
#endif  // !_MSC_VER

BidRequest_Impression_Native::BidRequest_Impression_Native()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Impression_Native::InitAsDefaultInstance() {
}

BidRequest_Impression_Native::BidRequest_Impression_Native(const BidRequest_Impression_Native& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Impression_Native::SharedCtor() {
  _cached_size_ = 0;
  required_fields_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Impression_Native::~BidRequest_Impression_Native() {
  SharedDtor();
}

void BidRequest_Impression_Native::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Impression_Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Impression_Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Impression_Native_descriptor_;
}

const BidRequest_Impression_Native& BidRequest_Impression_Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest_Impression_Native* BidRequest_Impression_Native::default_instance_ = NULL;

BidRequest_Impression_Native* BidRequest_Impression_Native::New() const {
  return new BidRequest_Impression_Native;
}

void BidRequest_Impression_Native::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    required_fields_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Impression_Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 required_fields = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &required_fields_)));
          set_has_required_fields();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.Impression.Native.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::gdt::adx::BidRequest_Impression_Native_Type_IsValid(value)) {
            set_type(static_cast< ::protocol::gdt::adx::BidRequest_Impression_Native_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Impression_Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 required_fields = 1;
  if (has_required_fields()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->required_fields(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.Impression.Native.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Impression_Native::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 required_fields = 1;
  if (has_required_fields()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->required_fields(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.Impression.Native.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Impression_Native::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 required_fields = 1;
    if (has_required_fields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->required_fields());
    }

    // optional .protocol.gdt.adx.BidRequest.Impression.Native.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Impression_Native::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Impression_Native* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Impression_Native*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Impression_Native::MergeFrom(const BidRequest_Impression_Native& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_required_fields()) {
      set_required_fields(from.required_fields());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Impression_Native::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Impression_Native::CopyFrom(const BidRequest_Impression_Native& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Impression_Native::IsInitialized() const {

  return true;
}

void BidRequest_Impression_Native::Swap(BidRequest_Impression_Native* other) {
  if (other != this) {
    std::swap(required_fields_, other->required_fields_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Impression_Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Impression_Native_descriptor_;
  metadata.reflection = BidRequest_Impression_Native_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Impression::kIdFieldNumber;
const int BidRequest_Impression::kPlacementIdFieldNumber;
const int BidRequest_Impression::kCreativeSpecsFieldNumber;
const int BidRequest_Impression::kBidFloorFieldNumber;
const int BidRequest_Impression::kBlockingIndustryIdFieldNumber;
const int BidRequest_Impression::kNativesFieldNumber;
#endif  // !_MSC_VER

BidRequest_Impression::BidRequest_Impression()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Impression::InitAsDefaultInstance() {
}

BidRequest_Impression::BidRequest_Impression(const BidRequest_Impression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Impression::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  placement_id_ = GOOGLE_LONGLONG(0);
  bid_floor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Impression::~BidRequest_Impression() {
  SharedDtor();
}

void BidRequest_Impression::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Impression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Impression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Impression_descriptor_;
}

const BidRequest_Impression& BidRequest_Impression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest_Impression* BidRequest_Impression::default_instance_ = NULL;

BidRequest_Impression* BidRequest_Impression::New() const {
  return new BidRequest_Impression;
}

void BidRequest_Impression::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    placement_id_ = GOOGLE_LONGLONG(0);
    bid_floor_ = 0;
  }
  creative_specs_.Clear();
  blocking_industry_id_.Clear();
  natives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Impression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_placement_id;
        break;
      }

      // optional int64 placement_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_placement_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &placement_id_)));
          set_has_placement_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_creative_specs;
        break;
      }

      // repeated int32 creative_specs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creative_specs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_creative_specs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_creative_specs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_creative_specs;
        if (input->ExpectTag(32)) goto parse_bid_floor;
        break;
      }

      // optional int32 bid_floor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_floor_)));
          set_has_bid_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blocking_industry_id;
        break;
      }

      // repeated int64 blocking_industry_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocking_industry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_blocking_industry_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_blocking_industry_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blocking_industry_id;
        if (input->ExpectTag(50)) goto parse_natives;
        break;
      }

      // repeated .protocol.gdt.adx.BidRequest.Impression.Native natives = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_natives:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_natives()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_natives;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Impression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional int64 placement_id = 2;
  if (has_placement_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->placement_id(), output);
  }

  // repeated int32 creative_specs = 3;
  for (int i = 0; i < this->creative_specs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->creative_specs(i), output);
  }

  // optional int32 bid_floor = 4;
  if (has_bid_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bid_floor(), output);
  }

  // repeated int64 blocking_industry_id = 5;
  for (int i = 0; i < this->blocking_industry_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->blocking_industry_id(i), output);
  }

  // repeated .protocol.gdt.adx.BidRequest.Impression.Native natives = 6;
  for (int i = 0; i < this->natives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->natives(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Impression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int64 placement_id = 2;
  if (has_placement_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->placement_id(), target);
  }

  // repeated int32 creative_specs = 3;
  for (int i = 0; i < this->creative_specs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->creative_specs(i), target);
  }

  // optional int32 bid_floor = 4;
  if (has_bid_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bid_floor(), target);
  }

  // repeated int64 blocking_industry_id = 5;
  for (int i = 0; i < this->blocking_industry_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->blocking_industry_id(i), target);
  }

  // repeated .protocol.gdt.adx.BidRequest.Impression.Native natives = 6;
  for (int i = 0; i < this->natives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->natives(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Impression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 placement_id = 2;
    if (has_placement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->placement_id());
    }

    // optional int32 bid_floor = 4;
    if (has_bid_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_floor());
    }

  }
  // repeated int32 creative_specs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->creative_specs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->creative_specs(i));
    }
    total_size += 1 * this->creative_specs_size() + data_size;
  }

  // repeated int64 blocking_industry_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->blocking_industry_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->blocking_industry_id(i));
    }
    total_size += 1 * this->blocking_industry_id_size() + data_size;
  }

  // repeated .protocol.gdt.adx.BidRequest.Impression.Native natives = 6;
  total_size += 1 * this->natives_size();
  for (int i = 0; i < this->natives_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->natives(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Impression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Impression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Impression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Impression::MergeFrom(const BidRequest_Impression& from) {
  GOOGLE_CHECK_NE(&from, this);
  creative_specs_.MergeFrom(from.creative_specs_);
  blocking_industry_id_.MergeFrom(from.blocking_industry_id_);
  natives_.MergeFrom(from.natives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_placement_id()) {
      set_placement_id(from.placement_id());
    }
    if (from.has_bid_floor()) {
      set_bid_floor(from.bid_floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Impression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Impression::CopyFrom(const BidRequest_Impression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Impression::IsInitialized() const {

  return true;
}

void BidRequest_Impression::Swap(BidRequest_Impression* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(placement_id_, other->placement_id_);
    creative_specs_.Swap(&other->creative_specs_);
    std::swap(bid_floor_, other->bid_floor_);
    blocking_industry_id_.Swap(&other->blocking_industry_id_);
    natives_.Swap(&other->natives_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Impression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Impression_descriptor_;
  metadata.reflection = BidRequest_Impression_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Device::kIdFieldNumber;
const int BidRequest_Device::kDeviceTypeFieldNumber;
const int BidRequest_Device::kOsFieldNumber;
const int BidRequest_Device::kOsVersionFieldNumber;
const int BidRequest_Device::kUserAgentFieldNumber;
const int BidRequest_Device::kScreenWidthFieldNumber;
const int BidRequest_Device::kScreenHeightFieldNumber;
const int BidRequest_Device::kDpiFieldNumber;
const int BidRequest_Device::kCarrierFieldNumber;
const int BidRequest_Device::kConnectionTypeFieldNumber;
const int BidRequest_Device::kBrandAndModelFieldNumber;
const int BidRequest_Device::kLanguageFieldNumber;
#endif  // !_MSC_VER

BidRequest_Device::BidRequest_Device()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Device::InitAsDefaultInstance() {
}

BidRequest_Device::BidRequest_Device(const BidRequest_Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Device::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_type_ = 0;
  os_ = 0;
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  screen_width_ = 0;
  screen_height_ = 0;
  dpi_ = 0;
  carrier_ = 0;
  connection_type_ = 0;
  brand_and_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Device::~BidRequest_Device() {
  SharedDtor();
}

void BidRequest_Device::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (brand_and_model_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_and_model_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_descriptor_;
}

const BidRequest_Device& BidRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest_Device* BidRequest_Device::default_instance_ = NULL;

BidRequest_Device* BidRequest_Device::New() const {
  return new BidRequest_Device;
}

void BidRequest_Device::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    device_type_ = 0;
    os_ = 0;
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_->clear();
      }
    }
    screen_width_ = 0;
    screen_height_ = 0;
    dpi_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    carrier_ = 0;
    connection_type_ = 0;
    if (has_brand_and_model()) {
      if (brand_and_model_ != &::google::protobuf::internal::kEmptyString) {
        brand_and_model_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_type;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.DeviceType device_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::gdt::adx::BidRequest_DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::protocol::gdt::adx::BidRequest_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_os;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.OperatingSystem os = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_os:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::gdt::adx::BidRequest_OperatingSystem_IsValid(value)) {
            set_os(static_cast< ::protocol::gdt::adx::BidRequest_OperatingSystem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_os_version;
        break;
      }

      // optional string os_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_screen_width;
        break;
      }

      // optional int32 screen_width = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_width_)));
          set_has_screen_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_screen_height;
        break;
      }

      // optional int32 screen_height = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_height_)));
          set_has_screen_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dpi;
        break;
      }

      // optional int32 dpi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dpi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dpi_)));
          set_has_dpi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_carrier;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.Carrier carrier = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carrier:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::gdt::adx::BidRequest_Carrier_IsValid(value)) {
            set_carrier(static_cast< ::protocol::gdt::adx::BidRequest_Carrier >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_connection_type;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.ConnectionType connection_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::gdt::adx::BidRequest_ConnectionType_IsValid(value)) {
            set_connection_type(static_cast< ::protocol::gdt::adx::BidRequest_ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_brand_and_model;
        break;
      }

      // optional string brand_and_model = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brand_and_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand_and_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brand_and_model().data(), this->brand_and_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_language;
        break;
      }

      // optional string language = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.DeviceType device_type = 2;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_type(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.OperatingSystem os = 3;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->os(), output);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->os_version(), output);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_agent(), output);
  }

  // optional int32 screen_width = 6;
  if (has_screen_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->screen_width(), output);
  }

  // optional int32 screen_height = 7;
  if (has_screen_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->screen_height(), output);
  }

  // optional int32 dpi = 8;
  if (has_dpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dpi(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.Carrier carrier = 9;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->carrier(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.ConnectionType connection_type = 10;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->connection_type(), output);
  }

  // optional string brand_and_model = 11;
  if (has_brand_and_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand_and_model().data(), this->brand_and_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->brand_and_model(), output);
  }

  // optional string language = 12;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->language(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.DeviceType device_type = 2;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_type(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.OperatingSystem os = 3;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->os(), target);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os_version(), target);
  }

  // optional string user_agent = 5;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_agent(), target);
  }

  // optional int32 screen_width = 6;
  if (has_screen_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->screen_width(), target);
  }

  // optional int32 screen_height = 7;
  if (has_screen_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->screen_height(), target);
  }

  // optional int32 dpi = 8;
  if (has_dpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dpi(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.Carrier carrier = 9;
  if (has_carrier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->carrier(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.ConnectionType connection_type = 10;
  if (has_connection_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->connection_type(), target);
  }

  // optional string brand_and_model = 11;
  if (has_brand_and_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand_and_model().data(), this->brand_and_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->brand_and_model(), target);
  }

  // optional string language = 12;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->language(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .protocol.gdt.adx.BidRequest.DeviceType device_type = 2;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

    // optional .protocol.gdt.adx.BidRequest.OperatingSystem os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->os());
    }

    // optional string os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional string user_agent = 5;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional int32 screen_width = 6;
    if (has_screen_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_width());
    }

    // optional int32 screen_height = 7;
    if (has_screen_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen_height());
    }

    // optional int32 dpi = 8;
    if (has_dpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dpi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocol.gdt.adx.BidRequest.Carrier carrier = 9;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->carrier());
    }

    // optional .protocol.gdt.adx.BidRequest.ConnectionType connection_type = 10;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_type());
    }

    // optional string brand_and_model = 11;
    if (has_brand_and_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand_and_model());
    }

    // optional string language = 12;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Device::MergeFrom(const BidRequest_Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_screen_width()) {
      set_screen_width(from.screen_width());
    }
    if (from.has_screen_height()) {
      set_screen_height(from.screen_height());
    }
    if (from.has_dpi()) {
      set_dpi(from.dpi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_carrier()) {
      set_carrier(from.carrier());
    }
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_brand_and_model()) {
      set_brand_and_model(from.brand_and_model());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Device::CopyFrom(const BidRequest_Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Device::IsInitialized() const {

  return true;
}

void BidRequest_Device::Swap(BidRequest_Device* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(device_type_, other->device_type_);
    std::swap(os_, other->os_);
    std::swap(os_version_, other->os_version_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(screen_width_, other->screen_width_);
    std::swap(screen_height_, other->screen_height_);
    std::swap(dpi_, other->dpi_);
    std::swap(carrier_, other->carrier_);
    std::swap(connection_type_, other->connection_type_);
    std::swap(brand_and_model_, other->brand_and_model_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Device_descriptor_;
  metadata.reflection = BidRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Demographic_Gender_descriptor_;
}
bool BidRequest_User_Demographic_Gender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::GENDER_UNKNOWN;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::GENDER_MALE;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::GENDER_FEMALE;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::Gender_MIN;
const BidRequest_User_Demographic_Gender BidRequest_User_Demographic::Gender_MAX;
const int BidRequest_User_Demographic::Gender_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BidRequest_User_Demographic_Education_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Demographic_Education_descriptor_;
}
bool BidRequest_User_Demographic_Education_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_UNKNOWN;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_DOCTOR;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_MASTER;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_COLLEGE;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_HIGH_SCHOOL;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_MIDDLE_SCHOOL;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::EDUCATION_PRIMARY_SCHOOL;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::Education_MIN;
const BidRequest_User_Demographic_Education BidRequest_User_Demographic::Education_MAX;
const int BidRequest_User_Demographic::Education_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BidRequest_User_Demographic::kGenderFieldNumber;
const int BidRequest_User_Demographic::kEducationFieldNumber;
const int BidRequest_User_Demographic::kAgeLowFieldNumber;
const int BidRequest_User_Demographic::kAgeHighFieldNumber;
#endif  // !_MSC_VER

BidRequest_User_Demographic::BidRequest_User_Demographic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_User_Demographic::InitAsDefaultInstance() {
}

BidRequest_User_Demographic::BidRequest_User_Demographic(const BidRequest_User_Demographic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_User_Demographic::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 0;
  education_ = 0;
  age_low_ = 0;
  age_high_ = 999;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User_Demographic::~BidRequest_User_Demographic() {
  SharedDtor();
}

void BidRequest_User_Demographic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_User_Demographic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User_Demographic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Demographic_descriptor_;
}

const BidRequest_User_Demographic& BidRequest_User_Demographic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest_User_Demographic* BidRequest_User_Demographic::default_instance_ = NULL;

BidRequest_User_Demographic* BidRequest_User_Demographic::New() const {
  return new BidRequest_User_Demographic;
}

void BidRequest_User_Demographic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gender_ = 0;
    education_ = 0;
    age_low_ = 0;
    age_high_ = 999;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_User_Demographic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::gdt::adx::BidRequest_User_Demographic_Gender_IsValid(value)) {
            set_gender(static_cast< ::protocol::gdt::adx::BidRequest_User_Demographic_Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_education;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_education:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::gdt::adx::BidRequest_User_Demographic_Education_IsValid(value)) {
            set_education(static_cast< ::protocol::gdt::adx::BidRequest_User_Demographic_Education >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_age_low;
        break;
      }

      // optional int32 age_low = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_low_)));
          set_has_age_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_age_high;
        break;
      }

      // optional int32 age_high = 4 [default = 999];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_high_)));
          set_has_age_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_User_Demographic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocol.gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gender(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
  if (has_education()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->education(), output);
  }

  // optional int32 age_low = 3 [default = 0];
  if (has_age_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age_low(), output);
  }

  // optional int32 age_high = 4 [default = 999];
  if (has_age_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->age_high(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_User_Demographic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protocol.gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gender(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
  if (has_education()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->education(), target);
  }

  // optional int32 age_low = 3 [default = 0];
  if (has_age_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age_low(), target);
  }

  // optional int32 age_high = 4 [default = 999];
  if (has_age_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->age_high(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_User_Demographic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocol.gdt.adx.BidRequest.User.Demographic.Gender gender = 1 [default = GENDER_UNKNOWN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // optional .protocol.gdt.adx.BidRequest.User.Demographic.Education education = 2 [default = EDUCATION_UNKNOWN];
    if (has_education()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->education());
    }

    // optional int32 age_low = 3 [default = 0];
    if (has_age_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_low());
    }

    // optional int32 age_high = 4 [default = 999];
    if (has_age_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age_high());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User_Demographic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_User_Demographic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_User_Demographic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_User_Demographic::MergeFrom(const BidRequest_User_Demographic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_education()) {
      set_education(from.education());
    }
    if (from.has_age_low()) {
      set_age_low(from.age_low());
    }
    if (from.has_age_high()) {
      set_age_high(from.age_high());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_User_Demographic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User_Demographic::CopyFrom(const BidRequest_User_Demographic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User_Demographic::IsInitialized() const {

  return true;
}

void BidRequest_User_Demographic::Swap(BidRequest_User_Demographic* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(education_, other->education_);
    std::swap(age_low_, other->age_low_);
    std::swap(age_high_, other->age_high_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_User_Demographic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_Demographic_descriptor_;
  metadata.reflection = BidRequest_User_Demographic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_User_Vertical::kIdFieldNumber;
const int BidRequest_User_Vertical::kWeightFieldNumber;
#endif  // !_MSC_VER

BidRequest_User_Vertical::BidRequest_User_Vertical()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_User_Vertical::InitAsDefaultInstance() {
}

BidRequest_User_Vertical::BidRequest_User_Vertical(const BidRequest_User_Vertical& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_User_Vertical::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User_Vertical::~BidRequest_User_Vertical() {
  SharedDtor();
}

void BidRequest_User_Vertical::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_User_Vertical::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User_Vertical::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Vertical_descriptor_;
}

const BidRequest_User_Vertical& BidRequest_User_Vertical::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest_User_Vertical* BidRequest_User_Vertical::default_instance_ = NULL;

BidRequest_User_Vertical* BidRequest_User_Vertical::New() const {
  return new BidRequest_User_Vertical;
}

void BidRequest_User_Vertical::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_User_Vertical::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }

      // optional float weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_User_Vertical::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional float weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_User_Vertical::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional float weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_User_Vertical::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional float weight = 2;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User_Vertical::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_User_Vertical* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_User_Vertical*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_User_Vertical::MergeFrom(const BidRequest_User_Vertical& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_User_Vertical::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User_Vertical::CopyFrom(const BidRequest_User_Vertical& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User_Vertical::IsInitialized() const {

  return true;
}

void BidRequest_User_Vertical::Swap(BidRequest_User_Vertical* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_User_Vertical::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_Vertical_descriptor_;
  metadata.reflection = BidRequest_User_Vertical_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_User::kIdFieldNumber;
const int BidRequest_User::kUserDemographicFieldNumber;
const int BidRequest_User::kVerticalsFieldNumber;
#endif  // !_MSC_VER

BidRequest_User::BidRequest_User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_User::InitAsDefaultInstance() {
  user_demographic_ = const_cast< ::protocol::gdt::adx::BidRequest_User_Demographic*>(&::protocol::gdt::adx::BidRequest_User_Demographic::default_instance());
}

BidRequest_User::BidRequest_User(const BidRequest_User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_User::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_demographic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User::~BidRequest_User() {
  SharedDtor();
}

void BidRequest_User::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete user_demographic_;
  }
}

void BidRequest_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_descriptor_;
}

const BidRequest_User& BidRequest_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest_User* BidRequest_User::default_instance_ = NULL;

BidRequest_User* BidRequest_User::New() const {
  return new BidRequest_User;
}

void BidRequest_User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_user_demographic()) {
      if (user_demographic_ != NULL) user_demographic_->::protocol::gdt::adx::BidRequest_User_Demographic::Clear();
    }
  }
  verticals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_demographic;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.User.Demographic user_demographic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_demographic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_demographic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_verticals;
        break;
      }

      // repeated .protocol.gdt.adx.BidRequest.User.Vertical verticals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verticals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_verticals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_verticals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.User.Demographic user_demographic = 2;
  if (has_user_demographic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_demographic(), output);
  }

  // repeated .protocol.gdt.adx.BidRequest.User.Vertical verticals = 3;
  for (int i = 0; i < this->verticals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->verticals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.User.Demographic user_demographic = 2;
  if (has_user_demographic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_demographic(), target);
  }

  // repeated .protocol.gdt.adx.BidRequest.User.Vertical verticals = 3;
  for (int i = 0; i < this->verticals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->verticals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .protocol.gdt.adx.BidRequest.User.Demographic user_demographic = 2;
    if (has_user_demographic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_demographic());
    }

  }
  // repeated .protocol.gdt.adx.BidRequest.User.Vertical verticals = 3;
  total_size += 1 * this->verticals_size();
  for (int i = 0; i < this->verticals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->verticals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_User::MergeFrom(const BidRequest_User& from) {
  GOOGLE_CHECK_NE(&from, this);
  verticals_.MergeFrom(from.verticals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_demographic()) {
      mutable_user_demographic()->::protocol::gdt::adx::BidRequest_User_Demographic::MergeFrom(from.user_demographic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User::CopyFrom(const BidRequest_User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User::IsInitialized() const {

  return true;
}

void BidRequest_User::Swap(BidRequest_User* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_demographic_, other->user_demographic_);
    verticals_.Swap(&other->verticals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_descriptor_;
  metadata.reflection = BidRequest_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_Geo::kLatitudeFieldNumber;
const int BidRequest_Geo::kLongitudeFieldNumber;
const int BidRequest_Geo::kAccuracyFieldNumber;
#endif  // !_MSC_VER

BidRequest_Geo::BidRequest_Geo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_Geo::InitAsDefaultInstance() {
}

BidRequest_Geo::BidRequest_Geo(const BidRequest_Geo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_Geo::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  accuracy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo::~BidRequest_Geo() {
  SharedDtor();
}

void BidRequest_Geo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_descriptor_;
}

const BidRequest_Geo& BidRequest_Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest_Geo* BidRequest_Geo::default_instance_ = NULL;

BidRequest_Geo* BidRequest_Geo::New() const {
  return new BidRequest_Geo;
}

void BidRequest_Geo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    accuracy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_longitude;
        break;
      }

      // optional int32 longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_accuracy;
        break;
      }

      // optional double accuracy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->latitude(), output);
  }

  // optional int32 longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->longitude(), output);
  }

  // optional double accuracy = 3;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->accuracy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_Geo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->latitude(), target);
  }

  // optional int32 longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->longitude(), target);
  }

  // optional double accuracy = 3;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->accuracy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_Geo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 latitude = 1;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude());
    }

    // optional int32 longitude = 2;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude());
    }

    // optional double accuracy = 3;
    if (has_accuracy()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_Geo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_Geo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_Geo::MergeFrom(const BidRequest_Geo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_Geo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo::CopyFrom(const BidRequest_Geo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo::IsInitialized() const {

  return true;
}

void BidRequest_Geo::Swap(BidRequest_Geo* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_descriptor_;
  metadata.reflection = BidRequest_Geo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest_App::kIndustryIdFieldNumber;
const int BidRequest_App::kAppBundleIdFieldNumber;
#endif  // !_MSC_VER

BidRequest_App::BidRequest_App()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest_App::InitAsDefaultInstance() {
}

BidRequest_App::BidRequest_App(const BidRequest_App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest_App::SharedCtor() {
  _cached_size_ = 0;
  industry_id_ = GOOGLE_LONGLONG(0);
  app_bundle_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_App::~BidRequest_App() {
  SharedDtor();
}

void BidRequest_App::SharedDtor() {
  if (app_bundle_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_bundle_id_;
  }
  if (this != default_instance_) {
  }
}

void BidRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_App_descriptor_;
}

const BidRequest_App& BidRequest_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest_App* BidRequest_App::default_instance_ = NULL;

BidRequest_App* BidRequest_App::New() const {
  return new BidRequest_App;
}

void BidRequest_App::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    industry_id_ = GOOGLE_LONGLONG(0);
    if (has_app_bundle_id()) {
      if (app_bundle_id_ != &::google::protobuf::internal::kEmptyString) {
        app_bundle_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 industry_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &industry_id_)));
          set_has_industry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_bundle_id;
        break;
      }

      // optional string app_bundle_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_bundle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_bundle_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_bundle_id().data(), this->app_bundle_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 industry_id = 1;
  if (has_industry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->industry_id(), output);
  }

  // optional string app_bundle_id = 2;
  if (has_app_bundle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_bundle_id().data(), this->app_bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_bundle_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest_App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 industry_id = 1;
  if (has_industry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->industry_id(), target);
  }

  // optional string app_bundle_id = 2;
  if (has_app_bundle_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_bundle_id().data(), this->app_bundle_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_bundle_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 industry_id = 1;
    if (has_industry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->industry_id());
    }

    // optional string app_bundle_id = 2;
    if (has_app_bundle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_bundle_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest_App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest_App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest_App::MergeFrom(const BidRequest_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_industry_id()) {
      set_industry_id(from.industry_id());
    }
    if (from.has_app_bundle_id()) {
      set_app_bundle_id(from.app_bundle_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_App::CopyFrom(const BidRequest_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_App::IsInitialized() const {

  return true;
}

void BidRequest_App::Swap(BidRequest_App* other) {
  if (other != this) {
    std::swap(industry_id_, other->industry_id_);
    std::swap(app_bundle_id_, other->app_bundle_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidRequest_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_App_descriptor_;
  metadata.reflection = BidRequest_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidRequest::kIdFieldNumber;
const int BidRequest::kIsPingFieldNumber;
const int BidRequest::kIsTestFieldNumber;
const int BidRequest::kImpressionsFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kIpFieldNumber;
const int BidRequest::kAreaCodeFieldNumber;
const int BidRequest::kUserFieldNumber;
const int BidRequest::kGeoFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kBossQqFieldNumber;
#endif  // !_MSC_VER

BidRequest::BidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidRequest::InitAsDefaultInstance() {
  device_ = const_cast< ::protocol::gdt::adx::BidRequest_Device*>(&::protocol::gdt::adx::BidRequest_Device::default_instance());
  user_ = const_cast< ::protocol::gdt::adx::BidRequest_User*>(&::protocol::gdt::adx::BidRequest_User::default_instance());
  geo_ = const_cast< ::protocol::gdt::adx::BidRequest_Geo*>(&::protocol::gdt::adx::BidRequest_Geo::default_instance());
  app_ = const_cast< ::protocol::gdt::adx::BidRequest_App*>(&::protocol::gdt::adx::BidRequest_App::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_ping_ = false;
  is_test_ = false;
  device_ = NULL;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_code_ = 0;
  user_ = NULL;
  geo_ = NULL;
  app_ = NULL;
  boss_qq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest::~BidRequest() {
  SharedDtor();
}

void BidRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete device_;
    delete user_;
    delete geo_;
    delete app_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New() const {
  return new BidRequest;
}

void BidRequest::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    is_ping_ = false;
    is_test_ = false;
    if (has_device()) {
      if (device_ != NULL) device_->::protocol::gdt::adx::BidRequest_Device::Clear();
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    area_code_ = 0;
    if (has_user()) {
      if (user_ != NULL) user_->::protocol::gdt::adx::BidRequest_User::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_geo()) {
      if (geo_ != NULL) geo_->::protocol::gdt::adx::BidRequest_Geo::Clear();
    }
    if (has_app()) {
      if (app_ != NULL) app_->::protocol::gdt::adx::BidRequest_App::Clear();
    }
    boss_qq_ = GOOGLE_ULONGLONG(0);
  }
  impressions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_ping;
        break;
      }

      // optional bool is_ping = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ping_)));
          set_has_is_ping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_test;
        break;
      }

      // optional bool is_test = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_test_)));
          set_has_is_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_impressions;
        break;
      }

      // repeated .protocol.gdt.adx.BidRequest.Impression impressions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impressions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_impressions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_impressions;
        if (input->ExpectTag(42)) goto parse_device;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.Device device = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_area_code;
        break;
      }

      // optional int32 area_code = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_code_)));
          set_has_area_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_user;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.User user = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_geo;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.Geo geo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_app;
        break;
      }

      // optional .protocol.gdt.adx.BidRequest.App app = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_boss_qq;
        break;
      }

      // optional uint64 boss_qq = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_qq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &boss_qq_)));
          set_has_boss_qq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional bool is_ping = 2 [default = false];
  if (has_is_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_ping(), output);
  }

  // optional bool is_test = 3 [default = false];
  if (has_is_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_test(), output);
  }

  // repeated .protocol.gdt.adx.BidRequest.Impression impressions = 4;
  for (int i = 0; i < this->impressions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->impressions(i), output);
  }

  // optional .protocol.gdt.adx.BidRequest.Device device = 5;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }

  // optional int32 area_code = 7;
  if (has_area_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->area_code(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.User user = 8;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->user(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.Geo geo = 9;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->geo(), output);
  }

  // optional .protocol.gdt.adx.BidRequest.App app = 10;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->app(), output);
  }

  // optional uint64 boss_qq = 11;
  if (has_boss_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->boss_qq(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool is_ping = 2 [default = false];
  if (has_is_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_ping(), target);
  }

  // optional bool is_test = 3 [default = false];
  if (has_is_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_test(), target);
  }

  // repeated .protocol.gdt.adx.BidRequest.Impression impressions = 4;
  for (int i = 0; i < this->impressions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->impressions(i), target);
  }

  // optional .protocol.gdt.adx.BidRequest.Device device = 5;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional int32 area_code = 7;
  if (has_area_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->area_code(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.User user = 8;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->user(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.Geo geo = 9;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->geo(), target);
  }

  // optional .protocol.gdt.adx.BidRequest.App app = 10;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->app(), target);
  }

  // optional uint64 boss_qq = 11;
  if (has_boss_qq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->boss_qq(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool is_ping = 2 [default = false];
    if (has_is_ping()) {
      total_size += 1 + 1;
    }

    // optional bool is_test = 3 [default = false];
    if (has_is_test()) {
      total_size += 1 + 1;
    }

    // optional .protocol.gdt.adx.BidRequest.Device device = 5;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 area_code = 7;
    if (has_area_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_code());
    }

    // optional .protocol.gdt.adx.BidRequest.User user = 8;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocol.gdt.adx.BidRequest.Geo geo = 9;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geo());
    }

    // optional .protocol.gdt.adx.BidRequest.App app = 10;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

    // optional uint64 boss_qq = 11;
    if (has_boss_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->boss_qq());
    }

  }
  // repeated .protocol.gdt.adx.BidRequest.Impression impressions = 4;
  total_size += 1 * this->impressions_size();
  for (int i = 0; i < this->impressions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->impressions(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  impressions_.MergeFrom(from.impressions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_ping()) {
      set_is_ping(from.is_ping());
    }
    if (from.has_is_test()) {
      set_is_test(from.is_test());
    }
    if (from.has_device()) {
      mutable_device()->::protocol::gdt::adx::BidRequest_Device::MergeFrom(from.device());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_area_code()) {
      set_area_code(from.area_code());
    }
    if (from.has_user()) {
      mutable_user()->::protocol::gdt::adx::BidRequest_User::MergeFrom(from.user());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_geo()) {
      mutable_geo()->::protocol::gdt::adx::BidRequest_Geo::MergeFrom(from.geo());
    }
    if (from.has_app()) {
      mutable_app()->::protocol::gdt::adx::BidRequest_App::MergeFrom(from.app());
    }
    if (from.has_boss_qq()) {
      set_boss_qq(from.boss_qq());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_ping_, other->is_ping_);
    std::swap(is_test_, other->is_test_);
    impressions_.Swap(&other->impressions_);
    std::swap(device_, other->device_);
    std::swap(ip_, other->ip_);
    std::swap(area_code_, other->area_code_);
    std::swap(user_, other->user_);
    std::swap(geo_, other->geo_);
    std::swap(app_, other->app_);
    std::swap(boss_qq_, other->boss_qq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidResponse_Bid::kCreativeIdFieldNumber;
const int BidResponse_Bid::kBidPriceFieldNumber;
const int BidResponse_Bid::kImpressionParamFieldNumber;
const int BidResponse_Bid::kClickParamFieldNumber;
#endif  // !_MSC_VER

BidResponse_Bid::BidResponse_Bid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResponse_Bid::InitAsDefaultInstance() {
}

BidResponse_Bid::BidResponse_Bid(const BidResponse_Bid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResponse_Bid::SharedCtor() {
  _cached_size_ = 0;
  creative_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_price_ = 0;
  impression_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  click_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_Bid::~BidResponse_Bid() {
  SharedDtor();
}

void BidResponse_Bid::SharedDtor() {
  if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_id_;
  }
  if (impression_param_ != &::google::protobuf::internal::kEmptyString) {
    delete impression_param_;
  }
  if (click_param_ != &::google::protobuf::internal::kEmptyString) {
    delete click_param_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_Bid_descriptor_;
}

const BidResponse_Bid& BidResponse_Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidResponse_Bid* BidResponse_Bid::default_instance_ = NULL;

BidResponse_Bid* BidResponse_Bid::New() const {
  return new BidResponse_Bid;
}

void BidResponse_Bid::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_creative_id()) {
      if (creative_id_ != &::google::protobuf::internal::kEmptyString) {
        creative_id_->clear();
      }
    }
    bid_price_ = 0;
    if (has_impression_param()) {
      if (impression_param_ != &::google::protobuf::internal::kEmptyString) {
        impression_param_->clear();
      }
    }
    if (has_click_param()) {
      if (click_param_ != &::google::protobuf::internal::kEmptyString) {
        click_param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string creative_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creative_id().data(), this->creative_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bid_price;
        break;
      }

      // optional int32 bid_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_impression_param;
        break;
      }

      // optional string impression_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impression_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impression_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->impression_param().data(), this->impression_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_click_param;
        break;
      }

      // optional string click_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_click_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_click_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->click_param().data(), this->click_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResponse_Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string creative_id = 1;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->creative_id(), output);
  }

  // optional int32 bid_price = 2;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bid_price(), output);
  }

  // optional string impression_param = 3;
  if (has_impression_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impression_param().data(), this->impression_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->impression_param(), output);
  }

  // optional string click_param = 4;
  if (has_click_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->click_param().data(), this->click_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->click_param(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResponse_Bid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string creative_id = 1;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_id().data(), this->creative_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->creative_id(), target);
  }

  // optional int32 bid_price = 2;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bid_price(), target);
  }

  // optional string impression_param = 3;
  if (has_impression_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impression_param().data(), this->impression_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->impression_param(), target);
  }

  // optional string click_param = 4;
  if (has_click_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->click_param().data(), this->click_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->click_param(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResponse_Bid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string creative_id = 1;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_id());
    }

    // optional int32 bid_price = 2;
    if (has_bid_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid_price());
    }

    // optional string impression_param = 3;
    if (has_impression_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impression_param());
    }

    // optional string click_param = 4;
    if (has_click_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->click_param());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_Bid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_Bid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_Bid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_Bid::MergeFrom(const BidResponse_Bid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
    if (from.has_impression_param()) {
      set_impression_param(from.impression_param());
    }
    if (from.has_click_param()) {
      set_click_param(from.click_param());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_Bid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_Bid::CopyFrom(const BidResponse_Bid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_Bid::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse_Bid::Swap(BidResponse_Bid* other) {
  if (other != this) {
    std::swap(creative_id_, other->creative_id_);
    std::swap(bid_price_, other->bid_price_);
    std::swap(impression_param_, other->impression_param_);
    std::swap(click_param_, other->click_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse_Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_Bid_descriptor_;
  metadata.reflection = BidResponse_Bid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse_SeatBid::kImpressionIdFieldNumber;
const int BidResponse_SeatBid::kBidsFieldNumber;
#endif  // !_MSC_VER

BidResponse_SeatBid::BidResponse_SeatBid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResponse_SeatBid::InitAsDefaultInstance() {
}

BidResponse_SeatBid::BidResponse_SeatBid(const BidResponse_SeatBid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResponse_SeatBid::SharedCtor() {
  _cached_size_ = 0;
  impression_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid::~BidResponse_SeatBid() {
  SharedDtor();
}

void BidResponse_SeatBid::SharedDtor() {
  if (impression_id_ != &::google::protobuf::internal::kEmptyString) {
    delete impression_id_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_descriptor_;
}

const BidResponse_SeatBid& BidResponse_SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid* BidResponse_SeatBid::default_instance_ = NULL;

BidResponse_SeatBid* BidResponse_SeatBid::New() const {
  return new BidResponse_SeatBid;
}

void BidResponse_SeatBid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_impression_id()) {
      if (impression_id_ != &::google::protobuf::internal::kEmptyString) {
        impression_id_->clear();
      }
    }
  }
  bids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse_SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string impression_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impression_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->impression_id().data(), this->impression_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bids;
        break;
      }

      // repeated .protocol.gdt.adx.BidResponse.Bid bids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResponse_SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string impression_id = 1;
  if (has_impression_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impression_id().data(), this->impression_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->impression_id(), output);
  }

  // repeated .protocol.gdt.adx.BidResponse.Bid bids = 2;
  for (int i = 0; i < this->bids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResponse_SeatBid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string impression_id = 1;
  if (has_impression_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impression_id().data(), this->impression_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->impression_id(), target);
  }

  // repeated .protocol.gdt.adx.BidResponse.Bid bids = 2;
  for (int i = 0; i < this->bids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResponse_SeatBid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string impression_id = 1;
    if (has_impression_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impression_id());
    }

  }
  // repeated .protocol.gdt.adx.BidResponse.Bid bids = 2;
  total_size += 1 * this->bids_size();
  for (int i = 0; i < this->bids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse_SeatBid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse_SeatBid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid::MergeFrom(const BidResponse_SeatBid& from) {
  GOOGLE_CHECK_NE(&from, this);
  bids_.MergeFrom(from.bids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impression_id()) {
      set_impression_id(from.impression_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse_SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid::CopyFrom(const BidResponse_SeatBid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid::IsInitialized() const {

  for (int i = 0; i < bids_size(); i++) {
    if (!this->bids(i).IsInitialized()) return false;
  }
  return true;
}

void BidResponse_SeatBid::Swap(BidResponse_SeatBid* other) {
  if (other != this) {
    std::swap(impression_id_, other->impression_id_);
    bids_.Swap(&other->bids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidResponse_SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BidResponse::kRequestIdFieldNumber;
const int BidResponse::kSeatBidsFieldNumber;
const int BidResponse::kProcessingTimeMsFieldNumber;
#endif  // !_MSC_VER

BidResponse::BidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidResponse::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processing_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  SharedDtor();
}

void BidResponse::SharedDtor() {
  if (request_id_ != &::google::protobuf::internal::kEmptyString) {
    delete request_id_;
  }
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdt_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New() const {
  return new BidResponse;
}

void BidResponse::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_id()) {
      if (request_id_ != &::google::protobuf::internal::kEmptyString) {
        request_id_->clear();
      }
    }
    processing_time_ms_ = 0;
  }
  seat_bids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seat_bids;
        break;
      }

      // repeated .protocol.gdt.adx.BidResponse.SeatBid seat_bids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seat_bids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seat_bids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seat_bids;
        if (input->ExpectTag(24)) goto parse_processing_time_ms;
        break;
      }

      // optional int32 processing_time_ms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((80000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_id(), output);
  }

  // repeated .protocol.gdt.adx.BidResponse.SeatBid seat_bids = 2;
  for (int i = 0; i < this->seat_bids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seat_bids(i), output);
  }

  // optional int32 processing_time_ms = 3;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->processing_time_ms(), output);
  }

  // Extension range [10000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      10000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // repeated .protocol.gdt.adx.BidResponse.SeatBid seat_bids = 2;
  for (int i = 0; i < this->seat_bids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->seat_bids(i), target);
  }

  // optional int32 processing_time_ms = 3;
  if (has_processing_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->processing_time_ms(), target);
  }

  // Extension range [10000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      10000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional int32 processing_time_ms = 3;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processing_time_ms());
    }

  }
  // repeated .protocol.gdt.adx.BidResponse.SeatBid seat_bids = 2;
  total_size += 1 * this->seat_bids_size();
  for (int i = 0; i < this->seat_bids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_bids(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  seat_bids_.MergeFrom(from.seat_bids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {

  for (int i = 0; i < seat_bids_size(); i++) {
    if (!this->seat_bids(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    seat_bids_.Swap(&other->seat_bids_);
    std::swap(processing_time_ms_, other->processing_time_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace adx
}  // namespace gdt
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
