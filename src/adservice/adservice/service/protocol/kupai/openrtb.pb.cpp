// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openrtb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "openrtb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace google {
namespace openrtb {

namespace {

const ::google::protobuf::Descriptor* BidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_reflection_ = NULL;
struct BidRequestOneofInstance {
  const ::com::google::openrtb::BidRequest_Site* site_;
  const ::com::google::openrtb::BidRequest_App* app_;
}* BidRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Banner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Banner_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_BannerAdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_ExpandableDirection_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Video_CompanionAd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Video_CompanionAd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoLinearity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoPlaybackMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoStartDelay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VASTCompanionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_ContentDeliveryMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Native_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Native_reflection_ = NULL;
struct BidRequest_Imp_NativeOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr request_;
  const ::com::google::openrtb::NativeRequest* request_native_;
}* BidRequest_Imp_Native_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Pmp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_Deal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Imp_Pmp_Deal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_AdPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_APIFramework_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Site_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Site_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_App_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Publisher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Publisher_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Content_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Content_VideoQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Content_ContentContext_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Content_QAGMediaRating_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Producer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Producer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Device_ConnectionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Geo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Geo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_Geo_LocationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_User_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_User_Gender_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Data_Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Data_Segment_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidRequest_Regs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidRequest_Regs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BidRequest_AuctionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidResponse_SeatBid_Bid_reflection_ = NULL;
struct BidResponse_SeatBid_BidOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr adm_;
  const ::com::google::openrtb::NativeResponse* adm_native_;
}* BidResponse_SeatBid_Bid_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* BidResponse_NoBidReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_Asset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_Asset_reflection_ = NULL;
struct NativeRequest_AssetOneofInstance {
  const ::com::google::openrtb::NativeRequest_Asset_Title* title_;
  const ::com::google::openrtb::NativeRequest_Asset_Image* img_;
  const ::com::google::openrtb::BidRequest_Imp_Video* video_;
  const ::com::google::openrtb::NativeRequest_Asset_Data* data_;
}* NativeRequest_Asset_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_Asset_Title_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_Asset_Title_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_Asset_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_Asset_Image_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Image_ImageAssetType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NativeRequest_Asset_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeRequest_Asset_Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Data_DataAssetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeRequest_LayoutId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NativeRequest_AdUnitId_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_reflection_ = NULL;
struct NativeResponse_AssetOneofInstance {
  const ::com::google::openrtb::NativeResponse_Asset_Title* title_;
  const ::com::google::openrtb::NativeResponse_Asset_Image* img_;
  const ::com::google::openrtb::NativeResponse_Asset_Video* video_;
  const ::com::google::openrtb::NativeResponse_Asset_Data* data_;
}* NativeResponse_Asset_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_Title_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_Title_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* NativeResponse_Asset_Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NativeResponse_Asset_Video_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_openrtb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_openrtb_2eproto() {
  protobuf_AddDesc_openrtb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "openrtb.proto");
  GOOGLE_CHECK(file != NULL);
  BidRequest_descriptor_ = file->message_type(0);
  static const int BidRequest_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, imp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidRequest_default_oneof_instance_, site_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidRequest_default_oneof_instance_, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, regs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, tmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, wseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, allimps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, bcat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, badv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, distributionchannel_oneof_),
  };
  BidRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_descriptor_,
      BidRequest::default_instance_,
      BidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _extensions_),
      BidRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _oneof_case_[0]),
      sizeof(BidRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest, _internal_metadata_),
      -1);
  BidRequest_Imp_descriptor_ = BidRequest_descriptor_->nested_type(0);
  static const int BidRequest_Imp_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, banner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, displaymanager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, displaymanagerver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, instl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, tagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, bidfloorcur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, secure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, iframebuster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, pmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, native_),
  };
  BidRequest_Imp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_descriptor_,
      BidRequest_Imp::default_instance_,
      BidRequest_Imp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _extensions_),
      sizeof(BidRequest_Imp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp, _internal_metadata_),
      -1);
  BidRequest_Imp_Banner_descriptor_ = BidRequest_Imp_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Banner_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, wmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, hmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, wmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, hmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, battr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, topframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, expdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, api_),
  };
  BidRequest_Imp_Banner_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Banner_descriptor_,
      BidRequest_Imp_Banner::default_instance_,
      BidRequest_Imp_Banner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, _extensions_),
      sizeof(BidRequest_Imp_Banner),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Banner, _internal_metadata_),
      -1);
  BidRequest_Imp_Banner_BannerAdType_descriptor_ = BidRequest_Imp_Banner_descriptor_->enum_type(0);
  BidRequest_Imp_Banner_ExpandableDirection_descriptor_ = BidRequest_Imp_Banner_descriptor_->enum_type(1);
  BidRequest_Imp_Video_descriptor_ = BidRequest_Imp_descriptor_->nested_type(1);
  static const int BidRequest_Imp_Video_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, mimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, linearity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, minduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, maxduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, protocols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, startdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, battr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, maxextended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, minbitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, maxbitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, boxingallowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, playbackmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, delivery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, companionad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, companionad_21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, companiontype_),
  };
  BidRequest_Imp_Video_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Video_descriptor_,
      BidRequest_Imp_Video::default_instance_,
      BidRequest_Imp_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, _extensions_),
      sizeof(BidRequest_Imp_Video),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video, _internal_metadata_),
      -1);
  BidRequest_Imp_Video_CompanionAd_descriptor_ = BidRequest_Imp_Video_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Video_CompanionAd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video_CompanionAd, banner_),
  };
  BidRequest_Imp_Video_CompanionAd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Video_CompanionAd_descriptor_,
      BidRequest_Imp_Video_CompanionAd::default_instance_,
      BidRequest_Imp_Video_CompanionAd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video_CompanionAd, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video_CompanionAd, _extensions_),
      sizeof(BidRequest_Imp_Video_CompanionAd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Video_CompanionAd, _internal_metadata_),
      -1);
  BidRequest_Imp_Video_VideoLinearity_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(0);
  BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(1);
  BidRequest_Imp_Video_VideoPlaybackMethod_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(2);
  BidRequest_Imp_Video_VideoStartDelay_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(3);
  BidRequest_Imp_Video_VASTCompanionType_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(4);
  BidRequest_Imp_Video_ContentDeliveryMethod_descriptor_ = BidRequest_Imp_Video_descriptor_->enum_type(5);
  BidRequest_Imp_Native_descriptor_ = BidRequest_Imp_descriptor_->nested_type(2);
  static const int BidRequest_Imp_Native_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidRequest_Imp_Native_default_oneof_instance_, request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidRequest_Imp_Native_default_oneof_instance_, request_native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, battr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, request_oneof_),
  };
  BidRequest_Imp_Native_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Native_descriptor_,
      BidRequest_Imp_Native::default_instance_,
      BidRequest_Imp_Native_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _extensions_),
      BidRequest_Imp_Native_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _oneof_case_[0]),
      sizeof(BidRequest_Imp_Native),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Native, _internal_metadata_),
      -1);
  BidRequest_Imp_Pmp_descriptor_ = BidRequest_Imp_descriptor_->nested_type(3);
  static const int BidRequest_Imp_Pmp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, private_auction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, deals_),
  };
  BidRequest_Imp_Pmp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Pmp_descriptor_,
      BidRequest_Imp_Pmp::default_instance_,
      BidRequest_Imp_Pmp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, _extensions_),
      sizeof(BidRequest_Imp_Pmp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp, _internal_metadata_),
      -1);
  BidRequest_Imp_Pmp_Deal_descriptor_ = BidRequest_Imp_Pmp_descriptor_->nested_type(0);
  static const int BidRequest_Imp_Pmp_Deal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, bidfloor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, bidfloorcur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, wseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, wadomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, at_),
  };
  BidRequest_Imp_Pmp_Deal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Imp_Pmp_Deal_descriptor_,
      BidRequest_Imp_Pmp_Deal::default_instance_,
      BidRequest_Imp_Pmp_Deal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, _extensions_),
      sizeof(BidRequest_Imp_Pmp_Deal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Imp_Pmp_Deal, _internal_metadata_),
      -1);
  BidRequest_Imp_AdPosition_descriptor_ = BidRequest_Imp_descriptor_->enum_type(0);
  BidRequest_Imp_APIFramework_descriptor_ = BidRequest_Imp_descriptor_->enum_type(1);
  BidRequest_Site_descriptor_ = BidRequest_descriptor_->nested_type(1);
  static const int BidRequest_Site_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, sectioncat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, pagecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, privacypolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, mobile_),
  };
  BidRequest_Site_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Site_descriptor_,
      BidRequest_Site::default_instance_,
      BidRequest_Site_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, _extensions_),
      sizeof(BidRequest_Site),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Site, _internal_metadata_),
      -1);
  BidRequest_App_descriptor_ = BidRequest_descriptor_->nested_type(2);
  static const int BidRequest_App_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, sectioncat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, pagecat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, privacypolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, paid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, storeurl_),
  };
  BidRequest_App_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_App_descriptor_,
      BidRequest_App::default_instance_,
      BidRequest_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _extensions_),
      sizeof(BidRequest_App),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_App, _internal_metadata_),
      -1);
  BidRequest_Publisher_descriptor_ = BidRequest_descriptor_->nested_type(3);
  static const int BidRequest_Publisher_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, domain_),
  };
  BidRequest_Publisher_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Publisher_descriptor_,
      BidRequest_Publisher::default_instance_,
      BidRequest_Publisher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, _extensions_),
      sizeof(BidRequest_Publisher),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Publisher, _internal_metadata_),
      -1);
  BidRequest_Content_descriptor_ = BidRequest_descriptor_->nested_type(4);
  static const int BidRequest_Content_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, episode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, series_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, videoquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, contentrating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, userrating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, context_22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, livestream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, sourcerelationship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, producer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, qagmediarating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, embeddable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, language_),
  };
  BidRequest_Content_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Content_descriptor_,
      BidRequest_Content::default_instance_,
      BidRequest_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, _extensions_),
      sizeof(BidRequest_Content),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Content, _internal_metadata_),
      -1);
  BidRequest_Content_VideoQuality_descriptor_ = BidRequest_Content_descriptor_->enum_type(0);
  BidRequest_Content_ContentContext_descriptor_ = BidRequest_Content_descriptor_->enum_type(1);
  BidRequest_Content_QAGMediaRating_descriptor_ = BidRequest_Content_descriptor_->enum_type(2);
  BidRequest_Producer_descriptor_ = BidRequest_descriptor_->nested_type(5);
  static const int BidRequest_Producer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, domain_),
  };
  BidRequest_Producer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Producer_descriptor_,
      BidRequest_Producer::default_instance_,
      BidRequest_Producer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, _extensions_),
      sizeof(BidRequest_Producer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Producer, _internal_metadata_),
      -1);
  BidRequest_Device_descriptor_ = BidRequest_descriptor_->nested_type(6);
  static const int BidRequest_Device_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, dnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, didsha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, didmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, dpidsha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, dpidmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ipv6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, carrier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, make_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, osv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, hwv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ppi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, pxratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, js_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, connectiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, flashver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, ifa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, macsha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, macmd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, lmt_),
  };
  BidRequest_Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Device_descriptor_,
      BidRequest_Device::default_instance_,
      BidRequest_Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _extensions_),
      sizeof(BidRequest_Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Device, _internal_metadata_),
      -1);
  BidRequest_Device_DeviceType_descriptor_ = BidRequest_Device_descriptor_->enum_type(0);
  BidRequest_Device_ConnectionType_descriptor_ = BidRequest_Device_descriptor_->enum_type(1);
  BidRequest_Geo_descriptor_ = BidRequest_descriptor_->nested_type(7);
  static const int BidRequest_Geo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, regionfips104_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, metro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, zip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, utcoffset_),
  };
  BidRequest_Geo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Geo_descriptor_,
      BidRequest_Geo::default_instance_,
      BidRequest_Geo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _extensions_),
      sizeof(BidRequest_Geo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Geo, _internal_metadata_),
      -1);
  BidRequest_Geo_LocationType_descriptor_ = BidRequest_Geo_descriptor_->enum_type(0);
  BidRequest_User_descriptor_ = BidRequest_descriptor_->nested_type(8);
  static const int BidRequest_User_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, buyeruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, yob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, keywords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, geo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, data_),
  };
  BidRequest_User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_User_descriptor_,
      BidRequest_User::default_instance_,
      BidRequest_User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _extensions_),
      sizeof(BidRequest_User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_User, _internal_metadata_),
      -1);
  BidRequest_User_Gender_descriptor_ = BidRequest_User_descriptor_->enum_type(0);
  BidRequest_Data_descriptor_ = BidRequest_descriptor_->nested_type(9);
  static const int BidRequest_Data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, segment_),
  };
  BidRequest_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Data_descriptor_,
      BidRequest_Data::default_instance_,
      BidRequest_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, _extensions_),
      sizeof(BidRequest_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data, _internal_metadata_),
      -1);
  BidRequest_Data_Segment_descriptor_ = BidRequest_Data_descriptor_->nested_type(0);
  static const int BidRequest_Data_Segment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, value_),
  };
  BidRequest_Data_Segment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Data_Segment_descriptor_,
      BidRequest_Data_Segment::default_instance_,
      BidRequest_Data_Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, _extensions_),
      sizeof(BidRequest_Data_Segment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Data_Segment, _internal_metadata_),
      -1);
  BidRequest_Regs_descriptor_ = BidRequest_descriptor_->nested_type(10);
  static const int BidRequest_Regs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Regs, coppa_),
  };
  BidRequest_Regs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidRequest_Regs_descriptor_,
      BidRequest_Regs::default_instance_,
      BidRequest_Regs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Regs, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Regs, _extensions_),
      sizeof(BidRequest_Regs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidRequest_Regs, _internal_metadata_),
      -1);
  BidRequest_AuctionType_descriptor_ = BidRequest_descriptor_->enum_type(0);
  BidResponse_descriptor_ = file->message_type(1);
  static const int BidResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, seatbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, bidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, nbr_),
  };
  BidResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_descriptor_,
      BidResponse::default_instance_,
      BidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _extensions_),
      sizeof(BidResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse, _internal_metadata_),
      -1);
  BidResponse_SeatBid_descriptor_ = BidResponse_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, group_),
  };
  BidResponse_SeatBid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_SeatBid_descriptor_,
      BidResponse_SeatBid::default_instance_,
      BidResponse_SeatBid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _extensions_),
      sizeof(BidResponse_SeatBid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid, _internal_metadata_),
      -1);
  BidResponse_SeatBid_Bid_descriptor_ = BidResponse_SeatBid_descriptor_->nested_type(0);
  static const int BidResponse_SeatBid_Bid_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, impid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, nurl_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidResponse_SeatBid_Bid_default_oneof_instance_, adm_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BidResponse_SeatBid_Bid_default_oneof_instance_, adm_native_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adomain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, bundle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, iurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, crid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, cat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, dealid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, adm_oneof_),
  };
  BidResponse_SeatBid_Bid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BidResponse_SeatBid_Bid_descriptor_,
      BidResponse_SeatBid_Bid::default_instance_,
      BidResponse_SeatBid_Bid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _extensions_),
      BidResponse_SeatBid_Bid_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _oneof_case_[0]),
      sizeof(BidResponse_SeatBid_Bid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidResponse_SeatBid_Bid, _internal_metadata_),
      -1);
  BidResponse_NoBidReason_descriptor_ = BidResponse_descriptor_->enum_type(0);
  NativeRequest_descriptor_ = file->message_type(2);
  static const int NativeRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, adunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, plcmtcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, assets_),
  };
  NativeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeRequest_descriptor_,
      NativeRequest::default_instance_,
      NativeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, _extensions_),
      sizeof(NativeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest, _internal_metadata_),
      -1);
  NativeRequest_Asset_descriptor_ = NativeRequest_descriptor_->nested_type(0);
  static const int NativeRequest_Asset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, required_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeRequest_Asset_default_oneof_instance_, title_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeRequest_Asset_default_oneof_instance_, img_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeRequest_Asset_default_oneof_instance_, video_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeRequest_Asset_default_oneof_instance_, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, asset_oneof_),
  };
  NativeRequest_Asset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeRequest_Asset_descriptor_,
      NativeRequest_Asset::default_instance_,
      NativeRequest_Asset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, _extensions_),
      NativeRequest_Asset_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, _oneof_case_[0]),
      sizeof(NativeRequest_Asset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset, _internal_metadata_),
      -1);
  NativeRequest_Asset_Title_descriptor_ = NativeRequest_Asset_descriptor_->nested_type(0);
  static const int NativeRequest_Asset_Title_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Title, len_),
  };
  NativeRequest_Asset_Title_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeRequest_Asset_Title_descriptor_,
      NativeRequest_Asset_Title::default_instance_,
      NativeRequest_Asset_Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Title, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Title, _extensions_),
      sizeof(NativeRequest_Asset_Title),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Title, _internal_metadata_),
      -1);
  NativeRequest_Asset_Image_descriptor_ = NativeRequest_Asset_descriptor_->nested_type(1);
  static const int NativeRequest_Asset_Image_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, wmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, hmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, mimes_),
  };
  NativeRequest_Asset_Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeRequest_Asset_Image_descriptor_,
      NativeRequest_Asset_Image::default_instance_,
      NativeRequest_Asset_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, _extensions_),
      sizeof(NativeRequest_Asset_Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Image, _internal_metadata_),
      -1);
  NativeRequest_Asset_Image_ImageAssetType_descriptor_ = NativeRequest_Asset_Image_descriptor_->enum_type(0);
  NativeRequest_Asset_Data_descriptor_ = NativeRequest_Asset_descriptor_->nested_type(2);
  static const int NativeRequest_Asset_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, len_),
  };
  NativeRequest_Asset_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeRequest_Asset_Data_descriptor_,
      NativeRequest_Asset_Data::default_instance_,
      NativeRequest_Asset_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, _extensions_),
      sizeof(NativeRequest_Asset_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeRequest_Asset_Data, _internal_metadata_),
      -1);
  NativeRequest_Asset_Data_DataAssetType_descriptor_ = NativeRequest_Asset_Data_descriptor_->enum_type(0);
  NativeRequest_LayoutId_descriptor_ = NativeRequest_descriptor_->enum_type(0);
  NativeRequest_AdUnitId_descriptor_ = NativeRequest_descriptor_->enum_type(1);
  NativeResponse_descriptor_ = file->message_type(3);
  static const int NativeResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, assets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, imptrackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, jstracker_),
  };
  NativeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeResponse_descriptor_,
      NativeResponse::default_instance_,
      NativeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, _extensions_),
      sizeof(NativeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse, _internal_metadata_),
      -1);
  NativeResponse_Link_descriptor_ = NativeResponse_descriptor_->nested_type(0);
  static const int NativeResponse_Link_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, clicktrackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, fallback_),
  };
  NativeResponse_Link_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeResponse_Link_descriptor_,
      NativeResponse_Link::default_instance_,
      NativeResponse_Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, _extensions_),
      sizeof(NativeResponse_Link),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Link, _internal_metadata_),
      -1);
  NativeResponse_Asset_descriptor_ = NativeResponse_descriptor_->nested_type(1);
  static const int NativeResponse_Asset_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, required_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeResponse_Asset_default_oneof_instance_, title_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeResponse_Asset_default_oneof_instance_, img_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeResponse_Asset_default_oneof_instance_, video_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(NativeResponse_Asset_default_oneof_instance_, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, asset_oneof_),
  };
  NativeResponse_Asset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeResponse_Asset_descriptor_,
      NativeResponse_Asset::default_instance_,
      NativeResponse_Asset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, _extensions_),
      NativeResponse_Asset_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, _oneof_case_[0]),
      sizeof(NativeResponse_Asset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset, _internal_metadata_),
      -1);
  NativeResponse_Asset_Title_descriptor_ = NativeResponse_Asset_descriptor_->nested_type(0);
  static const int NativeResponse_Asset_Title_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Title, text_),
  };
  NativeResponse_Asset_Title_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeResponse_Asset_Title_descriptor_,
      NativeResponse_Asset_Title::default_instance_,
      NativeResponse_Asset_Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Title, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Title, _extensions_),
      sizeof(NativeResponse_Asset_Title),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Title, _internal_metadata_),
      -1);
  NativeResponse_Asset_Image_descriptor_ = NativeResponse_Asset_descriptor_->nested_type(1);
  static const int NativeResponse_Asset_Image_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, h_),
  };
  NativeResponse_Asset_Image_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeResponse_Asset_Image_descriptor_,
      NativeResponse_Asset_Image::default_instance_,
      NativeResponse_Asset_Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, _extensions_),
      sizeof(NativeResponse_Asset_Image),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Image, _internal_metadata_),
      -1);
  NativeResponse_Asset_Data_descriptor_ = NativeResponse_Asset_descriptor_->nested_type(2);
  static const int NativeResponse_Asset_Data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, value_),
  };
  NativeResponse_Asset_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeResponse_Asset_Data_descriptor_,
      NativeResponse_Asset_Data::default_instance_,
      NativeResponse_Asset_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, _extensions_),
      sizeof(NativeResponse_Asset_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Data, _internal_metadata_),
      -1);
  NativeResponse_Asset_Video_descriptor_ = NativeResponse_Asset_descriptor_->nested_type(3);
  static const int NativeResponse_Asset_Video_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Video, vasttag_),
  };
  NativeResponse_Asset_Video_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NativeResponse_Asset_Video_descriptor_,
      NativeResponse_Asset_Video::default_instance_,
      NativeResponse_Asset_Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Video, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Video, _extensions_),
      sizeof(NativeResponse_Asset_Video),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NativeResponse_Asset_Video, _internal_metadata_),
      -1);
  ContentCategory_descriptor_ = file->enum_type(0);
  CreativeAttribute_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_openrtb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_descriptor_, &BidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_descriptor_, &BidRequest_Imp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Banner_descriptor_, &BidRequest_Imp_Banner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Video_descriptor_, &BidRequest_Imp_Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Video_CompanionAd_descriptor_, &BidRequest_Imp_Video_CompanionAd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Native_descriptor_, &BidRequest_Imp_Native::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Pmp_descriptor_, &BidRequest_Imp_Pmp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Imp_Pmp_Deal_descriptor_, &BidRequest_Imp_Pmp_Deal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Site_descriptor_, &BidRequest_Site::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_App_descriptor_, &BidRequest_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Publisher_descriptor_, &BidRequest_Publisher::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Content_descriptor_, &BidRequest_Content::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Producer_descriptor_, &BidRequest_Producer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Device_descriptor_, &BidRequest_Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Geo_descriptor_, &BidRequest_Geo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_User_descriptor_, &BidRequest_User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Data_descriptor_, &BidRequest_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Data_Segment_descriptor_, &BidRequest_Data_Segment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidRequest_Regs_descriptor_, &BidRequest_Regs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_descriptor_, &BidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_SeatBid_descriptor_, &BidResponse_SeatBid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BidResponse_SeatBid_Bid_descriptor_, &BidResponse_SeatBid_Bid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeRequest_descriptor_, &NativeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeRequest_Asset_descriptor_, &NativeRequest_Asset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeRequest_Asset_Title_descriptor_, &NativeRequest_Asset_Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeRequest_Asset_Image_descriptor_, &NativeRequest_Asset_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeRequest_Asset_Data_descriptor_, &NativeRequest_Asset_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeResponse_descriptor_, &NativeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeResponse_Link_descriptor_, &NativeResponse_Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeResponse_Asset_descriptor_, &NativeResponse_Asset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeResponse_Asset_Title_descriptor_, &NativeResponse_Asset_Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeResponse_Asset_Image_descriptor_, &NativeResponse_Asset_Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeResponse_Asset_Data_descriptor_, &NativeResponse_Asset_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NativeResponse_Asset_Video_descriptor_, &NativeResponse_Asset_Video::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_openrtb_2eproto() {
  delete BidRequest::default_instance_;
  delete BidRequest_default_oneof_instance_;
  delete BidRequest_reflection_;
  delete BidRequest_Imp::default_instance_;
  delete BidRequest_Imp_reflection_;
  delete BidRequest_Imp::_default_bidfloorcur_;
  delete BidRequest_Imp_Banner::default_instance_;
  delete BidRequest_Imp_Banner_reflection_;
  delete BidRequest_Imp_Video::default_instance_;
  delete BidRequest_Imp_Video_reflection_;
  delete BidRequest_Imp_Video_CompanionAd::default_instance_;
  delete BidRequest_Imp_Video_CompanionAd_reflection_;
  delete BidRequest_Imp_Native::default_instance_;
  delete BidRequest_Imp_Native_default_oneof_instance_;
  delete BidRequest_Imp_Native_reflection_;
  delete BidRequest_Imp_Pmp::default_instance_;
  delete BidRequest_Imp_Pmp_reflection_;
  delete BidRequest_Imp_Pmp_Deal::default_instance_;
  delete BidRequest_Imp_Pmp_Deal_reflection_;
  delete BidRequest_Imp_Pmp_Deal::_default_bidfloorcur_;
  delete BidRequest_Site::default_instance_;
  delete BidRequest_Site_reflection_;
  delete BidRequest_App::default_instance_;
  delete BidRequest_App_reflection_;
  delete BidRequest_Publisher::default_instance_;
  delete BidRequest_Publisher_reflection_;
  delete BidRequest_Content::default_instance_;
  delete BidRequest_Content_reflection_;
  delete BidRequest_Producer::default_instance_;
  delete BidRequest_Producer_reflection_;
  delete BidRequest_Device::default_instance_;
  delete BidRequest_Device_reflection_;
  delete BidRequest_Geo::default_instance_;
  delete BidRequest_Geo_reflection_;
  delete BidRequest_User::default_instance_;
  delete BidRequest_User_reflection_;
  delete BidRequest_Data::default_instance_;
  delete BidRequest_Data_reflection_;
  delete BidRequest_Data_Segment::default_instance_;
  delete BidRequest_Data_Segment_reflection_;
  delete BidRequest_Regs::default_instance_;
  delete BidRequest_Regs_reflection_;
  delete BidResponse::default_instance_;
  delete BidResponse_reflection_;
  delete BidResponse::_default_cur_;
  delete BidResponse_SeatBid::default_instance_;
  delete BidResponse_SeatBid_reflection_;
  delete BidResponse_SeatBid_Bid::default_instance_;
  delete BidResponse_SeatBid_Bid_default_oneof_instance_;
  delete BidResponse_SeatBid_Bid_reflection_;
  delete NativeRequest::default_instance_;
  delete NativeRequest_reflection_;
  delete NativeRequest_Asset::default_instance_;
  delete NativeRequest_Asset_default_oneof_instance_;
  delete NativeRequest_Asset_reflection_;
  delete NativeRequest_Asset_Title::default_instance_;
  delete NativeRequest_Asset_Title_reflection_;
  delete NativeRequest_Asset_Image::default_instance_;
  delete NativeRequest_Asset_Image_reflection_;
  delete NativeRequest_Asset_Data::default_instance_;
  delete NativeRequest_Asset_Data_reflection_;
  delete NativeResponse::default_instance_;
  delete NativeResponse_reflection_;
  delete NativeResponse_Link::default_instance_;
  delete NativeResponse_Link_reflection_;
  delete NativeResponse_Asset::default_instance_;
  delete NativeResponse_Asset_default_oneof_instance_;
  delete NativeResponse_Asset_reflection_;
  delete NativeResponse_Asset_Title::default_instance_;
  delete NativeResponse_Asset_Title_reflection_;
  delete NativeResponse_Asset_Image::default_instance_;
  delete NativeResponse_Asset_Image_reflection_;
  delete NativeResponse_Asset_Data::default_instance_;
  delete NativeResponse_Asset_Data_reflection_;
  delete NativeResponse_Asset_Video::default_instance_;
  delete NativeResponse_Asset_Video_reflection_;
}

void protobuf_AddDesc_openrtb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_openrtb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ropenrtb.proto\022\022com.google.openrtb\"\2659\n\n"
    "BidRequest\022\n\n\002id\030\001 \002(\t\022/\n\003imp\030\002 \003(\0132\".co"
    "m.google.openrtb.BidRequest.Imp\0223\n\004site\030"
    "\003 \001(\0132#.com.google.openrtb.BidRequest.Si"
    "teH\000\0221\n\003app\030\004 \001(\0132\".com.google.openrtb.B"
    "idRequest.AppH\000\0225\n\006device\030\005 \001(\0132%.com.go"
    "ogle.openrtb.BidRequest.Device\0221\n\004regs\030\016"
    " \001(\0132#.com.google.openrtb.BidRequest.Reg"
    "s\0221\n\004user\030\006 \001(\0132#.com.google.openrtb.Bid"
    "Request.User\022D\n\002at\030\007 \001(\0162*.com.google.op"
    "enrtb.BidRequest.AuctionType:\014SECOND_PRI"
    "CE\022\014\n\004tmax\030\010 \001(\005\022\r\n\005wseat\030\t \003(\t\022\026\n\007allim"
    "ps\030\n \001(\010:\005false\022\013\n\003cur\030\013 \003(\t\022\014\n\004bcat\030\014 \003"
    "(\t\022\014\n\004badv\030\r \003(\t\022\023\n\004test\030\017 \001(\010:\005false\032\263\033"
    "\n\003Imp\022\n\n\002id\030\001 \002(\t\0229\n\006banner\030\002 \001(\0132).com."
    "google.openrtb.BidRequest.Imp.Banner\0227\n\005"
    "video\030\003 \001(\0132(.com.google.openrtb.BidRequ"
    "est.Imp.Video\022\026\n\016displaymanager\030\004 \001(\t\022\031\n"
    "\021displaymanagerver\030\005 \001(\t\022\r\n\005instl\030\006 \001(\005\022"
    "\r\n\005tagid\030\007 \001(\t\022\023\n\010bidfloor\030\010 \001(\001:\0010\022\030\n\013b"
    "idfloorcur\030\t \001(\t:\003CNY\022\016\n\006secure\030\014 \001(\010\022\024\n"
    "\014iframebuster\030\n \003(\t\0223\n\003pmp\030\013 \001(\0132&.com.g"
    "oogle.openrtb.BidRequest.Imp.Pmp\0229\n\006nati"
    "ve\030\r \001(\0132).com.google.openrtb.BidRequest"
    ".Imp.Native\032\220\005\n\006Banner\022\t\n\001w\030\001 \001(\005\022\t\n\001h\030\002"
    " \001(\005\022\014\n\004wmax\030\013 \001(\005\022\014\n\004hmax\030\014 \001(\005\022\014\n\004wmin"
    "\030\r \001(\005\022\014\n\004hmin\030\016 \001(\005\022\n\n\002id\030\003 \001(\t\022:\n\003pos\030"
    "\004 \001(\0162-.com.google.openrtb.BidRequest.Im"
    "p.AdPosition\022I\n\005btype\030\005 \003(\01626.com.google"
    ".openrtb.BidRequest.Imp.Banner.BannerAdT"
    "ypeB\002\020\001\0228\n\005battr\030\006 \003(\0162%.com.google.open"
    "rtb.CreativeAttributeB\002\020\001\022\r\n\005mimes\030\007 \003(\t"
    "\022\020\n\010topframe\030\010 \001(\010\022Q\n\006expdir\030\t \003(\0162=.com"
    ".google.openrtb.BidRequest.Imp.Banner.Ex"
    "pandableDirectionB\002\020\001\022@\n\003api\030\n \003(\0162/.com"
    ".google.openrtb.BidRequest.Imp.APIFramew"
    "orkB\002\020\001\"U\n\014BannerAdType\022\021\n\rXHTML_TEXT_AD"
    "\020\001\022\023\n\017XHTML_BANNER_AD\020\002\022\021\n\rJAVASCRIPT_AD"
    "\020\003\022\n\n\006IFRAME\020\004\"W\n\023ExpandableDirection\022\010\n"
    "\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\006\n\002UP\020\003\022\010\n\004DOWN\020\004\022\031\n\025"
    "EXPANDABLE_FULLSCREEN\020\005*\005\010d\020\220N\032\375\014\n\005Video"
    "\022\r\n\005mimes\030\001 \003(\t\022J\n\tlinearity\030\002 \001(\01627.com"
    ".google.openrtb.BidRequest.Imp.Video.Vid"
    "eoLinearity\022\023\n\013minduration\030\003 \001(\005\022\023\n\013maxd"
    "uration\030\004 \001(\005\022W\n\010protocol\030\005 \001(\0162A.com.go"
    "ogle.openrtb.BidRequest.Imp.Video.VideoB"
    "idResponseProtocolB\002\030\001\022X\n\tprotocols\030\025 \003("
    "\0162A.com.google.openrtb.BidRequest.Imp.Vi"
    "deo.VideoBidResponseProtocolB\002\020\001\022\t\n\001w\030\006 "
    "\001(\005\022\t\n\001h\030\007 \001(\005\022\022\n\nstartdelay\030\010 \001(\005\022\023\n\010se"
    "quence\030\t \001(\005:\0011\0228\n\005battr\030\n \003(\0162%.com.goo"
    "gle.openrtb.CreativeAttributeB\002\020\001\022\023\n\013max"
    "extended\030\013 \001(\005\022\022\n\nminbitrate\030\014 \001(\005\022\022\n\nma"
    "xbitrate\030\r \001(\005\022\033\n\rboxingallowed\030\016 \001(\010:\004t"
    "rue\022X\n\016playbackmethod\030\017 \003(\0162<.com.google"
    ".openrtb.BidRequest.Imp.Video.VideoPlayb"
    "ackMethodB\002\020\001\022T\n\010delivery\030\020 \003(\0162>.com.go"
    "ogle.openrtb.BidRequest.Imp.Video.Conten"
    "tDeliveryMethodB\002\020\001\022:\n\003pos\030\021 \001(\0162-.com.g"
    "oogle.openrtb.BidRequest.Imp.AdPosition\022"
    ">\n\013companionad\030\022 \003(\0132).com.google.openrt"
    "b.BidRequest.Imp.Banner\022P\n\016companionad_2"
    "1\030\026 \001(\01324.com.google.openrtb.BidRequest."
    "Imp.Video.CompanionAdB\002\030\001\022@\n\003api\030\023 \003(\0162/"
    ".com.google.openrtb.BidRequest.Imp.APIFr"
    "ameworkB\002\020\001\022U\n\rcompaniontype\030\024 \003(\0162:.com"
    ".google.openrtb.BidRequest.Imp.Video.VAS"
    "TCompanionTypeB\002\020\001\032O\n\013CompanionAd\0229\n\006ban"
    "ner\030\001 \003(\0132).com.google.openrtb.BidReques"
    "t.Imp.Banner*\005\010d\020\220N\",\n\016VideoLinearity\022\n\n"
    "\006LINEAR\020\001\022\016\n\nNON_LINEAR\020\002\"\206\001\n\030VideoBidRe"
    "sponseProtocol\022\014\n\010VAST_1_0\020\001\022\014\n\010VAST_2_0"
    "\020\002\022\014\n\010VAST_3_0\020\003\022\024\n\020VAST_1_0_WRAPPER\020\004\022\024"
    "\n\020VAST_2_0_WRAPPER\020\005\022\024\n\020VAST_3_0_WRAPPER"
    "\020\006\"i\n\023VideoPlaybackMethod\022\026\n\022AUTO_PLAY_S"
    "OUND_ON\020\001\022\027\n\023AUTO_PLAY_SOUND_OFF\020\002\022\021\n\rCL"
    "ICK_TO_PLAY\020\003\022\016\n\nMOUSE_OVER\020\004\"^\n\017VideoSt"
    "artDelay\022\014\n\010PRE_ROLL\020\000\022\035\n\020GENERIC_MID_RO"
    "LL\020\377\377\377\377\377\377\377\377\377\001\022\036\n\021GENERIC_POST_ROLL\020\376\377\377\377\377"
    "\377\377\377\377\001\"\?\n\021VASTCompanionType\022\n\n\006STATIC\020\001\022\010"
    "\n\004HTML\020\002\022\024\n\020COMPANION_IFRAME\020\003\"7\n\025Conten"
    "tDeliveryMethod\022\r\n\tSTREAMING\020\001\022\017\n\013PROGRE"
    "SSIVE\020\002*\005\010d\020\220N\032\371\001\n\006Native\022\021\n\007request\030\001 \001"
    "(\tH\000\022;\n\016request_native\0302 \001(\0132!.com.googl"
    "e.openrtb.NativeRequestH\000\022\013\n\003ver\030\002 \001(\t\022@"
    "\n\003api\030\003 \003(\0162/.com.google.openrtb.BidRequ"
    "est.Imp.APIFrameworkB\002\020\001\0228\n\005battr\030\004 \003(\0162"
    "%.com.google.openrtb.CreativeAttributeB\002"
    "\020\001*\005\010d\020\220NB\017\n\rrequest_oneof\032\205\002\n\003Pmp\022\027\n\017pr"
    "ivate_auction\030\001 \001(\010\022:\n\005deals\030\002 \003(\0132+.com"
    ".google.openrtb.BidRequest.Imp.Pmp.Deal\032"
    "\241\001\n\004Deal\022\n\n\002id\030\001 \002(\t\022\023\n\010bidfloor\030\002 \001(\001:\001"
    "0\022\030\n\013bidfloorcur\030\003 \001(\t:\003CNY\022\r\n\005wseat\030\004 \003"
    "(\t\022\020\n\010wadomain\030\005 \003(\t\0226\n\002at\030\006 \001(\0162*.com.g"
    "oogle.openrtb.BidRequest.AuctionType*\005\010d"
    "\020\220N*\005\010d\020\220N\"\250\001\n\nAdPosition\022\013\n\007UNKNOWN\020\000\022\022"
    "\n\016ABOVE_THE_FOLD\020\001\022$\n DEPRECATED_LIKELY_"
    "BELOW_THE_FOLD\020\002\022\022\n\016BELOW_THE_FOLD\020\003\022\n\n\006"
    "HEADER\020\004\022\n\n\006FOOTER\020\005\022\013\n\007SIDEBAR\020\006\022\032\n\026AD_"
    "POSITION_FULLSCREEN\020\007\"M\n\014APIFramework\022\013\n"
    "\007VPAID_1\020\001\022\013\n\007VPAID_2\020\002\022\013\n\007MRAID_1\020\003\022\t\n\005"
    "ORMMA\020\004\022\013\n\007MRAID_2\020\005*\005\010d\020\220N\032\303\002\n\004Site\022\n\n\002"
    "id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\013"
    "\n\003cat\030\004 \003(\t\022\022\n\nsectioncat\030\005 \003(\t\022\017\n\007pagec"
    "at\030\006 \003(\t\022\014\n\004page\030\007 \001(\t\022\025\n\rprivacypolicy\030"
    "\010 \001(\010\022\013\n\003ref\030\t \001(\t\022\016\n\006search\030\n \001(\t\022;\n\tpu"
    "blisher\030\013 \001(\0132(.com.google.openrtb.BidRe"
    "quest.Publisher\0227\n\007content\030\014 \001(\0132&.com.g"
    "oogle.openrtb.BidRequest.Content\022\020\n\010keyw"
    "ords\030\r \001(\t\022\016\n\006mobile\030\017 \001(\010*\005\010d\020\220N\032\304\002\n\003Ap"
    "p\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006domain\030\003 "
    "\001(\t\022\013\n\003cat\030\004 \003(\t\022\022\n\nsectioncat\030\005 \003(\t\022\017\n\007"
    "pagecat\030\006 \003(\t\022\013\n\003ver\030\007 \001(\t\022\016\n\006bundle\030\010 \001"
    "(\t\022\025\n\rprivacypolicy\030\t \001(\010\022\014\n\004paid\030\n \001(\010\022"
    ";\n\tpublisher\030\013 \001(\0132(.com.google.openrtb."
    "BidRequest.Publisher\0227\n\007content\030\014 \001(\0132&."
    "com.google.openrtb.BidRequest.Content\022\020\n"
    "\010keywords\030\r \001(\t\022\020\n\010storeurl\030\020 \001(\t*\005\010d\020\220N"
    "\032I\n\tPublisher\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
    "\013\n\003cat\030\003 \003(\t\022\016\n\006domain\030\004 \001(\t*\005\010d\020\220N\032\324\006\n\007"
    "Content\022\n\n\002id\030\001 \001(\t\022\017\n\007episode\030\002 \001(\005\022\r\n\005"
    "title\030\003 \001(\t\022\016\n\006series\030\004 \001(\t\022\016\n\006season\030\005 "
    "\001(\t\022\013\n\003url\030\006 \001(\t\022\013\n\003cat\030\007 \003(\t\022I\n\014videoqu"
    "ality\030\010 \001(\01623.com.google.openrtb.BidRequ"
    "est.Content.VideoQuality\022\020\n\010keywords\030\t \001"
    "(\t\022\025\n\rcontentrating\030\n \001(\t\022\022\n\nuserrating\030"
    "\013 \001(\t\022F\n\007context\030\024 \001(\01625.com.google.open"
    "rtb.BidRequest.Content.ContentContext\022\022\n"
    "\ncontext_22\030\014 \001(\t\022\022\n\nlivestream\030\r \001(\010\022\032\n"
    "\022sourcerelationship\030\016 \001(\010\0229\n\010producer\030\017 "
    "\001(\0132\'.com.google.openrtb.BidRequest.Prod"
    "ucer\022\013\n\003len\030\020 \001(\005\022M\n\016qagmediarating\030\021 \001("
    "\01625.com.google.openrtb.BidRequest.Conten"
    "t.QAGMediaRating\022\022\n\nembeddable\030\022 \001(\010\022\020\n\010"
    "language\030\023 \001(\t\"W\n\014VideoQuality\022\023\n\017QUALIT"
    "Y_UNKNOWN\020\000\022\020\n\014PROFESSIONAL\020\001\022\014\n\010PROSUME"
    "R\020\002\022\022\n\016USER_GENERATED\020\003\"k\n\016ContentContex"
    "t\022\t\n\005VIDEO\020\001\022\010\n\004GAME\020\002\022\t\n\005MUSIC\020\003\022\017\n\013APP"
    "LICATION\020\004\022\010\n\004TEXT\020\005\022\t\n\005OTHER\020\006\022\023\n\017CONTE"
    "XT_UNKNOWN\020\007\"E\n\016QAGMediaRating\022\021\n\rALL_AU"
    "DIENCES\020\001\022\024\n\020EVERYONE_OVER_12\020\002\022\n\n\006MATUR"
    "E\020\003*\005\010d\020\220N\032H\n\010Producer\022\n\n\002id\030\001 \001(\t\022\014\n\004na"
    "me\030\002 \001(\t\022\013\n\003cat\030\003 \003(\t\022\016\n\006domain\030\004 \001(\t*\005\010"
    "d\020\220N\032\272\006\n\006Device\022\013\n\003dnt\030\001 \001(\010\022\n\n\002ua\030\002 \001(\t"
    "\022\n\n\002ip\030\003 \001(\t\022/\n\003geo\030\004 \001(\0132\".com.google.o"
    "penrtb.BidRequest.Geo\022\017\n\007didsha1\030\005 \001(\t\022\016"
    "\n\006didmd5\030\006 \001(\t\022\020\n\010dpidsha1\030\007 \001(\t\022\017\n\007dpid"
    "md5\030\010 \001(\t\022\014\n\004ipv6\030\t \001(\t\022\017\n\007carrier\030\n \001(\t"
    "\022\020\n\010language\030\013 \001(\t\022\014\n\004make\030\014 \001(\t\022\r\n\005mode"
    "l\030\r \001(\t\022\n\n\002os\030\016 \001(\t\022\013\n\003osv\030\017 \001(\t\022\013\n\003hwv\030"
    "\030 \001(\t\022\t\n\001w\030\031 \001(\005\022\t\n\001h\030\032 \001(\005\022\013\n\003ppi\030\033 \001(\005"
    "\022\017\n\007pxratio\030\034 \001(\001\022\n\n\002js\030\020 \001(\010\022L\n\016connect"
    "iontype\030\021 \001(\01624.com.google.openrtb.BidRe"
    "quest.Device.ConnectionType\022D\n\ndevicetyp"
    "e\030\022 \001(\01620.com.google.openrtb.BidRequest."
    "Device.DeviceType\022\020\n\010flashver\030\023 \001(\t\022\013\n\003i"
    "fa\030\024 \001(\t\022\017\n\007macsha1\030\025 \001(\t\022\016\n\006macmd5\030\026 \001("
    "\t\022\013\n\003lmt\030\027 \001(\010\"\177\n\nDeviceType\022\n\n\006MOBILE\020\001"
    "\022\025\n\021PERSONAL_COMPUTER\020\002\022\020\n\014CONNECTED_TV\020"
    "\003\022\t\n\005PHONE\020\004\022\n\n\006TABLET\020\005\022\024\n\020CONNECTED_DE"
    "VICE\020\006\022\017\n\013SET_TOP_BOX\020\007\"y\n\016ConnectionTyp"
    "e\022\026\n\022CONNECTION_UNKNOWN\020\000\022\014\n\010ETHERNET\020\001\022"
    "\010\n\004WIFI\020\002\022\020\n\014CELL_UNKNOWN\020\003\022\013\n\007CELL_2G\020\004"
    "\022\013\n\007CELL_3G\020\005\022\013\n\007CELL_4G\020\006*\005\010d\020\220N\032\227\002\n\003Ge"
    "o\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\022\017\n\007country\030\003"
    " \001(\t\022\016\n\006region\030\004 \001(\t\022\025\n\rregionfips104\030\005 "
    "\001(\t\022\r\n\005metro\030\006 \001(\t\022\014\n\004city\030\007 \001(\t\022\013\n\003zip\030"
    "\010 \001(\t\022=\n\004type\030\t \001(\0162/.com.google.openrtb"
    ".BidRequest.Geo.LocationType\022\021\n\tutcoffse"
    "t\030\n \001(\005\";\n\014LocationType\022\020\n\014GPS_LOCATION\020"
    "\001\022\006\n\002IP\020\002\022\021\n\rUSER_PROVIDED\020\003*\005\010d\020\220N\032\375\001\n\004"
    "User\022\n\n\002id\030\001 \001(\t\022\020\n\010buyeruid\030\002 \001(\t\022\013\n\003yo"
    "b\030\003 \001(\005\022\016\n\006gender\030\004 \001(\t\022\020\n\010keywords\030\005 \001("
    "\t\022\022\n\ncustomdata\030\006 \001(\t\022/\n\003geo\030\007 \001(\0132\".com"
    ".google.openrtb.BidRequest.Geo\0221\n\004data\030\010"
    " \003(\0132#.com.google.openrtb.BidRequest.Dat"
    "a\")\n\006Gender\022\010\n\004MALE\020\001\022\n\n\006FEMALE\020\002\022\t\n\005OTH"
    "ER\020\003*\005\010d\020\220N\032\240\001\n\004Data\022\n\n\002id\030\001 \001(\t\022\014\n\004name"
    "\030\002 \001(\t\022<\n\007segment\030\003 \003(\0132+.com.google.ope"
    "nrtb.BidRequest.Data.Segment\0329\n\007Segment\022"
    "\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\t"
    "*\005\010d\020\220N*\005\010d\020\220N\032\034\n\004Regs\022\r\n\005coppa\030\001 \001(\010*\005\010"
    "d\020\220N\"A\n\013AuctionType\022\017\n\013FIRST_PRICE\020\001\022\020\n\014"
    "SECOND_PRICE\020\002\022\017\n\013FIXED_PRICE\020\003*\005\010d\020\220NB\033"
    "\n\031distributionchannel_oneof\"\370\006\n\013BidRespo"
    "nse\022\n\n\002id\030\001 \002(\t\0228\n\007seatbid\030\002 \003(\0132\'.com.g"
    "oogle.openrtb.BidResponse.SeatBid\022\r\n\005bid"
    "id\030\003 \001(\t\022\020\n\003cur\030\004 \001(\t:\003CNY\022\022\n\ncustomdata"
    "\030\005 \001(\t\0228\n\003nbr\030\006 \001(\0162+.com.google.openrtb"
    ".BidResponse.NoBidReason\032\310\003\n\007SeatBid\0228\n\003"
    "bid\030\001 \003(\0132+.com.google.openrtb.BidRespon"
    "se.SeatBid.Bid\022\014\n\004seat\030\002 \001(\t\022\r\n\005group\030\003 "
    "\001(\010\032\336\002\n\003Bid\022\n\n\002id\030\001 \002(\t\022\r\n\005impid\030\002 \002(\t\022\r"
    "\n\005price\030\003 \002(\001\022\014\n\004adid\030\004 \001(\t\022\014\n\004nurl\030\005 \001("
    "\t\022\r\n\003adm\030\006 \001(\tH\000\0228\n\nadm_native\0302 \001(\0132\".c"
    "om.google.openrtb.NativeResponseH\000\022\017\n\007ad"
    "omain\030\007 \003(\t\022\016\n\006bundle\030\016 \001(\t\022\014\n\004iurl\030\010 \001("
    "\t\022\013\n\003cid\030\t \001(\t\022\014\n\004crid\030\n \001(\t\022\013\n\003cat\030\017 \003("
    "\t\0227\n\004attr\030\013 \003(\0162%.com.google.openrtb.Cre"
    "ativeAttributeB\002\020\001\022\016\n\006dealid\030\r \001(\t\022\t\n\001w\030"
    "\020 \001(\005\022\t\n\001h\030\021 \001(\005*\005\010d\020\220NB\013\n\tadm_oneof*\005\010d"
    "\020\220N\"\341\001\n\013NoBidReason\022\021\n\rUNKNOWN_ERROR\020\000\022\023"
    "\n\017TECHNICAL_ERROR\020\001\022\023\n\017INVALID_REQUEST\020\002"
    "\022\024\n\020KNOWN_WEB_SPIDER\020\003\022\036\n\032SUSPECTED_NONH"
    "UMAN_TRAFFIC\020\004\022\034\n\030CLOUD_DATACENTER_PROXY"
    "IP\020\005\022\026\n\022UNSUPPORTED_DEVICE\020\006\022\025\n\021BLOCKED_"
    "PUBLISHER\020\007\022\022\n\016UNMATCHED_USER\020\010*\005\010d\020\220N\"\235"
    "\n\n\rNativeRequest\022\013\n\003ver\030\001 \001(\t\022:\n\006layout\030"
    "\002 \001(\0162*.com.google.openrtb.NativeRequest"
    ".LayoutId\022:\n\006adunit\030\003 \001(\0162*.com.google.o"
    "penrtb.NativeRequest.AdUnitId\022\023\n\010plcmtcn"
    "t\030\004 \001(\005:\0011\022\016\n\003seq\030\005 \001(\005:\0010\0227\n\006assets\030\006 \003"
    "(\0132\'.com.google.openrtb.NativeRequest.As"
    "set\032\266\006\n\005Asset\022\n\n\002id\030\001 \002(\005\022\027\n\010required\030\002 "
    "\001(\010:\005false\022>\n\005title\030\003 \001(\0132-.com.google.o"
    "penrtb.NativeRequest.Asset.TitleH\000\022<\n\003im"
    "g\030\004 \001(\0132-.com.google.openrtb.NativeReque"
    "st.Asset.ImageH\000\0229\n\005video\030\005 \001(\0132(.com.go"
    "ogle.openrtb.BidRequest.Imp.VideoH\000\022<\n\004d"
    "ata\030\006 \001(\0132,.com.google.openrtb.NativeReq"
    "uest.Asset.DataH\000\032\033\n\005Title\022\013\n\003len\030\001 \002(\005*"
    "\005\010d\020\220N\032\313\001\n\005Image\022J\n\004type\030\001 \001(\0162<.com.goo"
    "gle.openrtb.NativeRequest.Asset.Image.Im"
    "ageAssetType\022\t\n\001w\030\002 \001(\005\022\t\n\001h\030\003 \001(\005\022\014\n\004wm"
    "in\030\004 \001(\005\022\014\n\004hmin\030\005 \001(\005\022\r\n\005mimes\030\006 \003(\t\".\n"
    "\016ImageAssetType\022\010\n\004ICON\020\001\022\010\n\004LOGO\020\002\022\010\n\004M"
    "AIN\020\003*\005\010d\020\220N\032\217\002\n\004Data\022H\n\004type\030\001 \002(\0162:.co"
    "m.google.openrtb.NativeRequest.Asset.Dat"
    "a.DataAssetType\022\013\n\003len\030\002 \001(\005\"\250\001\n\rDataAss"
    "etType\022\r\n\tSPONSORED\020\001\022\010\n\004DESC\020\002\022\n\n\006RATIN"
    "G\020\003\022\t\n\005LIKES\020\004\022\r\n\tDOWNLOADS\020\005\022\t\n\005PRICE\020\006"
    "\022\r\n\tSALEPRICE\020\007\022\t\n\005PHONE\020\010\022\013\n\007ADDRESS\020\t\022"
    "\t\n\005DESC2\020\n\022\016\n\nDISPLAYURL\020\013\022\013\n\007CTATEXT\020\014*"
    "\005\010d\020\220N*\005\010d\020\220NB\r\n\013asset_oneof\"t\n\010LayoutId"
    "\022\020\n\014CONTENT_WALL\020\001\022\014\n\010APP_WALL\020\002\022\r\n\tNEWS"
    "_FEED\020\003\022\r\n\tCHAT_LIST\020\004\022\014\n\010CAROUSEL\020\005\022\022\n\016"
    "CONTENT_STREAM\020\006\022\010\n\004GRID\020\007\"s\n\010AdUnitId\022\024"
    "\n\020PAID_SEARCH_UNIT\020\001\022\031\n\025RECOMMENDATION_W"
    "IDGET\020\002\022\024\n\020PROMOTED_LISTING\020\003\022\024\n\020IAB_IN_"
    "AD_NATIVE\020\004\022\n\n\006CUSTOM\020\005*\005\010d\020\220N\"\235\006\n\016Nativ"
    "eResponse\022\013\n\003ver\030\001 \001(\t\0228\n\006assets\030\002 \003(\0132("
    ".com.google.openrtb.NativeResponse.Asset"
    "\0225\n\004link\030\003 \002(\0132\'.com.google.openrtb.Nati"
    "veResponse.Link\022\023\n\013imptrackers\030\004 \003(\t\022\021\n\t"
    "jstracker\030\005 \001(\t\032C\n\004Link\022\013\n\003url\030\001 \001(\t\022\025\n\r"
    "clicktrackers\030\002 \003(\t\022\020\n\010fallback\030\003 \001(\t*\005\010"
    "d\020\220N\032\230\004\n\005Asset\022\n\n\002id\030\001 \002(\005\022\027\n\010required\030\002"
    " \001(\010:\005false\022\?\n\005title\030\003 \001(\0132..com.google."
    "openrtb.NativeResponse.Asset.TitleH\000\022=\n\003"
    "img\030\004 \001(\0132..com.google.openrtb.NativeRes"
    "ponse.Asset.ImageH\000\022\?\n\005video\030\005 \001(\0132..com"
    ".google.openrtb.NativeResponse.Asset.Vid"
    "eoH\000\022=\n\004data\030\006 \001(\0132-.com.google.openrtb."
    "NativeResponse.Asset.DataH\000\0225\n\004link\030\007 \001("
    "\0132\'.com.google.openrtb.NativeResponse.Li"
    "nk\032\034\n\005Title\022\014\n\004text\030\001 \002(\t*\005\010d\020\220N\0321\n\005Imag"
    "e\022\013\n\003url\030\001 \001(\t\022\t\n\001w\030\002 \001(\005\022\t\n\001h\030\003 \001(\005*\005\010d"
    "\020\220N\032+\n\004Data\022\r\n\005label\030\001 \001(\t\022\r\n\005value\030\002 \002("
    "\t*\005\010d\020\220N\032\037\n\005Video\022\017\n\007vasttag\030\001 \003(\t*\005\010d\020\220"
    "N*\005\010d\020\220NB\r\n\013asset_oneof*\005\010d\020\220N*\313)\n\017Conte"
    "ntCategory\022\010\n\004IAB1\020\001\022\n\n\006IAB1_1\020\002\022\n\n\006IAB1"
    "_2\020\003\022\n\n\006IAB1_3\020\004\022\n\n\006IAB1_4\020\005\022\n\n\006IAB1_5\020\006"
    "\022\n\n\006IAB1_6\020\007\022\n\n\006IAB1_7\020\010\022\010\n\004IAB2\020\t\022\n\n\006IA"
    "B2_1\020\n\022\n\n\006IAB2_2\020\013\022\n\n\006IAB2_3\020\014\022\n\n\006IAB2_4"
    "\020\r\022\n\n\006IAB2_5\020\016\022\n\n\006IAB2_6\020\017\022\n\n\006IAB2_7\020\020\022\n"
    "\n\006IAB2_8\020\021\022\n\n\006IAB2_9\020\022\022\013\n\007IAB2_10\020\023\022\013\n\007I"
    "AB2_11\020\024\022\013\n\007IAB2_12\020\025\022\013\n\007IAB2_13\020\026\022\013\n\007IA"
    "B2_14\020\027\022\013\n\007IAB2_15\020\030\022\013\n\007IAB2_16\020\031\022\013\n\007IAB"
    "2_17\020\032\022\013\n\007IAB2_18\020\033\022\013\n\007IAB2_19\020\034\022\013\n\007IAB2"
    "_20\020\035\022\013\n\007IAB2_21\020\036\022\013\n\007IAB2_22\020\037\022\013\n\007IAB2_"
    "23\020 \022\010\n\004IAB3\020!\022\n\n\006IAB3_1\020\"\022\n\n\006IAB3_2\020#\022\n"
    "\n\006IAB3_3\020$\022\n\n\006IAB3_4\020%\022\n\n\006IAB3_5\020&\022\n\n\006IA"
    "B3_6\020\'\022\n\n\006IAB3_7\020(\022\n\n\006IAB3_8\020)\022\n\n\006IAB3_9"
    "\020*\022\013\n\007IAB3_10\020+\022\013\n\007IAB3_11\020,\022\013\n\007IAB3_12\020"
    "-\022\010\n\004IAB4\020.\022\n\n\006IAB4_1\020/\022\n\n\006IAB4_2\0200\022\n\n\006I"
    "AB4_3\0201\022\n\n\006IAB4_4\0202\022\n\n\006IAB4_5\0203\022\n\n\006IAB4_"
    "6\0204\022\n\n\006IAB4_7\0205\022\n\n\006IAB4_8\0206\022\n\n\006IAB4_9\0207\022"
    "\013\n\007IAB4_10\0208\022\013\n\007IAB4_11\0209\022\010\n\004IAB5\020:\022\n\n\006I"
    "AB5_1\020;\022\n\n\006IAB5_2\020<\022\n\n\006IAB5_3\020=\022\n\n\006IAB5_"
    "4\020>\022\n\n\006IAB5_5\020\?\022\n\n\006IAB5_6\020@\022\n\n\006IAB5_7\020A\022"
    "\n\n\006IAB5_8\020B\022\n\n\006IAB5_9\020C\022\013\n\007IAB5_10\020D\022\013\n\007"
    "IAB5_11\020E\022\013\n\007IAB5_12\020F\022\013\n\007IAB5_13\020G\022\013\n\007I"
    "AB5_14\020H\022\013\n\007IAB5_15\020I\022\010\n\004IAB6\020J\022\n\n\006IAB6_"
    "1\020K\022\n\n\006IAB6_2\020L\022\n\n\006IAB6_3\020M\022\n\n\006IAB6_4\020N\022"
    "\n\n\006IAB6_5\020O\022\n\n\006IAB6_6\020P\022\n\n\006IAB6_7\020Q\022\n\n\006I"
    "AB6_8\020R\022\n\n\006IAB6_9\020S\022\010\n\004IAB7\020T\022\n\n\006IAB7_1\020"
    "U\022\n\n\006IAB7_2\020V\022\n\n\006IAB7_3\020W\022\n\n\006IAB7_4\020X\022\n\n"
    "\006IAB7_5\020Y\022\n\n\006IAB7_6\020Z\022\n\n\006IAB7_7\020[\022\n\n\006IAB"
    "7_8\020\\\022\n\n\006IAB7_9\020]\022\013\n\007IAB7_10\020^\022\013\n\007IAB7_1"
    "1\020_\022\013\n\007IAB7_12\020`\022\013\n\007IAB7_13\020a\022\013\n\007IAB7_14"
    "\020b\022\013\n\007IAB7_15\020c\022\013\n\007IAB7_16\020d\022\013\n\007IAB7_17\020"
    "e\022\013\n\007IAB7_18\020f\022\013\n\007IAB7_19\020g\022\013\n\007IAB7_20\020h"
    "\022\013\n\007IAB7_21\020i\022\013\n\007IAB7_22\020j\022\013\n\007IAB7_23\020k\022"
    "\013\n\007IAB7_24\020l\022\013\n\007IAB7_25\020m\022\013\n\007IAB7_26\020n\022\013"
    "\n\007IAB7_27\020o\022\013\n\007IAB7_28\020p\022\013\n\007IAB7_29\020q\022\013\n"
    "\007IAB7_30\020r\022\013\n\007IAB7_31\020s\022\013\n\007IAB7_32\020t\022\013\n\007"
    "IAB7_33\020u\022\013\n\007IAB7_34\020v\022\013\n\007IAB7_35\020w\022\013\n\007I"
    "AB7_36\020x\022\013\n\007IAB7_37\020y\022\013\n\007IAB7_38\020z\022\013\n\007IA"
    "B7_39\020{\022\013\n\007IAB7_40\020|\022\013\n\007IAB7_41\020}\022\013\n\007IAB"
    "7_42\020~\022\013\n\007IAB7_43\020\177\022\014\n\007IAB7_44\020\200\001\022\014\n\007IAB"
    "7_45\020\201\001\022\t\n\004IAB8\020\202\001\022\013\n\006IAB8_1\020\203\001\022\013\n\006IAB8_"
    "2\020\204\001\022\013\n\006IAB8_3\020\205\001\022\013\n\006IAB8_4\020\206\001\022\013\n\006IAB8_5"
    "\020\207\001\022\013\n\006IAB8_6\020\210\001\022\013\n\006IAB8_7\020\211\001\022\013\n\006IAB8_8\020"
    "\212\001\022\013\n\006IAB8_9\020\213\001\022\014\n\007IAB8_10\020\214\001\022\014\n\007IAB8_11"
    "\020\215\001\022\014\n\007IAB8_12\020\216\001\022\014\n\007IAB8_13\020\217\001\022\014\n\007IAB8_"
    "14\020\220\001\022\014\n\007IAB8_15\020\221\001\022\014\n\007IAB8_16\020\222\001\022\014\n\007IAB"
    "8_17\020\223\001\022\014\n\007IAB8_18\020\224\001\022\t\n\004IAB9\020\225\001\022\013\n\006IAB9"
    "_1\020\226\001\022\013\n\006IAB9_2\020\227\001\022\013\n\006IAB9_3\020\230\001\022\013\n\006IAB9_"
    "4\020\231\001\022\013\n\006IAB9_5\020\232\001\022\013\n\006IAB9_6\020\233\001\022\013\n\006IAB9_7"
    "\020\234\001\022\013\n\006IAB9_8\020\235\001\022\013\n\006IAB9_9\020\236\001\022\014\n\007IAB9_10"
    "\020\237\001\022\014\n\007IAB9_11\020\240\001\022\014\n\007IAB9_12\020\241\001\022\014\n\007IAB9_"
    "13\020\242\001\022\014\n\007IAB9_14\020\243\001\022\014\n\007IAB9_15\020\244\001\022\014\n\007IAB"
    "9_16\020\245\001\022\014\n\007IAB9_17\020\246\001\022\014\n\007IAB9_18\020\247\001\022\014\n\007I"
    "AB9_19\020\250\001\022\014\n\007IAB9_20\020\251\001\022\014\n\007IAB9_21\020\252\001\022\014\n"
    "\007IAB9_22\020\253\001\022\014\n\007IAB9_23\020\254\001\022\014\n\007IAB9_24\020\255\001\022"
    "\014\n\007IAB9_25\020\256\001\022\014\n\007IAB9_26\020\257\001\022\014\n\007IAB9_27\020\260"
    "\001\022\014\n\007IAB9_28\020\261\001\022\014\n\007IAB9_29\020\262\001\022\014\n\007IAB9_30"
    "\020\263\001\022\014\n\007IAB9_31\020\264\001\022\n\n\005IAB10\020\265\001\022\014\n\007IAB10_1"
    "\020\266\001\022\014\n\007IAB10_2\020\267\001\022\014\n\007IAB10_3\020\270\001\022\014\n\007IAB10"
    "_4\020\271\001\022\014\n\007IAB10_5\020\272\001\022\014\n\007IAB10_6\020\273\001\022\014\n\007IAB"
    "10_7\020\274\001\022\014\n\007IAB10_8\020\275\001\022\014\n\007IAB10_9\020\276\001\022\n\n\005I"
    "AB11\020\277\001\022\014\n\007IAB11_1\020\300\001\022\014\n\007IAB11_2\020\301\001\022\014\n\007I"
    "AB11_3\020\302\001\022\014\n\007IAB11_4\020\303\001\022\014\n\007IAB11_5\020\304\001\022\n\n"
    "\005IAB12\020\305\001\022\014\n\007IAB12_1\020\306\001\022\014\n\007IAB12_2\020\307\001\022\014\n"
    "\007IAB12_3\020\310\001\022\n\n\005IAB13\020\311\001\022\014\n\007IAB13_1\020\312\001\022\014\n"
    "\007IAB13_2\020\313\001\022\014\n\007IAB13_3\020\314\001\022\014\n\007IAB13_4\020\315\001\022"
    "\014\n\007IAB13_5\020\316\001\022\014\n\007IAB13_6\020\317\001\022\014\n\007IAB13_7\020\320"
    "\001\022\014\n\007IAB13_8\020\321\001\022\014\n\007IAB13_9\020\322\001\022\r\n\010IAB13_1"
    "0\020\323\001\022\r\n\010IAB13_11\020\324\001\022\r\n\010IAB13_12\020\325\001\022\n\n\005IA"
    "B14\020\326\001\022\014\n\007IAB14_1\020\327\001\022\014\n\007IAB14_2\020\330\001\022\014\n\007IA"
    "B14_3\020\331\001\022\014\n\007IAB14_4\020\332\001\022\014\n\007IAB14_5\020\333\001\022\014\n\007"
    "IAB14_6\020\334\001\022\014\n\007IAB14_7\020\335\001\022\014\n\007IAB14_8\020\336\001\022\n"
    "\n\005IAB15\020\337\001\022\014\n\007IAB15_1\020\340\001\022\014\n\007IAB15_2\020\341\001\022\014"
    "\n\007IAB15_3\020\342\001\022\014\n\007IAB15_4\020\343\001\022\014\n\007IAB15_5\020\344\001"
    "\022\014\n\007IAB15_6\020\345\001\022\014\n\007IAB15_7\020\346\001\022\014\n\007IAB15_8\020"
    "\347\001\022\014\n\007IAB15_9\020\350\001\022\r\n\010IAB15_10\020\351\001\022\n\n\005IAB16"
    "\020\352\001\022\014\n\007IAB16_1\020\353\001\022\014\n\007IAB16_2\020\354\001\022\014\n\007IAB16"
    "_3\020\355\001\022\014\n\007IAB16_4\020\356\001\022\014\n\007IAB16_5\020\357\001\022\014\n\007IAB"
    "16_6\020\360\001\022\014\n\007IAB16_7\020\361\001\022\n\n\005IAB17\020\362\001\022\014\n\007IAB"
    "17_1\020\363\001\022\014\n\007IAB17_2\020\364\001\022\014\n\007IAB17_3\020\365\001\022\014\n\007I"
    "AB17_4\020\366\001\022\014\n\007IAB17_5\020\367\001\022\014\n\007IAB17_6\020\370\001\022\014\n"
    "\007IAB17_7\020\371\001\022\014\n\007IAB17_8\020\372\001\022\014\n\007IAB17_9\020\373\001\022"
    "\r\n\010IAB17_10\020\374\001\022\r\n\010IAB17_11\020\375\001\022\r\n\010IAB17_1"
    "2\020\376\001\022\r\n\010IAB17_13\020\377\001\022\r\n\010IAB17_14\020\200\002\022\r\n\010IA"
    "B17_15\020\201\002\022\r\n\010IAB17_16\020\202\002\022\r\n\010IAB17_17\020\203\002\022"
    "\r\n\010IAB17_18\020\204\002\022\r\n\010IAB17_19\020\205\002\022\r\n\010IAB17_2"
    "0\020\206\002\022\r\n\010IAB17_21\020\207\002\022\r\n\010IAB17_22\020\210\002\022\r\n\010IA"
    "B17_23\020\211\002\022\r\n\010IAB17_24\020\212\002\022\r\n\010IAB17_25\020\213\002\022"
    "\r\n\010IAB17_26\020\214\002\022\r\n\010IAB17_27\020\215\002\022\r\n\010IAB17_2"
    "8\020\216\002\022\r\n\010IAB17_29\020\217\002\022\r\n\010IAB17_30\020\220\002\022\r\n\010IA"
    "B17_31\020\221\002\022\r\n\010IAB17_32\020\222\002\022\r\n\010IAB17_33\020\223\002\022"
    "\r\n\010IAB17_34\020\224\002\022\r\n\010IAB17_35\020\225\002\022\r\n\010IAB17_3"
    "6\020\226\002\022\r\n\010IAB17_37\020\227\002\022\r\n\010IAB17_38\020\230\002\022\r\n\010IA"
    "B17_39\020\231\002\022\r\n\010IAB17_40\020\232\002\022\r\n\010IAB17_41\020\233\002\022"
    "\r\n\010IAB17_42\020\234\002\022\r\n\010IAB17_43\020\235\002\022\r\n\010IAB17_4"
    "4\020\236\002\022\n\n\005IAB18\020\237\002\022\014\n\007IAB18_1\020\240\002\022\014\n\007IAB18_"
    "2\020\241\002\022\014\n\007IAB18_3\020\242\002\022\014\n\007IAB18_4\020\243\002\022\014\n\007IAB1"
    "8_5\020\244\002\022\014\n\007IAB18_6\020\245\002\022\n\n\005IAB19\020\246\002\022\014\n\007IAB1"
    "9_1\020\247\002\022\014\n\007IAB19_2\020\250\002\022\014\n\007IAB19_3\020\251\002\022\014\n\007IA"
    "B19_4\020\252\002\022\014\n\007IAB19_5\020\253\002\022\014\n\007IAB19_6\020\254\002\022\014\n\007"
    "IAB19_7\020\255\002\022\014\n\007IAB19_8\020\256\002\022\014\n\007IAB19_9\020\257\002\022\r"
    "\n\010IAB19_10\020\260\002\022\r\n\010IAB19_11\020\261\002\022\r\n\010IAB19_12"
    "\020\262\002\022\r\n\010IAB19_13\020\263\002\022\r\n\010IAB19_14\020\264\002\022\r\n\010IAB"
    "19_15\020\265\002\022\r\n\010IAB19_16\020\266\002\022\r\n\010IAB19_17\020\267\002\022\r"
    "\n\010IAB19_18\020\270\002\022\r\n\010IAB19_19\020\271\002\022\r\n\010IAB19_20"
    "\020\272\002\022\r\n\010IAB19_21\020\273\002\022\r\n\010IAB19_22\020\274\002\022\r\n\010IAB"
    "19_23\020\275\002\022\r\n\010IAB19_24\020\276\002\022\r\n\010IAB19_25\020\277\002\022\r"
    "\n\010IAB19_26\020\300\002\022\r\n\010IAB19_27\020\301\002\022\r\n\010IAB19_28"
    "\020\302\002\022\r\n\010IAB19_29\020\303\002\022\r\n\010IAB19_30\020\304\002\022\r\n\010IAB"
    "19_31\020\305\002\022\r\n\010IAB19_32\020\306\002\022\r\n\010IAB19_33\020\307\002\022\r"
    "\n\010IAB19_34\020\310\002\022\r\n\010IAB19_35\020\311\002\022\r\n\010IAB19_36"
    "\020\312\002\022\n\n\005IAB20\020\313\002\022\014\n\007IAB20_1\020\314\002\022\014\n\007IAB20_2"
    "\020\315\002\022\014\n\007IAB20_3\020\316\002\022\014\n\007IAB20_4\020\317\002\022\014\n\007IAB20"
    "_5\020\320\002\022\014\n\007IAB20_6\020\321\002\022\014\n\007IAB20_7\020\322\002\022\014\n\007IAB"
    "20_8\020\323\002\022\014\n\007IAB20_9\020\324\002\022\r\n\010IAB20_10\020\325\002\022\r\n\010"
    "IAB20_11\020\326\002\022\r\n\010IAB20_12\020\327\002\022\r\n\010IAB20_13\020\330"
    "\002\022\r\n\010IAB20_14\020\331\002\022\r\n\010IAB20_15\020\332\002\022\r\n\010IAB20"
    "_16\020\333\002\022\r\n\010IAB20_17\020\334\002\022\r\n\010IAB20_18\020\335\002\022\r\n\010"
    "IAB20_19\020\336\002\022\r\n\010IAB20_20\020\337\002\022\r\n\010IAB20_21\020\340"
    "\002\022\r\n\010IAB20_22\020\341\002\022\r\n\010IAB20_23\020\342\002\022\r\n\010IAB20"
    "_24\020\343\002\022\r\n\010IAB20_25\020\344\002\022\r\n\010IAB20_26\020\345\002\022\r\n\010"
    "IAB20_27\020\346\002\022\n\n\005IAB21\020\347\002\022\014\n\007IAB21_1\020\350\002\022\014\n"
    "\007IAB21_2\020\351\002\022\014\n\007IAB21_3\020\352\002\022\n\n\005IAB22\020\353\002\022\014\n"
    "\007IAB22_1\020\354\002\022\014\n\007IAB22_2\020\355\002\022\014\n\007IAB22_3\020\356\002\022"
    "\014\n\007IAB22_4\020\357\002\022\n\n\005IAB23\020\360\002\022\014\n\007IAB23_1\020\361\002\022"
    "\014\n\007IAB23_2\020\362\002\022\014\n\007IAB23_3\020\363\002\022\014\n\007IAB23_4\020\364"
    "\002\022\014\n\007IAB23_5\020\365\002\022\014\n\007IAB23_6\020\366\002\022\014\n\007IAB23_7"
    "\020\367\002\022\014\n\007IAB23_8\020\370\002\022\014\n\007IAB23_9\020\371\002\022\r\n\010IAB23"
    "_10\020\372\002\022\n\n\005IAB24\020\373\002\022\n\n\005IAB25\020\374\002\022\014\n\007IAB25_"
    "1\020\375\002\022\014\n\007IAB25_2\020\376\002\022\014\n\007IAB25_3\020\377\002\022\014\n\007IAB2"
    "5_4\020\200\003\022\014\n\007IAB25_5\020\201\003\022\014\n\007IAB25_6\020\202\003\022\014\n\007IA"
    "B25_7\020\203\003\022\n\n\005IAB26\020\204\003\022\014\n\007IAB26_1\020\205\003\022\014\n\007IA"
    "B26_2\020\206\003\022\014\n\007IAB26_3\020\207\003\022\014\n\007IAB26_4\020\210\003*\332\003\n"
    "\021CreativeAttribute\022\023\n\017AUDIO_AUTO_PLAY\020\001\022"
    "\030\n\024AUDIO_USER_INITIATED\020\002\022\030\n\024EXPANDABLE_"
    "AUTOMATIC\020\003\022\036\n\032EXPANDABLE_CLICK_INITIATE"
    "D\020\004\022!\n\035EXPANDABLE_ROLLOVER_INITIATED\020\005\022\035"
    "\n\031VIDEO_IN_BANNER_AUTO_PLAY\020\006\022\"\n\036VIDEO_I"
    "N_BANNER_USER_INITIATED\020\007\022\007\n\003POP\020\010\022\035\n\031PR"
    "OVOCATIVE_OR_SUGGESTIVE\020\t\022\014\n\010ANNOYING\020\n\022"
    "\013\n\007SURVEYS\020\013\022\r\n\tTEXT_ONLY\020\014\022\024\n\020USER_INTE"
    "RACTIVE\020\r\022!\n\035WINDOWS_DIALOG_OR_ALERT_STY"
    "LE\020\016\022\033\n\027HAS_AUDIO_ON_OFF_BUTTON\020\017\022\025\n\021AD_"
    "CAN_BE_SKIPPED\020\020\022\017\n\013ADOBE_FALSH\020\021\022\014\n\010TEX"
    "T_IMG\020\022\022\014\n\010IMG_ONLY\020\023\022\n\n\006NATIVE\020\024B\tB\007Ope"
    "nRtb", 16204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openrtb.proto", &protobuf_RegisterTypes);
  BidRequest::default_instance_ = new BidRequest();
  BidRequest_default_oneof_instance_ = new BidRequestOneofInstance();
  BidRequest_Imp::_default_bidfloorcur_ =
      new ::std::string("CNY", 3);
  BidRequest_Imp::default_instance_ = new BidRequest_Imp();
  BidRequest_Imp_Banner::default_instance_ = new BidRequest_Imp_Banner();
  BidRequest_Imp_Video::default_instance_ = new BidRequest_Imp_Video();
  BidRequest_Imp_Video_CompanionAd::default_instance_ = new BidRequest_Imp_Video_CompanionAd();
  BidRequest_Imp_Native::default_instance_ = new BidRequest_Imp_Native();
  BidRequest_Imp_Native_default_oneof_instance_ = new BidRequest_Imp_NativeOneofInstance();
  BidRequest_Imp_Pmp::default_instance_ = new BidRequest_Imp_Pmp();
  BidRequest_Imp_Pmp_Deal::_default_bidfloorcur_ =
      new ::std::string("CNY", 3);
  BidRequest_Imp_Pmp_Deal::default_instance_ = new BidRequest_Imp_Pmp_Deal();
  BidRequest_Site::default_instance_ = new BidRequest_Site();
  BidRequest_App::default_instance_ = new BidRequest_App();
  BidRequest_Publisher::default_instance_ = new BidRequest_Publisher();
  BidRequest_Content::default_instance_ = new BidRequest_Content();
  BidRequest_Producer::default_instance_ = new BidRequest_Producer();
  BidRequest_Device::default_instance_ = new BidRequest_Device();
  BidRequest_Geo::default_instance_ = new BidRequest_Geo();
  BidRequest_User::default_instance_ = new BidRequest_User();
  BidRequest_Data::default_instance_ = new BidRequest_Data();
  BidRequest_Data_Segment::default_instance_ = new BidRequest_Data_Segment();
  BidRequest_Regs::default_instance_ = new BidRequest_Regs();
  BidResponse::_default_cur_ =
      new ::std::string("CNY", 3);
  BidResponse::default_instance_ = new BidResponse();
  BidResponse_SeatBid::default_instance_ = new BidResponse_SeatBid();
  BidResponse_SeatBid_Bid::default_instance_ = new BidResponse_SeatBid_Bid();
  BidResponse_SeatBid_Bid_default_oneof_instance_ = new BidResponse_SeatBid_BidOneofInstance();
  NativeRequest::default_instance_ = new NativeRequest();
  NativeRequest_Asset::default_instance_ = new NativeRequest_Asset();
  NativeRequest_Asset_default_oneof_instance_ = new NativeRequest_AssetOneofInstance();
  NativeRequest_Asset_Title::default_instance_ = new NativeRequest_Asset_Title();
  NativeRequest_Asset_Image::default_instance_ = new NativeRequest_Asset_Image();
  NativeRequest_Asset_Data::default_instance_ = new NativeRequest_Asset_Data();
  NativeResponse::default_instance_ = new NativeResponse();
  NativeResponse_Link::default_instance_ = new NativeResponse_Link();
  NativeResponse_Asset::default_instance_ = new NativeResponse_Asset();
  NativeResponse_Asset_default_oneof_instance_ = new NativeResponse_AssetOneofInstance();
  NativeResponse_Asset_Title::default_instance_ = new NativeResponse_Asset_Title();
  NativeResponse_Asset_Image::default_instance_ = new NativeResponse_Asset_Image();
  NativeResponse_Asset_Data::default_instance_ = new NativeResponse_Asset_Data();
  NativeResponse_Asset_Video::default_instance_ = new NativeResponse_Asset_Video();
  BidRequest::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Banner::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Video::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Video_CompanionAd::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Native::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Pmp::default_instance_->InitAsDefaultInstance();
  BidRequest_Imp_Pmp_Deal::default_instance_->InitAsDefaultInstance();
  BidRequest_Site::default_instance_->InitAsDefaultInstance();
  BidRequest_App::default_instance_->InitAsDefaultInstance();
  BidRequest_Publisher::default_instance_->InitAsDefaultInstance();
  BidRequest_Content::default_instance_->InitAsDefaultInstance();
  BidRequest_Producer::default_instance_->InitAsDefaultInstance();
  BidRequest_Device::default_instance_->InitAsDefaultInstance();
  BidRequest_Geo::default_instance_->InitAsDefaultInstance();
  BidRequest_User::default_instance_->InitAsDefaultInstance();
  BidRequest_Data::default_instance_->InitAsDefaultInstance();
  BidRequest_Data_Segment::default_instance_->InitAsDefaultInstance();
  BidRequest_Regs::default_instance_->InitAsDefaultInstance();
  BidResponse::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid::default_instance_->InitAsDefaultInstance();
  BidResponse_SeatBid_Bid::default_instance_->InitAsDefaultInstance();
  NativeRequest::default_instance_->InitAsDefaultInstance();
  NativeRequest_Asset::default_instance_->InitAsDefaultInstance();
  NativeRequest_Asset_Title::default_instance_->InitAsDefaultInstance();
  NativeRequest_Asset_Image::default_instance_->InitAsDefaultInstance();
  NativeRequest_Asset_Data::default_instance_->InitAsDefaultInstance();
  NativeResponse::default_instance_->InitAsDefaultInstance();
  NativeResponse_Link::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset_Title::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset_Image::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset_Data::default_instance_->InitAsDefaultInstance();
  NativeResponse_Asset_Video::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_openrtb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_openrtb_2eproto {
  StaticDescriptorInitializer_openrtb_2eproto() {
    protobuf_AddDesc_openrtb_2eproto();
  }
} static_descriptor_initializer_openrtb_2eproto_;
const ::google::protobuf::EnumDescriptor* ContentCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentCategory_descriptor_;
}
bool ContentCategory_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 387:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CreativeAttribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreativeAttribute_descriptor_;
}
bool CreativeAttribute_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BidRequest_AuctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_AuctionType_descriptor_;
}
bool BidRequest_AuctionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_AuctionType BidRequest::FIRST_PRICE;
const BidRequest_AuctionType BidRequest::SECOND_PRICE;
const BidRequest_AuctionType BidRequest::FIXED_PRICE;
const BidRequest_AuctionType BidRequest::AuctionType_MIN;
const BidRequest_AuctionType BidRequest::AuctionType_MAX;
const int BidRequest::AuctionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_AdPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_AdPosition_descriptor_;
}
bool BidRequest_Imp_AdPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_AdPosition BidRequest_Imp::UNKNOWN;
const BidRequest_Imp_AdPosition BidRequest_Imp::ABOVE_THE_FOLD;
const BidRequest_Imp_AdPosition BidRequest_Imp::DEPRECATED_LIKELY_BELOW_THE_FOLD;
const BidRequest_Imp_AdPosition BidRequest_Imp::BELOW_THE_FOLD;
const BidRequest_Imp_AdPosition BidRequest_Imp::HEADER;
const BidRequest_Imp_AdPosition BidRequest_Imp::FOOTER;
const BidRequest_Imp_AdPosition BidRequest_Imp::SIDEBAR;
const BidRequest_Imp_AdPosition BidRequest_Imp::AD_POSITION_FULLSCREEN;
const BidRequest_Imp_AdPosition BidRequest_Imp::AdPosition_MIN;
const BidRequest_Imp_AdPosition BidRequest_Imp::AdPosition_MAX;
const int BidRequest_Imp::AdPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_APIFramework_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_APIFramework_descriptor_;
}
bool BidRequest_Imp_APIFramework_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_APIFramework BidRequest_Imp::VPAID_1;
const BidRequest_Imp_APIFramework BidRequest_Imp::VPAID_2;
const BidRequest_Imp_APIFramework BidRequest_Imp::MRAID_1;
const BidRequest_Imp_APIFramework BidRequest_Imp::ORMMA;
const BidRequest_Imp_APIFramework BidRequest_Imp::MRAID_2;
const BidRequest_Imp_APIFramework BidRequest_Imp::APIFramework_MIN;
const BidRequest_Imp_APIFramework BidRequest_Imp::APIFramework_MAX;
const int BidRequest_Imp::APIFramework_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_BannerAdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Banner_BannerAdType_descriptor_;
}
bool BidRequest_Imp_Banner_BannerAdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::XHTML_TEXT_AD;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::XHTML_BANNER_AD;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::JAVASCRIPT_AD;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::IFRAME;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::BannerAdType_MIN;
const BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::BannerAdType_MAX;
const int BidRequest_Imp_Banner::BannerAdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Banner_ExpandableDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Banner_ExpandableDirection_descriptor_;
}
bool BidRequest_Imp_Banner_ExpandableDirection_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::LEFT;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::RIGHT;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::UP;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::DOWN;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::EXPANDABLE_FULLSCREEN;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::ExpandableDirection_MIN;
const BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::ExpandableDirection_MAX;
const int BidRequest_Imp_Banner::ExpandableDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Banner::kWFieldNumber;
const int BidRequest_Imp_Banner::kHFieldNumber;
const int BidRequest_Imp_Banner::kWmaxFieldNumber;
const int BidRequest_Imp_Banner::kHmaxFieldNumber;
const int BidRequest_Imp_Banner::kWminFieldNumber;
const int BidRequest_Imp_Banner::kHminFieldNumber;
const int BidRequest_Imp_Banner::kIdFieldNumber;
const int BidRequest_Imp_Banner::kPosFieldNumber;
const int BidRequest_Imp_Banner::kBtypeFieldNumber;
const int BidRequest_Imp_Banner::kBattrFieldNumber;
const int BidRequest_Imp_Banner::kMimesFieldNumber;
const int BidRequest_Imp_Banner::kTopframeFieldNumber;
const int BidRequest_Imp_Banner::kExpdirFieldNumber;
const int BidRequest_Imp_Banner::kApiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Banner::BidRequest_Imp_Banner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Banner)
}

void BidRequest_Imp_Banner::InitAsDefaultInstance() {
}

BidRequest_Imp_Banner::BidRequest_Imp_Banner(const BidRequest_Imp_Banner& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Banner)
}

void BidRequest_Imp_Banner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  w_ = 0;
  h_ = 0;
  wmax_ = 0;
  hmax_ = 0;
  wmin_ = 0;
  hmin_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = 0;
  topframe_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Banner::~BidRequest_Imp_Banner() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Banner)
  SharedDtor();
}

void BidRequest_Imp_Banner::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Banner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Banner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Banner_descriptor_;
}

const BidRequest_Imp_Banner& BidRequest_Imp_Banner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Banner* BidRequest_Imp_Banner::default_instance_ = NULL;

BidRequest_Imp_Banner* BidRequest_Imp_Banner::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Banner* n = new BidRequest_Imp_Banner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Banner::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Imp.Banner)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Imp_Banner, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Imp_Banner*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(w_, hmin_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    pos_ = 0;
  }
  topframe_ = false;

#undef ZR_HELPER_
#undef ZR_

  btype_.Clear();
  battr_.Clear();
  mimes_.Clear();
  expdir_.Clear();
  api_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Banner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Banner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 w = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_h;
        break;
      }

      // optional int32 h = 2;
      case 2: {
        if (tag == 16) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Banner.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
      case 4: {
        if (tag == 32) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_AdPosition_IsValid(value)) {
            set_pos(static_cast< ::com::google::openrtb::BidRequest_Imp_AdPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_btype;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_btype:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_IsValid(value)) {
              add_btype(static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType >(value));
            } else {
              mutable_unknown_fields()->AddVarint(5, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 40) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_IsValid(value)) {
            add_btype(static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_battr;
        break;
      }

      // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_battr:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
              add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
            } else {
              mutable_unknown_fields()->AddVarint(6, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 48) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
            add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 7;
      case 7: {
        if (tag == 58) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Banner.mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mimes;
        if (input->ExpectTag(64)) goto parse_topframe;
        break;
      }

      // optional bool topframe = 8;
      case 8: {
        if (tag == 64) {
         parse_topframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &topframe_)));
          set_has_topframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_expdir;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_expdir:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_IsValid(value)) {
              add_expdir(static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection >(value));
            } else {
              mutable_unknown_fields()->AddVarint(9, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 72) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_IsValid(value)) {
            add_expdir(static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_api;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_api:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
              add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
            } else {
              mutable_unknown_fields()->AddVarint(10, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
            add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wmax;
        break;
      }

      // optional int32 wmax = 11;
      case 11: {
        if (tag == 88) {
         parse_wmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmax_)));
          set_has_wmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_hmax;
        break;
      }

      // optional int32 hmax = 12;
      case 12: {
        if (tag == 96) {
         parse_hmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmax_)));
          set_has_hmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_wmin;
        break;
      }

      // optional int32 wmin = 13;
      case 13: {
        if (tag == 104) {
         parse_wmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmin_)));
          set_has_wmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_hmin;
        break;
      }

      // optional int32 hmin = 14;
      case 14: {
        if (tag == 112) {
         parse_hmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmin_)));
          set_has_hmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Banner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Banner)
  return false;
#undef DO_
}

void BidRequest_Imp_Banner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Banner)
  // optional int32 w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->w(), output);
  }

  // optional int32 h = 2;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->h(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Banner.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pos(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
  if (this->btype_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_btype_cached_byte_size_);
  }
  for (int i = 0; i < this->btype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->btype(i), output);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
  if (this->battr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_battr_cached_byte_size_);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->battr(i), output);
  }

  // repeated string mimes = 7;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Banner.mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mimes(i), output);
  }

  // optional bool topframe = 8;
  if (has_topframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->topframe(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
  if (this->expdir_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_expdir_cached_byte_size_);
  }
  for (int i = 0; i < this->expdir_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->expdir(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
  if (this->api_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_api_cached_byte_size_);
  }
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->api(i), output);
  }

  // optional int32 wmax = 11;
  if (has_wmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wmax(), output);
  }

  // optional int32 hmax = 12;
  if (has_hmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hmax(), output);
  }

  // optional int32 wmin = 13;
  if (has_wmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wmin(), output);
  }

  // optional int32 hmin = 14;
  if (has_hmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hmin(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Banner)
}

::google::protobuf::uint8* BidRequest_Imp_Banner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Banner)
  // optional int32 w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->w(), target);
  }

  // optional int32 h = 2;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->h(), target);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Banner.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pos(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
  if (this->btype_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _btype_cached_byte_size_, target);
  }
  for (int i = 0; i < this->btype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->btype(i), target);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
  if (this->battr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _battr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->battr(i), target);
  }

  // repeated string mimes = 7;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Banner.mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->mimes(i), target);
  }

  // optional bool topframe = 8;
  if (has_topframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->topframe(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
  if (this->expdir_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _expdir_cached_byte_size_, target);
  }
  for (int i = 0; i < this->expdir_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->expdir(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
  if (this->api_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _api_cached_byte_size_, target);
  }
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->api(i), target);
  }

  // optional int32 wmax = 11;
  if (has_wmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wmax(), target);
  }

  // optional int32 hmax = 12;
  if (has_hmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hmax(), target);
  }

  // optional int32 wmin = 13;
  if (has_wmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wmin(), target);
  }

  // optional int32 hmin = 14;
  if (has_hmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hmin(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Banner)
  return target;
}

int BidRequest_Imp_Banner::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Imp.Banner)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 w = 1;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 2;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 wmax = 11;
    if (has_wmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmax());
    }

    // optional int32 hmax = 12;
    if (has_hmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmax());
    }

    // optional int32 wmin = 13;
    if (has_wmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmin());
    }

    // optional int32 hmin = 14;
    if (has_hmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmin());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

  }
  // optional bool topframe = 8;
  if (has_topframe()) {
    total_size += 1 + 1;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->btype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->btype(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _btype_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->battr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _battr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string mimes = 7;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->expdir_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->expdir(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _expdir_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->api(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _api_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Banner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Imp.Banner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Banner* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Banner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Imp.Banner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Imp.Banner)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Banner::MergeFrom(const BidRequest_Imp_Banner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Imp.Banner)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  btype_.MergeFrom(from.btype_);
  battr_.MergeFrom(from.battr_);
  mimes_.MergeFrom(from.mimes_);
  expdir_.MergeFrom(from.expdir_);
  api_.MergeFrom(from.api_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_wmax()) {
      set_wmax(from.wmax());
    }
    if (from.has_hmax()) {
      set_hmax(from.hmax());
    }
    if (from.has_wmin()) {
      set_wmin(from.wmin());
    }
    if (from.has_hmin()) {
      set_hmin(from.hmin());
    }
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_topframe()) {
      set_topframe(from.topframe());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Banner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Imp.Banner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Banner::CopyFrom(const BidRequest_Imp_Banner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Imp.Banner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Banner::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Banner::Swap(BidRequest_Imp_Banner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Banner::InternalSwap(BidRequest_Imp_Banner* other) {
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(wmax_, other->wmax_);
  std::swap(hmax_, other->hmax_);
  std::swap(wmin_, other->wmin_);
  std::swap(hmin_, other->hmin_);
  id_.Swap(&other->id_);
  std::swap(pos_, other->pos_);
  btype_.UnsafeArenaSwap(&other->btype_);
  battr_.UnsafeArenaSwap(&other->battr_);
  mimes_.UnsafeArenaSwap(&other->mimes_);
  std::swap(topframe_, other->topframe_);
  expdir_.UnsafeArenaSwap(&other->expdir_);
  api_.UnsafeArenaSwap(&other->api_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Imp_Banner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Banner_descriptor_;
  metadata.reflection = BidRequest_Imp_Banner_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoLinearity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VideoLinearity_descriptor_;
}
bool BidRequest_Imp_Video_VideoLinearity_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::LINEAR;
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::NON_LINEAR;
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::VideoLinearity_MIN;
const BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::VideoLinearity_MAX;
const int BidRequest_Imp_Video::VideoLinearity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VideoBidResponseProtocol_descriptor_;
}
bool BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_1_0;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_2_0;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_3_0;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_1_0_WRAPPER;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_2_0_WRAPPER;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VAST_3_0_WRAPPER;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VideoBidResponseProtocol_MIN;
const BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::VideoBidResponseProtocol_MAX;
const int BidRequest_Imp_Video::VideoBidResponseProtocol_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoPlaybackMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VideoPlaybackMethod_descriptor_;
}
bool BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::AUTO_PLAY_SOUND_ON;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::AUTO_PLAY_SOUND_OFF;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::CLICK_TO_PLAY;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::MOUSE_OVER;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::VideoPlaybackMethod_MIN;
const BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::VideoPlaybackMethod_MAX;
const int BidRequest_Imp_Video::VideoPlaybackMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VideoStartDelay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VideoStartDelay_descriptor_;
}
bool BidRequest_Imp_Video_VideoStartDelay_IsValid(int value) {
  switch(value) {
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::PRE_ROLL;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::GENERIC_MID_ROLL;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::GENERIC_POST_ROLL;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::VideoStartDelay_MIN;
const BidRequest_Imp_Video_VideoStartDelay BidRequest_Imp_Video::VideoStartDelay_MAX;
const int BidRequest_Imp_Video::VideoStartDelay_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_VASTCompanionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_VASTCompanionType_descriptor_;
}
bool BidRequest_Imp_Video_VASTCompanionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::STATIC;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::HTML;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::COMPANION_IFRAME;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::VASTCompanionType_MIN;
const BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::VASTCompanionType_MAX;
const int BidRequest_Imp_Video::VASTCompanionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Imp_Video_ContentDeliveryMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_ContentDeliveryMethod_descriptor_;
}
bool BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::STREAMING;
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::PROGRESSIVE;
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::ContentDeliveryMethod_MIN;
const BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::ContentDeliveryMethod_MAX;
const int BidRequest_Imp_Video::ContentDeliveryMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Video_CompanionAd::kBannerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Video_CompanionAd::BidRequest_Imp_Video_CompanionAd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
}

void BidRequest_Imp_Video_CompanionAd::InitAsDefaultInstance() {
}

BidRequest_Imp_Video_CompanionAd::BidRequest_Imp_Video_CompanionAd(const BidRequest_Imp_Video_CompanionAd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
}

void BidRequest_Imp_Video_CompanionAd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Video_CompanionAd::~BidRequest_Imp_Video_CompanionAd() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  SharedDtor();
}

void BidRequest_Imp_Video_CompanionAd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Video_CompanionAd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Video_CompanionAd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_CompanionAd_descriptor_;
}

const BidRequest_Imp_Video_CompanionAd& BidRequest_Imp_Video_CompanionAd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Video_CompanionAd* BidRequest_Imp_Video_CompanionAd::default_instance_ = NULL;

BidRequest_Imp_Video_CompanionAd* BidRequest_Imp_Video_CompanionAd::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Video_CompanionAd* n = new BidRequest_Imp_Video_CompanionAd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Video_CompanionAd::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  _extensions_.Clear();
  banner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Video_CompanionAd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_banner;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  return false;
#undef DO_
}

void BidRequest_Imp_Video_CompanionAd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
  for (unsigned int i = 0, n = this->banner_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->banner(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
}

::google::protobuf::uint8* BidRequest_Imp_Video_CompanionAd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
  for (unsigned int i = 0, n = this->banner_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->banner(i), false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  return target;
}

int BidRequest_Imp_Video_CompanionAd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  int total_size = 0;

  // repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
  total_size += 1 * this->banner_size();
  for (int i = 0; i < this->banner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->banner(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Video_CompanionAd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Video_CompanionAd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Video_CompanionAd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Video_CompanionAd::MergeFrom(const BidRequest_Imp_Video_CompanionAd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  banner_.MergeFrom(from.banner_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Video_CompanionAd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Video_CompanionAd::CopyFrom(const BidRequest_Imp_Video_CompanionAd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Imp.Video.CompanionAd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Video_CompanionAd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->banner())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Video_CompanionAd::Swap(BidRequest_Imp_Video_CompanionAd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Video_CompanionAd::InternalSwap(BidRequest_Imp_Video_CompanionAd* other) {
  banner_.UnsafeArenaSwap(&other->banner_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Imp_Video_CompanionAd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Video_CompanionAd_descriptor_;
  metadata.reflection = BidRequest_Imp_Video_CompanionAd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Video::kMimesFieldNumber;
const int BidRequest_Imp_Video::kLinearityFieldNumber;
const int BidRequest_Imp_Video::kMindurationFieldNumber;
const int BidRequest_Imp_Video::kMaxdurationFieldNumber;
const int BidRequest_Imp_Video::kProtocolFieldNumber;
const int BidRequest_Imp_Video::kProtocolsFieldNumber;
const int BidRequest_Imp_Video::kWFieldNumber;
const int BidRequest_Imp_Video::kHFieldNumber;
const int BidRequest_Imp_Video::kStartdelayFieldNumber;
const int BidRequest_Imp_Video::kSequenceFieldNumber;
const int BidRequest_Imp_Video::kBattrFieldNumber;
const int BidRequest_Imp_Video::kMaxextendedFieldNumber;
const int BidRequest_Imp_Video::kMinbitrateFieldNumber;
const int BidRequest_Imp_Video::kMaxbitrateFieldNumber;
const int BidRequest_Imp_Video::kBoxingallowedFieldNumber;
const int BidRequest_Imp_Video::kPlaybackmethodFieldNumber;
const int BidRequest_Imp_Video::kDeliveryFieldNumber;
const int BidRequest_Imp_Video::kPosFieldNumber;
const int BidRequest_Imp_Video::kCompanionadFieldNumber;
const int BidRequest_Imp_Video::kCompanionad21FieldNumber;
const int BidRequest_Imp_Video::kApiFieldNumber;
const int BidRequest_Imp_Video::kCompaniontypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Video::BidRequest_Imp_Video()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Video)
}

void BidRequest_Imp_Video::InitAsDefaultInstance() {
  companionad_21_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd*>(&::com::google::openrtb::BidRequest_Imp_Video_CompanionAd::default_instance());
}

BidRequest_Imp_Video::BidRequest_Imp_Video(const BidRequest_Imp_Video& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Video)
}

void BidRequest_Imp_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  linearity_ = 1;
  minduration_ = 0;
  maxduration_ = 0;
  protocol_ = 1;
  w_ = 0;
  h_ = 0;
  startdelay_ = 0;
  sequence_ = 1;
  maxextended_ = 0;
  minbitrate_ = 0;
  maxbitrate_ = 0;
  boxingallowed_ = true;
  pos_ = 0;
  companionad_21_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Video::~BidRequest_Imp_Video() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Video)
  SharedDtor();
}

void BidRequest_Imp_Video::SharedDtor() {
  if (this != default_instance_) {
    delete companionad_21_;
  }
}

void BidRequest_Imp_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Video_descriptor_;
}

const BidRequest_Imp_Video& BidRequest_Imp_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Video* BidRequest_Imp_Video::default_instance_ = NULL;

BidRequest_Imp_Video* BidRequest_Imp_Video::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Video* n = new BidRequest_Imp_Video;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Video::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Imp.Video)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Imp_Video, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Imp_Video*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 222u) {
    ZR_(minduration_, maxduration_);
    ZR_(w_, h_);
    linearity_ = 1;
    protocol_ = 1;
  }
  if (_has_bits_[8 / 32] & 31488u) {
    ZR_(maxextended_, maxbitrate_);
    startdelay_ = 0;
    sequence_ = 1;
    boxingallowed_ = true;
  }
  if (_has_bits_[16 / 32] & 655360u) {
    pos_ = 0;
    if (has_companionad_21()) {
      if (companionad_21_ != NULL) companionad_21_->::com::google::openrtb::BidRequest_Imp_Video_CompanionAd::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  mimes_.Clear();
  protocols_.Clear();
  battr_.Clear();
  playbackmethod_.Clear();
  delivery_.Clear();
  companionad_.Clear();
  api_.Clear();
  companiontype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mimes = 1;
      case 1: {
        if (tag == 10) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Video.mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mimes;
        if (input->ExpectTag(16)) goto parse_linearity;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
      case 2: {
        if (tag == 16) {
         parse_linearity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity_IsValid(value)) {
            set_linearity(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minduration;
        break;
      }

      // optional int32 minduration = 3;
      case 3: {
        if (tag == 24) {
         parse_minduration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minduration_)));
          set_has_minduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxduration;
        break;
      }

      // optional int32 maxduration = 4;
      case 4: {
        if (tag == 32) {
         parse_maxduration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxduration_)));
          set_has_maxduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_protocol;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
      case 5: {
        if (tag == 40) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value)) {
            set_protocol(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_w;
        break;
      }

      // optional int32 w = 6;
      case 6: {
        if (tag == 48) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_h;
        break;
      }

      // optional int32 h = 7;
      case 7: {
        if (tag == 56) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_startdelay;
        break;
      }

      // optional int32 startdelay = 8;
      case 8: {
        if (tag == 64) {
         parse_startdelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startdelay_)));
          set_has_startdelay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sequence;
        break;
      }

      // optional int32 sequence = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_battr;
        break;
      }

      // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_battr:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
              add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
            } else {
              mutable_unknown_fields()->AddVarint(10, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
            add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_maxextended;
        break;
      }

      // optional int32 maxextended = 11;
      case 11: {
        if (tag == 88) {
         parse_maxextended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxextended_)));
          set_has_maxextended();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_minbitrate;
        break;
      }

      // optional int32 minbitrate = 12;
      case 12: {
        if (tag == 96) {
         parse_minbitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minbitrate_)));
          set_has_minbitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxbitrate;
        break;
      }

      // optional int32 maxbitrate = 13;
      case 13: {
        if (tag == 104) {
         parse_maxbitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbitrate_)));
          set_has_maxbitrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_boxingallowed;
        break;
      }

      // optional bool boxingallowed = 14 [default = true];
      case 14: {
        if (tag == 112) {
         parse_boxingallowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boxingallowed_)));
          set_has_boxingallowed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_playbackmethod;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
      case 15: {
        if (tag == 122) {
         parse_playbackmethod:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value)) {
              add_playbackmethod(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod >(value));
            } else {
              mutable_unknown_fields()->AddVarint(15, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 120) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value)) {
            add_playbackmethod(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_delivery;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
      case 16: {
        if (tag == 130) {
         parse_delivery:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value)) {
              add_delivery(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod >(value));
            } else {
              mutable_unknown_fields()->AddVarint(16, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 128) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value)) {
            add_delivery(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_pos;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
      case 17: {
        if (tag == 136) {
         parse_pos:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_AdPosition_IsValid(value)) {
            set_pos(static_cast< ::com::google::openrtb::BidRequest_Imp_AdPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_companionad;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
      case 18: {
        if (tag == 146) {
         parse_companionad:
          DO_(input->IncrementRecursionDepth());
         parse_loop_companionad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_companionad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_companionad;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(154)) goto parse_api;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
      case 19: {
        if (tag == 154) {
         parse_api:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
              add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
            } else {
              mutable_unknown_fields()->AddVarint(19, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 152) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
            add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_companiontype;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
      case 20: {
        if (tag == 162) {
         parse_companiontype:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_IsValid(value)) {
              add_companiontype(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType >(value));
            } else {
              mutable_unknown_fields()->AddVarint(20, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 160) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_IsValid(value)) {
            add_companiontype(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_protocols;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
      case 21: {
        if (tag == 170) {
         parse_protocols:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value)) {
              add_protocols(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(value));
            } else {
              mutable_unknown_fields()->AddVarint(21, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 168) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value)) {
            add_protocols(static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_companionad_21;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
      case 22: {
        if (tag == 178) {
         parse_companionad_21:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_companionad_21()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Video)
  return false;
#undef DO_
}

void BidRequest_Imp_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Video)
  // repeated string mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Video.mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mimes(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
  if (has_linearity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->linearity(), output);
  }

  // optional int32 minduration = 3;
  if (has_minduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minduration(), output);
  }

  // optional int32 maxduration = 4;
  if (has_maxduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxduration(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->protocol(), output);
  }

  // optional int32 w = 6;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->w(), output);
  }

  // optional int32 h = 7;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->h(), output);
  }

  // optional int32 startdelay = 8;
  if (has_startdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->startdelay(), output);
  }

  // optional int32 sequence = 9 [default = 1];
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sequence(), output);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
  if (this->battr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_battr_cached_byte_size_);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->battr(i), output);
  }

  // optional int32 maxextended = 11;
  if (has_maxextended()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxextended(), output);
  }

  // optional int32 minbitrate = 12;
  if (has_minbitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->minbitrate(), output);
  }

  // optional int32 maxbitrate = 13;
  if (has_maxbitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxbitrate(), output);
  }

  // optional bool boxingallowed = 14 [default = true];
  if (has_boxingallowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->boxingallowed(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
  if (this->playbackmethod_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_playbackmethod_cached_byte_size_);
  }
  for (int i = 0; i < this->playbackmethod_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->playbackmethod(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
  if (this->delivery_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_delivery_cached_byte_size_);
  }
  for (int i = 0; i < this->delivery_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->delivery(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->pos(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
  for (unsigned int i = 0, n = this->companionad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->companionad(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
  if (this->api_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_api_cached_byte_size_);
  }
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->api(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
  if (this->companiontype_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_companiontype_cached_byte_size_);
  }
  for (int i = 0; i < this->companiontype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->companiontype(i), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
  if (this->protocols_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_protocols_cached_byte_size_);
  }
  for (int i = 0; i < this->protocols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->protocols(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
  if (has_companionad_21()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->companionad_21_, output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Video)
}

::google::protobuf::uint8* BidRequest_Imp_Video::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Video)
  // repeated string mimes = 1;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Video.mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->mimes(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
  if (has_linearity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->linearity(), target);
  }

  // optional int32 minduration = 3;
  if (has_minduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->minduration(), target);
  }

  // optional int32 maxduration = 4;
  if (has_maxduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxduration(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->protocol(), target);
  }

  // optional int32 w = 6;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->w(), target);
  }

  // optional int32 h = 7;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->h(), target);
  }

  // optional int32 startdelay = 8;
  if (has_startdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->startdelay(), target);
  }

  // optional int32 sequence = 9 [default = 1];
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sequence(), target);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
  if (this->battr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _battr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->battr(i), target);
  }

  // optional int32 maxextended = 11;
  if (has_maxextended()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxextended(), target);
  }

  // optional int32 minbitrate = 12;
  if (has_minbitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->minbitrate(), target);
  }

  // optional int32 maxbitrate = 13;
  if (has_maxbitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxbitrate(), target);
  }

  // optional bool boxingallowed = 14 [default = true];
  if (has_boxingallowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->boxingallowed(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
  if (this->playbackmethod_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _playbackmethod_cached_byte_size_, target);
  }
  for (int i = 0; i < this->playbackmethod_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->playbackmethod(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
  if (this->delivery_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _delivery_cached_byte_size_, target);
  }
  for (int i = 0; i < this->delivery_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->delivery(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->pos(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
  for (unsigned int i = 0, n = this->companionad_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->companionad(i), false, target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
  if (this->api_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _api_cached_byte_size_, target);
  }
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->api(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
  if (this->companiontype_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _companiontype_cached_byte_size_, target);
  }
  for (int i = 0; i < this->companiontype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->companiontype(i), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
  if (this->protocols_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      21,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _protocols_cached_byte_size_, target);
  }
  for (int i = 0; i < this->protocols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->protocols(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
  if (has_companionad_21()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->companionad_21_, false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Video)
  return target;
}

int BidRequest_Imp_Video::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Imp.Video)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 222u) {
    // optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
    if (has_linearity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->linearity());
    }

    // optional int32 minduration = 3;
    if (has_minduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minduration());
    }

    // optional int32 maxduration = 4;
    if (has_maxduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxduration());
    }

    // optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // optional int32 w = 6;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 7;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  if (_has_bits_[8 / 32] & 31488u) {
    // optional int32 startdelay = 8;
    if (has_startdelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startdelay());
    }

    // optional int32 sequence = 9 [default = 1];
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional int32 maxextended = 11;
    if (has_maxextended()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxextended());
    }

    // optional int32 minbitrate = 12;
    if (has_minbitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minbitrate());
    }

    // optional int32 maxbitrate = 13;
    if (has_maxbitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbitrate());
    }

    // optional bool boxingallowed = 14 [default = true];
    if (has_boxingallowed()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[17 / 32] & 655360u) {
    // optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
    if (has_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pos());
    }

    // optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
    if (has_companionad_21()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->companionad_21_);
    }

  }
  // repeated string mimes = 1;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->protocols_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->protocols(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _protocols_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->battr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _battr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->playbackmethod_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->playbackmethod(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _playbackmethod_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->delivery_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->delivery(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _delivery_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
  total_size += 2 * this->companionad_size();
  for (int i = 0; i < this->companionad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->companionad(i));
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->api(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _api_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->companiontype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->companiontype(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _companiontype_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Video::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Imp.Video)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Video* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Video>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Imp.Video)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Imp.Video)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Video::MergeFrom(const BidRequest_Imp_Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Imp.Video)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mimes_.MergeFrom(from.mimes_);
  protocols_.MergeFrom(from.protocols_);
  battr_.MergeFrom(from.battr_);
  playbackmethod_.MergeFrom(from.playbackmethod_);
  delivery_.MergeFrom(from.delivery_);
  companionad_.MergeFrom(from.companionad_);
  api_.MergeFrom(from.api_);
  companiontype_.MergeFrom(from.companiontype_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_linearity()) {
      set_linearity(from.linearity());
    }
    if (from.has_minduration()) {
      set_minduration(from.minduration());
    }
    if (from.has_maxduration()) {
      set_maxduration(from.maxduration());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_startdelay()) {
      set_startdelay(from.startdelay());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_maxextended()) {
      set_maxextended(from.maxextended());
    }
    if (from.has_minbitrate()) {
      set_minbitrate(from.minbitrate());
    }
    if (from.has_maxbitrate()) {
      set_maxbitrate(from.maxbitrate());
    }
    if (from.has_boxingallowed()) {
      set_boxingallowed(from.boxingallowed());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_companionad_21()) {
      mutable_companionad_21()->::com::google::openrtb::BidRequest_Imp_Video_CompanionAd::MergeFrom(from.companionad_21());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Video::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Imp.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Video::CopyFrom(const BidRequest_Imp_Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Imp.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Video::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->companionad())) return false;
  if (has_companionad_21()) {
    if (!this->companionad_21_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Video::Swap(BidRequest_Imp_Video* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Video::InternalSwap(BidRequest_Imp_Video* other) {
  mimes_.UnsafeArenaSwap(&other->mimes_);
  std::swap(linearity_, other->linearity_);
  std::swap(minduration_, other->minduration_);
  std::swap(maxduration_, other->maxduration_);
  std::swap(protocol_, other->protocol_);
  protocols_.UnsafeArenaSwap(&other->protocols_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(startdelay_, other->startdelay_);
  std::swap(sequence_, other->sequence_);
  battr_.UnsafeArenaSwap(&other->battr_);
  std::swap(maxextended_, other->maxextended_);
  std::swap(minbitrate_, other->minbitrate_);
  std::swap(maxbitrate_, other->maxbitrate_);
  std::swap(boxingallowed_, other->boxingallowed_);
  playbackmethod_.UnsafeArenaSwap(&other->playbackmethod_);
  delivery_.UnsafeArenaSwap(&other->delivery_);
  std::swap(pos_, other->pos_);
  companionad_.UnsafeArenaSwap(&other->companionad_);
  std::swap(companionad_21_, other->companionad_21_);
  api_.UnsafeArenaSwap(&other->api_);
  companiontype_.UnsafeArenaSwap(&other->companiontype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Imp_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Video_descriptor_;
  metadata.reflection = BidRequest_Imp_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Native::kRequestFieldNumber;
const int BidRequest_Imp_Native::kRequestNativeFieldNumber;
const int BidRequest_Imp_Native::kVerFieldNumber;
const int BidRequest_Imp_Native::kApiFieldNumber;
const int BidRequest_Imp_Native::kBattrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Native::BidRequest_Imp_Native()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Native)
}

void BidRequest_Imp_Native::InitAsDefaultInstance() {
  BidRequest_Imp_Native_default_oneof_instance_->request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  BidRequest_Imp_Native_default_oneof_instance_->request_native_ = const_cast< ::com::google::openrtb::NativeRequest*>(&::com::google::openrtb::NativeRequest::default_instance());
}

BidRequest_Imp_Native::BidRequest_Imp_Native(const BidRequest_Imp_Native& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Native)
}

void BidRequest_Imp_Native::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_request_oneof();
}

BidRequest_Imp_Native::~BidRequest_Imp_Native() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Native)
  SharedDtor();
}

void BidRequest_Imp_Native::SharedDtor() {
  ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_request_oneof()) {
    clear_request_oneof();
  }
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Native::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Native::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Native_descriptor_;
}

const BidRequest_Imp_Native& BidRequest_Imp_Native::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Native* BidRequest_Imp_Native::default_instance_ = NULL;

BidRequest_Imp_Native* BidRequest_Imp_Native::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Native* n = new BidRequest_Imp_Native;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Native::clear_request_oneof() {
// @@protoc_insertion_point(one_of_clear_start:com.google.openrtb.BidRequest.Imp.Native)
  switch(request_oneof_case()) {
    case kRequest: {
      request_oneof_.request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRequestNative: {
      delete request_oneof_.request_native_;
      break;
    }
    case REQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_ONEOF_NOT_SET;
}


void BidRequest_Imp_Native::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Imp.Native)
  _extensions_.Clear();
  if (has_ver()) {
    ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  api_.Clear();
  battr_.Clear();
  clear_request_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Native::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Native)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request().data(), this->request().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Native.request");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ver;
        break;
      }

      // optional string ver = 2;
      case 2: {
        if (tag == 18) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Native.ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_api;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_api:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
              add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
            } else {
              mutable_unknown_fields()->AddVarint(3, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 24) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value)) {
            add_api(static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_battr;
        break;
      }

      // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_battr:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
              add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
            } else {
              mutable_unknown_fields()->AddVarint(4, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 32) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
            add_battr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_request_native;
        break;
      }

      // optional .com.google.openrtb.NativeRequest request_native = 50;
      case 50: {
        if (tag == 402) {
         parse_request_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Native)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Native)
  return false;
#undef DO_
}

void BidRequest_Imp_Native::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Native)
  // optional string request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Native.request");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request(), output);
  }

  // optional string ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Native.ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ver(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
  if (this->api_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_api_cached_byte_size_);
  }
  for (int i = 0; i < this->api_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->api(i), output);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
  if (this->battr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_battr_cached_byte_size_);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->battr(i), output);
  }

  // optional .com.google.openrtb.NativeRequest request_native = 50;
  if (has_request_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *request_oneof_.request_native_, output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Native)
}

::google::protobuf::uint8* BidRequest_Imp_Native::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Native)
  // optional string request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Native.request");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request(), target);
  }

  // optional string ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Native.ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ver(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
  if (this->api_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _api_cached_byte_size_, target);
  }
  for (int i = 0; i < this->api_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->api(i), target);
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
  if (this->battr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _battr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->battr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->battr(i), target);
  }

  // optional .com.google.openrtb.NativeRequest request_native = 50;
  if (has_request_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *request_oneof_.request_native_, false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Native)
  return target;
}

int BidRequest_Imp_Native::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Imp.Native)
  int total_size = 0;

  // optional string ver = 2;
  if (has_ver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ver());
  }

  // repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->api_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->api(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _api_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->battr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->battr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _battr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (request_oneof_case()) {
    // optional string request = 1;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request());
      break;
    }
    // optional .com.google.openrtb.NativeRequest request_native = 50;
    case kRequestNative: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_oneof_.request_native_);
      break;
    }
    case REQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Native::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Imp.Native)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Native* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Native>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Imp.Native)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Imp.Native)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Native::MergeFrom(const BidRequest_Imp_Native& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Imp.Native)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  api_.MergeFrom(from.api_);
  battr_.MergeFrom(from.battr_);
  switch (from.request_oneof_case()) {
    case kRequest: {
      set_request(from.request());
      break;
    }
    case kRequestNative: {
      mutable_request_native()->::com::google::openrtb::NativeRequest::MergeFrom(from.request_native());
      break;
    }
    case REQUEST_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_ver()) {
      set_has_ver();
      ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ver_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Native::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Imp.Native)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Native::CopyFrom(const BidRequest_Imp_Native& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Imp.Native)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Native::IsInitialized() const {

  if (has_request_native()) {
    if (!this->request_native().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Native::Swap(BidRequest_Imp_Native* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Native::InternalSwap(BidRequest_Imp_Native* other) {
  ver_.Swap(&other->ver_);
  api_.UnsafeArenaSwap(&other->api_);
  battr_.UnsafeArenaSwap(&other->battr_);
  std::swap(request_oneof_, other->request_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Imp_Native::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Native_descriptor_;
  metadata.reflection = BidRequest_Imp_Native_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* BidRequest_Imp_Pmp_Deal::_default_bidfloorcur_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Pmp_Deal::kIdFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kBidfloorFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kBidfloorcurFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kWseatFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kWadomainFieldNumber;
const int BidRequest_Imp_Pmp_Deal::kAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Pmp_Deal::BidRequest_Imp_Pmp_Deal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
}

void BidRequest_Imp_Pmp_Deal::InitAsDefaultInstance() {
}

BidRequest_Imp_Pmp_Deal::BidRequest_Imp_Pmp_Deal(const BidRequest_Imp_Pmp_Deal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
}

void BidRequest_Imp_Pmp_Deal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0;
  bidfloorcur_.UnsafeSetDefault(_default_bidfloorcur_);
  at_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Pmp_Deal::~BidRequest_Imp_Pmp_Deal() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  SharedDtor();
}

void BidRequest_Imp_Pmp_Deal::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloorcur_.DestroyNoArena(_default_bidfloorcur_);
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Pmp_Deal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp_Deal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Pmp_Deal_descriptor_;
}

const BidRequest_Imp_Pmp_Deal& BidRequest_Imp_Pmp_Deal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp_Deal::default_instance_ = NULL;

BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp_Deal::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Pmp_Deal* n = new BidRequest_Imp_Pmp_Deal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Pmp_Deal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 39u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bidfloor_ = 0;
    if (has_bidfloorcur()) {
      bidfloorcur_.ClearToDefaultNoArena(_default_bidfloorcur_);
    }
    at_ = 1;
  }
  wseat_.Clear();
  wadomain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Pmp_Deal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Pmp.Deal.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_bidfloor;
        break;
      }

      // optional double bidfloor = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bidfloorcur;
        break;
      }

      // optional string bidfloorcur = 3 [default = "CNY"];
      case 3: {
        if (tag == 26) {
         parse_bidfloorcur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidfloorcur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidfloorcur().data(), this->bidfloorcur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wseat;
        break;
      }

      // repeated string wseat = 4;
      case 4: {
        if (tag == 34) {
         parse_wseat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wseat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wseat(this->wseat_size() - 1).data(),
            this->wseat(this->wseat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wseat;
        if (input->ExpectTag(42)) goto parse_wadomain;
        break;
      }

      // repeated string wadomain = 5;
      case 5: {
        if (tag == 42) {
         parse_wadomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wadomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wadomain(this->wadomain_size() - 1).data(),
            this->wadomain(this->wadomain_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_wadomain;
        if (input->ExpectTag(48)) goto parse_at;
        break;
      }

      // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
      case 6: {
        if (tag == 48) {
         parse_at:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_AuctionType_IsValid(value)) {
            set_at(static_cast< ::com::google::openrtb::BidRequest_AuctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  return false;
#undef DO_
}

void BidRequest_Imp_Pmp_Deal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Pmp.Deal.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double bidfloor = 2 [default = 0];
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bidfloor(), output);
  }

  // optional string bidfloorcur = 3 [default = "CNY"];
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bidfloorcur(), output);
  }

  // repeated string wseat = 4;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->wseat(i), output);
  }

  // repeated string wadomain = 5;
  for (int i = 0; i < this->wadomain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wadomain(i).data(), this->wadomain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wadomain(i), output);
  }

  // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->at(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
}

::google::protobuf::uint8* BidRequest_Imp_Pmp_Deal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Pmp.Deal.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double bidfloor = 2 [default = 0];
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bidfloor(), target);
  }

  // optional string bidfloorcur = 3 [default = "CNY"];
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bidfloorcur(), target);
  }

  // repeated string wseat = 4;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->wseat(i), target);
  }

  // repeated string wadomain = 5;
  for (int i = 0; i < this->wadomain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wadomain(i).data(), this->wadomain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->wadomain(i), target);
  }

  // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->at(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  return target;
}

int BidRequest_Imp_Pmp_Deal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 38u) {
    // optional double bidfloor = 2 [default = 0];
    if (has_bidfloor()) {
      total_size += 1 + 8;
    }

    // optional string bidfloorcur = 3 [default = "CNY"];
    if (has_bidfloorcur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidfloorcur());
    }

    // optional .com.google.openrtb.BidRequest.AuctionType at = 6;
    if (has_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->at());
    }

  }
  // repeated string wseat = 4;
  total_size += 1 * this->wseat_size();
  for (int i = 0; i < this->wseat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wseat(i));
  }

  // repeated string wadomain = 5;
  total_size += 1 * this->wadomain_size();
  for (int i = 0; i < this->wadomain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wadomain(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Pmp_Deal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Pmp_Deal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Pmp_Deal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Pmp_Deal::MergeFrom(const BidRequest_Imp_Pmp_Deal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  wseat_.MergeFrom(from.wseat_);
  wadomain_.MergeFrom(from.wadomain_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
    if (from.has_bidfloorcur()) {
      set_has_bidfloorcur();
      bidfloorcur_.AssignWithDefault(_default_bidfloorcur_, from.bidfloorcur_);
    }
    if (from.has_at()) {
      set_at(from.at());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Pmp_Deal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Pmp_Deal::CopyFrom(const BidRequest_Imp_Pmp_Deal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Imp.Pmp.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Pmp_Deal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Pmp_Deal::Swap(BidRequest_Imp_Pmp_Deal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Pmp_Deal::InternalSwap(BidRequest_Imp_Pmp_Deal* other) {
  id_.Swap(&other->id_);
  std::swap(bidfloor_, other->bidfloor_);
  bidfloorcur_.Swap(&other->bidfloorcur_);
  wseat_.UnsafeArenaSwap(&other->wseat_);
  wadomain_.UnsafeArenaSwap(&other->wadomain_);
  std::swap(at_, other->at_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Imp_Pmp_Deal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Pmp_Deal_descriptor_;
  metadata.reflection = BidRequest_Imp_Pmp_Deal_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp_Pmp::kPrivateAuctionFieldNumber;
const int BidRequest_Imp_Pmp::kDealsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp_Pmp::BidRequest_Imp_Pmp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp.Pmp)
}

void BidRequest_Imp_Pmp::InitAsDefaultInstance() {
}

BidRequest_Imp_Pmp::BidRequest_Imp_Pmp(const BidRequest_Imp_Pmp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp.Pmp)
}

void BidRequest_Imp_Pmp::SharedCtor() {
  _cached_size_ = 0;
  private_auction_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp_Pmp::~BidRequest_Imp_Pmp() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp.Pmp)
  SharedDtor();
}

void BidRequest_Imp_Pmp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Imp_Pmp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp_Pmp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_Pmp_descriptor_;
}

const BidRequest_Imp_Pmp& BidRequest_Imp_Pmp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp_Pmp* BidRequest_Imp_Pmp::default_instance_ = NULL;

BidRequest_Imp_Pmp* BidRequest_Imp_Pmp::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp_Pmp* n = new BidRequest_Imp_Pmp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp_Pmp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Imp.Pmp)
  _extensions_.Clear();
  private_auction_ = false;
  deals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp_Pmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp.Pmp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool private_auction = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private_auction_)));
          set_has_private_auction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deals;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
      case 2: {
        if (tag == 18) {
         parse_deals:
          DO_(input->IncrementRecursionDepth());
         parse_loop_deals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_deals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_deals;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp.Pmp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp.Pmp)
  return false;
#undef DO_
}

void BidRequest_Imp_Pmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp.Pmp)
  // optional bool private_auction = 1;
  if (has_private_auction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->private_auction(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
  for (unsigned int i = 0, n = this->deals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->deals(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp.Pmp)
}

::google::protobuf::uint8* BidRequest_Imp_Pmp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp.Pmp)
  // optional bool private_auction = 1;
  if (has_private_auction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->private_auction(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
  for (unsigned int i = 0, n = this->deals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->deals(i), false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp.Pmp)
  return target;
}

int BidRequest_Imp_Pmp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Imp.Pmp)
  int total_size = 0;

  // optional bool private_auction = 1;
  if (has_private_auction()) {
    total_size += 1 + 1;
  }

  // repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
  total_size += 1 * this->deals_size();
  for (int i = 0; i < this->deals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deals(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp_Pmp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Imp.Pmp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp_Pmp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp_Pmp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Imp.Pmp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Imp.Pmp)
    MergeFrom(*source);
  }
}

void BidRequest_Imp_Pmp::MergeFrom(const BidRequest_Imp_Pmp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Imp.Pmp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  deals_.MergeFrom(from.deals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_auction()) {
      set_private_auction(from.private_auction());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp_Pmp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Imp.Pmp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp_Pmp::CopyFrom(const BidRequest_Imp_Pmp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Imp.Pmp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp_Pmp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->deals())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp_Pmp::Swap(BidRequest_Imp_Pmp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp_Pmp::InternalSwap(BidRequest_Imp_Pmp* other) {
  std::swap(private_auction_, other->private_auction_);
  deals_.UnsafeArenaSwap(&other->deals_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Imp_Pmp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_Pmp_descriptor_;
  metadata.reflection = BidRequest_Imp_Pmp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* BidRequest_Imp::_default_bidfloorcur_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Imp::kIdFieldNumber;
const int BidRequest_Imp::kBannerFieldNumber;
const int BidRequest_Imp::kVideoFieldNumber;
const int BidRequest_Imp::kDisplaymanagerFieldNumber;
const int BidRequest_Imp::kDisplaymanagerverFieldNumber;
const int BidRequest_Imp::kInstlFieldNumber;
const int BidRequest_Imp::kTagidFieldNumber;
const int BidRequest_Imp::kBidfloorFieldNumber;
const int BidRequest_Imp::kBidfloorcurFieldNumber;
const int BidRequest_Imp::kSecureFieldNumber;
const int BidRequest_Imp::kIframebusterFieldNumber;
const int BidRequest_Imp::kPmpFieldNumber;
const int BidRequest_Imp::kNativeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Imp::BidRequest_Imp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Imp)
}

void BidRequest_Imp::InitAsDefaultInstance() {
  banner_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Banner*>(&::com::google::openrtb::BidRequest_Imp_Banner::default_instance());
  video_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Video*>(&::com::google::openrtb::BidRequest_Imp_Video::default_instance());
  pmp_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Pmp*>(&::com::google::openrtb::BidRequest_Imp_Pmp::default_instance());
  native_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Native*>(&::com::google::openrtb::BidRequest_Imp_Native::default_instance());
}

BidRequest_Imp::BidRequest_Imp(const BidRequest_Imp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Imp)
}

void BidRequest_Imp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banner_ = NULL;
  video_ = NULL;
  displaymanager_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaymanagerver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instl_ = 0;
  tagid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloor_ = 0;
  bidfloorcur_.UnsafeSetDefault(_default_bidfloorcur_);
  secure_ = false;
  pmp_ = NULL;
  native_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Imp::~BidRequest_Imp() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Imp)
  SharedDtor();
}

void BidRequest_Imp::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaymanager_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  displaymanagerver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidfloorcur_.DestroyNoArena(_default_bidfloorcur_);
  if (this != default_instance_) {
    delete banner_;
    delete video_;
    delete pmp_;
    delete native_;
  }
}

void BidRequest_Imp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Imp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Imp_descriptor_;
}

const BidRequest_Imp& BidRequest_Imp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Imp* BidRequest_Imp::default_instance_ = NULL;

BidRequest_Imp* BidRequest_Imp::New(::google::protobuf::Arena* arena) const {
  BidRequest_Imp* n = new BidRequest_Imp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Imp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Imp)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Imp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Imp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(bidfloor_, instl_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_banner()) {
      if (banner_ != NULL) banner_->::com::google::openrtb::BidRequest_Imp_Banner::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::com::google::openrtb::BidRequest_Imp_Video::Clear();
    }
    if (has_displaymanager()) {
      displaymanager_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_displaymanagerver()) {
      displaymanagerver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tagid()) {
      tagid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 6912u) {
    if (has_bidfloorcur()) {
      bidfloorcur_.ClearToDefaultNoArena(_default_bidfloorcur_);
    }
    secure_ = false;
    if (has_pmp()) {
      if (pmp_ != NULL) pmp_->::com::google::openrtb::BidRequest_Imp_Pmp::Clear();
    }
    if (has_native()) {
      if (native_ != NULL) native_->::com::google::openrtb::BidRequest_Imp_Native::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  iframebuster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Imp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Imp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_banner;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
      case 2: {
        if (tag == 18) {
         parse_banner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_banner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_video;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
      case 3: {
        if (tag == 26) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_displaymanager;
        break;
      }

      // optional string displaymanager = 4;
      case 4: {
        if (tag == 34) {
         parse_displaymanager:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaymanager()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displaymanager().data(), this->displaymanager().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.displaymanager");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_displaymanagerver;
        break;
      }

      // optional string displaymanagerver = 5;
      case 5: {
        if (tag == 42) {
         parse_displaymanagerver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaymanagerver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->displaymanagerver().data(), this->displaymanagerver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.displaymanagerver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_instl;
        break;
      }

      // optional int32 instl = 6;
      case 6: {
        if (tag == 48) {
         parse_instl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instl_)));
          set_has_instl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tagid;
        break;
      }

      // optional string tagid = 7;
      case 7: {
        if (tag == 58) {
         parse_tagid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tagid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tagid().data(), this->tagid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.tagid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_bidfloor;
        break;
      }

      // optional double bidfloor = 8 [default = 0];
      case 8: {
        if (tag == 65) {
         parse_bidfloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidfloor_)));
          set_has_bidfloor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bidfloorcur;
        break;
      }

      // optional string bidfloorcur = 9 [default = "CNY"];
      case 9: {
        if (tag == 74) {
         parse_bidfloorcur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidfloorcur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidfloorcur().data(), this->bidfloorcur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.bidfloorcur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_iframebuster;
        break;
      }

      // repeated string iframebuster = 10;
      case 10: {
        if (tag == 82) {
         parse_iframebuster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_iframebuster()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iframebuster(this->iframebuster_size() - 1).data(),
            this->iframebuster(this->iframebuster_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Imp.iframebuster");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_iframebuster;
        if (input->ExpectTag(90)) goto parse_pmp;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
      case 11: {
        if (tag == 90) {
         parse_pmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pmp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_secure;
        break;
      }

      // optional bool secure = 12;
      case 12: {
        if (tag == 96) {
         parse_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_native;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
      case 13: {
        if (tag == 106) {
         parse_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Imp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Imp)
  return false;
#undef DO_
}

void BidRequest_Imp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
  if (has_banner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->banner_, output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->video_, output);
  }

  // optional string displaymanager = 4;
  if (has_displaymanager()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymanager().data(), this->displaymanager().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.displaymanager");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->displaymanager(), output);
  }

  // optional string displaymanagerver = 5;
  if (has_displaymanagerver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymanagerver().data(), this->displaymanagerver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.displaymanagerver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->displaymanagerver(), output);
  }

  // optional int32 instl = 6;
  if (has_instl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->instl(), output);
  }

  // optional string tagid = 7;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagid().data(), this->tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.tagid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tagid(), output);
  }

  // optional double bidfloor = 8 [default = 0];
  if (has_bidfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->bidfloor(), output);
  }

  // optional string bidfloorcur = 9 [default = "CNY"];
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.bidfloorcur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->bidfloorcur(), output);
  }

  // repeated string iframebuster = 10;
  for (int i = 0; i < this->iframebuster_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iframebuster(i).data(), this->iframebuster(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.iframebuster");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->iframebuster(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
  if (has_pmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->pmp_, output);
  }

  // optional bool secure = 12;
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->secure(), output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
  if (has_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->native_, output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Imp)
}

::google::protobuf::uint8* BidRequest_Imp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Imp)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
  if (has_banner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->banner_, false, target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->video_, false, target);
  }

  // optional string displaymanager = 4;
  if (has_displaymanager()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymanager().data(), this->displaymanager().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.displaymanager");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->displaymanager(), target);
  }

  // optional string displaymanagerver = 5;
  if (has_displaymanagerver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->displaymanagerver().data(), this->displaymanagerver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.displaymanagerver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->displaymanagerver(), target);
  }

  // optional int32 instl = 6;
  if (has_instl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->instl(), target);
  }

  // optional string tagid = 7;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tagid().data(), this->tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.tagid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tagid(), target);
  }

  // optional double bidfloor = 8 [default = 0];
  if (has_bidfloor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->bidfloor(), target);
  }

  // optional string bidfloorcur = 9 [default = "CNY"];
  if (has_bidfloorcur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidfloorcur().data(), this->bidfloorcur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.bidfloorcur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->bidfloorcur(), target);
  }

  // repeated string iframebuster = 10;
  for (int i = 0; i < this->iframebuster_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iframebuster(i).data(), this->iframebuster(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Imp.iframebuster");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->iframebuster(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
  if (has_pmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->pmp_, false, target);
  }

  // optional bool secure = 12;
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->secure(), target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
  if (has_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->native_, false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Imp)
  return target;
}

int BidRequest_Imp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Imp)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
    if (has_banner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->banner_);
    }

    // optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_);
    }

    // optional string displaymanager = 4;
    if (has_displaymanager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaymanager());
    }

    // optional string displaymanagerver = 5;
    if (has_displaymanagerver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaymanagerver());
    }

    // optional int32 instl = 6;
    if (has_instl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instl());
    }

    // optional string tagid = 7;
    if (has_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tagid());
    }

    // optional double bidfloor = 8 [default = 0];
    if (has_bidfloor()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 6912u) {
    // optional string bidfloorcur = 9 [default = "CNY"];
    if (has_bidfloorcur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidfloorcur());
    }

    // optional bool secure = 12;
    if (has_secure()) {
      total_size += 1 + 1;
    }

    // optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
    if (has_pmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pmp_);
    }

    // optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
    if (has_native()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->native_);
    }

  }
  // repeated string iframebuster = 10;
  total_size += 1 * this->iframebuster_size();
  for (int i = 0; i < this->iframebuster_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->iframebuster(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Imp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Imp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Imp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Imp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Imp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Imp)
    MergeFrom(*source);
  }
}

void BidRequest_Imp::MergeFrom(const BidRequest_Imp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Imp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  iframebuster_.MergeFrom(from.iframebuster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_banner()) {
      mutable_banner()->::com::google::openrtb::BidRequest_Imp_Banner::MergeFrom(from.banner());
    }
    if (from.has_video()) {
      mutable_video()->::com::google::openrtb::BidRequest_Imp_Video::MergeFrom(from.video());
    }
    if (from.has_displaymanager()) {
      set_has_displaymanager();
      displaymanager_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displaymanager_);
    }
    if (from.has_displaymanagerver()) {
      set_has_displaymanagerver();
      displaymanagerver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.displaymanagerver_);
    }
    if (from.has_instl()) {
      set_instl(from.instl());
    }
    if (from.has_tagid()) {
      set_has_tagid();
      tagid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tagid_);
    }
    if (from.has_bidfloor()) {
      set_bidfloor(from.bidfloor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidfloorcur()) {
      set_has_bidfloorcur();
      bidfloorcur_.AssignWithDefault(_default_bidfloorcur_, from.bidfloorcur_);
    }
    if (from.has_secure()) {
      set_secure(from.secure());
    }
    if (from.has_pmp()) {
      mutable_pmp()->::com::google::openrtb::BidRequest_Imp_Pmp::MergeFrom(from.pmp());
    }
    if (from.has_native()) {
      mutable_native()->::com::google::openrtb::BidRequest_Imp_Native::MergeFrom(from.native());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Imp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Imp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Imp::CopyFrom(const BidRequest_Imp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Imp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Imp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_banner()) {
    if (!this->banner_->IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video_->IsInitialized()) return false;
  }
  if (has_pmp()) {
    if (!this->pmp_->IsInitialized()) return false;
  }
  if (has_native()) {
    if (!this->native_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Imp::Swap(BidRequest_Imp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Imp::InternalSwap(BidRequest_Imp* other) {
  id_.Swap(&other->id_);
  std::swap(banner_, other->banner_);
  std::swap(video_, other->video_);
  displaymanager_.Swap(&other->displaymanager_);
  displaymanagerver_.Swap(&other->displaymanagerver_);
  std::swap(instl_, other->instl_);
  tagid_.Swap(&other->tagid_);
  std::swap(bidfloor_, other->bidfloor_);
  bidfloorcur_.Swap(&other->bidfloorcur_);
  std::swap(secure_, other->secure_);
  iframebuster_.UnsafeArenaSwap(&other->iframebuster_);
  std::swap(pmp_, other->pmp_);
  std::swap(native_, other->native_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Imp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Imp_descriptor_;
  metadata.reflection = BidRequest_Imp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Site::kIdFieldNumber;
const int BidRequest_Site::kNameFieldNumber;
const int BidRequest_Site::kDomainFieldNumber;
const int BidRequest_Site::kCatFieldNumber;
const int BidRequest_Site::kSectioncatFieldNumber;
const int BidRequest_Site::kPagecatFieldNumber;
const int BidRequest_Site::kPageFieldNumber;
const int BidRequest_Site::kPrivacypolicyFieldNumber;
const int BidRequest_Site::kRefFieldNumber;
const int BidRequest_Site::kSearchFieldNumber;
const int BidRequest_Site::kPublisherFieldNumber;
const int BidRequest_Site::kContentFieldNumber;
const int BidRequest_Site::kKeywordsFieldNumber;
const int BidRequest_Site::kMobileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Site::BidRequest_Site()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Site)
}

void BidRequest_Site::InitAsDefaultInstance() {
  publisher_ = const_cast< ::com::google::openrtb::BidRequest_Publisher*>(&::com::google::openrtb::BidRequest_Publisher::default_instance());
  content_ = const_cast< ::com::google::openrtb::BidRequest_Content*>(&::com::google::openrtb::BidRequest_Content::default_instance());
}

BidRequest_Site::BidRequest_Site(const BidRequest_Site& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Site)
}

void BidRequest_Site::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacypolicy_ = false;
  ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publisher_ = NULL;
  content_ = NULL;
  keywords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Site::~BidRequest_Site() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Site)
  SharedDtor();
}

void BidRequest_Site::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keywords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete publisher_;
    delete content_;
  }
}

void BidRequest_Site::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Site::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Site_descriptor_;
}

const BidRequest_Site& BidRequest_Site::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Site* BidRequest_Site::default_instance_ = NULL;

BidRequest_Site* BidRequest_Site::New(::google::protobuf::Arena* arena) const {
  BidRequest_Site* n = new BidRequest_Site;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Site::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Site)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 199u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_page()) {
      page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    privacypolicy_ = false;
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_ref()) {
      ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_search()) {
      search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::com::google::openrtb::BidRequest_Publisher::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::com::google::openrtb::BidRequest_Content::Clear();
    }
    if (has_keywords()) {
      keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mobile_ = false;
  }
  cat_.Clear();
  sectioncat_.Clear();
  pagecat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Site::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Site)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (tag == 26) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cat;
        break;
      }

      // repeated string cat = 4;
      case 4: {
        if (tag == 34) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cat;
        if (input->ExpectTag(42)) goto parse_sectioncat;
        break;
      }

      // repeated string sectioncat = 5;
      case 5: {
        if (tag == 42) {
         parse_sectioncat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sectioncat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sectioncat(this->sectioncat_size() - 1).data(),
            this->sectioncat(this->sectioncat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.sectioncat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sectioncat;
        if (input->ExpectTag(50)) goto parse_pagecat;
        break;
      }

      // repeated string pagecat = 6;
      case 6: {
        if (tag == 50) {
         parse_pagecat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pagecat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagecat(this->pagecat_size() - 1).data(),
            this->pagecat(this->pagecat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.pagecat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pagecat;
        if (input->ExpectTag(58)) goto parse_page;
        break;
      }

      // optional string page = 7;
      case 7: {
        if (tag == 58) {
         parse_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->page().data(), this->page().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.page");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_privacypolicy;
        break;
      }

      // optional bool privacypolicy = 8;
      case 8: {
        if (tag == 64) {
         parse_privacypolicy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privacypolicy_)));
          set_has_privacypolicy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ref;
        break;
      }

      // optional string ref = 9;
      case 9: {
        if (tag == 74) {
         parse_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref().data(), this->ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.ref");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_search;
        break;
      }

      // optional string search = 10;
      case 10: {
        if (tag == 82) {
         parse_search:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search().data(), this->search().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.search");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_content;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content content = 12;
      case 12: {
        if (tag == 98) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_keywords;
        break;
      }

      // optional string keywords = 13;
      case 13: {
        if (tag == 106) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Site.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mobile;
        break;
      }

      // optional bool mobile = 15;
      case 15: {
        if (tag == 120) {
         parse_mobile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_)));
          set_has_mobile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Site)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Site)
  return false;
#undef DO_
}

void BidRequest_Site::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Site)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // repeated string cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cat(i), output);
  }

  // repeated string sectioncat = 5;
  for (int i = 0; i < this->sectioncat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sectioncat(i).data(), this->sectioncat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.sectioncat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sectioncat(i), output);
  }

  // repeated string pagecat = 6;
  for (int i = 0; i < this->pagecat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagecat(i).data(), this->pagecat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.pagecat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pagecat(i), output);
  }

  // optional string page = 7;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.page");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->page(), output);
  }

  // optional bool privacypolicy = 8;
  if (has_privacypolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->privacypolicy(), output);
  }

  // optional string ref = 9;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ref(), output);
  }

  // optional string search = 10;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.search");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->search(), output);
  }

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->publisher_, output);
  }

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->content_, output);
  }

  // optional string keywords = 13;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->keywords(), output);
  }

  // optional bool mobile = 15;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->mobile(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Site)
}

::google::protobuf::uint8* BidRequest_Site::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Site)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // repeated string cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->cat(i), target);
  }

  // repeated string sectioncat = 5;
  for (int i = 0; i < this->sectioncat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sectioncat(i).data(), this->sectioncat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.sectioncat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->sectioncat(i), target);
  }

  // repeated string pagecat = 6;
  for (int i = 0; i < this->pagecat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagecat(i).data(), this->pagecat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.pagecat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->pagecat(i), target);
  }

  // optional string page = 7;
  if (has_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->page().data(), this->page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.page");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->page(), target);
  }

  // optional bool privacypolicy = 8;
  if (has_privacypolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->privacypolicy(), target);
  }

  // optional string ref = 9;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref().data(), this->ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ref(), target);
  }

  // optional string search = 10;
  if (has_search()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search().data(), this->search().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.search");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->search(), target);
  }

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->publisher_, false, target);
  }

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->content_, false, target);
  }

  // optional string keywords = 13;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Site.keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->keywords(), target);
  }

  // optional bool mobile = 15;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->mobile(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Site)
  return target;
}

int BidRequest_Site::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Site)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 199u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string page = 7;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page());
    }

    // optional bool privacypolicy = 8;
    if (has_privacypolicy()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional string ref = 9;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref());
    }

    // optional string search = 10;
    if (has_search()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search());
    }

    // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->publisher_);
    }

    // optional .com.google.openrtb.BidRequest.Content content = 12;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_);
    }

    // optional string keywords = 13;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional bool mobile = 15;
    if (has_mobile()) {
      total_size += 1 + 1;
    }

  }
  // repeated string cat = 4;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  // repeated string sectioncat = 5;
  total_size += 1 * this->sectioncat_size();
  for (int i = 0; i < this->sectioncat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sectioncat(i));
  }

  // repeated string pagecat = 6;
  total_size += 1 * this->pagecat_size();
  for (int i = 0; i < this->pagecat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pagecat(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Site::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Site)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Site* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Site>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Site)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Site)
    MergeFrom(*source);
  }
}

void BidRequest_Site::MergeFrom(const BidRequest_Site& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Site)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cat_.MergeFrom(from.cat_);
  sectioncat_.MergeFrom(from.sectioncat_);
  pagecat_.MergeFrom(from.pagecat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (from.has_page()) {
      set_has_page();
      page_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_);
    }
    if (from.has_privacypolicy()) {
      set_privacypolicy(from.privacypolicy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ref()) {
      set_has_ref();
      ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ref_);
    }
    if (from.has_search()) {
      set_has_search();
      search_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_);
    }
    if (from.has_publisher()) {
      mutable_publisher()->::com::google::openrtb::BidRequest_Publisher::MergeFrom(from.publisher());
    }
    if (from.has_content()) {
      mutable_content()->::com::google::openrtb::BidRequest_Content::MergeFrom(from.content());
    }
    if (from.has_keywords()) {
      set_has_keywords();
      keywords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keywords_);
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Site::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Site::CopyFrom(const BidRequest_Site& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Site::IsInitialized() const {

  if (has_publisher()) {
    if (!this->publisher_->IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Site::Swap(BidRequest_Site* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Site::InternalSwap(BidRequest_Site* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  domain_.Swap(&other->domain_);
  cat_.UnsafeArenaSwap(&other->cat_);
  sectioncat_.UnsafeArenaSwap(&other->sectioncat_);
  pagecat_.UnsafeArenaSwap(&other->pagecat_);
  page_.Swap(&other->page_);
  std::swap(privacypolicy_, other->privacypolicy_);
  ref_.Swap(&other->ref_);
  search_.Swap(&other->search_);
  std::swap(publisher_, other->publisher_);
  std::swap(content_, other->content_);
  keywords_.Swap(&other->keywords_);
  std::swap(mobile_, other->mobile_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Site::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Site_descriptor_;
  metadata.reflection = BidRequest_Site_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_App::kIdFieldNumber;
const int BidRequest_App::kNameFieldNumber;
const int BidRequest_App::kDomainFieldNumber;
const int BidRequest_App::kCatFieldNumber;
const int BidRequest_App::kSectioncatFieldNumber;
const int BidRequest_App::kPagecatFieldNumber;
const int BidRequest_App::kVerFieldNumber;
const int BidRequest_App::kBundleFieldNumber;
const int BidRequest_App::kPrivacypolicyFieldNumber;
const int BidRequest_App::kPaidFieldNumber;
const int BidRequest_App::kPublisherFieldNumber;
const int BidRequest_App::kContentFieldNumber;
const int BidRequest_App::kKeywordsFieldNumber;
const int BidRequest_App::kStoreurlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_App::BidRequest_App()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.App)
}

void BidRequest_App::InitAsDefaultInstance() {
  publisher_ = const_cast< ::com::google::openrtb::BidRequest_Publisher*>(&::com::google::openrtb::BidRequest_Publisher::default_instance());
  content_ = const_cast< ::com::google::openrtb::BidRequest_Content*>(&::com::google::openrtb::BidRequest_Content::default_instance());
}

BidRequest_App::BidRequest_App(const BidRequest_App& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.App)
}

void BidRequest_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privacypolicy_ = false;
  paid_ = false;
  publisher_ = NULL;
  content_ = NULL;
  keywords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_App::~BidRequest_App() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.App)
  SharedDtor();
}

void BidRequest_App::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keywords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storeurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete publisher_;
    delete content_;
  }
}

void BidRequest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_App_descriptor_;
}

const BidRequest_App& BidRequest_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_App* BidRequest_App::default_instance_ = NULL;

BidRequest_App* BidRequest_App::New(::google::protobuf::Arena* arena) const {
  BidRequest_App* n = new BidRequest_App;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_App::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.App)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_App, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_App*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 199u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ver()) {
      ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bundle()) {
      bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(privacypolicy_, paid_);
    if (has_publisher()) {
      if (publisher_ != NULL) publisher_->::com::google::openrtb::BidRequest_Publisher::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::com::google::openrtb::BidRequest_Content::Clear();
    }
    if (has_keywords()) {
      keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_storeurl()) {
      storeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  cat_.Clear();
  sectioncat_.Clear();
  pagecat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_domain;
        break;
      }

      // optional string domain = 3;
      case 3: {
        if (tag == 26) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cat;
        break;
      }

      // repeated string cat = 4;
      case 4: {
        if (tag == 34) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cat;
        if (input->ExpectTag(42)) goto parse_sectioncat;
        break;
      }

      // repeated string sectioncat = 5;
      case 5: {
        if (tag == 42) {
         parse_sectioncat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sectioncat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sectioncat(this->sectioncat_size() - 1).data(),
            this->sectioncat(this->sectioncat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.sectioncat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sectioncat;
        if (input->ExpectTag(50)) goto parse_pagecat;
        break;
      }

      // repeated string pagecat = 6;
      case 6: {
        if (tag == 50) {
         parse_pagecat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pagecat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pagecat(this->pagecat_size() - 1).data(),
            this->pagecat(this->pagecat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.pagecat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pagecat;
        if (input->ExpectTag(58)) goto parse_ver;
        break;
      }

      // optional string ver = 7;
      case 7: {
        if (tag == 58) {
         parse_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_bundle;
        break;
      }

      // optional string bundle = 8;
      case 8: {
        if (tag == 66) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_privacypolicy;
        break;
      }

      // optional bool privacypolicy = 9;
      case 9: {
        if (tag == 72) {
         parse_privacypolicy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privacypolicy_)));
          set_has_privacypolicy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_paid;
        break;
      }

      // optional bool paid = 10;
      case 10: {
        if (tag == 80) {
         parse_paid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paid_)));
          set_has_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_publisher;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
      case 11: {
        if (tag == 90) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publisher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_content;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content content = 12;
      case 12: {
        if (tag == 98) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_keywords;
        break;
      }

      // optional string keywords = 13;
      case 13: {
        if (tag == 106) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_storeurl;
        break;
      }

      // optional string storeurl = 16;
      case 16: {
        if (tag == 130) {
         parse_storeurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->storeurl().data(), this->storeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.App.storeurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.App)
  return false;
#undef DO_
}

void BidRequest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.App)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // repeated string cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cat(i), output);
  }

  // repeated string sectioncat = 5;
  for (int i = 0; i < this->sectioncat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sectioncat(i).data(), this->sectioncat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.sectioncat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sectioncat(i), output);
  }

  // repeated string pagecat = 6;
  for (int i = 0; i < this->pagecat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagecat(i).data(), this->pagecat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.pagecat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pagecat(i), output);
  }

  // optional string ver = 7;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ver(), output);
  }

  // optional string bundle = 8;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bundle(), output);
  }

  // optional bool privacypolicy = 9;
  if (has_privacypolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->privacypolicy(), output);
  }

  // optional bool paid = 10;
  if (has_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->paid(), output);
  }

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->publisher_, output);
  }

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->content_, output);
  }

  // optional string keywords = 13;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->keywords(), output);
  }

  // optional string storeurl = 16;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.storeurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->storeurl(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.App)
}

::google::protobuf::uint8* BidRequest_App::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.App)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string domain = 3;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // repeated string cat = 4;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->cat(i), target);
  }

  // repeated string sectioncat = 5;
  for (int i = 0; i < this->sectioncat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sectioncat(i).data(), this->sectioncat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.sectioncat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->sectioncat(i), target);
  }

  // repeated string pagecat = 6;
  for (int i = 0; i < this->pagecat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pagecat(i).data(), this->pagecat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.pagecat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->pagecat(i), target);
  }

  // optional string ver = 7;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ver(), target);
  }

  // optional string bundle = 8;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bundle(), target);
  }

  // optional bool privacypolicy = 9;
  if (has_privacypolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->privacypolicy(), target);
  }

  // optional bool paid = 10;
  if (has_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->paid(), target);
  }

  // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
  if (has_publisher()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->publisher_, false, target);
  }

  // optional .com.google.openrtb.BidRequest.Content content = 12;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->content_, false, target);
  }

  // optional string keywords = 13;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->keywords(), target);
  }

  // optional string storeurl = 16;
  if (has_storeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->storeurl().data(), this->storeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.App.storeurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->storeurl(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.App)
  return target;
}

int BidRequest_App::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.App)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 199u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 3;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string ver = 7;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // optional string bundle = 8;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool privacypolicy = 9;
    if (has_privacypolicy()) {
      total_size += 1 + 1;
    }

    // optional bool paid = 10;
    if (has_paid()) {
      total_size += 1 + 1;
    }

    // optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->publisher_);
    }

    // optional .com.google.openrtb.BidRequest.Content content = 12;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->content_);
    }

    // optional string keywords = 13;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional string storeurl = 16;
    if (has_storeurl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storeurl());
    }

  }
  // repeated string cat = 4;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  // repeated string sectioncat = 5;
  total_size += 1 * this->sectioncat_size();
  for (int i = 0; i < this->sectioncat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sectioncat(i));
  }

  // repeated string pagecat = 6;
  total_size += 1 * this->pagecat_size();
  for (int i = 0; i < this->pagecat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pagecat(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.App)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_App* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_App>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.App)
    MergeFrom(*source);
  }
}

void BidRequest_App::MergeFrom(const BidRequest_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.App)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cat_.MergeFrom(from.cat_);
  sectioncat_.MergeFrom(from.sectioncat_);
  pagecat_.MergeFrom(from.pagecat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (from.has_ver()) {
      set_has_ver();
      ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ver_);
    }
    if (from.has_bundle()) {
      set_has_bundle();
      bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_privacypolicy()) {
      set_privacypolicy(from.privacypolicy());
    }
    if (from.has_paid()) {
      set_paid(from.paid());
    }
    if (from.has_publisher()) {
      mutable_publisher()->::com::google::openrtb::BidRequest_Publisher::MergeFrom(from.publisher());
    }
    if (from.has_content()) {
      mutable_content()->::com::google::openrtb::BidRequest_Content::MergeFrom(from.content());
    }
    if (from.has_keywords()) {
      set_has_keywords();
      keywords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keywords_);
    }
    if (from.has_storeurl()) {
      set_has_storeurl();
      storeurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storeurl_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_App::CopyFrom(const BidRequest_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_App::IsInitialized() const {

  if (has_publisher()) {
    if (!this->publisher_->IsInitialized()) return false;
  }
  if (has_content()) {
    if (!this->content_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_App::Swap(BidRequest_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_App::InternalSwap(BidRequest_App* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  domain_.Swap(&other->domain_);
  cat_.UnsafeArenaSwap(&other->cat_);
  sectioncat_.UnsafeArenaSwap(&other->sectioncat_);
  pagecat_.UnsafeArenaSwap(&other->pagecat_);
  ver_.Swap(&other->ver_);
  bundle_.Swap(&other->bundle_);
  std::swap(privacypolicy_, other->privacypolicy_);
  std::swap(paid_, other->paid_);
  std::swap(publisher_, other->publisher_);
  std::swap(content_, other->content_);
  keywords_.Swap(&other->keywords_);
  storeurl_.Swap(&other->storeurl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_App_descriptor_;
  metadata.reflection = BidRequest_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Publisher::kIdFieldNumber;
const int BidRequest_Publisher::kNameFieldNumber;
const int BidRequest_Publisher::kCatFieldNumber;
const int BidRequest_Publisher::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Publisher::BidRequest_Publisher()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Publisher)
}

void BidRequest_Publisher::InitAsDefaultInstance() {
}

BidRequest_Publisher::BidRequest_Publisher(const BidRequest_Publisher& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Publisher)
}

void BidRequest_Publisher::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Publisher::~BidRequest_Publisher() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Publisher)
  SharedDtor();
}

void BidRequest_Publisher::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Publisher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Publisher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Publisher_descriptor_;
}

const BidRequest_Publisher& BidRequest_Publisher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Publisher* BidRequest_Publisher::default_instance_ = NULL;

BidRequest_Publisher* BidRequest_Publisher::New(::google::protobuf::Arena* arena) const {
  BidRequest_Publisher* n = new BidRequest_Publisher;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Publisher::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Publisher)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 11u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Publisher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Publisher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Publisher.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Publisher.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        break;
      }

      // repeated string cat = 3;
      case 3: {
        if (tag == 26) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Publisher.cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Publisher.domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Publisher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Publisher)
  return false;
#undef DO_
}

void BidRequest_Publisher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Publisher)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Publisher.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Publisher.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Publisher.cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cat(i), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Publisher.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Publisher)
}

::google::protobuf::uint8* BidRequest_Publisher::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Publisher)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Publisher.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Publisher.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Publisher.cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cat(i), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Publisher.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Publisher)
  return target;
}

int BidRequest_Publisher::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Publisher)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  // repeated string cat = 3;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Publisher::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Publisher)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Publisher* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Publisher>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Publisher)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Publisher)
    MergeFrom(*source);
  }
}

void BidRequest_Publisher::MergeFrom(const BidRequest_Publisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Publisher)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Publisher::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Publisher::CopyFrom(const BidRequest_Publisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Publisher::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Publisher::Swap(BidRequest_Publisher* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Publisher::InternalSwap(BidRequest_Publisher* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  cat_.UnsafeArenaSwap(&other->cat_);
  domain_.Swap(&other->domain_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Publisher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Publisher_descriptor_;
  metadata.reflection = BidRequest_Publisher_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Content_VideoQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_VideoQuality_descriptor_;
}
bool BidRequest_Content_VideoQuality_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Content_VideoQuality BidRequest_Content::QUALITY_UNKNOWN;
const BidRequest_Content_VideoQuality BidRequest_Content::PROFESSIONAL;
const BidRequest_Content_VideoQuality BidRequest_Content::PROSUMER;
const BidRequest_Content_VideoQuality BidRequest_Content::USER_GENERATED;
const BidRequest_Content_VideoQuality BidRequest_Content::VideoQuality_MIN;
const BidRequest_Content_VideoQuality BidRequest_Content::VideoQuality_MAX;
const int BidRequest_Content::VideoQuality_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Content_ContentContext_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_ContentContext_descriptor_;
}
bool BidRequest_Content_ContentContext_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Content_ContentContext BidRequest_Content::VIDEO;
const BidRequest_Content_ContentContext BidRequest_Content::GAME;
const BidRequest_Content_ContentContext BidRequest_Content::MUSIC;
const BidRequest_Content_ContentContext BidRequest_Content::APPLICATION;
const BidRequest_Content_ContentContext BidRequest_Content::TEXT;
const BidRequest_Content_ContentContext BidRequest_Content::OTHER;
const BidRequest_Content_ContentContext BidRequest_Content::CONTEXT_UNKNOWN;
const BidRequest_Content_ContentContext BidRequest_Content::ContentContext_MIN;
const BidRequest_Content_ContentContext BidRequest_Content::ContentContext_MAX;
const int BidRequest_Content::ContentContext_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Content_QAGMediaRating_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_QAGMediaRating_descriptor_;
}
bool BidRequest_Content_QAGMediaRating_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Content_QAGMediaRating BidRequest_Content::ALL_AUDIENCES;
const BidRequest_Content_QAGMediaRating BidRequest_Content::EVERYONE_OVER_12;
const BidRequest_Content_QAGMediaRating BidRequest_Content::MATURE;
const BidRequest_Content_QAGMediaRating BidRequest_Content::QAGMediaRating_MIN;
const BidRequest_Content_QAGMediaRating BidRequest_Content::QAGMediaRating_MAX;
const int BidRequest_Content::QAGMediaRating_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Content::kIdFieldNumber;
const int BidRequest_Content::kEpisodeFieldNumber;
const int BidRequest_Content::kTitleFieldNumber;
const int BidRequest_Content::kSeriesFieldNumber;
const int BidRequest_Content::kSeasonFieldNumber;
const int BidRequest_Content::kUrlFieldNumber;
const int BidRequest_Content::kCatFieldNumber;
const int BidRequest_Content::kVideoqualityFieldNumber;
const int BidRequest_Content::kKeywordsFieldNumber;
const int BidRequest_Content::kContentratingFieldNumber;
const int BidRequest_Content::kUserratingFieldNumber;
const int BidRequest_Content::kContextFieldNumber;
const int BidRequest_Content::kContext22FieldNumber;
const int BidRequest_Content::kLivestreamFieldNumber;
const int BidRequest_Content::kSourcerelationshipFieldNumber;
const int BidRequest_Content::kProducerFieldNumber;
const int BidRequest_Content::kLenFieldNumber;
const int BidRequest_Content::kQagmediaratingFieldNumber;
const int BidRequest_Content::kEmbeddableFieldNumber;
const int BidRequest_Content::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Content::BidRequest_Content()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Content)
}

void BidRequest_Content::InitAsDefaultInstance() {
  producer_ = const_cast< ::com::google::openrtb::BidRequest_Producer*>(&::com::google::openrtb::BidRequest_Producer::default_instance());
}

BidRequest_Content::BidRequest_Content(const BidRequest_Content& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Content)
}

void BidRequest_Content::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  episode_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  series_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  season_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  videoquality_ = 0;
  keywords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contentrating_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userrating_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = 1;
  context_22_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livestream_ = false;
  sourcerelationship_ = false;
  producer_ = NULL;
  len_ = 0;
  qagmediarating_ = 1;
  embeddable_ = false;
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Content::~BidRequest_Content() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Content)
  SharedDtor();
}

void BidRequest_Content::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  series_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  season_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keywords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contentrating_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userrating_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_22_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete producer_;
  }
}

void BidRequest_Content::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Content_descriptor_;
}

const BidRequest_Content& BidRequest_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Content* BidRequest_Content::default_instance_ = NULL;

BidRequest_Content* BidRequest_Content::New(::google::protobuf::Arena* arena) const {
  BidRequest_Content* n = new BidRequest_Content;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Content::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Content)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Content, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Content*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(episode_, videoquality_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_series()) {
      series_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_season()) {
      season_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(livestream_, sourcerelationship_);
    if (has_keywords()) {
      keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_contentrating()) {
      contentrating_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userrating()) {
      userrating_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    context_ = 1;
    if (has_context_22()) {
      context_22_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_producer()) {
      if (producer_ != NULL) producer_->::com::google::openrtb::BidRequest_Producer::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040u) {
    len_ = 0;
    qagmediarating_ = 1;
    embeddable_ = false;
    if (has_language()) {
      language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Content)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_episode;
        break;
      }

      // optional int32 episode = 2;
      case 2: {
        if (tag == 16) {
         parse_episode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episode_)));
          set_has_episode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_series;
        break;
      }

      // optional string series = 4;
      case 4: {
        if (tag == 34) {
         parse_series:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_series()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->series().data(), this->series().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.series");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_season;
        break;
      }

      // optional string season = 5;
      case 5: {
        if (tag == 42) {
         parse_season:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_season()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->season().data(), this->season().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.season");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_url;
        break;
      }

      // optional string url = 6;
      case 6: {
        if (tag == 50) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cat;
        break;
      }

      // repeated string cat = 7;
      case 7: {
        if (tag == 58) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cat;
        if (input->ExpectTag(64)) goto parse_videoquality;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
      case 8: {
        if (tag == 64) {
         parse_videoquality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Content_VideoQuality_IsValid(value)) {
            set_videoquality(static_cast< ::com::google::openrtb::BidRequest_Content_VideoQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_keywords;
        break;
      }

      // optional string keywords = 9;
      case 9: {
        if (tag == 74) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_contentrating;
        break;
      }

      // optional string contentrating = 10;
      case 10: {
        if (tag == 82) {
         parse_contentrating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentrating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentrating().data(), this->contentrating().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.contentrating");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_userrating;
        break;
      }

      // optional string userrating = 11;
      case 11: {
        if (tag == 90) {
         parse_userrating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userrating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userrating().data(), this->userrating().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.userrating");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_context_22;
        break;
      }

      // optional string context_22 = 12;
      case 12: {
        if (tag == 98) {
         parse_context_22:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context_22()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context_22().data(), this->context_22().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.context_22");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_livestream;
        break;
      }

      // optional bool livestream = 13;
      case 13: {
        if (tag == 104) {
         parse_livestream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &livestream_)));
          set_has_livestream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_sourcerelationship;
        break;
      }

      // optional bool sourcerelationship = 14;
      case 14: {
        if (tag == 112) {
         parse_sourcerelationship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sourcerelationship_)));
          set_has_sourcerelationship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_producer;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Producer producer = 15;
      case 15: {
        if (tag == 122) {
         parse_producer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_producer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_len;
        break;
      }

      // optional int32 len = 16;
      case 16: {
        if (tag == 128) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_qagmediarating;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
      case 17: {
        if (tag == 136) {
         parse_qagmediarating:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Content_QAGMediaRating_IsValid(value)) {
            set_qagmediarating(static_cast< ::com::google::openrtb::BidRequest_Content_QAGMediaRating >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_embeddable;
        break;
      }

      // optional bool embeddable = 18;
      case 18: {
        if (tag == 144) {
         parse_embeddable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &embeddable_)));
          set_has_embeddable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_language;
        break;
      }

      // optional string language = 19;
      case 19: {
        if (tag == 154) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Content.language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_context;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
      case 20: {
        if (tag == 160) {
         parse_context:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Content_ContentContext_IsValid(value)) {
            set_context(static_cast< ::com::google::openrtb::BidRequest_Content_ContentContext >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Content)
  return false;
#undef DO_
}

void BidRequest_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Content)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 episode = 2;
  if (has_episode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->episode(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string series = 4;
  if (has_series()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series().data(), this->series().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.series");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->series(), output);
  }

  // optional string season = 5;
  if (has_season()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.season");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->season(), output);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // repeated string cat = 7;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cat(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
  if (has_videoquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->videoquality(), output);
  }

  // optional string keywords = 9;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->keywords(), output);
  }

  // optional string contentrating = 10;
  if (has_contentrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentrating().data(), this->contentrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.contentrating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->contentrating(), output);
  }

  // optional string userrating = 11;
  if (has_userrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userrating().data(), this->userrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.userrating");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->userrating(), output);
  }

  // optional string context_22 = 12;
  if (has_context_22()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_22().data(), this->context_22().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.context_22");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->context_22(), output);
  }

  // optional bool livestream = 13;
  if (has_livestream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->livestream(), output);
  }

  // optional bool sourcerelationship = 14;
  if (has_sourcerelationship()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->sourcerelationship(), output);
  }

  // optional .com.google.openrtb.BidRequest.Producer producer = 15;
  if (has_producer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->producer_, output);
  }

  // optional int32 len = 16;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->len(), output);
  }

  // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
  if (has_qagmediarating()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->qagmediarating(), output);
  }

  // optional bool embeddable = 18;
  if (has_embeddable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->embeddable(), output);
  }

  // optional string language = 19;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->language(), output);
  }

  // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->context(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Content)
}

::google::protobuf::uint8* BidRequest_Content::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Content)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 episode = 2;
  if (has_episode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->episode(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string series = 4;
  if (has_series()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series().data(), this->series().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.series");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->series(), target);
  }

  // optional string season = 5;
  if (has_season()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->season().data(), this->season().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.season");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->season(), target);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // repeated string cat = 7;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->cat(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
  if (has_videoquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->videoquality(), target);
  }

  // optional string keywords = 9;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->keywords(), target);
  }

  // optional string contentrating = 10;
  if (has_contentrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentrating().data(), this->contentrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.contentrating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->contentrating(), target);
  }

  // optional string userrating = 11;
  if (has_userrating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userrating().data(), this->userrating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.userrating");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->userrating(), target);
  }

  // optional string context_22 = 12;
  if (has_context_22()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context_22().data(), this->context_22().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.context_22");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->context_22(), target);
  }

  // optional bool livestream = 13;
  if (has_livestream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->livestream(), target);
  }

  // optional bool sourcerelationship = 14;
  if (has_sourcerelationship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->sourcerelationship(), target);
  }

  // optional .com.google.openrtb.BidRequest.Producer producer = 15;
  if (has_producer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->producer_, false, target);
  }

  // optional int32 len = 16;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->len(), target);
  }

  // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
  if (has_qagmediarating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->qagmediarating(), target);
  }

  // optional bool embeddable = 18;
  if (has_embeddable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->embeddable(), target);
  }

  // optional string language = 19;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Content.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->language(), target);
  }

  // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->context(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Content)
  return target;
}

int BidRequest_Content::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Content)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 episode = 2;
    if (has_episode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episode());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string series = 4;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->series());
    }

    // optional string season = 5;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->season());
    }

    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
    if (has_videoquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->videoquality());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string keywords = 9;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional string contentrating = 10;
    if (has_contentrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentrating());
    }

    // optional string userrating = 11;
    if (has_userrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userrating());
    }

    // optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
    if (has_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->context());
    }

    // optional string context_22 = 12;
    if (has_context_22()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context_22());
    }

    // optional bool livestream = 13;
    if (has_livestream()) {
      total_size += 1 + 1;
    }

    // optional bool sourcerelationship = 14;
    if (has_sourcerelationship()) {
      total_size += 1 + 1;
    }

    // optional .com.google.openrtb.BidRequest.Producer producer = 15;
    if (has_producer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->producer_);
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional int32 len = 16;
    if (has_len()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
    if (has_qagmediarating()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qagmediarating());
    }

    // optional bool embeddable = 18;
    if (has_embeddable()) {
      total_size += 2 + 1;
    }

    // optional string language = 19;
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  // repeated string cat = 7;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Content::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Content)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Content* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Content>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Content)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Content)
    MergeFrom(*source);
  }
}

void BidRequest_Content::MergeFrom(const BidRequest_Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Content)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_episode()) {
      set_episode(from.episode());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_series()) {
      set_has_series();
      series_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.series_);
    }
    if (from.has_season()) {
      set_has_season();
      season_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.season_);
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_videoquality()) {
      set_videoquality(from.videoquality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_keywords()) {
      set_has_keywords();
      keywords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keywords_);
    }
    if (from.has_contentrating()) {
      set_has_contentrating();
      contentrating_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentrating_);
    }
    if (from.has_userrating()) {
      set_has_userrating();
      userrating_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userrating_);
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_context_22()) {
      set_has_context_22();
      context_22_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_22_);
    }
    if (from.has_livestream()) {
      set_livestream(from.livestream());
    }
    if (from.has_sourcerelationship()) {
      set_sourcerelationship(from.sourcerelationship());
    }
    if (from.has_producer()) {
      mutable_producer()->::com::google::openrtb::BidRequest_Producer::MergeFrom(from.producer());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_qagmediarating()) {
      set_qagmediarating(from.qagmediarating());
    }
    if (from.has_embeddable()) {
      set_embeddable(from.embeddable());
    }
    if (from.has_language()) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Content::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Content::CopyFrom(const BidRequest_Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Content::IsInitialized() const {

  if (has_producer()) {
    if (!this->producer_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Content::Swap(BidRequest_Content* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Content::InternalSwap(BidRequest_Content* other) {
  id_.Swap(&other->id_);
  std::swap(episode_, other->episode_);
  title_.Swap(&other->title_);
  series_.Swap(&other->series_);
  season_.Swap(&other->season_);
  url_.Swap(&other->url_);
  cat_.UnsafeArenaSwap(&other->cat_);
  std::swap(videoquality_, other->videoquality_);
  keywords_.Swap(&other->keywords_);
  contentrating_.Swap(&other->contentrating_);
  userrating_.Swap(&other->userrating_);
  std::swap(context_, other->context_);
  context_22_.Swap(&other->context_22_);
  std::swap(livestream_, other->livestream_);
  std::swap(sourcerelationship_, other->sourcerelationship_);
  std::swap(producer_, other->producer_);
  std::swap(len_, other->len_);
  std::swap(qagmediarating_, other->qagmediarating_);
  std::swap(embeddable_, other->embeddable_);
  language_.Swap(&other->language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Content_descriptor_;
  metadata.reflection = BidRequest_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Producer::kIdFieldNumber;
const int BidRequest_Producer::kNameFieldNumber;
const int BidRequest_Producer::kCatFieldNumber;
const int BidRequest_Producer::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Producer::BidRequest_Producer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Producer)
}

void BidRequest_Producer::InitAsDefaultInstance() {
}

BidRequest_Producer::BidRequest_Producer(const BidRequest_Producer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Producer)
}

void BidRequest_Producer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Producer::~BidRequest_Producer() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Producer)
  SharedDtor();
}

void BidRequest_Producer::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Producer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Producer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Producer_descriptor_;
}

const BidRequest_Producer& BidRequest_Producer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Producer* BidRequest_Producer::default_instance_ = NULL;

BidRequest_Producer* BidRequest_Producer::New(::google::protobuf::Arena* arena) const {
  BidRequest_Producer* n = new BidRequest_Producer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Producer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Producer)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 11u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_domain()) {
      domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  cat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Producer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Producer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Producer.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Producer.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        break;
      }

      // repeated string cat = 3;
      case 3: {
        if (tag == 26) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Producer.cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cat;
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (tag == 34) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Producer.domain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Producer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Producer)
  return false;
#undef DO_
}

void BidRequest_Producer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Producer)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Producer.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Producer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Producer.cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cat(i), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Producer.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Producer)
}

::google::protobuf::uint8* BidRequest_Producer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Producer)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Producer.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Producer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string cat = 3;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Producer.cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cat(i), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Producer.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Producer)
  return target;
}

int BidRequest_Producer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Producer)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

  }
  // repeated string cat = 3;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Producer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Producer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Producer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Producer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Producer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Producer)
    MergeFrom(*source);
  }
}

void BidRequest_Producer::MergeFrom(const BidRequest_Producer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Producer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cat_.MergeFrom(from.cat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_domain()) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Producer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Producer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Producer::CopyFrom(const BidRequest_Producer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Producer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Producer::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Producer::Swap(BidRequest_Producer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Producer::InternalSwap(BidRequest_Producer* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  cat_.UnsafeArenaSwap(&other->cat_);
  domain_.Swap(&other->domain_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Producer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Producer_descriptor_;
  metadata.reflection = BidRequest_Producer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Device_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_DeviceType_descriptor_;
}
bool BidRequest_Device_DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Device_DeviceType BidRequest_Device::MOBILE;
const BidRequest_Device_DeviceType BidRequest_Device::PERSONAL_COMPUTER;
const BidRequest_Device_DeviceType BidRequest_Device::CONNECTED_TV;
const BidRequest_Device_DeviceType BidRequest_Device::PHONE;
const BidRequest_Device_DeviceType BidRequest_Device::TABLET;
const BidRequest_Device_DeviceType BidRequest_Device::CONNECTED_DEVICE;
const BidRequest_Device_DeviceType BidRequest_Device::SET_TOP_BOX;
const BidRequest_Device_DeviceType BidRequest_Device::DeviceType_MIN;
const BidRequest_Device_DeviceType BidRequest_Device::DeviceType_MAX;
const int BidRequest_Device::DeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BidRequest_Device_ConnectionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_ConnectionType_descriptor_;
}
bool BidRequest_Device_ConnectionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Device_ConnectionType BidRequest_Device::CONNECTION_UNKNOWN;
const BidRequest_Device_ConnectionType BidRequest_Device::ETHERNET;
const BidRequest_Device_ConnectionType BidRequest_Device::WIFI;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_UNKNOWN;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_2G;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_3G;
const BidRequest_Device_ConnectionType BidRequest_Device::CELL_4G;
const BidRequest_Device_ConnectionType BidRequest_Device::ConnectionType_MIN;
const BidRequest_Device_ConnectionType BidRequest_Device::ConnectionType_MAX;
const int BidRequest_Device::ConnectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Device::kDntFieldNumber;
const int BidRequest_Device::kUaFieldNumber;
const int BidRequest_Device::kIpFieldNumber;
const int BidRequest_Device::kGeoFieldNumber;
const int BidRequest_Device::kDidsha1FieldNumber;
const int BidRequest_Device::kDidmd5FieldNumber;
const int BidRequest_Device::kDpidsha1FieldNumber;
const int BidRequest_Device::kDpidmd5FieldNumber;
const int BidRequest_Device::kIpv6FieldNumber;
const int BidRequest_Device::kCarrierFieldNumber;
const int BidRequest_Device::kLanguageFieldNumber;
const int BidRequest_Device::kMakeFieldNumber;
const int BidRequest_Device::kModelFieldNumber;
const int BidRequest_Device::kOsFieldNumber;
const int BidRequest_Device::kOsvFieldNumber;
const int BidRequest_Device::kHwvFieldNumber;
const int BidRequest_Device::kWFieldNumber;
const int BidRequest_Device::kHFieldNumber;
const int BidRequest_Device::kPpiFieldNumber;
const int BidRequest_Device::kPxratioFieldNumber;
const int BidRequest_Device::kJsFieldNumber;
const int BidRequest_Device::kConnectiontypeFieldNumber;
const int BidRequest_Device::kDevicetypeFieldNumber;
const int BidRequest_Device::kFlashverFieldNumber;
const int BidRequest_Device::kIfaFieldNumber;
const int BidRequest_Device::kMacsha1FieldNumber;
const int BidRequest_Device::kMacmd5FieldNumber;
const int BidRequest_Device::kLmtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Device::BidRequest_Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Device)
}

void BidRequest_Device::InitAsDefaultInstance() {
  geo_ = const_cast< ::com::google::openrtb::BidRequest_Geo*>(&::com::google::openrtb::BidRequest_Geo::default_instance());
}

BidRequest_Device::BidRequest_Device(const BidRequest_Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Device)
}

void BidRequest_Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dnt_ = false;
  ua_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  didsha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  didmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dpidsha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dpidmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  make_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hwv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  ppi_ = 0;
  pxratio_ = 0;
  js_ = false;
  connectiontype_ = 0;
  devicetype_ = 1;
  flashver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ifa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macsha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macmd5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lmt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Device::~BidRequest_Device() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Device)
  SharedDtor();
}

void BidRequest_Device::SharedDtor() {
  ua_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  didsha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  didmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dpidsha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dpidmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipv6_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  make_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hwv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flashver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ifa_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macsha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  macmd5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete geo_;
  }
}

void BidRequest_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Device_descriptor_;
}

const BidRequest_Device& BidRequest_Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Device* BidRequest_Device::default_instance_ = NULL;

BidRequest_Device* BidRequest_Device::New(::google::protobuf::Arena* arena) const {
  BidRequest_Device* n = new BidRequest_Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Device)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Device, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Device*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    dnt_ = false;
    if (has_ua()) {
      ua_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::com::google::openrtb::BidRequest_Geo::Clear();
    }
    if (has_didsha1()) {
      didsha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_didmd5()) {
      didmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dpidsha1()) {
      dpidsha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dpidmd5()) {
      dpidmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_ipv6()) {
      ipv6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_carrier()) {
      carrier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_language()) {
      language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_make()) {
      make_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model()) {
      model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_os()) {
      os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_osv()) {
      osv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hwv()) {
      hwv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(w_, connectiontype_);
    js_ = false;
    devicetype_ = 1;
    if (has_flashver()) {
      flashver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[24 / 32] & 251658240u) {
    if (has_ifa()) {
      ifa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_macsha1()) {
      macsha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_macmd5()) {
      macmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    lmt_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dnt_)));
          set_has_dnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ua;
        break;
      }

      // optional string ua = 2;
      case 2: {
        if (tag == 18) {
         parse_ua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ua().data(), this->ua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.ua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_geo;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Geo geo = 4;
      case 4: {
        if (tag == 34) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_didsha1;
        break;
      }

      // optional string didsha1 = 5;
      case 5: {
        if (tag == 42) {
         parse_didsha1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_didsha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->didsha1().data(), this->didsha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.didsha1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_didmd5;
        break;
      }

      // optional string didmd5 = 6;
      case 6: {
        if (tag == 50) {
         parse_didmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_didmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->didmd5().data(), this->didmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.didmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dpidsha1;
        break;
      }

      // optional string dpidsha1 = 7;
      case 7: {
        if (tag == 58) {
         parse_dpidsha1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dpidsha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dpidsha1().data(), this->dpidsha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.dpidsha1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_dpidmd5;
        break;
      }

      // optional string dpidmd5 = 8;
      case 8: {
        if (tag == 66) {
         parse_dpidmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dpidmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dpidmd5().data(), this->dpidmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.dpidmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ipv6;
        break;
      }

      // optional string ipv6 = 9;
      case 9: {
        if (tag == 74) {
         parse_ipv6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipv6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipv6().data(), this->ipv6().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.ipv6");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_carrier;
        break;
      }

      // optional string carrier = 10;
      case 10: {
        if (tag == 82) {
         parse_carrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->carrier().data(), this->carrier().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.carrier");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_language;
        break;
      }

      // optional string language = 11;
      case 11: {
        if (tag == 90) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_make;
        break;
      }

      // optional string make = 12;
      case 12: {
        if (tag == 98) {
         parse_make:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_make()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->make().data(), this->make().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.make");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_model;
        break;
      }

      // optional string model = 13;
      case 13: {
        if (tag == 106) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_os;
        break;
      }

      // optional string os = 14;
      case 14: {
        if (tag == 114) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_osv;
        break;
      }

      // optional string osv = 15;
      case 15: {
        if (tag == 122) {
         parse_osv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->osv().data(), this->osv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.osv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_js;
        break;
      }

      // optional bool js = 16;
      case 16: {
        if (tag == 128) {
         parse_js:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &js_)));
          set_has_js();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_connectiontype;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
      case 17: {
        if (tag == 136) {
         parse_connectiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Device_ConnectionType_IsValid(value)) {
            set_connectiontype(static_cast< ::com::google::openrtb::BidRequest_Device_ConnectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_devicetype;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
      case 18: {
        if (tag == 144) {
         parse_devicetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Device_DeviceType_IsValid(value)) {
            set_devicetype(static_cast< ::com::google::openrtb::BidRequest_Device_DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_flashver;
        break;
      }

      // optional string flashver = 19;
      case 19: {
        if (tag == 154) {
         parse_flashver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flashver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flashver().data(), this->flashver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.flashver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ifa;
        break;
      }

      // optional string ifa = 20;
      case 20: {
        if (tag == 162) {
         parse_ifa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ifa().data(), this->ifa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.ifa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_macsha1;
        break;
      }

      // optional string macsha1 = 21;
      case 21: {
        if (tag == 170) {
         parse_macsha1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macsha1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macsha1().data(), this->macsha1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.macsha1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_macmd5;
        break;
      }

      // optional string macmd5 = 22;
      case 22: {
        if (tag == 178) {
         parse_macmd5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macmd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->macmd5().data(), this->macmd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.macmd5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_lmt;
        break;
      }

      // optional bool lmt = 23;
      case 23: {
        if (tag == 184) {
         parse_lmt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lmt_)));
          set_has_lmt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_hwv;
        break;
      }

      // optional string hwv = 24;
      case 24: {
        if (tag == 194) {
         parse_hwv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hwv().data(), this->hwv().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Device.hwv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_w;
        break;
      }

      // optional int32 w = 25;
      case 25: {
        if (tag == 200) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_h;
        break;
      }

      // optional int32 h = 26;
      case 26: {
        if (tag == 208) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_ppi;
        break;
      }

      // optional int32 ppi = 27;
      case 27: {
        if (tag == 216) {
         parse_ppi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppi_)));
          set_has_ppi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_pxratio;
        break;
      }

      // optional double pxratio = 28;
      case 28: {
        if (tag == 225) {
         parse_pxratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pxratio_)));
          set_has_pxratio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Device)
  return false;
#undef DO_
}

void BidRequest_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Device)
  // optional bool dnt = 1;
  if (has_dnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->dnt(), output);
  }

  // optional string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.ua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ua(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional .com.google.openrtb.BidRequest.Geo geo = 4;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->geo_, output);
  }

  // optional string didsha1 = 5;
  if (has_didsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didsha1().data(), this->didsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.didsha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->didsha1(), output);
  }

  // optional string didmd5 = 6;
  if (has_didmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didmd5().data(), this->didmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.didmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->didmd5(), output);
  }

  // optional string dpidsha1 = 7;
  if (has_dpidsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpidsha1().data(), this->dpidsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.dpidsha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->dpidsha1(), output);
  }

  // optional string dpidmd5 = 8;
  if (has_dpidmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpidmd5().data(), this->dpidmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.dpidmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->dpidmd5(), output);
  }

  // optional string ipv6 = 9;
  if (has_ipv6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6().data(), this->ipv6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.ipv6");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ipv6(), output);
  }

  // optional string carrier = 10;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.carrier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->carrier(), output);
  }

  // optional string language = 11;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->language(), output);
  }

  // optional string make = 12;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.make");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->make(), output);
  }

  // optional string model = 13;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->model(), output);
  }

  // optional string os = 14;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->os(), output);
  }

  // optional string osv = 15;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.osv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->osv(), output);
  }

  // optional bool js = 16;
  if (has_js()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->js(), output);
  }

  // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
  if (has_connectiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->connectiontype(), output);
  }

  // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->devicetype(), output);
  }

  // optional string flashver = 19;
  if (has_flashver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flashver().data(), this->flashver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.flashver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->flashver(), output);
  }

  // optional string ifa = 20;
  if (has_ifa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ifa().data(), this->ifa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.ifa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->ifa(), output);
  }

  // optional string macsha1 = 21;
  if (has_macsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macsha1().data(), this->macsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.macsha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->macsha1(), output);
  }

  // optional string macmd5 = 22;
  if (has_macmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macmd5().data(), this->macmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.macmd5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->macmd5(), output);
  }

  // optional bool lmt = 23;
  if (has_lmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->lmt(), output);
  }

  // optional string hwv = 24;
  if (has_hwv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwv().data(), this->hwv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.hwv");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->hwv(), output);
  }

  // optional int32 w = 25;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->w(), output);
  }

  // optional int32 h = 26;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->h(), output);
  }

  // optional int32 ppi = 27;
  if (has_ppi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->ppi(), output);
  }

  // optional double pxratio = 28;
  if (has_pxratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->pxratio(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Device)
}

::google::protobuf::uint8* BidRequest_Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Device)
  // optional bool dnt = 1;
  if (has_dnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->dnt(), target);
  }

  // optional string ua = 2;
  if (has_ua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ua().data(), this->ua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.ua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ua(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional .com.google.openrtb.BidRequest.Geo geo = 4;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->geo_, false, target);
  }

  // optional string didsha1 = 5;
  if (has_didsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didsha1().data(), this->didsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.didsha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->didsha1(), target);
  }

  // optional string didmd5 = 6;
  if (has_didmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->didmd5().data(), this->didmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.didmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->didmd5(), target);
  }

  // optional string dpidsha1 = 7;
  if (has_dpidsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpidsha1().data(), this->dpidsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.dpidsha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dpidsha1(), target);
  }

  // optional string dpidmd5 = 8;
  if (has_dpidmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dpidmd5().data(), this->dpidmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.dpidmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dpidmd5(), target);
  }

  // optional string ipv6 = 9;
  if (has_ipv6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipv6().data(), this->ipv6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.ipv6");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ipv6(), target);
  }

  // optional string carrier = 10;
  if (has_carrier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->carrier().data(), this->carrier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.carrier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->carrier(), target);
  }

  // optional string language = 11;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->language(), target);
  }

  // optional string make = 12;
  if (has_make()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->make().data(), this->make().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.make");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->make(), target);
  }

  // optional string model = 13;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->model(), target);
  }

  // optional string os = 14;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->os(), target);
  }

  // optional string osv = 15;
  if (has_osv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->osv().data(), this->osv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.osv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->osv(), target);
  }

  // optional bool js = 16;
  if (has_js()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->js(), target);
  }

  // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
  if (has_connectiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->connectiontype(), target);
  }

  // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->devicetype(), target);
  }

  // optional string flashver = 19;
  if (has_flashver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flashver().data(), this->flashver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.flashver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->flashver(), target);
  }

  // optional string ifa = 20;
  if (has_ifa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ifa().data(), this->ifa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.ifa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->ifa(), target);
  }

  // optional string macsha1 = 21;
  if (has_macsha1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macsha1().data(), this->macsha1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.macsha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->macsha1(), target);
  }

  // optional string macmd5 = 22;
  if (has_macmd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->macmd5().data(), this->macmd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.macmd5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->macmd5(), target);
  }

  // optional bool lmt = 23;
  if (has_lmt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->lmt(), target);
  }

  // optional string hwv = 24;
  if (has_hwv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hwv().data(), this->hwv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Device.hwv");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->hwv(), target);
  }

  // optional int32 w = 25;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->w(), target);
  }

  // optional int32 h = 26;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->h(), target);
  }

  // optional int32 ppi = 27;
  if (has_ppi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->ppi(), target);
  }

  // optional double pxratio = 28;
  if (has_pxratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->pxratio(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Device)
  return target;
}

int BidRequest_Device::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Device)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool dnt = 1;
    if (has_dnt()) {
      total_size += 1 + 1;
    }

    // optional string ua = 2;
    if (has_ua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ua());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional .com.google.openrtb.BidRequest.Geo geo = 4;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geo_);
    }

    // optional string didsha1 = 5;
    if (has_didsha1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->didsha1());
    }

    // optional string didmd5 = 6;
    if (has_didmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->didmd5());
    }

    // optional string dpidsha1 = 7;
    if (has_dpidsha1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dpidsha1());
    }

    // optional string dpidmd5 = 8;
    if (has_dpidmd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dpidmd5());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string ipv6 = 9;
    if (has_ipv6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipv6());
    }

    // optional string carrier = 10;
    if (has_carrier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrier());
    }

    // optional string language = 11;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string make = 12;
    if (has_make()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->make());
    }

    // optional string model = 13;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os = 14;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string osv = 15;
    if (has_osv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osv());
    }

    // optional string hwv = 24;
    if (has_hwv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwv());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 w = 25;
    if (has_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 26;
    if (has_h()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 ppi = 27;
    if (has_ppi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppi());
    }

    // optional double pxratio = 28;
    if (has_pxratio()) {
      total_size += 2 + 8;
    }

    // optional bool js = 16;
    if (has_js()) {
      total_size += 2 + 1;
    }

    // optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
    if (has_connectiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connectiontype());
    }

    // optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
    if (has_devicetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->devicetype());
    }

    // optional string flashver = 19;
    if (has_flashver()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flashver());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional string ifa = 20;
    if (has_ifa()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifa());
    }

    // optional string macsha1 = 21;
    if (has_macsha1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macsha1());
    }

    // optional string macmd5 = 22;
    if (has_macmd5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macmd5());
    }

    // optional bool lmt = 23;
    if (has_lmt()) {
      total_size += 2 + 1;
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Device)
    MergeFrom(*source);
  }
}

void BidRequest_Device::MergeFrom(const BidRequest_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dnt()) {
      set_dnt(from.dnt());
    }
    if (from.has_ua()) {
      set_has_ua();
      ua_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ua_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_geo()) {
      mutable_geo()->::com::google::openrtb::BidRequest_Geo::MergeFrom(from.geo());
    }
    if (from.has_didsha1()) {
      set_has_didsha1();
      didsha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.didsha1_);
    }
    if (from.has_didmd5()) {
      set_has_didmd5();
      didmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.didmd5_);
    }
    if (from.has_dpidsha1()) {
      set_has_dpidsha1();
      dpidsha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dpidsha1_);
    }
    if (from.has_dpidmd5()) {
      set_has_dpidmd5();
      dpidmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dpidmd5_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ipv6()) {
      set_has_ipv6();
      ipv6_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipv6_);
    }
    if (from.has_carrier()) {
      set_has_carrier();
      carrier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.carrier_);
    }
    if (from.has_language()) {
      set_has_language();
      language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_);
    }
    if (from.has_make()) {
      set_has_make();
      make_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.make_);
    }
    if (from.has_model()) {
      set_has_model();
      model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (from.has_os()) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (from.has_osv()) {
      set_has_osv();
      osv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osv_);
    }
    if (from.has_hwv()) {
      set_has_hwv();
      hwv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hwv_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_ppi()) {
      set_ppi(from.ppi());
    }
    if (from.has_pxratio()) {
      set_pxratio(from.pxratio());
    }
    if (from.has_js()) {
      set_js(from.js());
    }
    if (from.has_connectiontype()) {
      set_connectiontype(from.connectiontype());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_flashver()) {
      set_has_flashver();
      flashver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flashver_);
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ifa()) {
      set_has_ifa();
      ifa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ifa_);
    }
    if (from.has_macsha1()) {
      set_has_macsha1();
      macsha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macsha1_);
    }
    if (from.has_macmd5()) {
      set_has_macmd5();
      macmd5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.macmd5_);
    }
    if (from.has_lmt()) {
      set_lmt(from.lmt());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Device::CopyFrom(const BidRequest_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Device::IsInitialized() const {

  if (has_geo()) {
    if (!this->geo_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Device::Swap(BidRequest_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Device::InternalSwap(BidRequest_Device* other) {
  std::swap(dnt_, other->dnt_);
  ua_.Swap(&other->ua_);
  ip_.Swap(&other->ip_);
  std::swap(geo_, other->geo_);
  didsha1_.Swap(&other->didsha1_);
  didmd5_.Swap(&other->didmd5_);
  dpidsha1_.Swap(&other->dpidsha1_);
  dpidmd5_.Swap(&other->dpidmd5_);
  ipv6_.Swap(&other->ipv6_);
  carrier_.Swap(&other->carrier_);
  language_.Swap(&other->language_);
  make_.Swap(&other->make_);
  model_.Swap(&other->model_);
  os_.Swap(&other->os_);
  osv_.Swap(&other->osv_);
  hwv_.Swap(&other->hwv_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(ppi_, other->ppi_);
  std::swap(pxratio_, other->pxratio_);
  std::swap(js_, other->js_);
  std::swap(connectiontype_, other->connectiontype_);
  std::swap(devicetype_, other->devicetype_);
  flashver_.Swap(&other->flashver_);
  ifa_.Swap(&other->ifa_);
  macsha1_.Swap(&other->macsha1_);
  macmd5_.Swap(&other->macmd5_);
  std::swap(lmt_, other->lmt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Device_descriptor_;
  metadata.reflection = BidRequest_Device_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_Geo_LocationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_LocationType_descriptor_;
}
bool BidRequest_Geo_LocationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_Geo_LocationType BidRequest_Geo::GPS_LOCATION;
const BidRequest_Geo_LocationType BidRequest_Geo::IP;
const BidRequest_Geo_LocationType BidRequest_Geo::USER_PROVIDED;
const BidRequest_Geo_LocationType BidRequest_Geo::LocationType_MIN;
const BidRequest_Geo_LocationType BidRequest_Geo::LocationType_MAX;
const int BidRequest_Geo::LocationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Geo::kLatFieldNumber;
const int BidRequest_Geo::kLonFieldNumber;
const int BidRequest_Geo::kCountryFieldNumber;
const int BidRequest_Geo::kRegionFieldNumber;
const int BidRequest_Geo::kRegionfips104FieldNumber;
const int BidRequest_Geo::kMetroFieldNumber;
const int BidRequest_Geo::kCityFieldNumber;
const int BidRequest_Geo::kZipFieldNumber;
const int BidRequest_Geo::kTypeFieldNumber;
const int BidRequest_Geo::kUtcoffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Geo::BidRequest_Geo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Geo)
}

void BidRequest_Geo::InitAsDefaultInstance() {
}

BidRequest_Geo::BidRequest_Geo(const BidRequest_Geo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Geo)
}

void BidRequest_Geo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regionfips104_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metro_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  utcoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Geo::~BidRequest_Geo() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Geo)
  SharedDtor();
}

void BidRequest_Geo::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  regionfips104_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metro_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Geo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Geo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Geo_descriptor_;
}

const BidRequest_Geo& BidRequest_Geo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Geo* BidRequest_Geo::default_instance_ = NULL;

BidRequest_Geo* BidRequest_Geo::New(::google::protobuf::Arena* arena) const {
  BidRequest_Geo* n = new BidRequest_Geo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Geo)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest_Geo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest_Geo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(lat_, lon_);
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_region()) {
      region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_regionfips104()) {
      regionfips104_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_metro()) {
      metro_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_city()) {
      city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_zip()) {
      zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    type_ = 1;
    utcoffset_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Geo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Geo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lat = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // optional double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }

      // optional string country = 3;
      case 3: {
        if (tag == 26) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Geo.country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_region;
        break;
      }

      // optional string region = 4;
      case 4: {
        if (tag == 34) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Geo.region");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_regionfips104;
        break;
      }

      // optional string regionfips104 = 5;
      case 5: {
        if (tag == 42) {
         parse_regionfips104:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regionfips104()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regionfips104().data(), this->regionfips104().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Geo.regionfips104");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_metro;
        break;
      }

      // optional string metro = 6;
      case 6: {
        if (tag == 50) {
         parse_metro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metro().data(), this->metro().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Geo.metro");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_city;
        break;
      }

      // optional string city = 7;
      case 7: {
        if (tag == 58) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Geo.city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_zip;
        break;
      }

      // optional string zip = 8;
      case 8: {
        if (tag == 66) {
         parse_zip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zip().data(), this->zip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Geo.zip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_Geo_LocationType_IsValid(value)) {
            set_type(static_cast< ::com::google::openrtb::BidRequest_Geo_LocationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_utcoffset;
        break;
      }

      // optional int32 utcoffset = 10;
      case 10: {
        if (tag == 80) {
         parse_utcoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &utcoffset_)));
          set_has_utcoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Geo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Geo)
  return false;
#undef DO_
}

void BidRequest_Geo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Geo)
  // optional double lat = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // optional double lon = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country(), output);
  }

  // optional string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.region");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->region(), output);
  }

  // optional string regionfips104 = 5;
  if (has_regionfips104()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regionfips104().data(), this->regionfips104().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.regionfips104");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->regionfips104(), output);
  }

  // optional string metro = 6;
  if (has_metro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metro().data(), this->metro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.metro");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->metro(), output);
  }

  // optional string city = 7;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->city(), output);
  }

  // optional string zip = 8;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.zip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->zip(), output);
  }

  // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional int32 utcoffset = 10;
  if (has_utcoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->utcoffset(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Geo)
}

::google::protobuf::uint8* BidRequest_Geo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Geo)
  // optional double lat = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // optional double lon = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // optional string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }

  // optional string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.region");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->region(), target);
  }

  // optional string regionfips104 = 5;
  if (has_regionfips104()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regionfips104().data(), this->regionfips104().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.regionfips104");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->regionfips104(), target);
  }

  // optional string metro = 6;
  if (has_metro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metro().data(), this->metro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.metro");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->metro(), target);
  }

  // optional string city = 7;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->city(), target);
  }

  // optional string zip = 8;
  if (has_zip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zip().data(), this->zip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Geo.zip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->zip(), target);
  }

  // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional int32 utcoffset = 10;
  if (has_utcoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->utcoffset(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Geo)
  return target;
}

int BidRequest_Geo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Geo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double lat = 1;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional double lon = 2;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }

    // optional string regionfips104 = 5;
    if (has_regionfips104()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regionfips104());
    }

    // optional string metro = 6;
    if (has_metro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metro());
    }

    // optional string city = 7;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string zip = 8;
    if (has_zip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zip());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 utcoffset = 10;
    if (has_utcoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->utcoffset());
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Geo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Geo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Geo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Geo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Geo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Geo)
    MergeFrom(*source);
  }
}

void BidRequest_Geo::MergeFrom(const BidRequest_Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Geo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_region()) {
      set_has_region();
      region_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_);
    }
    if (from.has_regionfips104()) {
      set_has_regionfips104();
      regionfips104_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.regionfips104_);
    }
    if (from.has_metro()) {
      set_has_metro();
      metro_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metro_);
    }
    if (from.has_city()) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (from.has_zip()) {
      set_has_zip();
      zip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zip_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_utcoffset()) {
      set_utcoffset(from.utcoffset());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Geo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Geo::CopyFrom(const BidRequest_Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Geo::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Geo::Swap(BidRequest_Geo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Geo::InternalSwap(BidRequest_Geo* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  country_.Swap(&other->country_);
  region_.Swap(&other->region_);
  regionfips104_.Swap(&other->regionfips104_);
  metro_.Swap(&other->metro_);
  city_.Swap(&other->city_);
  zip_.Swap(&other->zip_);
  std::swap(type_, other->type_);
  std::swap(utcoffset_, other->utcoffset_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Geo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Geo_descriptor_;
  metadata.reflection = BidRequest_Geo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* BidRequest_User_Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_Gender_descriptor_;
}
bool BidRequest_User_Gender_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidRequest_User_Gender BidRequest_User::MALE;
const BidRequest_User_Gender BidRequest_User::FEMALE;
const BidRequest_User_Gender BidRequest_User::OTHER;
const BidRequest_User_Gender BidRequest_User::Gender_MIN;
const BidRequest_User_Gender BidRequest_User::Gender_MAX;
const int BidRequest_User::Gender_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_User::kIdFieldNumber;
const int BidRequest_User::kBuyeruidFieldNumber;
const int BidRequest_User::kYobFieldNumber;
const int BidRequest_User::kGenderFieldNumber;
const int BidRequest_User::kKeywordsFieldNumber;
const int BidRequest_User::kCustomdataFieldNumber;
const int BidRequest_User::kGeoFieldNumber;
const int BidRequest_User::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_User::BidRequest_User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.User)
}

void BidRequest_User::InitAsDefaultInstance() {
  geo_ = const_cast< ::com::google::openrtb::BidRequest_Geo*>(&::com::google::openrtb::BidRequest_Geo::default_instance());
}

BidRequest_User::BidRequest_User(const BidRequest_User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.User)
}

void BidRequest_User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyeruid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yob_ = 0;
  gender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keywords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_User::~BidRequest_User() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.User)
  SharedDtor();
}

void BidRequest_User::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyeruid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keywords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete geo_;
  }
}

void BidRequest_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_User_descriptor_;
}

const BidRequest_User& BidRequest_User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_User* BidRequest_User::default_instance_ = NULL;

BidRequest_User* BidRequest_User::New(::google::protobuf::Arena* arena) const {
  BidRequest_User* n = new BidRequest_User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_User::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.User)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_buyeruid()) {
      buyeruid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    yob_ = 0;
    if (has_gender()) {
      gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_keywords()) {
      keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_customdata()) {
      customdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_geo()) {
      if (geo_ != NULL) geo_->::com::google::openrtb::BidRequest_Geo::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.User.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buyeruid;
        break;
      }

      // optional string buyeruid = 2;
      case 2: {
        if (tag == 18) {
         parse_buyeruid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buyeruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buyeruid().data(), this->buyeruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.User.buyeruid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yob;
        break;
      }

      // optional int32 yob = 3;
      case 3: {
        if (tag == 24) {
         parse_yob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yob_)));
          set_has_yob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gender;
        break;
      }

      // optional string gender = 4;
      case 4: {
        if (tag == 34) {
         parse_gender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gender().data(), this->gender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.User.gender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_keywords;
        break;
      }

      // optional string keywords = 5;
      case 5: {
        if (tag == 42) {
         parse_keywords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keywords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keywords().data(), this->keywords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.User.keywords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_customdata;
        break;
      }

      // optional string customdata = 6;
      case 6: {
        if (tag == 50) {
         parse_customdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdata().data(), this->customdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.User.customdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_geo;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Geo geo = 7;
      case 7: {
        if (tag == 58) {
         parse_geo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Data data = 8;
      case 8: {
        if (tag == 66) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.User)
  return false;
#undef DO_
}

void BidRequest_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.User)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string buyeruid = 2;
  if (has_buyeruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyeruid().data(), this->buyeruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.buyeruid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buyeruid(), output);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yob(), output);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.gender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gender(), output);
  }

  // optional string keywords = 5;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.keywords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->keywords(), output);
  }

  // optional string customdata = 6;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdata().data(), this->customdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.customdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->customdata(), output);
  }

  // optional .com.google.openrtb.BidRequest.Geo geo = 7;
  if (has_geo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->geo_, output);
  }

  // repeated .com.google.openrtb.BidRequest.Data data = 8;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->data(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.User)
}

::google::protobuf::uint8* BidRequest_User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.User)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string buyeruid = 2;
  if (has_buyeruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buyeruid().data(), this->buyeruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.buyeruid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buyeruid(), target);
  }

  // optional int32 yob = 3;
  if (has_yob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yob(), target);
  }

  // optional string gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gender().data(), this->gender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.gender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gender(), target);
  }

  // optional string keywords = 5;
  if (has_keywords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keywords().data(), this->keywords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.keywords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->keywords(), target);
  }

  // optional string customdata = 6;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdata().data(), this->customdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.User.customdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->customdata(), target);
  }

  // optional .com.google.openrtb.BidRequest.Geo geo = 7;
  if (has_geo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->geo_, false, target);
  }

  // repeated .com.google.openrtb.BidRequest.Data data = 8;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->data(i), false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.User)
  return target;
}

int BidRequest_User::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.User)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string buyeruid = 2;
    if (has_buyeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buyeruid());
    }

    // optional int32 yob = 3;
    if (has_yob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yob());
    }

    // optional string gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gender());
    }

    // optional string keywords = 5;
    if (has_keywords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keywords());
    }

    // optional string customdata = 6;
    if (has_customdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdata());
    }

    // optional .com.google.openrtb.BidRequest.Geo geo = 7;
    if (has_geo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->geo_);
    }

  }
  // repeated .com.google.openrtb.BidRequest.Data data = 8;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_User* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.User)
    MergeFrom(*source);
  }
}

void BidRequest_User::MergeFrom(const BidRequest_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_buyeruid()) {
      set_has_buyeruid();
      buyeruid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buyeruid_);
    }
    if (from.has_yob()) {
      set_yob(from.yob());
    }
    if (from.has_gender()) {
      set_has_gender();
      gender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gender_);
    }
    if (from.has_keywords()) {
      set_has_keywords();
      keywords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keywords_);
    }
    if (from.has_customdata()) {
      set_has_customdata();
      customdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customdata_);
    }
    if (from.has_geo()) {
      mutable_geo()->::com::google::openrtb::BidRequest_Geo::MergeFrom(from.geo());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_User::CopyFrom(const BidRequest_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_User::IsInitialized() const {

  if (has_geo()) {
    if (!this->geo_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_User::Swap(BidRequest_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_User::InternalSwap(BidRequest_User* other) {
  id_.Swap(&other->id_);
  buyeruid_.Swap(&other->buyeruid_);
  std::swap(yob_, other->yob_);
  gender_.Swap(&other->gender_);
  keywords_.Swap(&other->keywords_);
  customdata_.Swap(&other->customdata_);
  std::swap(geo_, other->geo_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_User_descriptor_;
  metadata.reflection = BidRequest_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Data_Segment::kIdFieldNumber;
const int BidRequest_Data_Segment::kNameFieldNumber;
const int BidRequest_Data_Segment::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Data_Segment::BidRequest_Data_Segment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Data.Segment)
}

void BidRequest_Data_Segment::InitAsDefaultInstance() {
}

BidRequest_Data_Segment::BidRequest_Data_Segment(const BidRequest_Data_Segment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Data.Segment)
}

void BidRequest_Data_Segment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Data_Segment::~BidRequest_Data_Segment() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Data.Segment)
  SharedDtor();
}

void BidRequest_Data_Segment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Data_Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Data_Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Data_Segment_descriptor_;
}

const BidRequest_Data_Segment& BidRequest_Data_Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Data_Segment* BidRequest_Data_Segment::default_instance_ = NULL;

BidRequest_Data_Segment* BidRequest_Data_Segment::New(::google::protobuf::Arena* arena) const {
  BidRequest_Data_Segment* n = new BidRequest_Data_Segment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Data_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Data.Segment)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Data_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Data.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Data.Segment.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Data.Segment.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Data.Segment.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Data.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Data.Segment)
  return false;
#undef DO_
}

void BidRequest_Data_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Data.Segment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.Segment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.Segment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.Segment.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Data.Segment)
}

::google::protobuf::uint8* BidRequest_Data_Segment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Data.Segment)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.Segment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.Segment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.Segment.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Data.Segment)
  return target;
}

int BidRequest_Data_Segment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Data.Segment)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Data_Segment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Data.Segment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Data_Segment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Data_Segment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Data.Segment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Data.Segment)
    MergeFrom(*source);
  }
}

void BidRequest_Data_Segment::MergeFrom(const BidRequest_Data_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Data.Segment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Data_Segment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Data.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Data_Segment::CopyFrom(const BidRequest_Data_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Data.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Data_Segment::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Data_Segment::Swap(BidRequest_Data_Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Data_Segment::InternalSwap(BidRequest_Data_Segment* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Data_Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Data_Segment_descriptor_;
  metadata.reflection = BidRequest_Data_Segment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Data::kIdFieldNumber;
const int BidRequest_Data::kNameFieldNumber;
const int BidRequest_Data::kSegmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Data::BidRequest_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Data)
}

void BidRequest_Data::InitAsDefaultInstance() {
}

BidRequest_Data::BidRequest_Data(const BidRequest_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Data)
}

void BidRequest_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Data::~BidRequest_Data() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Data)
  SharedDtor();
}

void BidRequest_Data::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidRequest_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Data_descriptor_;
}

const BidRequest_Data& BidRequest_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Data* BidRequest_Data::default_instance_ = NULL;

BidRequest_Data* BidRequest_Data::New(::google::protobuf::Arena* arena) const {
  BidRequest_Data* n = new BidRequest_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Data)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  segment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Data.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.Data.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_segment;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
      case 3: {
        if (tag == 26) {
         parse_segment:
          DO_(input->IncrementRecursionDepth());
         parse_loop_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_segment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Data)
  return false;
#undef DO_
}

void BidRequest_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Data)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->segment(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Data)
}

::google::protobuf::uint8* BidRequest_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Data)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.Data.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
  for (unsigned int i = 0, n = this->segment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->segment(i), false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Data)
  return target;
}

int BidRequest_Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Data)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
  total_size += 1 * this->segment_size();
  for (int i = 0; i < this->segment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Data)
    MergeFrom(*source);
  }
}

void BidRequest_Data::MergeFrom(const BidRequest_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  segment_.MergeFrom(from.segment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Data::CopyFrom(const BidRequest_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Data::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->segment())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Data::Swap(BidRequest_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Data::InternalSwap(BidRequest_Data* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  segment_.UnsafeArenaSwap(&other->segment_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Data_descriptor_;
  metadata.reflection = BidRequest_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest_Regs::kCoppaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest_Regs::BidRequest_Regs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest.Regs)
}

void BidRequest_Regs::InitAsDefaultInstance() {
}

BidRequest_Regs::BidRequest_Regs(const BidRequest_Regs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest.Regs)
}

void BidRequest_Regs::SharedCtor() {
  _cached_size_ = 0;
  coppa_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidRequest_Regs::~BidRequest_Regs() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest.Regs)
  SharedDtor();
}

void BidRequest_Regs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BidRequest_Regs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest_Regs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_Regs_descriptor_;
}

const BidRequest_Regs& BidRequest_Regs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest_Regs* BidRequest_Regs::default_instance_ = NULL;

BidRequest_Regs* BidRequest_Regs::New(::google::protobuf::Arena* arena) const {
  BidRequest_Regs* n = new BidRequest_Regs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest_Regs::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest.Regs)
  _extensions_.Clear();
  coppa_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest_Regs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest.Regs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool coppa = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coppa_)));
          set_has_coppa();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest.Regs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest.Regs)
  return false;
#undef DO_
}

void BidRequest_Regs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest.Regs)
  // optional bool coppa = 1;
  if (has_coppa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->coppa(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest.Regs)
}

::google::protobuf::uint8* BidRequest_Regs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest.Regs)
  // optional bool coppa = 1;
  if (has_coppa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->coppa(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest.Regs)
  return target;
}

int BidRequest_Regs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest.Regs)
  int total_size = 0;

  // optional bool coppa = 1;
  if (has_coppa()) {
    total_size += 1 + 1;
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest_Regs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest.Regs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest_Regs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest_Regs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest.Regs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest.Regs)
    MergeFrom(*source);
  }
}

void BidRequest_Regs::MergeFrom(const BidRequest_Regs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest.Regs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coppa()) {
      set_coppa(from.coppa());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest_Regs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest.Regs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest_Regs::CopyFrom(const BidRequest_Regs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest.Regs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest_Regs::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest_Regs::Swap(BidRequest_Regs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest_Regs::InternalSwap(BidRequest_Regs* other) {
  std::swap(coppa_, other->coppa_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest_Regs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_Regs_descriptor_;
  metadata.reflection = BidRequest_Regs_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidRequest::kIdFieldNumber;
const int BidRequest::kImpFieldNumber;
const int BidRequest::kSiteFieldNumber;
const int BidRequest::kAppFieldNumber;
const int BidRequest::kDeviceFieldNumber;
const int BidRequest::kRegsFieldNumber;
const int BidRequest::kUserFieldNumber;
const int BidRequest::kAtFieldNumber;
const int BidRequest::kTmaxFieldNumber;
const int BidRequest::kWseatFieldNumber;
const int BidRequest::kAllimpsFieldNumber;
const int BidRequest::kCurFieldNumber;
const int BidRequest::kBcatFieldNumber;
const int BidRequest::kBadvFieldNumber;
const int BidRequest::kTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidRequest::BidRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidRequest)
}

void BidRequest::InitAsDefaultInstance() {
  BidRequest_default_oneof_instance_->site_ = const_cast< ::com::google::openrtb::BidRequest_Site*>(&::com::google::openrtb::BidRequest_Site::default_instance());
  BidRequest_default_oneof_instance_->app_ = const_cast< ::com::google::openrtb::BidRequest_App*>(&::com::google::openrtb::BidRequest_App::default_instance());
  device_ = const_cast< ::com::google::openrtb::BidRequest_Device*>(&::com::google::openrtb::BidRequest_Device::default_instance());
  regs_ = const_cast< ::com::google::openrtb::BidRequest_Regs*>(&::com::google::openrtb::BidRequest_Regs::default_instance());
  user_ = const_cast< ::com::google::openrtb::BidRequest_User*>(&::com::google::openrtb::BidRequest_User::default_instance());
}

BidRequest::BidRequest(const BidRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidRequest)
}

void BidRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = NULL;
  regs_ = NULL;
  user_ = NULL;
  at_ = 2;
  tmax_ = 0;
  allimps_ = false;
  test_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_distributionchannel_oneof();
}

BidRequest::~BidRequest() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidRequest)
  SharedDtor();
}

void BidRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_distributionchannel_oneof()) {
    clear_distributionchannel_oneof();
  }
  if (this != default_instance_) {
    delete device_;
    delete regs_;
    delete user_;
  }
}

void BidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidRequest_descriptor_;
}

const BidRequest& BidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidRequest* BidRequest::default_instance_ = NULL;

BidRequest* BidRequest::New(::google::protobuf::Arena* arena) const {
  BidRequest* n = new BidRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidRequest::clear_distributionchannel_oneof() {
// @@protoc_insertion_point(one_of_clear_start:com.google.openrtb.BidRequest)
  switch(distributionchannel_oneof_case()) {
    case kSite: {
      delete distributionchannel_oneof_.site_;
      break;
    }
    case kApp: {
      delete distributionchannel_oneof_.app_;
      break;
    }
    case DISTRIBUTIONCHANNEL_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DISTRIBUTIONCHANNEL_ONEOF_NOT_SET;
}


void BidRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidRequest)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BidRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BidRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 241u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device()) {
      if (device_ != NULL) device_->::com::google::openrtb::BidRequest_Device::Clear();
    }
    if (has_regs()) {
      if (regs_ != NULL) regs_->::com::google::openrtb::BidRequest_Regs::Clear();
    }
    if (has_user()) {
      if (user_ != NULL) user_->::com::google::openrtb::BidRequest_User::Clear();
    }
    at_ = 2;
  }
  if (_has_bits_[8 / 32] & 17664u) {
    ZR_(allimps_, test_);
    tmax_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  imp_.Clear();
  wseat_.Clear();
  cur_.Clear();
  bcat_.Clear();
  badv_.Clear();
  clear_distributionchannel_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imp;
        break;
      }

      // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
      case 2: {
        if (tag == 18) {
         parse_imp:
          DO_(input->IncrementRecursionDepth());
         parse_loop_imp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_imp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_imp;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_site;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Site site = 3;
      case 3: {
        if (tag == 26) {
         parse_site:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_site()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_app;
        break;
      }

      // optional .com.google.openrtb.BidRequest.App app = 4;
      case 4: {
        if (tag == 34) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_device;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Device device = 5;
      case 5: {
        if (tag == 42) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_user;
        break;
      }

      // optional .com.google.openrtb.BidRequest.User user = 6;
      case 6: {
        if (tag == 50) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_at;
        break;
      }

      // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
      case 7: {
        if (tag == 56) {
         parse_at:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidRequest_AuctionType_IsValid(value)) {
            set_at(static_cast< ::com::google::openrtb::BidRequest_AuctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tmax;
        break;
      }

      // optional int32 tmax = 8;
      case 8: {
        if (tag == 64) {
         parse_tmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tmax_)));
          set_has_tmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_wseat;
        break;
      }

      // repeated string wseat = 9;
      case 9: {
        if (tag == 74) {
         parse_wseat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wseat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wseat(this->wseat_size() - 1).data(),
            this->wseat(this->wseat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.wseat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_wseat;
        if (input->ExpectTag(80)) goto parse_allimps;
        break;
      }

      // optional bool allimps = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_allimps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allimps_)));
          set_has_allimps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cur;
        break;
      }

      // repeated string cur = 11;
      case 11: {
        if (tag == 90) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur(this->cur_size() - 1).data(),
            this->cur(this->cur_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.cur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cur;
        if (input->ExpectTag(98)) goto parse_bcat;
        break;
      }

      // repeated string bcat = 12;
      case 12: {
        if (tag == 98) {
         parse_bcat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bcat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bcat(this->bcat_size() - 1).data(),
            this->bcat(this->bcat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.bcat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_bcat;
        if (input->ExpectTag(106)) goto parse_badv;
        break;
      }

      // repeated string badv = 13;
      case 13: {
        if (tag == 106) {
         parse_badv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_badv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->badv(this->badv_size() - 1).data(),
            this->badv(this->badv_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidRequest.badv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_badv;
        if (input->ExpectTag(114)) goto parse_regs;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Regs regs = 14;
      case 14: {
        if (tag == 114) {
         parse_regs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_test;
        break;
      }

      // optional bool test = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidRequest)
  return false;
#undef DO_
}

void BidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
  for (unsigned int i = 0, n = this->imp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->imp(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Site site = 3;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *distributionchannel_oneof_.site_, output);
  }

  // optional .com.google.openrtb.BidRequest.App app = 4;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *distributionchannel_oneof_.app_, output);
  }

  // optional .com.google.openrtb.BidRequest.Device device = 5;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->device_, output);
  }

  // optional .com.google.openrtb.BidRequest.User user = 6;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->user_, output);
  }

  // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
  if (has_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->at(), output);
  }

  // optional int32 tmax = 8;
  if (has_tmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tmax(), output);
  }

  // repeated string wseat = 9;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.wseat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->wseat(i), output);
  }

  // optional bool allimps = 10 [default = false];
  if (has_allimps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allimps(), output);
  }

  // repeated string cur = 11;
  for (int i = 0; i < this->cur_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur(i).data(), this->cur(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.cur");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->cur(i), output);
  }

  // repeated string bcat = 12;
  for (int i = 0; i < this->bcat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bcat(i).data(), this->bcat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.bcat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bcat(i), output);
  }

  // repeated string badv = 13;
  for (int i = 0; i < this->badv_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->badv(i).data(), this->badv(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.badv");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->badv(i), output);
  }

  // optional .com.google.openrtb.BidRequest.Regs regs = 14;
  if (has_regs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->regs_, output);
  }

  // optional bool test = 15 [default = false];
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->test(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidRequest)
}

::google::protobuf::uint8* BidRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidRequest)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
  for (unsigned int i = 0, n = this->imp_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->imp(i), false, target);
  }

  // optional .com.google.openrtb.BidRequest.Site site = 3;
  if (has_site()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *distributionchannel_oneof_.site_, false, target);
  }

  // optional .com.google.openrtb.BidRequest.App app = 4;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *distributionchannel_oneof_.app_, false, target);
  }

  // optional .com.google.openrtb.BidRequest.Device device = 5;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->device_, false, target);
  }

  // optional .com.google.openrtb.BidRequest.User user = 6;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->user_, false, target);
  }

  // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
  if (has_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->at(), target);
  }

  // optional int32 tmax = 8;
  if (has_tmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tmax(), target);
  }

  // repeated string wseat = 9;
  for (int i = 0; i < this->wseat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wseat(i).data(), this->wseat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.wseat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->wseat(i), target);
  }

  // optional bool allimps = 10 [default = false];
  if (has_allimps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allimps(), target);
  }

  // repeated string cur = 11;
  for (int i = 0; i < this->cur_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur(i).data(), this->cur(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.cur");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->cur(i), target);
  }

  // repeated string bcat = 12;
  for (int i = 0; i < this->bcat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bcat(i).data(), this->bcat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.bcat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->bcat(i), target);
  }

  // repeated string badv = 13;
  for (int i = 0; i < this->badv_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->badv(i).data(), this->badv(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidRequest.badv");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->badv(i), target);
  }

  // optional .com.google.openrtb.BidRequest.Regs regs = 14;
  if (has_regs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->regs_, false, target);
  }

  // optional bool test = 15 [default = false];
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->test(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidRequest)
  return target;
}

int BidRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidRequest)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[4 / 32] & 240u) {
    // optional .com.google.openrtb.BidRequest.Device device = 5;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_);
    }

    // optional .com.google.openrtb.BidRequest.Regs regs = 14;
    if (has_regs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->regs_);
    }

    // optional .com.google.openrtb.BidRequest.User user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

    // optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
    if (has_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->at());
    }

  }
  if (_has_bits_[8 / 32] & 17664u) {
    // optional int32 tmax = 8;
    if (has_tmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tmax());
    }

    // optional bool allimps = 10 [default = false];
    if (has_allimps()) {
      total_size += 1 + 1;
    }

    // optional bool test = 15 [default = false];
    if (has_test()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.google.openrtb.BidRequest.Imp imp = 2;
  total_size += 1 * this->imp_size();
  for (int i = 0; i < this->imp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imp(i));
  }

  // repeated string wseat = 9;
  total_size += 1 * this->wseat_size();
  for (int i = 0; i < this->wseat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wseat(i));
  }

  // repeated string cur = 11;
  total_size += 1 * this->cur_size();
  for (int i = 0; i < this->cur_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cur(i));
  }

  // repeated string bcat = 12;
  total_size += 1 * this->bcat_size();
  for (int i = 0; i < this->bcat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bcat(i));
  }

  // repeated string badv = 13;
  total_size += 1 * this->badv_size();
  for (int i = 0; i < this->badv_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->badv(i));
  }

  switch (distributionchannel_oneof_case()) {
    // optional .com.google.openrtb.BidRequest.Site site = 3;
    case kSite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *distributionchannel_oneof_.site_);
      break;
    }
    // optional .com.google.openrtb.BidRequest.App app = 4;
    case kApp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *distributionchannel_oneof_.app_);
      break;
    }
    case DISTRIBUTIONCHANNEL_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidRequest)
    MergeFrom(*source);
  }
}

void BidRequest::MergeFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  imp_.MergeFrom(from.imp_);
  wseat_.MergeFrom(from.wseat_);
  cur_.MergeFrom(from.cur_);
  bcat_.MergeFrom(from.bcat_);
  badv_.MergeFrom(from.badv_);
  switch (from.distributionchannel_oneof_case()) {
    case kSite: {
      mutable_site()->::com::google::openrtb::BidRequest_Site::MergeFrom(from.site());
      break;
    }
    case kApp: {
      mutable_app()->::com::google::openrtb::BidRequest_App::MergeFrom(from.app());
      break;
    }
    case DISTRIBUTIONCHANNEL_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_device()) {
      mutable_device()->::com::google::openrtb::BidRequest_Device::MergeFrom(from.device());
    }
    if (from.has_regs()) {
      mutable_regs()->::com::google::openrtb::BidRequest_Regs::MergeFrom(from.regs());
    }
    if (from.has_user()) {
      mutable_user()->::com::google::openrtb::BidRequest_User::MergeFrom(from.user());
    }
    if (from.has_at()) {
      set_at(from.at());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tmax()) {
      set_tmax(from.tmax());
    }
    if (from.has_allimps()) {
      set_allimps(from.allimps());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidRequest::CopyFrom(const BidRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->imp())) return false;
  if (has_site()) {
    if (!this->site().IsInitialized()) return false;
  }
  if (has_app()) {
    if (!this->app().IsInitialized()) return false;
  }
  if (has_device()) {
    if (!this->device_->IsInitialized()) return false;
  }
  if (has_regs()) {
    if (!this->regs_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidRequest::Swap(BidRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidRequest::InternalSwap(BidRequest* other) {
  id_.Swap(&other->id_);
  imp_.UnsafeArenaSwap(&other->imp_);
  std::swap(device_, other->device_);
  std::swap(regs_, other->regs_);
  std::swap(user_, other->user_);
  std::swap(at_, other->at_);
  std::swap(tmax_, other->tmax_);
  wseat_.UnsafeArenaSwap(&other->wseat_);
  std::swap(allimps_, other->allimps_);
  cur_.UnsafeArenaSwap(&other->cur_);
  bcat_.UnsafeArenaSwap(&other->bcat_);
  badv_.UnsafeArenaSwap(&other->badv_);
  std::swap(test_, other->test_);
  std::swap(distributionchannel_oneof_, other->distributionchannel_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidRequest_descriptor_;
  metadata.reflection = BidRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidRequest_Imp_Banner

// optional int32 w = 1;
bool BidRequest_Imp_Banner::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp_Banner::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp_Banner::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp_Banner::clear_w() {
  w_ = 0;
  clear_has_w();
}
 ::google::protobuf::int32 BidRequest_Imp_Banner::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.w)
  return w_;
}
 void BidRequest_Imp_Banner::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.w)
}

// optional int32 h = 2;
bool BidRequest_Imp_Banner::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp_Banner::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp_Banner::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp_Banner::clear_h() {
  h_ = 0;
  clear_has_h();
}
 ::google::protobuf::int32 BidRequest_Imp_Banner::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.h)
  return h_;
}
 void BidRequest_Imp_Banner::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.h)
}

// optional int32 wmax = 11;
bool BidRequest_Imp_Banner::has_wmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Imp_Banner::set_has_wmax() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Imp_Banner::clear_has_wmax() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Imp_Banner::clear_wmax() {
  wmax_ = 0;
  clear_has_wmax();
}
 ::google::protobuf::int32 BidRequest_Imp_Banner::wmax() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.wmax)
  return wmax_;
}
 void BidRequest_Imp_Banner::set_wmax(::google::protobuf::int32 value) {
  set_has_wmax();
  wmax_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.wmax)
}

// optional int32 hmax = 12;
bool BidRequest_Imp_Banner::has_hmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Imp_Banner::set_has_hmax() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Imp_Banner::clear_has_hmax() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Imp_Banner::clear_hmax() {
  hmax_ = 0;
  clear_has_hmax();
}
 ::google::protobuf::int32 BidRequest_Imp_Banner::hmax() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.hmax)
  return hmax_;
}
 void BidRequest_Imp_Banner::set_hmax(::google::protobuf::int32 value) {
  set_has_hmax();
  hmax_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.hmax)
}

// optional int32 wmin = 13;
bool BidRequest_Imp_Banner::has_wmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Imp_Banner::set_has_wmin() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Imp_Banner::clear_has_wmin() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Imp_Banner::clear_wmin() {
  wmin_ = 0;
  clear_has_wmin();
}
 ::google::protobuf::int32 BidRequest_Imp_Banner::wmin() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.wmin)
  return wmin_;
}
 void BidRequest_Imp_Banner::set_wmin(::google::protobuf::int32 value) {
  set_has_wmin();
  wmin_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.wmin)
}

// optional int32 hmin = 14;
bool BidRequest_Imp_Banner::has_hmin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Imp_Banner::set_has_hmin() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Imp_Banner::clear_has_hmin() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Imp_Banner::clear_hmin() {
  hmin_ = 0;
  clear_has_hmin();
}
 ::google::protobuf::int32 BidRequest_Imp_Banner::hmin() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.hmin)
  return hmin_;
}
 void BidRequest_Imp_Banner::set_hmin(::google::protobuf::int32 value) {
  set_has_hmin();
  hmin_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.hmin)
}

// optional string id = 3;
bool BidRequest_Imp_Banner::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Imp_Banner::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Imp_Banner::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Imp_Banner::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Imp_Banner::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp_Banner::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.id)
}
 void BidRequest_Imp_Banner::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Banner.id)
}
 void BidRequest_Imp_Banner::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Banner.id)
}
 ::std::string* BidRequest_Imp_Banner::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Banner.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp_Banner::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.Banner.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp_Banner::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Banner.id)
}

// optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 4;
bool BidRequest_Imp_Banner::has_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Imp_Banner::set_has_pos() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Imp_Banner::clear_has_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Imp_Banner::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
 ::com::google::openrtb::BidRequest_Imp_AdPosition BidRequest_Imp_Banner::pos() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.pos)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_AdPosition >(pos_);
}
 void BidRequest_Imp_Banner::set_pos(::com::google::openrtb::BidRequest_Imp_AdPosition value) {
  assert(::com::google::openrtb::BidRequest_Imp_AdPosition_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.pos)
}

// repeated .com.google.openrtb.BidRequest.Imp.Banner.BannerAdType btype = 5 [packed = true];
int BidRequest_Imp_Banner::btype_size() const {
  return btype_.size();
}
void BidRequest_Imp_Banner::clear_btype() {
  btype_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType BidRequest_Imp_Banner::btype(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.btype)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType >(btype_.Get(index));
}
 void BidRequest_Imp_Banner::set_btype(int index, ::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType value) {
  assert(::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_IsValid(value));
  btype_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.btype)
}
 void BidRequest_Imp_Banner::add_btype(::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType value) {
  assert(::com::google::openrtb::BidRequest_Imp_Banner_BannerAdType_IsValid(value));
  btype_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.btype)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Banner::btype() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.btype)
  return btype_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Banner::mutable_btype() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.btype)
  return &btype_;
}

// repeated .com.google.openrtb.CreativeAttribute battr = 6 [packed = true];
int BidRequest_Imp_Banner::battr_size() const {
  return battr_.size();
}
void BidRequest_Imp_Banner::clear_battr() {
  battr_.Clear();
}
 ::com::google::openrtb::CreativeAttribute BidRequest_Imp_Banner::battr(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.battr)
  return static_cast< ::com::google::openrtb::CreativeAttribute >(battr_.Get(index));
}
 void BidRequest_Imp_Banner::set_battr(int index, ::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.battr)
}
 void BidRequest_Imp_Banner::add_battr(::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.battr)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Banner::battr() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.battr)
  return battr_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Banner::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.battr)
  return &battr_;
}

// repeated string mimes = 7;
int BidRequest_Imp_Banner::mimes_size() const {
  return mimes_.size();
}
void BidRequest_Imp_Banner::clear_mimes() {
  mimes_.Clear();
}
 const ::std::string& BidRequest_Imp_Banner::mimes(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return mimes_.Get(index);
}
 ::std::string* BidRequest_Imp_Banner::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return mimes_.Mutable(index);
}
 void BidRequest_Imp_Banner::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  mimes_.Mutable(index)->assign(value);
}
 void BidRequest_Imp_Banner::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
 void BidRequest_Imp_Banner::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
 ::std::string* BidRequest_Imp_Banner::add_mimes() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return mimes_.Add();
}
 void BidRequest_Imp_Banner::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
 void BidRequest_Imp_Banner::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
 void BidRequest_Imp_Banner::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.Banner.mimes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Banner::mimes() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return mimes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Banner::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.mimes)
  return &mimes_;
}

// optional bool topframe = 8;
bool BidRequest_Imp_Banner::has_topframe() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Imp_Banner::set_has_topframe() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Imp_Banner::clear_has_topframe() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Imp_Banner::clear_topframe() {
  topframe_ = false;
  clear_has_topframe();
}
 bool BidRequest_Imp_Banner::topframe() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.topframe)
  return topframe_;
}
 void BidRequest_Imp_Banner::set_topframe(bool value) {
  set_has_topframe();
  topframe_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.topframe)
}

// repeated .com.google.openrtb.BidRequest.Imp.Banner.ExpandableDirection expdir = 9 [packed = true];
int BidRequest_Imp_Banner::expdir_size() const {
  return expdir_.size();
}
void BidRequest_Imp_Banner::clear_expdir() {
  expdir_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection BidRequest_Imp_Banner::expdir(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.expdir)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection >(expdir_.Get(index));
}
 void BidRequest_Imp_Banner::set_expdir(int index, ::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection value) {
  assert(::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_IsValid(value));
  expdir_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.expdir)
}
 void BidRequest_Imp_Banner::add_expdir(::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection value) {
  assert(::com::google::openrtb::BidRequest_Imp_Banner_ExpandableDirection_IsValid(value));
  expdir_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.expdir)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Banner::expdir() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.expdir)
  return expdir_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Banner::mutable_expdir() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.expdir)
  return &expdir_;
}

// repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 10 [packed = true];
int BidRequest_Imp_Banner::api_size() const {
  return api_.size();
}
void BidRequest_Imp_Banner::clear_api() {
  api_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_APIFramework BidRequest_Imp_Banner::api(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Banner.api)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(api_.Get(index));
}
 void BidRequest_Imp_Banner::set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Banner.api)
}
 void BidRequest_Imp_Banner::add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Banner.api)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Banner::api() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Banner.api)
  return api_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Banner::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Banner.api)
  return &api_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Video_CompanionAd

// repeated .com.google.openrtb.BidRequest.Imp.Banner banner = 1;
int BidRequest_Imp_Video_CompanionAd::banner_size() const {
  return banner_.size();
}
void BidRequest_Imp_Video_CompanionAd::clear_banner() {
  banner_.Clear();
}
const ::com::google::openrtb::BidRequest_Imp_Banner& BidRequest_Imp_Video_CompanionAd::banner(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return banner_.Get(index);
}
::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp_Video_CompanionAd::mutable_banner(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return banner_.Mutable(index);
}
::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp_Video_CompanionAd::add_banner() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return banner_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >*
BidRequest_Imp_Video_CompanionAd::mutable_banner() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return &banner_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >&
BidRequest_Imp_Video_CompanionAd::banner() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner)
  return banner_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Video

// repeated string mimes = 1;
int BidRequest_Imp_Video::mimes_size() const {
  return mimes_.size();
}
void BidRequest_Imp_Video::clear_mimes() {
  mimes_.Clear();
}
 const ::std::string& BidRequest_Imp_Video::mimes(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return mimes_.Get(index);
}
 ::std::string* BidRequest_Imp_Video::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return mimes_.Mutable(index);
}
 void BidRequest_Imp_Video::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.mimes)
  mimes_.Mutable(index)->assign(value);
}
 void BidRequest_Imp_Video::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
 void BidRequest_Imp_Video::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
 ::std::string* BidRequest_Imp_Video::add_mimes() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return mimes_.Add();
}
 void BidRequest_Imp_Video::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
 void BidRequest_Imp_Video::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
 void BidRequest_Imp_Video::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.Video.mimes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Video::mimes() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return mimes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Video::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.mimes)
  return &mimes_;
}

// optional .com.google.openrtb.BidRequest.Imp.Video.VideoLinearity linearity = 2;
bool BidRequest_Imp_Video::has_linearity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp_Video::set_has_linearity() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp_Video::clear_has_linearity() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp_Video::clear_linearity() {
  linearity_ = 1;
  clear_has_linearity();
}
 ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity BidRequest_Imp_Video::linearity() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.linearity)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity >(linearity_);
}
 void BidRequest_Imp_Video::set_linearity(::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoLinearity_IsValid(value));
  set_has_linearity();
  linearity_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.linearity)
}

// optional int32 minduration = 3;
bool BidRequest_Imp_Video::has_minduration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Imp_Video::set_has_minduration() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Imp_Video::clear_has_minduration() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Imp_Video::clear_minduration() {
  minduration_ = 0;
  clear_has_minduration();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::minduration() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.minduration)
  return minduration_;
}
 void BidRequest_Imp_Video::set_minduration(::google::protobuf::int32 value) {
  set_has_minduration();
  minduration_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.minduration)
}

// optional int32 maxduration = 4;
bool BidRequest_Imp_Video::has_maxduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Imp_Video::set_has_maxduration() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Imp_Video::clear_has_maxduration() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Imp_Video::clear_maxduration() {
  maxduration_ = 0;
  clear_has_maxduration();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::maxduration() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.maxduration)
  return maxduration_;
}
 void BidRequest_Imp_Video::set_maxduration(::google::protobuf::int32 value) {
  set_has_maxduration();
  maxduration_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.maxduration)
}

// optional .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocol = 5 [deprecated = true];
bool BidRequest_Imp_Video::has_protocol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Imp_Video::set_has_protocol() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Imp_Video::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Imp_Video::clear_protocol() {
  protocol_ = 1;
  clear_has_protocol();
}
 ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::protocol() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.protocol)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(protocol_);
}
 void BidRequest_Imp_Video::set_protocol(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value));
  set_has_protocol();
  protocol_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.protocol)
}

// repeated .com.google.openrtb.BidRequest.Imp.Video.VideoBidResponseProtocol protocols = 21 [packed = true];
int BidRequest_Imp_Video::protocols_size() const {
  return protocols_.size();
}
void BidRequest_Imp_Video::clear_protocols() {
  protocols_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol BidRequest_Imp_Video::protocols(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.protocols)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol >(protocols_.Get(index));
}
 void BidRequest_Imp_Video::set_protocols(int index, ::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value));
  protocols_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.protocols)
}
 void BidRequest_Imp_Video::add_protocols(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoBidResponseProtocol_IsValid(value));
  protocols_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.protocols)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::protocols() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.protocols)
  return protocols_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.protocols)
  return &protocols_;
}

// optional int32 w = 6;
bool BidRequest_Imp_Video::has_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Imp_Video::set_has_w() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Imp_Video::clear_has_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Imp_Video::clear_w() {
  w_ = 0;
  clear_has_w();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.w)
  return w_;
}
 void BidRequest_Imp_Video::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.w)
}

// optional int32 h = 7;
bool BidRequest_Imp_Video::has_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Imp_Video::set_has_h() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Imp_Video::clear_has_h() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Imp_Video::clear_h() {
  h_ = 0;
  clear_has_h();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.h)
  return h_;
}
 void BidRequest_Imp_Video::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.h)
}

// optional int32 startdelay = 8;
bool BidRequest_Imp_Video::has_startdelay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Imp_Video::set_has_startdelay() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Imp_Video::clear_has_startdelay() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Imp_Video::clear_startdelay() {
  startdelay_ = 0;
  clear_has_startdelay();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::startdelay() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.startdelay)
  return startdelay_;
}
 void BidRequest_Imp_Video::set_startdelay(::google::protobuf::int32 value) {
  set_has_startdelay();
  startdelay_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.startdelay)
}

// optional int32 sequence = 9 [default = 1];
bool BidRequest_Imp_Video::has_sequence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Imp_Video::set_has_sequence() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Imp_Video::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Imp_Video::clear_sequence() {
  sequence_ = 1;
  clear_has_sequence();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::sequence() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.sequence)
  return sequence_;
}
 void BidRequest_Imp_Video::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.sequence)
}

// repeated .com.google.openrtb.CreativeAttribute battr = 10 [packed = true];
int BidRequest_Imp_Video::battr_size() const {
  return battr_.size();
}
void BidRequest_Imp_Video::clear_battr() {
  battr_.Clear();
}
 ::com::google::openrtb::CreativeAttribute BidRequest_Imp_Video::battr(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.battr)
  return static_cast< ::com::google::openrtb::CreativeAttribute >(battr_.Get(index));
}
 void BidRequest_Imp_Video::set_battr(int index, ::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.battr)
}
 void BidRequest_Imp_Video::add_battr(::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.battr)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::battr() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.battr)
  return battr_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.battr)
  return &battr_;
}

// optional int32 maxextended = 11;
bool BidRequest_Imp_Video::has_maxextended() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Imp_Video::set_has_maxextended() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Imp_Video::clear_has_maxextended() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Imp_Video::clear_maxextended() {
  maxextended_ = 0;
  clear_has_maxextended();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::maxextended() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.maxextended)
  return maxextended_;
}
 void BidRequest_Imp_Video::set_maxextended(::google::protobuf::int32 value) {
  set_has_maxextended();
  maxextended_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.maxextended)
}

// optional int32 minbitrate = 12;
bool BidRequest_Imp_Video::has_minbitrate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_Imp_Video::set_has_minbitrate() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_Imp_Video::clear_has_minbitrate() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_Imp_Video::clear_minbitrate() {
  minbitrate_ = 0;
  clear_has_minbitrate();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::minbitrate() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.minbitrate)
  return minbitrate_;
}
 void BidRequest_Imp_Video::set_minbitrate(::google::protobuf::int32 value) {
  set_has_minbitrate();
  minbitrate_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.minbitrate)
}

// optional int32 maxbitrate = 13;
bool BidRequest_Imp_Video::has_maxbitrate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_Imp_Video::set_has_maxbitrate() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_Imp_Video::clear_has_maxbitrate() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_Imp_Video::clear_maxbitrate() {
  maxbitrate_ = 0;
  clear_has_maxbitrate();
}
 ::google::protobuf::int32 BidRequest_Imp_Video::maxbitrate() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.maxbitrate)
  return maxbitrate_;
}
 void BidRequest_Imp_Video::set_maxbitrate(::google::protobuf::int32 value) {
  set_has_maxbitrate();
  maxbitrate_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.maxbitrate)
}

// optional bool boxingallowed = 14 [default = true];
bool BidRequest_Imp_Video::has_boxingallowed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest_Imp_Video::set_has_boxingallowed() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest_Imp_Video::clear_has_boxingallowed() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest_Imp_Video::clear_boxingallowed() {
  boxingallowed_ = true;
  clear_has_boxingallowed();
}
 bool BidRequest_Imp_Video::boxingallowed() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.boxingallowed)
  return boxingallowed_;
}
 void BidRequest_Imp_Video::set_boxingallowed(bool value) {
  set_has_boxingallowed();
  boxingallowed_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.boxingallowed)
}

// repeated .com.google.openrtb.BidRequest.Imp.Video.VideoPlaybackMethod playbackmethod = 15 [packed = true];
int BidRequest_Imp_Video::playbackmethod_size() const {
  return playbackmethod_.size();
}
void BidRequest_Imp_Video::clear_playbackmethod() {
  playbackmethod_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod BidRequest_Imp_Video::playbackmethod(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod >(playbackmethod_.Get(index));
}
 void BidRequest_Imp_Video::set_playbackmethod(int index, ::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value));
  playbackmethod_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
}
 void BidRequest_Imp_Video::add_playbackmethod(::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VideoPlaybackMethod_IsValid(value));
  playbackmethod_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::playbackmethod() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
  return playbackmethod_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_playbackmethod() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.playbackmethod)
  return &playbackmethod_;
}

// repeated .com.google.openrtb.BidRequest.Imp.Video.ContentDeliveryMethod delivery = 16 [packed = true];
int BidRequest_Imp_Video::delivery_size() const {
  return delivery_.size();
}
void BidRequest_Imp_Video::clear_delivery() {
  delivery_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod BidRequest_Imp_Video::delivery(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.delivery)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod >(delivery_.Get(index));
}
 void BidRequest_Imp_Video::set_delivery(int index, ::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value));
  delivery_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.delivery)
}
 void BidRequest_Imp_Video::add_delivery(::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_ContentDeliveryMethod_IsValid(value));
  delivery_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.delivery)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::delivery() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.delivery)
  return delivery_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_delivery() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.delivery)
  return &delivery_;
}

// optional .com.google.openrtb.BidRequest.Imp.AdPosition pos = 17;
bool BidRequest_Imp_Video::has_pos() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BidRequest_Imp_Video::set_has_pos() {
  _has_bits_[0] |= 0x00020000u;
}
void BidRequest_Imp_Video::clear_has_pos() {
  _has_bits_[0] &= ~0x00020000u;
}
void BidRequest_Imp_Video::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
 ::com::google::openrtb::BidRequest_Imp_AdPosition BidRequest_Imp_Video::pos() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.pos)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_AdPosition >(pos_);
}
 void BidRequest_Imp_Video::set_pos(::com::google::openrtb::BidRequest_Imp_AdPosition value) {
  assert(::com::google::openrtb::BidRequest_Imp_AdPosition_IsValid(value));
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.pos)
}

// repeated .com.google.openrtb.BidRequest.Imp.Banner companionad = 18;
int BidRequest_Imp_Video::companionad_size() const {
  return companionad_.size();
}
void BidRequest_Imp_Video::clear_companionad() {
  companionad_.Clear();
}
const ::com::google::openrtb::BidRequest_Imp_Banner& BidRequest_Imp_Video::companionad(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return companionad_.Get(index);
}
::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp_Video::mutable_companionad(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return companionad_.Mutable(index);
}
::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp_Video::add_companionad() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return companionad_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >*
BidRequest_Imp_Video::mutable_companionad() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return &companionad_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Banner >&
BidRequest_Imp_Video::companionad() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.companionad)
  return companionad_;
}

// optional .com.google.openrtb.BidRequest.Imp.Video.CompanionAd companionad_21 = 22 [deprecated = true];
bool BidRequest_Imp_Video::has_companionad_21() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BidRequest_Imp_Video::set_has_companionad_21() {
  _has_bits_[0] |= 0x00080000u;
}
void BidRequest_Imp_Video::clear_has_companionad_21() {
  _has_bits_[0] &= ~0x00080000u;
}
void BidRequest_Imp_Video::clear_companionad_21() {
  if (companionad_21_ != NULL) companionad_21_->::com::google::openrtb::BidRequest_Imp_Video_CompanionAd::Clear();
  clear_has_companionad_21();
}
const ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd& BidRequest_Imp_Video::companionad_21() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.companionad_21)
  return companionad_21_ != NULL ? *companionad_21_ : *default_instance_->companionad_21_;
}
::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* BidRequest_Imp_Video::mutable_companionad_21() {
  set_has_companionad_21();
  if (companionad_21_ == NULL) {
    companionad_21_ = new ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Video.companionad_21)
  return companionad_21_;
}
::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* BidRequest_Imp_Video::release_companionad_21() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.Video.companionad_21)
  clear_has_companionad_21();
  ::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* temp = companionad_21_;
  companionad_21_ = NULL;
  return temp;
}
void BidRequest_Imp_Video::set_allocated_companionad_21(::com::google::openrtb::BidRequest_Imp_Video_CompanionAd* companionad_21) {
  delete companionad_21_;
  companionad_21_ = companionad_21;
  if (companionad_21) {
    set_has_companionad_21();
  } else {
    clear_has_companionad_21();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Video.companionad_21)
}

// repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 19 [packed = true];
int BidRequest_Imp_Video::api_size() const {
  return api_.size();
}
void BidRequest_Imp_Video::clear_api() {
  api_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_APIFramework BidRequest_Imp_Video::api(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.api)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(api_.Get(index));
}
 void BidRequest_Imp_Video::set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.api)
}
 void BidRequest_Imp_Video::add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.api)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::api() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.api)
  return api_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.api)
  return &api_;
}

// repeated .com.google.openrtb.BidRequest.Imp.Video.VASTCompanionType companiontype = 20 [packed = true];
int BidRequest_Imp_Video::companiontype_size() const {
  return companiontype_.size();
}
void BidRequest_Imp_Video::clear_companiontype() {
  companiontype_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType BidRequest_Imp_Video::companiontype(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Video.companiontype)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType >(companiontype_.Get(index));
}
 void BidRequest_Imp_Video::set_companiontype(int index, ::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_IsValid(value));
  companiontype_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Video.companiontype)
}
 void BidRequest_Imp_Video::add_companiontype(::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType value) {
  assert(::com::google::openrtb::BidRequest_Imp_Video_VASTCompanionType_IsValid(value));
  companiontype_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Video.companiontype)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Video::companiontype() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Video.companiontype)
  return companiontype_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Video::mutable_companiontype() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Video.companiontype)
  return &companiontype_;
}

// -------------------------------------------------------------------

// BidRequest_Imp_Native

// optional string request = 1;
bool BidRequest_Imp_Native::has_request() const {
  return request_oneof_case() == kRequest;
}
void BidRequest_Imp_Native::set_has_request() {
  _oneof_case_[0] = kRequest;
}
void BidRequest_Imp_Native::clear_request() {
  if (has_request()) {
    request_oneof_.request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_request_oneof();
  }
}
 const ::std::string& BidRequest_Imp_Native::request() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Native.request)
  if (has_request()) {
    return request_oneof_.request_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void BidRequest_Imp_Native::set_request(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Native.request)
  if (!has_request()) {
    clear_request_oneof();
    set_has_request();
    request_oneof_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_oneof_.request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Native.request)
}
 void BidRequest_Imp_Native::set_request(const char* value) {
  if (!has_request()) {
    clear_request_oneof();
    set_has_request();
    request_oneof_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_oneof_.request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Native.request)
}
 void BidRequest_Imp_Native::set_request(const char* value, size_t size) {
  if (!has_request()) {
    clear_request_oneof();
    set_has_request();
    request_oneof_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  request_oneof_.request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Native.request)
}
 ::std::string* BidRequest_Imp_Native::mutable_request() {
  if (!has_request()) {
    clear_request_oneof();
    set_has_request();
    request_oneof_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Native.request)
  return request_oneof_.request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp_Native::release_request() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.Native.request)
  if (has_request()) {
    clear_has_request_oneof();
    return request_oneof_.request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void BidRequest_Imp_Native::set_allocated_request(::std::string* request) {
  if (!has_request()) {
    request_oneof_.request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_request_oneof();
  if (request != NULL) {
    set_has_request();
    request_oneof_.request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        request);
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Native.request)
}

// optional .com.google.openrtb.NativeRequest request_native = 50;
bool BidRequest_Imp_Native::has_request_native() const {
  return request_oneof_case() == kRequestNative;
}
void BidRequest_Imp_Native::set_has_request_native() {
  _oneof_case_[0] = kRequestNative;
}
void BidRequest_Imp_Native::clear_request_native() {
  if (has_request_native()) {
    delete request_oneof_.request_native_;
    clear_has_request_oneof();
  }
}
 const ::com::google::openrtb::NativeRequest& BidRequest_Imp_Native::request_native() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Native.request_native)
  return has_request_native()
      ? *request_oneof_.request_native_
      : ::com::google::openrtb::NativeRequest::default_instance();
}
::com::google::openrtb::NativeRequest* BidRequest_Imp_Native::mutable_request_native() {
  if (!has_request_native()) {
    clear_request_oneof();
    set_has_request_native();
    request_oneof_.request_native_ = new ::com::google::openrtb::NativeRequest;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Native.request_native)
  return request_oneof_.request_native_;
}
::com::google::openrtb::NativeRequest* BidRequest_Imp_Native::release_request_native() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.Native.request_native)
  if (has_request_native()) {
    clear_has_request_oneof();
    ::com::google::openrtb::NativeRequest* temp = request_oneof_.request_native_;
    request_oneof_.request_native_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BidRequest_Imp_Native::set_allocated_request_native(::com::google::openrtb::NativeRequest* request_native) {
  clear_request_oneof();
  if (request_native) {
    set_has_request_native();
    request_oneof_.request_native_ = request_native;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Native.request_native)
}

// optional string ver = 2;
bool BidRequest_Imp_Native::has_ver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Imp_Native::set_has_ver() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Imp_Native::clear_has_ver() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Imp_Native::clear_ver() {
  ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ver();
}
 const ::std::string& BidRequest_Imp_Native::ver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Native.ver)
  return ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp_Native::set_ver(const ::std::string& value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Native.ver)
}
 void BidRequest_Imp_Native::set_ver(const char* value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Native.ver)
}
 void BidRequest_Imp_Native::set_ver(const char* value, size_t size) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Native.ver)
}
 ::std::string* BidRequest_Imp_Native::mutable_ver() {
  set_has_ver();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Native.ver)
  return ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp_Native::release_ver() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.Native.ver)
  clear_has_ver();
  return ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp_Native::set_allocated_ver(::std::string* ver) {
  if (ver != NULL) {
    set_has_ver();
  } else {
    clear_has_ver();
  }
  ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ver);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Native.ver)
}

// repeated .com.google.openrtb.BidRequest.Imp.APIFramework api = 3 [packed = true];
int BidRequest_Imp_Native::api_size() const {
  return api_.size();
}
void BidRequest_Imp_Native::clear_api() {
  api_.Clear();
}
 ::com::google::openrtb::BidRequest_Imp_APIFramework BidRequest_Imp_Native::api(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Native.api)
  return static_cast< ::com::google::openrtb::BidRequest_Imp_APIFramework >(api_.Get(index));
}
 void BidRequest_Imp_Native::set_api(int index, ::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Native.api)
}
 void BidRequest_Imp_Native::add_api(::com::google::openrtb::BidRequest_Imp_APIFramework value) {
  assert(::com::google::openrtb::BidRequest_Imp_APIFramework_IsValid(value));
  api_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Native.api)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Native::api() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Native.api)
  return api_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Native::mutable_api() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Native.api)
  return &api_;
}

// repeated .com.google.openrtb.CreativeAttribute battr = 4 [packed = true];
int BidRequest_Imp_Native::battr_size() const {
  return battr_.size();
}
void BidRequest_Imp_Native::clear_battr() {
  battr_.Clear();
}
 ::com::google::openrtb::CreativeAttribute BidRequest_Imp_Native::battr(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Native.battr)
  return static_cast< ::com::google::openrtb::CreativeAttribute >(battr_.Get(index));
}
 void BidRequest_Imp_Native::set_battr(int index, ::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Native.battr)
}
 void BidRequest_Imp_Native::add_battr(::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  battr_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Native.battr)
}
 const ::google::protobuf::RepeatedField<int>&
BidRequest_Imp_Native::battr() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Native.battr)
  return battr_;
}
 ::google::protobuf::RepeatedField<int>*
BidRequest_Imp_Native::mutable_battr() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Native.battr)
  return &battr_;
}

bool BidRequest_Imp_Native::has_request_oneof() const {
  return request_oneof_case() != REQUEST_ONEOF_NOT_SET;
}
void BidRequest_Imp_Native::clear_has_request_oneof() {
  _oneof_case_[0] = REQUEST_ONEOF_NOT_SET;
}
BidRequest_Imp_Native::RequestOneofCase BidRequest_Imp_Native::request_oneof_case() const {
  return BidRequest_Imp_Native::RequestOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BidRequest_Imp_Pmp_Deal

// required string id = 1;
bool BidRequest_Imp_Pmp_Deal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp_Pmp_Deal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp_Pmp_Deal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp_Pmp_Deal::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Imp_Pmp_Deal::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp_Pmp_Deal::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
}
 void BidRequest_Imp_Pmp_Deal::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
}
 void BidRequest_Imp_Pmp_Deal::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
}
 ::std::string* BidRequest_Imp_Pmp_Deal::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp_Pmp_Deal::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp_Pmp_Deal::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Pmp.Deal.id)
}

// optional double bidfloor = 2 [default = 0];
bool BidRequest_Imp_Pmp_Deal::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp_Pmp_Deal::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp_Pmp_Deal::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp_Pmp_Deal::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
 double BidRequest_Imp_Pmp_Deal::bidfloor() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloor)
  return bidfloor_;
}
 void BidRequest_Imp_Pmp_Deal::set_bidfloor(double value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloor)
}

// optional string bidfloorcur = 3 [default = "CNY"];
bool BidRequest_Imp_Pmp_Deal::has_bidfloorcur() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Imp_Pmp_Deal::set_has_bidfloorcur() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Imp_Pmp_Deal::clear_has_bidfloorcur() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Imp_Pmp_Deal::clear_bidfloorcur() {
  bidfloorcur_.ClearToDefaultNoArena(_default_bidfloorcur_);
  clear_has_bidfloorcur();
}
 const ::std::string& BidRequest_Imp_Pmp_Deal::bidfloorcur() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
  return bidfloorcur_.GetNoArena(_default_bidfloorcur_);
}
 void BidRequest_Imp_Pmp_Deal::set_bidfloorcur(const ::std::string& value) {
  set_has_bidfloorcur();
  bidfloorcur_.SetNoArena(_default_bidfloorcur_, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
}
 void BidRequest_Imp_Pmp_Deal::set_bidfloorcur(const char* value) {
  set_has_bidfloorcur();
  bidfloorcur_.SetNoArena(_default_bidfloorcur_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
}
 void BidRequest_Imp_Pmp_Deal::set_bidfloorcur(const char* value, size_t size) {
  set_has_bidfloorcur();
  bidfloorcur_.SetNoArena(_default_bidfloorcur_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
}
 ::std::string* BidRequest_Imp_Pmp_Deal::mutable_bidfloorcur() {
  set_has_bidfloorcur();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
  return bidfloorcur_.MutableNoArena(_default_bidfloorcur_);
}
 ::std::string* BidRequest_Imp_Pmp_Deal::release_bidfloorcur() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
  clear_has_bidfloorcur();
  return bidfloorcur_.ReleaseNoArena(_default_bidfloorcur_);
}
 void BidRequest_Imp_Pmp_Deal::set_allocated_bidfloorcur(::std::string* bidfloorcur) {
  if (bidfloorcur != NULL) {
    set_has_bidfloorcur();
  } else {
    clear_has_bidfloorcur();
  }
  bidfloorcur_.SetAllocatedNoArena(_default_bidfloorcur_, bidfloorcur);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.Pmp.Deal.bidfloorcur)
}

// repeated string wseat = 4;
int BidRequest_Imp_Pmp_Deal::wseat_size() const {
  return wseat_.size();
}
void BidRequest_Imp_Pmp_Deal::clear_wseat() {
  wseat_.Clear();
}
 const ::std::string& BidRequest_Imp_Pmp_Deal::wseat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return wseat_.Get(index);
}
 ::std::string* BidRequest_Imp_Pmp_Deal::mutable_wseat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return wseat_.Mutable(index);
}
 void BidRequest_Imp_Pmp_Deal::set_wseat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  wseat_.Mutable(index)->assign(value);
}
 void BidRequest_Imp_Pmp_Deal::set_wseat(int index, const char* value) {
  wseat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
 void BidRequest_Imp_Pmp_Deal::set_wseat(int index, const char* value, size_t size) {
  wseat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
 ::std::string* BidRequest_Imp_Pmp_Deal::add_wseat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return wseat_.Add();
}
 void BidRequest_Imp_Pmp_Deal::add_wseat(const ::std::string& value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
 void BidRequest_Imp_Pmp_Deal::add_wseat(const char* value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
 void BidRequest_Imp_Pmp_Deal::add_wseat(const char* value, size_t size) {
  wseat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Pmp_Deal::wseat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return wseat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Pmp_Deal::mutable_wseat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wseat)
  return &wseat_;
}

// repeated string wadomain = 5;
int BidRequest_Imp_Pmp_Deal::wadomain_size() const {
  return wadomain_.size();
}
void BidRequest_Imp_Pmp_Deal::clear_wadomain() {
  wadomain_.Clear();
}
 const ::std::string& BidRequest_Imp_Pmp_Deal::wadomain(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return wadomain_.Get(index);
}
 ::std::string* BidRequest_Imp_Pmp_Deal::mutable_wadomain(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return wadomain_.Mutable(index);
}
 void BidRequest_Imp_Pmp_Deal::set_wadomain(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  wadomain_.Mutable(index)->assign(value);
}
 void BidRequest_Imp_Pmp_Deal::set_wadomain(int index, const char* value) {
  wadomain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
 void BidRequest_Imp_Pmp_Deal::set_wadomain(int index, const char* value, size_t size) {
  wadomain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
 ::std::string* BidRequest_Imp_Pmp_Deal::add_wadomain() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return wadomain_.Add();
}
 void BidRequest_Imp_Pmp_Deal::add_wadomain(const ::std::string& value) {
  wadomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
 void BidRequest_Imp_Pmp_Deal::add_wadomain(const char* value) {
  wadomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
 void BidRequest_Imp_Pmp_Deal::add_wadomain(const char* value, size_t size) {
  wadomain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp_Pmp_Deal::wadomain() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return wadomain_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp_Pmp_Deal::mutable_wadomain() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Pmp.Deal.wadomain)
  return &wadomain_;
}

// optional .com.google.openrtb.BidRequest.AuctionType at = 6;
bool BidRequest_Imp_Pmp_Deal::has_at() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Imp_Pmp_Deal::set_has_at() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Imp_Pmp_Deal::clear_has_at() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Imp_Pmp_Deal::clear_at() {
  at_ = 1;
  clear_has_at();
}
 ::com::google::openrtb::BidRequest_AuctionType BidRequest_Imp_Pmp_Deal::at() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.Deal.at)
  return static_cast< ::com::google::openrtb::BidRequest_AuctionType >(at_);
}
 void BidRequest_Imp_Pmp_Deal::set_at(::com::google::openrtb::BidRequest_AuctionType value) {
  assert(::com::google::openrtb::BidRequest_AuctionType_IsValid(value));
  set_has_at();
  at_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.Deal.at)
}

// -------------------------------------------------------------------

// BidRequest_Imp_Pmp

// optional bool private_auction = 1;
bool BidRequest_Imp_Pmp::has_private_auction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp_Pmp::set_has_private_auction() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp_Pmp::clear_has_private_auction() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp_Pmp::clear_private_auction() {
  private_auction_ = false;
  clear_has_private_auction();
}
 bool BidRequest_Imp_Pmp::private_auction() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.private_auction)
  return private_auction_;
}
 void BidRequest_Imp_Pmp::set_private_auction(bool value) {
  set_has_private_auction();
  private_auction_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.Pmp.private_auction)
}

// repeated .com.google.openrtb.BidRequest.Imp.Pmp.Deal deals = 2;
int BidRequest_Imp_Pmp::deals_size() const {
  return deals_.size();
}
void BidRequest_Imp_Pmp::clear_deals() {
  deals_.Clear();
}
const ::com::google::openrtb::BidRequest_Imp_Pmp_Deal& BidRequest_Imp_Pmp::deals(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return deals_.Get(index);
}
::com::google::openrtb::BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp::mutable_deals(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return deals_.Mutable(index);
}
::com::google::openrtb::BidRequest_Imp_Pmp_Deal* BidRequest_Imp_Pmp::add_deals() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return deals_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Pmp_Deal >*
BidRequest_Imp_Pmp::mutable_deals() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return &deals_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp_Pmp_Deal >&
BidRequest_Imp_Pmp::deals() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.Pmp.deals)
  return deals_;
}

// -------------------------------------------------------------------

// BidRequest_Imp

// required string id = 1;
bool BidRequest_Imp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Imp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Imp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Imp::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Imp::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.id)
}
 void BidRequest_Imp::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.id)
}
 void BidRequest_Imp::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.id)
}
 ::std::string* BidRequest_Imp::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.id)
}

// optional .com.google.openrtb.BidRequest.Imp.Banner banner = 2;
bool BidRequest_Imp::has_banner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Imp::set_has_banner() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Imp::clear_has_banner() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Imp::clear_banner() {
  if (banner_ != NULL) banner_->::com::google::openrtb::BidRequest_Imp_Banner::Clear();
  clear_has_banner();
}
const ::com::google::openrtb::BidRequest_Imp_Banner& BidRequest_Imp::banner() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.banner)
  return banner_ != NULL ? *banner_ : *default_instance_->banner_;
}
::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp::mutable_banner() {
  set_has_banner();
  if (banner_ == NULL) {
    banner_ = new ::com::google::openrtb::BidRequest_Imp_Banner;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.banner)
  return banner_;
}
::com::google::openrtb::BidRequest_Imp_Banner* BidRequest_Imp::release_banner() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.banner)
  clear_has_banner();
  ::com::google::openrtb::BidRequest_Imp_Banner* temp = banner_;
  banner_ = NULL;
  return temp;
}
void BidRequest_Imp::set_allocated_banner(::com::google::openrtb::BidRequest_Imp_Banner* banner) {
  delete banner_;
  banner_ = banner;
  if (banner) {
    set_has_banner();
  } else {
    clear_has_banner();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.banner)
}

// optional .com.google.openrtb.BidRequest.Imp.Video video = 3;
bool BidRequest_Imp::has_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Imp::set_has_video() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Imp::clear_has_video() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Imp::clear_video() {
  if (video_ != NULL) video_->::com::google::openrtb::BidRequest_Imp_Video::Clear();
  clear_has_video();
}
const ::com::google::openrtb::BidRequest_Imp_Video& BidRequest_Imp::video() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.video)
  return video_ != NULL ? *video_ : *default_instance_->video_;
}
::com::google::openrtb::BidRequest_Imp_Video* BidRequest_Imp::mutable_video() {
  set_has_video();
  if (video_ == NULL) {
    video_ = new ::com::google::openrtb::BidRequest_Imp_Video;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.video)
  return video_;
}
::com::google::openrtb::BidRequest_Imp_Video* BidRequest_Imp::release_video() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.video)
  clear_has_video();
  ::com::google::openrtb::BidRequest_Imp_Video* temp = video_;
  video_ = NULL;
  return temp;
}
void BidRequest_Imp::set_allocated_video(::com::google::openrtb::BidRequest_Imp_Video* video) {
  delete video_;
  video_ = video;
  if (video) {
    set_has_video();
  } else {
    clear_has_video();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.video)
}

// optional string displaymanager = 4;
bool BidRequest_Imp::has_displaymanager() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Imp::set_has_displaymanager() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Imp::clear_has_displaymanager() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Imp::clear_displaymanager() {
  displaymanager_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displaymanager();
}
 const ::std::string& BidRequest_Imp::displaymanager() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.displaymanager)
  return displaymanager_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_displaymanager(const ::std::string& value) {
  set_has_displaymanager();
  displaymanager_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.displaymanager)
}
 void BidRequest_Imp::set_displaymanager(const char* value) {
  set_has_displaymanager();
  displaymanager_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.displaymanager)
}
 void BidRequest_Imp::set_displaymanager(const char* value, size_t size) {
  set_has_displaymanager();
  displaymanager_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.displaymanager)
}
 ::std::string* BidRequest_Imp::mutable_displaymanager() {
  set_has_displaymanager();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.displaymanager)
  return displaymanager_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp::release_displaymanager() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.displaymanager)
  clear_has_displaymanager();
  return displaymanager_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_allocated_displaymanager(::std::string* displaymanager) {
  if (displaymanager != NULL) {
    set_has_displaymanager();
  } else {
    clear_has_displaymanager();
  }
  displaymanager_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displaymanager);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.displaymanager)
}

// optional string displaymanagerver = 5;
bool BidRequest_Imp::has_displaymanagerver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Imp::set_has_displaymanagerver() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Imp::clear_has_displaymanagerver() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Imp::clear_displaymanagerver() {
  displaymanagerver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_displaymanagerver();
}
 const ::std::string& BidRequest_Imp::displaymanagerver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.displaymanagerver)
  return displaymanagerver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_displaymanagerver(const ::std::string& value) {
  set_has_displaymanagerver();
  displaymanagerver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.displaymanagerver)
}
 void BidRequest_Imp::set_displaymanagerver(const char* value) {
  set_has_displaymanagerver();
  displaymanagerver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.displaymanagerver)
}
 void BidRequest_Imp::set_displaymanagerver(const char* value, size_t size) {
  set_has_displaymanagerver();
  displaymanagerver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.displaymanagerver)
}
 ::std::string* BidRequest_Imp::mutable_displaymanagerver() {
  set_has_displaymanagerver();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.displaymanagerver)
  return displaymanagerver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp::release_displaymanagerver() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.displaymanagerver)
  clear_has_displaymanagerver();
  return displaymanagerver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_allocated_displaymanagerver(::std::string* displaymanagerver) {
  if (displaymanagerver != NULL) {
    set_has_displaymanagerver();
  } else {
    clear_has_displaymanagerver();
  }
  displaymanagerver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), displaymanagerver);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.displaymanagerver)
}

// optional int32 instl = 6;
bool BidRequest_Imp::has_instl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Imp::set_has_instl() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Imp::clear_has_instl() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Imp::clear_instl() {
  instl_ = 0;
  clear_has_instl();
}
 ::google::protobuf::int32 BidRequest_Imp::instl() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.instl)
  return instl_;
}
 void BidRequest_Imp::set_instl(::google::protobuf::int32 value) {
  set_has_instl();
  instl_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.instl)
}

// optional string tagid = 7;
bool BidRequest_Imp::has_tagid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Imp::set_has_tagid() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Imp::clear_has_tagid() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Imp::clear_tagid() {
  tagid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tagid();
}
 const ::std::string& BidRequest_Imp::tagid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.tagid)
  return tagid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_tagid(const ::std::string& value) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.tagid)
}
 void BidRequest_Imp::set_tagid(const char* value) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.tagid)
}
 void BidRequest_Imp::set_tagid(const char* value, size_t size) {
  set_has_tagid();
  tagid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.tagid)
}
 ::std::string* BidRequest_Imp::mutable_tagid() {
  set_has_tagid();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.tagid)
  return tagid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Imp::release_tagid() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.tagid)
  clear_has_tagid();
  return tagid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Imp::set_allocated_tagid(::std::string* tagid) {
  if (tagid != NULL) {
    set_has_tagid();
  } else {
    clear_has_tagid();
  }
  tagid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tagid);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.tagid)
}

// optional double bidfloor = 8 [default = 0];
bool BidRequest_Imp::has_bidfloor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Imp::set_has_bidfloor() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Imp::clear_has_bidfloor() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Imp::clear_bidfloor() {
  bidfloor_ = 0;
  clear_has_bidfloor();
}
 double BidRequest_Imp::bidfloor() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.bidfloor)
  return bidfloor_;
}
 void BidRequest_Imp::set_bidfloor(double value) {
  set_has_bidfloor();
  bidfloor_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.bidfloor)
}

// optional string bidfloorcur = 9 [default = "CNY"];
bool BidRequest_Imp::has_bidfloorcur() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Imp::set_has_bidfloorcur() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Imp::clear_has_bidfloorcur() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Imp::clear_bidfloorcur() {
  bidfloorcur_.ClearToDefaultNoArena(_default_bidfloorcur_);
  clear_has_bidfloorcur();
}
 const ::std::string& BidRequest_Imp::bidfloorcur() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.bidfloorcur)
  return bidfloorcur_.GetNoArena(_default_bidfloorcur_);
}
 void BidRequest_Imp::set_bidfloorcur(const ::std::string& value) {
  set_has_bidfloorcur();
  bidfloorcur_.SetNoArena(_default_bidfloorcur_, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.bidfloorcur)
}
 void BidRequest_Imp::set_bidfloorcur(const char* value) {
  set_has_bidfloorcur();
  bidfloorcur_.SetNoArena(_default_bidfloorcur_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.bidfloorcur)
}
 void BidRequest_Imp::set_bidfloorcur(const char* value, size_t size) {
  set_has_bidfloorcur();
  bidfloorcur_.SetNoArena(_default_bidfloorcur_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.bidfloorcur)
}
 ::std::string* BidRequest_Imp::mutable_bidfloorcur() {
  set_has_bidfloorcur();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.bidfloorcur)
  return bidfloorcur_.MutableNoArena(_default_bidfloorcur_);
}
 ::std::string* BidRequest_Imp::release_bidfloorcur() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.bidfloorcur)
  clear_has_bidfloorcur();
  return bidfloorcur_.ReleaseNoArena(_default_bidfloorcur_);
}
 void BidRequest_Imp::set_allocated_bidfloorcur(::std::string* bidfloorcur) {
  if (bidfloorcur != NULL) {
    set_has_bidfloorcur();
  } else {
    clear_has_bidfloorcur();
  }
  bidfloorcur_.SetAllocatedNoArena(_default_bidfloorcur_, bidfloorcur);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.bidfloorcur)
}

// optional bool secure = 12;
bool BidRequest_Imp::has_secure() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Imp::set_has_secure() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Imp::clear_has_secure() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Imp::clear_secure() {
  secure_ = false;
  clear_has_secure();
}
 bool BidRequest_Imp::secure() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.secure)
  return secure_;
}
 void BidRequest_Imp::set_secure(bool value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.secure)
}

// repeated string iframebuster = 10;
int BidRequest_Imp::iframebuster_size() const {
  return iframebuster_.size();
}
void BidRequest_Imp::clear_iframebuster() {
  iframebuster_.Clear();
}
 const ::std::string& BidRequest_Imp::iframebuster(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.iframebuster)
  return iframebuster_.Get(index);
}
 ::std::string* BidRequest_Imp::mutable_iframebuster(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.iframebuster)
  return iframebuster_.Mutable(index);
}
 void BidRequest_Imp::set_iframebuster(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Imp.iframebuster)
  iframebuster_.Mutable(index)->assign(value);
}
 void BidRequest_Imp::set_iframebuster(int index, const char* value) {
  iframebuster_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Imp.iframebuster)
}
 void BidRequest_Imp::set_iframebuster(int index, const char* value, size_t size) {
  iframebuster_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Imp.iframebuster)
}
 ::std::string* BidRequest_Imp::add_iframebuster() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Imp.iframebuster)
  return iframebuster_.Add();
}
 void BidRequest_Imp::add_iframebuster(const ::std::string& value) {
  iframebuster_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Imp.iframebuster)
}
 void BidRequest_Imp::add_iframebuster(const char* value) {
  iframebuster_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Imp.iframebuster)
}
 void BidRequest_Imp::add_iframebuster(const char* value, size_t size) {
  iframebuster_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Imp.iframebuster)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Imp::iframebuster() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Imp.iframebuster)
  return iframebuster_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Imp::mutable_iframebuster() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Imp.iframebuster)
  return &iframebuster_;
}

// optional .com.google.openrtb.BidRequest.Imp.Pmp pmp = 11;
bool BidRequest_Imp::has_pmp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Imp::set_has_pmp() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Imp::clear_has_pmp() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Imp::clear_pmp() {
  if (pmp_ != NULL) pmp_->::com::google::openrtb::BidRequest_Imp_Pmp::Clear();
  clear_has_pmp();
}
const ::com::google::openrtb::BidRequest_Imp_Pmp& BidRequest_Imp::pmp() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.pmp)
  return pmp_ != NULL ? *pmp_ : *default_instance_->pmp_;
}
::com::google::openrtb::BidRequest_Imp_Pmp* BidRequest_Imp::mutable_pmp() {
  set_has_pmp();
  if (pmp_ == NULL) {
    pmp_ = new ::com::google::openrtb::BidRequest_Imp_Pmp;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.pmp)
  return pmp_;
}
::com::google::openrtb::BidRequest_Imp_Pmp* BidRequest_Imp::release_pmp() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.pmp)
  clear_has_pmp();
  ::com::google::openrtb::BidRequest_Imp_Pmp* temp = pmp_;
  pmp_ = NULL;
  return temp;
}
void BidRequest_Imp::set_allocated_pmp(::com::google::openrtb::BidRequest_Imp_Pmp* pmp) {
  delete pmp_;
  pmp_ = pmp;
  if (pmp) {
    set_has_pmp();
  } else {
    clear_has_pmp();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.pmp)
}

// optional .com.google.openrtb.BidRequest.Imp.Native native = 13;
bool BidRequest_Imp::has_native() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_Imp::set_has_native() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_Imp::clear_has_native() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_Imp::clear_native() {
  if (native_ != NULL) native_->::com::google::openrtb::BidRequest_Imp_Native::Clear();
  clear_has_native();
}
const ::com::google::openrtb::BidRequest_Imp_Native& BidRequest_Imp::native() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Imp.native)
  return native_ != NULL ? *native_ : *default_instance_->native_;
}
::com::google::openrtb::BidRequest_Imp_Native* BidRequest_Imp::mutable_native() {
  set_has_native();
  if (native_ == NULL) {
    native_ = new ::com::google::openrtb::BidRequest_Imp_Native;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Imp.native)
  return native_;
}
::com::google::openrtb::BidRequest_Imp_Native* BidRequest_Imp::release_native() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Imp.native)
  clear_has_native();
  ::com::google::openrtb::BidRequest_Imp_Native* temp = native_;
  native_ = NULL;
  return temp;
}
void BidRequest_Imp::set_allocated_native(::com::google::openrtb::BidRequest_Imp_Native* native) {
  delete native_;
  native_ = native;
  if (native) {
    set_has_native();
  } else {
    clear_has_native();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Imp.native)
}

// -------------------------------------------------------------------

// BidRequest_Site

// optional string id = 1;
bool BidRequest_Site::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Site::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Site::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Site::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Site::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.id)
}
 void BidRequest_Site::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.id)
}
 void BidRequest_Site::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.id)
}
 ::std::string* BidRequest_Site::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.id)
}

// optional string name = 2;
bool BidRequest_Site::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Site::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Site::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Site::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BidRequest_Site::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.name)
}
 void BidRequest_Site::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.name)
}
 void BidRequest_Site::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.name)
}
 ::std::string* BidRequest_Site::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_name() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.name)
}

// optional string domain = 3;
bool BidRequest_Site::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Site::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Site::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Site::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
 const ::std::string& BidRequest_Site::domain() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.domain)
}
 void BidRequest_Site::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.domain)
}
 void BidRequest_Site::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.domain)
}
 ::std::string* BidRequest_Site::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_domain() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.domain)
}

// repeated string cat = 4;
int BidRequest_Site::cat_size() const {
  return cat_.size();
}
void BidRequest_Site::clear_cat() {
  cat_.Clear();
}
 const ::std::string& BidRequest_Site::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.cat)
  return cat_.Get(index);
}
 ::std::string* BidRequest_Site::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.cat)
  return cat_.Mutable(index);
}
 void BidRequest_Site::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.cat)
  cat_.Mutable(index)->assign(value);
}
 void BidRequest_Site::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.cat)
}
 void BidRequest_Site::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.cat)
}
 ::std::string* BidRequest_Site::add_cat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Site.cat)
  return cat_.Add();
}
 void BidRequest_Site::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Site.cat)
}
 void BidRequest_Site::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Site.cat)
}
 void BidRequest_Site::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Site.cat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Site::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Site.cat)
  return cat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Site::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Site.cat)
  return &cat_;
}

// repeated string sectioncat = 5;
int BidRequest_Site::sectioncat_size() const {
  return sectioncat_.size();
}
void BidRequest_Site::clear_sectioncat() {
  sectioncat_.Clear();
}
 const ::std::string& BidRequest_Site::sectioncat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.sectioncat)
  return sectioncat_.Get(index);
}
 ::std::string* BidRequest_Site::mutable_sectioncat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.sectioncat)
  return sectioncat_.Mutable(index);
}
 void BidRequest_Site::set_sectioncat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.sectioncat)
  sectioncat_.Mutable(index)->assign(value);
}
 void BidRequest_Site::set_sectioncat(int index, const char* value) {
  sectioncat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.sectioncat)
}
 void BidRequest_Site::set_sectioncat(int index, const char* value, size_t size) {
  sectioncat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.sectioncat)
}
 ::std::string* BidRequest_Site::add_sectioncat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Site.sectioncat)
  return sectioncat_.Add();
}
 void BidRequest_Site::add_sectioncat(const ::std::string& value) {
  sectioncat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Site.sectioncat)
}
 void BidRequest_Site::add_sectioncat(const char* value) {
  sectioncat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Site.sectioncat)
}
 void BidRequest_Site::add_sectioncat(const char* value, size_t size) {
  sectioncat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Site.sectioncat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Site::sectioncat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Site.sectioncat)
  return sectioncat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Site::mutable_sectioncat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Site.sectioncat)
  return &sectioncat_;
}

// repeated string pagecat = 6;
int BidRequest_Site::pagecat_size() const {
  return pagecat_.size();
}
void BidRequest_Site::clear_pagecat() {
  pagecat_.Clear();
}
 const ::std::string& BidRequest_Site::pagecat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.pagecat)
  return pagecat_.Get(index);
}
 ::std::string* BidRequest_Site::mutable_pagecat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.pagecat)
  return pagecat_.Mutable(index);
}
 void BidRequest_Site::set_pagecat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.pagecat)
  pagecat_.Mutable(index)->assign(value);
}
 void BidRequest_Site::set_pagecat(int index, const char* value) {
  pagecat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.pagecat)
}
 void BidRequest_Site::set_pagecat(int index, const char* value, size_t size) {
  pagecat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.pagecat)
}
 ::std::string* BidRequest_Site::add_pagecat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Site.pagecat)
  return pagecat_.Add();
}
 void BidRequest_Site::add_pagecat(const ::std::string& value) {
  pagecat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Site.pagecat)
}
 void BidRequest_Site::add_pagecat(const char* value) {
  pagecat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Site.pagecat)
}
 void BidRequest_Site::add_pagecat(const char* value, size_t size) {
  pagecat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Site.pagecat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Site::pagecat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Site.pagecat)
  return pagecat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Site::mutable_pagecat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Site.pagecat)
  return &pagecat_;
}

// optional string page = 7;
bool BidRequest_Site::has_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Site::set_has_page() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Site::clear_has_page() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Site::clear_page() {
  page_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_page();
}
 const ::std::string& BidRequest_Site::page() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.page)
  return page_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_page(const ::std::string& value) {
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.page)
}
 void BidRequest_Site::set_page(const char* value) {
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.page)
}
 void BidRequest_Site::set_page(const char* value, size_t size) {
  set_has_page();
  page_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.page)
}
 ::std::string* BidRequest_Site::mutable_page() {
  set_has_page();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.page)
  return page_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_page() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.page)
  clear_has_page();
  return page_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_page(::std::string* page) {
  if (page != NULL) {
    set_has_page();
  } else {
    clear_has_page();
  }
  page_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.page)
}

// optional bool privacypolicy = 8;
bool BidRequest_Site::has_privacypolicy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Site::set_has_privacypolicy() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Site::clear_has_privacypolicy() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Site::clear_privacypolicy() {
  privacypolicy_ = false;
  clear_has_privacypolicy();
}
 bool BidRequest_Site::privacypolicy() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.privacypolicy)
  return privacypolicy_;
}
 void BidRequest_Site::set_privacypolicy(bool value) {
  set_has_privacypolicy();
  privacypolicy_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.privacypolicy)
}

// optional string ref = 9;
bool BidRequest_Site::has_ref() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Site::set_has_ref() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Site::clear_has_ref() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Site::clear_ref() {
  ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ref();
}
 const ::std::string& BidRequest_Site::ref() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.ref)
  return ref_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_ref(const ::std::string& value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.ref)
}
 void BidRequest_Site::set_ref(const char* value) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.ref)
}
 void BidRequest_Site::set_ref(const char* value, size_t size) {
  set_has_ref();
  ref_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.ref)
}
 ::std::string* BidRequest_Site::mutable_ref() {
  set_has_ref();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.ref)
  return ref_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_ref() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.ref)
  clear_has_ref();
  return ref_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_ref(::std::string* ref) {
  if (ref != NULL) {
    set_has_ref();
  } else {
    clear_has_ref();
  }
  ref_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.ref)
}

// optional string search = 10;
bool BidRequest_Site::has_search() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Site::set_has_search() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Site::clear_has_search() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Site::clear_search() {
  search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search();
}
 const ::std::string& BidRequest_Site::search() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.search)
  return search_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_search(const ::std::string& value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.search)
}
 void BidRequest_Site::set_search(const char* value) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.search)
}
 void BidRequest_Site::set_search(const char* value, size_t size) {
  set_has_search();
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.search)
}
 ::std::string* BidRequest_Site::mutable_search() {
  set_has_search();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.search)
  return search_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_search() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.search)
  clear_has_search();
  return search_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_search(::std::string* search) {
  if (search != NULL) {
    set_has_search();
  } else {
    clear_has_search();
  }
  search_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.search)
}

// optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
bool BidRequest_Site::has_publisher() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest_Site::set_has_publisher() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest_Site::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest_Site::clear_publisher() {
  if (publisher_ != NULL) publisher_->::com::google::openrtb::BidRequest_Publisher::Clear();
  clear_has_publisher();
}
const ::com::google::openrtb::BidRequest_Publisher& BidRequest_Site::publisher() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.publisher)
  return publisher_ != NULL ? *publisher_ : *default_instance_->publisher_;
}
::com::google::openrtb::BidRequest_Publisher* BidRequest_Site::mutable_publisher() {
  set_has_publisher();
  if (publisher_ == NULL) {
    publisher_ = new ::com::google::openrtb::BidRequest_Publisher;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.publisher)
  return publisher_;
}
::com::google::openrtb::BidRequest_Publisher* BidRequest_Site::release_publisher() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.publisher)
  clear_has_publisher();
  ::com::google::openrtb::BidRequest_Publisher* temp = publisher_;
  publisher_ = NULL;
  return temp;
}
void BidRequest_Site::set_allocated_publisher(::com::google::openrtb::BidRequest_Publisher* publisher) {
  delete publisher_;
  publisher_ = publisher;
  if (publisher) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.publisher)
}

// optional .com.google.openrtb.BidRequest.Content content = 12;
bool BidRequest_Site::has_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Site::set_has_content() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Site::clear_has_content() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Site::clear_content() {
  if (content_ != NULL) content_->::com::google::openrtb::BidRequest_Content::Clear();
  clear_has_content();
}
const ::com::google::openrtb::BidRequest_Content& BidRequest_Site::content() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
::com::google::openrtb::BidRequest_Content* BidRequest_Site::mutable_content() {
  set_has_content();
  if (content_ == NULL) {
    content_ = new ::com::google::openrtb::BidRequest_Content;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.content)
  return content_;
}
::com::google::openrtb::BidRequest_Content* BidRequest_Site::release_content() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.content)
  clear_has_content();
  ::com::google::openrtb::BidRequest_Content* temp = content_;
  content_ = NULL;
  return temp;
}
void BidRequest_Site::set_allocated_content(::com::google::openrtb::BidRequest_Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.content)
}

// optional string keywords = 13;
bool BidRequest_Site::has_keywords() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_Site::set_has_keywords() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_Site::clear_has_keywords() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_Site::clear_keywords() {
  keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keywords();
}
 const ::std::string& BidRequest_Site::keywords() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.keywords)
  return keywords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_keywords(const ::std::string& value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.keywords)
}
 void BidRequest_Site::set_keywords(const char* value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Site.keywords)
}
 void BidRequest_Site::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Site.keywords)
}
 ::std::string* BidRequest_Site::mutable_keywords() {
  set_has_keywords();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Site.keywords)
  return keywords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Site::release_keywords() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Site.keywords)
  clear_has_keywords();
  return keywords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Site::set_allocated_keywords(::std::string* keywords) {
  if (keywords != NULL) {
    set_has_keywords();
  } else {
    clear_has_keywords();
  }
  keywords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keywords);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Site.keywords)
}

// optional bool mobile = 15;
bool BidRequest_Site::has_mobile() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_Site::set_has_mobile() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_Site::clear_has_mobile() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_Site::clear_mobile() {
  mobile_ = false;
  clear_has_mobile();
}
 bool BidRequest_Site::mobile() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Site.mobile)
  return mobile_;
}
 void BidRequest_Site::set_mobile(bool value) {
  set_has_mobile();
  mobile_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Site.mobile)
}

// -------------------------------------------------------------------

// BidRequest_App

// optional string id = 1;
bool BidRequest_App::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_App::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_App::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_App::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_App::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.id)
}
 void BidRequest_App::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.id)
}
 void BidRequest_App::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.id)
}
 ::std::string* BidRequest_App::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.id)
}

// optional string name = 2;
bool BidRequest_App::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_App::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_App::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_App::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BidRequest_App::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.name)
}
 void BidRequest_App::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.name)
}
 void BidRequest_App::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.name)
}
 ::std::string* BidRequest_App::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_name() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.name)
}

// optional string domain = 3;
bool BidRequest_App::has_domain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_App::set_has_domain() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_App::clear_has_domain() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_App::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
 const ::std::string& BidRequest_App::domain() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.domain)
}
 void BidRequest_App::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.domain)
}
 void BidRequest_App::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.domain)
}
 ::std::string* BidRequest_App::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_domain() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.domain)
}

// repeated string cat = 4;
int BidRequest_App::cat_size() const {
  return cat_.size();
}
void BidRequest_App::clear_cat() {
  cat_.Clear();
}
 const ::std::string& BidRequest_App::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.cat)
  return cat_.Get(index);
}
 ::std::string* BidRequest_App::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.cat)
  return cat_.Mutable(index);
}
 void BidRequest_App::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.cat)
  cat_.Mutable(index)->assign(value);
}
 void BidRequest_App::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.cat)
}
 void BidRequest_App::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.cat)
}
 ::std::string* BidRequest_App::add_cat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.App.cat)
  return cat_.Add();
}
 void BidRequest_App::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.App.cat)
}
 void BidRequest_App::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.App.cat)
}
 void BidRequest_App::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.App.cat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_App::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.App.cat)
  return cat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_App::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.App.cat)
  return &cat_;
}

// repeated string sectioncat = 5;
int BidRequest_App::sectioncat_size() const {
  return sectioncat_.size();
}
void BidRequest_App::clear_sectioncat() {
  sectioncat_.Clear();
}
 const ::std::string& BidRequest_App::sectioncat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.sectioncat)
  return sectioncat_.Get(index);
}
 ::std::string* BidRequest_App::mutable_sectioncat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.sectioncat)
  return sectioncat_.Mutable(index);
}
 void BidRequest_App::set_sectioncat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.sectioncat)
  sectioncat_.Mutable(index)->assign(value);
}
 void BidRequest_App::set_sectioncat(int index, const char* value) {
  sectioncat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.sectioncat)
}
 void BidRequest_App::set_sectioncat(int index, const char* value, size_t size) {
  sectioncat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.sectioncat)
}
 ::std::string* BidRequest_App::add_sectioncat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.App.sectioncat)
  return sectioncat_.Add();
}
 void BidRequest_App::add_sectioncat(const ::std::string& value) {
  sectioncat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.App.sectioncat)
}
 void BidRequest_App::add_sectioncat(const char* value) {
  sectioncat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.App.sectioncat)
}
 void BidRequest_App::add_sectioncat(const char* value, size_t size) {
  sectioncat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.App.sectioncat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_App::sectioncat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.App.sectioncat)
  return sectioncat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_App::mutable_sectioncat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.App.sectioncat)
  return &sectioncat_;
}

// repeated string pagecat = 6;
int BidRequest_App::pagecat_size() const {
  return pagecat_.size();
}
void BidRequest_App::clear_pagecat() {
  pagecat_.Clear();
}
 const ::std::string& BidRequest_App::pagecat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.pagecat)
  return pagecat_.Get(index);
}
 ::std::string* BidRequest_App::mutable_pagecat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.pagecat)
  return pagecat_.Mutable(index);
}
 void BidRequest_App::set_pagecat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.pagecat)
  pagecat_.Mutable(index)->assign(value);
}
 void BidRequest_App::set_pagecat(int index, const char* value) {
  pagecat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.pagecat)
}
 void BidRequest_App::set_pagecat(int index, const char* value, size_t size) {
  pagecat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.pagecat)
}
 ::std::string* BidRequest_App::add_pagecat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.App.pagecat)
  return pagecat_.Add();
}
 void BidRequest_App::add_pagecat(const ::std::string& value) {
  pagecat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.App.pagecat)
}
 void BidRequest_App::add_pagecat(const char* value) {
  pagecat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.App.pagecat)
}
 void BidRequest_App::add_pagecat(const char* value, size_t size) {
  pagecat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.App.pagecat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_App::pagecat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.App.pagecat)
  return pagecat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_App::mutable_pagecat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.App.pagecat)
  return &pagecat_;
}

// optional string ver = 7;
bool BidRequest_App::has_ver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_App::set_has_ver() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_App::clear_has_ver() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_App::clear_ver() {
  ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ver();
}
 const ::std::string& BidRequest_App::ver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.ver)
  return ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_ver(const ::std::string& value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.ver)
}
 void BidRequest_App::set_ver(const char* value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.ver)
}
 void BidRequest_App::set_ver(const char* value, size_t size) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.ver)
}
 ::std::string* BidRequest_App::mutable_ver() {
  set_has_ver();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.ver)
  return ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_ver() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.ver)
  clear_has_ver();
  return ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_ver(::std::string* ver) {
  if (ver != NULL) {
    set_has_ver();
  } else {
    clear_has_ver();
  }
  ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ver);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.ver)
}

// optional string bundle = 8;
bool BidRequest_App::has_bundle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_App::set_has_bundle() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_App::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_App::clear_bundle() {
  bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundle();
}
 const ::std::string& BidRequest_App::bundle() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.bundle)
  return bundle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_bundle(const ::std::string& value) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.bundle)
}
 void BidRequest_App::set_bundle(const char* value) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.bundle)
}
 void BidRequest_App::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.bundle)
}
 ::std::string* BidRequest_App::mutable_bundle() {
  set_has_bundle();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.bundle)
  return bundle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_bundle() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.bundle)
  clear_has_bundle();
  return bundle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_bundle(::std::string* bundle) {
  if (bundle != NULL) {
    set_has_bundle();
  } else {
    clear_has_bundle();
  }
  bundle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.bundle)
}

// optional bool privacypolicy = 9;
bool BidRequest_App::has_privacypolicy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_App::set_has_privacypolicy() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_App::clear_has_privacypolicy() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_App::clear_privacypolicy() {
  privacypolicy_ = false;
  clear_has_privacypolicy();
}
 bool BidRequest_App::privacypolicy() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.privacypolicy)
  return privacypolicy_;
}
 void BidRequest_App::set_privacypolicy(bool value) {
  set_has_privacypolicy();
  privacypolicy_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.privacypolicy)
}

// optional bool paid = 10;
bool BidRequest_App::has_paid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_App::set_has_paid() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_App::clear_has_paid() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_App::clear_paid() {
  paid_ = false;
  clear_has_paid();
}
 bool BidRequest_App::paid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.paid)
  return paid_;
}
 void BidRequest_App::set_paid(bool value) {
  set_has_paid();
  paid_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.paid)
}

// optional .com.google.openrtb.BidRequest.Publisher publisher = 11;
bool BidRequest_App::has_publisher() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest_App::set_has_publisher() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest_App::clear_has_publisher() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest_App::clear_publisher() {
  if (publisher_ != NULL) publisher_->::com::google::openrtb::BidRequest_Publisher::Clear();
  clear_has_publisher();
}
const ::com::google::openrtb::BidRequest_Publisher& BidRequest_App::publisher() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.publisher)
  return publisher_ != NULL ? *publisher_ : *default_instance_->publisher_;
}
::com::google::openrtb::BidRequest_Publisher* BidRequest_App::mutable_publisher() {
  set_has_publisher();
  if (publisher_ == NULL) {
    publisher_ = new ::com::google::openrtb::BidRequest_Publisher;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.publisher)
  return publisher_;
}
::com::google::openrtb::BidRequest_Publisher* BidRequest_App::release_publisher() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.publisher)
  clear_has_publisher();
  ::com::google::openrtb::BidRequest_Publisher* temp = publisher_;
  publisher_ = NULL;
  return temp;
}
void BidRequest_App::set_allocated_publisher(::com::google::openrtb::BidRequest_Publisher* publisher) {
  delete publisher_;
  publisher_ = publisher;
  if (publisher) {
    set_has_publisher();
  } else {
    clear_has_publisher();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.publisher)
}

// optional .com.google.openrtb.BidRequest.Content content = 12;
bool BidRequest_App::has_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_App::set_has_content() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_App::clear_has_content() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_App::clear_content() {
  if (content_ != NULL) content_->::com::google::openrtb::BidRequest_Content::Clear();
  clear_has_content();
}
const ::com::google::openrtb::BidRequest_Content& BidRequest_App::content() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.content)
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
::com::google::openrtb::BidRequest_Content* BidRequest_App::mutable_content() {
  set_has_content();
  if (content_ == NULL) {
    content_ = new ::com::google::openrtb::BidRequest_Content;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.content)
  return content_;
}
::com::google::openrtb::BidRequest_Content* BidRequest_App::release_content() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.content)
  clear_has_content();
  ::com::google::openrtb::BidRequest_Content* temp = content_;
  content_ = NULL;
  return temp;
}
void BidRequest_App::set_allocated_content(::com::google::openrtb::BidRequest_Content* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.content)
}

// optional string keywords = 13;
bool BidRequest_App::has_keywords() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_App::set_has_keywords() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_App::clear_has_keywords() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_App::clear_keywords() {
  keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keywords();
}
 const ::std::string& BidRequest_App::keywords() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.keywords)
  return keywords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_keywords(const ::std::string& value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.keywords)
}
 void BidRequest_App::set_keywords(const char* value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.keywords)
}
 void BidRequest_App::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.keywords)
}
 ::std::string* BidRequest_App::mutable_keywords() {
  set_has_keywords();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.keywords)
  return keywords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_keywords() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.keywords)
  clear_has_keywords();
  return keywords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_keywords(::std::string* keywords) {
  if (keywords != NULL) {
    set_has_keywords();
  } else {
    clear_has_keywords();
  }
  keywords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keywords);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.keywords)
}

// optional string storeurl = 16;
bool BidRequest_App::has_storeurl() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_App::set_has_storeurl() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_App::clear_has_storeurl() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_App::clear_storeurl() {
  storeurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storeurl();
}
 const ::std::string& BidRequest_App::storeurl() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.App.storeurl)
  return storeurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_storeurl(const ::std::string& value) {
  set_has_storeurl();
  storeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.App.storeurl)
}
 void BidRequest_App::set_storeurl(const char* value) {
  set_has_storeurl();
  storeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.App.storeurl)
}
 void BidRequest_App::set_storeurl(const char* value, size_t size) {
  set_has_storeurl();
  storeurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.App.storeurl)
}
 ::std::string* BidRequest_App::mutable_storeurl() {
  set_has_storeurl();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.App.storeurl)
  return storeurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_App::release_storeurl() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.App.storeurl)
  clear_has_storeurl();
  return storeurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_App::set_allocated_storeurl(::std::string* storeurl) {
  if (storeurl != NULL) {
    set_has_storeurl();
  } else {
    clear_has_storeurl();
  }
  storeurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storeurl);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.App.storeurl)
}

// -------------------------------------------------------------------

// BidRequest_Publisher

// optional string id = 1;
bool BidRequest_Publisher::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Publisher::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Publisher::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Publisher::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Publisher::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Publisher.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Publisher::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Publisher.id)
}
 void BidRequest_Publisher::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Publisher.id)
}
 void BidRequest_Publisher::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Publisher.id)
}
 ::std::string* BidRequest_Publisher::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Publisher.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Publisher::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Publisher.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Publisher::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Publisher.id)
}

// optional string name = 2;
bool BidRequest_Publisher::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Publisher::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Publisher::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Publisher::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BidRequest_Publisher::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Publisher.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Publisher::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Publisher.name)
}
 void BidRequest_Publisher::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Publisher.name)
}
 void BidRequest_Publisher::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Publisher.name)
}
 ::std::string* BidRequest_Publisher::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Publisher.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Publisher::release_name() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Publisher.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Publisher::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Publisher.name)
}

// repeated string cat = 3;
int BidRequest_Publisher::cat_size() const {
  return cat_.size();
}
void BidRequest_Publisher::clear_cat() {
  cat_.Clear();
}
 const ::std::string& BidRequest_Publisher::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Publisher.cat)
  return cat_.Get(index);
}
 ::std::string* BidRequest_Publisher::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Publisher.cat)
  return cat_.Mutable(index);
}
 void BidRequest_Publisher::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Publisher.cat)
  cat_.Mutable(index)->assign(value);
}
 void BidRequest_Publisher::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Publisher.cat)
}
 void BidRequest_Publisher::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Publisher.cat)
}
 ::std::string* BidRequest_Publisher::add_cat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Publisher.cat)
  return cat_.Add();
}
 void BidRequest_Publisher::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Publisher.cat)
}
 void BidRequest_Publisher::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Publisher.cat)
}
 void BidRequest_Publisher::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Publisher.cat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Publisher::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Publisher.cat)
  return cat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Publisher::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Publisher.cat)
  return &cat_;
}

// optional string domain = 4;
bool BidRequest_Publisher::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Publisher::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Publisher::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Publisher::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
 const ::std::string& BidRequest_Publisher::domain() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Publisher.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Publisher::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Publisher.domain)
}
 void BidRequest_Publisher::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Publisher.domain)
}
 void BidRequest_Publisher::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Publisher.domain)
}
 ::std::string* BidRequest_Publisher::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Publisher.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Publisher::release_domain() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Publisher.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Publisher::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Publisher.domain)
}

// -------------------------------------------------------------------

// BidRequest_Content

// optional string id = 1;
bool BidRequest_Content::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Content::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Content::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Content::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Content::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.id)
}
 void BidRequest_Content::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.id)
}
 void BidRequest_Content::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.id)
}
 ::std::string* BidRequest_Content::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.id)
}

// optional int32 episode = 2;
bool BidRequest_Content::has_episode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Content::set_has_episode() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Content::clear_has_episode() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Content::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
 ::google::protobuf::int32 BidRequest_Content::episode() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.episode)
  return episode_;
}
 void BidRequest_Content::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.episode)
}

// optional string title = 3;
bool BidRequest_Content::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Content::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Content::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Content::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& BidRequest_Content::title() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.title)
}
 void BidRequest_Content::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.title)
}
 void BidRequest_Content::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.title)
}
 ::std::string* BidRequest_Content::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_title() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.title)
}

// optional string series = 4;
bool BidRequest_Content::has_series() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Content::set_has_series() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Content::clear_has_series() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Content::clear_series() {
  series_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_series();
}
 const ::std::string& BidRequest_Content::series() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.series)
  return series_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_series(const ::std::string& value) {
  set_has_series();
  series_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.series)
}
 void BidRequest_Content::set_series(const char* value) {
  set_has_series();
  series_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.series)
}
 void BidRequest_Content::set_series(const char* value, size_t size) {
  set_has_series();
  series_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.series)
}
 ::std::string* BidRequest_Content::mutable_series() {
  set_has_series();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.series)
  return series_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_series() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.series)
  clear_has_series();
  return series_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_series(::std::string* series) {
  if (series != NULL) {
    set_has_series();
  } else {
    clear_has_series();
  }
  series_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), series);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.series)
}

// optional string season = 5;
bool BidRequest_Content::has_season() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Content::set_has_season() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Content::clear_has_season() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Content::clear_season() {
  season_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_season();
}
 const ::std::string& BidRequest_Content::season() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.season)
  return season_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_season(const ::std::string& value) {
  set_has_season();
  season_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.season)
}
 void BidRequest_Content::set_season(const char* value) {
  set_has_season();
  season_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.season)
}
 void BidRequest_Content::set_season(const char* value, size_t size) {
  set_has_season();
  season_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.season)
}
 ::std::string* BidRequest_Content::mutable_season() {
  set_has_season();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.season)
  return season_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_season() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.season)
  clear_has_season();
  return season_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_season(::std::string* season) {
  if (season != NULL) {
    set_has_season();
  } else {
    clear_has_season();
  }
  season_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), season);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.season)
}

// optional string url = 6;
bool BidRequest_Content::has_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Content::set_has_url() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Content::clear_has_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Content::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& BidRequest_Content::url() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.url)
}
 void BidRequest_Content::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.url)
}
 void BidRequest_Content::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.url)
}
 ::std::string* BidRequest_Content::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_url() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.url)
}

// repeated string cat = 7;
int BidRequest_Content::cat_size() const {
  return cat_.size();
}
void BidRequest_Content::clear_cat() {
  cat_.Clear();
}
 const ::std::string& BidRequest_Content::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.cat)
  return cat_.Get(index);
}
 ::std::string* BidRequest_Content::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.cat)
  return cat_.Mutable(index);
}
 void BidRequest_Content::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.cat)
  cat_.Mutable(index)->assign(value);
}
 void BidRequest_Content::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.cat)
}
 void BidRequest_Content::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.cat)
}
 ::std::string* BidRequest_Content::add_cat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Content.cat)
  return cat_.Add();
}
 void BidRequest_Content::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Content.cat)
}
 void BidRequest_Content::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Content.cat)
}
 void BidRequest_Content::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Content.cat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Content::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Content.cat)
  return cat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Content::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Content.cat)
  return &cat_;
}

// optional .com.google.openrtb.BidRequest.Content.VideoQuality videoquality = 8;
bool BidRequest_Content::has_videoquality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Content::set_has_videoquality() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Content::clear_has_videoquality() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Content::clear_videoquality() {
  videoquality_ = 0;
  clear_has_videoquality();
}
 ::com::google::openrtb::BidRequest_Content_VideoQuality BidRequest_Content::videoquality() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.videoquality)
  return static_cast< ::com::google::openrtb::BidRequest_Content_VideoQuality >(videoquality_);
}
 void BidRequest_Content::set_videoquality(::com::google::openrtb::BidRequest_Content_VideoQuality value) {
  assert(::com::google::openrtb::BidRequest_Content_VideoQuality_IsValid(value));
  set_has_videoquality();
  videoquality_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.videoquality)
}

// optional string keywords = 9;
bool BidRequest_Content::has_keywords() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Content::set_has_keywords() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Content::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Content::clear_keywords() {
  keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keywords();
}
 const ::std::string& BidRequest_Content::keywords() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.keywords)
  return keywords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_keywords(const ::std::string& value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.keywords)
}
 void BidRequest_Content::set_keywords(const char* value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.keywords)
}
 void BidRequest_Content::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.keywords)
}
 ::std::string* BidRequest_Content::mutable_keywords() {
  set_has_keywords();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.keywords)
  return keywords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_keywords() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.keywords)
  clear_has_keywords();
  return keywords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_keywords(::std::string* keywords) {
  if (keywords != NULL) {
    set_has_keywords();
  } else {
    clear_has_keywords();
  }
  keywords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keywords);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.keywords)
}

// optional string contentrating = 10;
bool BidRequest_Content::has_contentrating() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Content::set_has_contentrating() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Content::clear_has_contentrating() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Content::clear_contentrating() {
  contentrating_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentrating();
}
 const ::std::string& BidRequest_Content::contentrating() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.contentrating)
  return contentrating_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_contentrating(const ::std::string& value) {
  set_has_contentrating();
  contentrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.contentrating)
}
 void BidRequest_Content::set_contentrating(const char* value) {
  set_has_contentrating();
  contentrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.contentrating)
}
 void BidRequest_Content::set_contentrating(const char* value, size_t size) {
  set_has_contentrating();
  contentrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.contentrating)
}
 ::std::string* BidRequest_Content::mutable_contentrating() {
  set_has_contentrating();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.contentrating)
  return contentrating_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_contentrating() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.contentrating)
  clear_has_contentrating();
  return contentrating_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_contentrating(::std::string* contentrating) {
  if (contentrating != NULL) {
    set_has_contentrating();
  } else {
    clear_has_contentrating();
  }
  contentrating_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentrating);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.contentrating)
}

// optional string userrating = 11;
bool BidRequest_Content::has_userrating() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest_Content::set_has_userrating() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest_Content::clear_has_userrating() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest_Content::clear_userrating() {
  userrating_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userrating();
}
 const ::std::string& BidRequest_Content::userrating() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.userrating)
  return userrating_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_userrating(const ::std::string& value) {
  set_has_userrating();
  userrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.userrating)
}
 void BidRequest_Content::set_userrating(const char* value) {
  set_has_userrating();
  userrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.userrating)
}
 void BidRequest_Content::set_userrating(const char* value, size_t size) {
  set_has_userrating();
  userrating_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.userrating)
}
 ::std::string* BidRequest_Content::mutable_userrating() {
  set_has_userrating();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.userrating)
  return userrating_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_userrating() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.userrating)
  clear_has_userrating();
  return userrating_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_userrating(::std::string* userrating) {
  if (userrating != NULL) {
    set_has_userrating();
  } else {
    clear_has_userrating();
  }
  userrating_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userrating);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.userrating)
}

// optional .com.google.openrtb.BidRequest.Content.ContentContext context = 20;
bool BidRequest_Content::has_context() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Content::set_has_context() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Content::clear_has_context() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Content::clear_context() {
  context_ = 1;
  clear_has_context();
}
 ::com::google::openrtb::BidRequest_Content_ContentContext BidRequest_Content::context() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.context)
  return static_cast< ::com::google::openrtb::BidRequest_Content_ContentContext >(context_);
}
 void BidRequest_Content::set_context(::com::google::openrtb::BidRequest_Content_ContentContext value) {
  assert(::com::google::openrtb::BidRequest_Content_ContentContext_IsValid(value));
  set_has_context();
  context_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.context)
}

// optional string context_22 = 12;
bool BidRequest_Content::has_context_22() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_Content::set_has_context_22() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_Content::clear_has_context_22() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_Content::clear_context_22() {
  context_22_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context_22();
}
 const ::std::string& BidRequest_Content::context_22() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.context_22)
  return context_22_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_context_22(const ::std::string& value) {
  set_has_context_22();
  context_22_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.context_22)
}
 void BidRequest_Content::set_context_22(const char* value) {
  set_has_context_22();
  context_22_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.context_22)
}
 void BidRequest_Content::set_context_22(const char* value, size_t size) {
  set_has_context_22();
  context_22_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.context_22)
}
 ::std::string* BidRequest_Content::mutable_context_22() {
  set_has_context_22();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.context_22)
  return context_22_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_context_22() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.context_22)
  clear_has_context_22();
  return context_22_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_context_22(::std::string* context_22) {
  if (context_22 != NULL) {
    set_has_context_22();
  } else {
    clear_has_context_22();
  }
  context_22_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context_22);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.context_22)
}

// optional bool livestream = 13;
bool BidRequest_Content::has_livestream() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_Content::set_has_livestream() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_Content::clear_has_livestream() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_Content::clear_livestream() {
  livestream_ = false;
  clear_has_livestream();
}
 bool BidRequest_Content::livestream() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.livestream)
  return livestream_;
}
 void BidRequest_Content::set_livestream(bool value) {
  set_has_livestream();
  livestream_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.livestream)
}

// optional bool sourcerelationship = 14;
bool BidRequest_Content::has_sourcerelationship() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest_Content::set_has_sourcerelationship() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest_Content::clear_has_sourcerelationship() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest_Content::clear_sourcerelationship() {
  sourcerelationship_ = false;
  clear_has_sourcerelationship();
}
 bool BidRequest_Content::sourcerelationship() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.sourcerelationship)
  return sourcerelationship_;
}
 void BidRequest_Content::set_sourcerelationship(bool value) {
  set_has_sourcerelationship();
  sourcerelationship_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.sourcerelationship)
}

// optional .com.google.openrtb.BidRequest.Producer producer = 15;
bool BidRequest_Content::has_producer() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest_Content::set_has_producer() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest_Content::clear_has_producer() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest_Content::clear_producer() {
  if (producer_ != NULL) producer_->::com::google::openrtb::BidRequest_Producer::Clear();
  clear_has_producer();
}
const ::com::google::openrtb::BidRequest_Producer& BidRequest_Content::producer() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.producer)
  return producer_ != NULL ? *producer_ : *default_instance_->producer_;
}
::com::google::openrtb::BidRequest_Producer* BidRequest_Content::mutable_producer() {
  set_has_producer();
  if (producer_ == NULL) {
    producer_ = new ::com::google::openrtb::BidRequest_Producer;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.producer)
  return producer_;
}
::com::google::openrtb::BidRequest_Producer* BidRequest_Content::release_producer() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.producer)
  clear_has_producer();
  ::com::google::openrtb::BidRequest_Producer* temp = producer_;
  producer_ = NULL;
  return temp;
}
void BidRequest_Content::set_allocated_producer(::com::google::openrtb::BidRequest_Producer* producer) {
  delete producer_;
  producer_ = producer;
  if (producer) {
    set_has_producer();
  } else {
    clear_has_producer();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.producer)
}

// optional int32 len = 16;
bool BidRequest_Content::has_len() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest_Content::set_has_len() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest_Content::clear_has_len() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest_Content::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::google::protobuf::int32 BidRequest_Content::len() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.len)
  return len_;
}
 void BidRequest_Content::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.len)
}

// optional .com.google.openrtb.BidRequest.Content.QAGMediaRating qagmediarating = 17;
bool BidRequest_Content::has_qagmediarating() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BidRequest_Content::set_has_qagmediarating() {
  _has_bits_[0] |= 0x00020000u;
}
void BidRequest_Content::clear_has_qagmediarating() {
  _has_bits_[0] &= ~0x00020000u;
}
void BidRequest_Content::clear_qagmediarating() {
  qagmediarating_ = 1;
  clear_has_qagmediarating();
}
 ::com::google::openrtb::BidRequest_Content_QAGMediaRating BidRequest_Content::qagmediarating() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.qagmediarating)
  return static_cast< ::com::google::openrtb::BidRequest_Content_QAGMediaRating >(qagmediarating_);
}
 void BidRequest_Content::set_qagmediarating(::com::google::openrtb::BidRequest_Content_QAGMediaRating value) {
  assert(::com::google::openrtb::BidRequest_Content_QAGMediaRating_IsValid(value));
  set_has_qagmediarating();
  qagmediarating_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.qagmediarating)
}

// optional bool embeddable = 18;
bool BidRequest_Content::has_embeddable() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void BidRequest_Content::set_has_embeddable() {
  _has_bits_[0] |= 0x00040000u;
}
void BidRequest_Content::clear_has_embeddable() {
  _has_bits_[0] &= ~0x00040000u;
}
void BidRequest_Content::clear_embeddable() {
  embeddable_ = false;
  clear_has_embeddable();
}
 bool BidRequest_Content::embeddable() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.embeddable)
  return embeddable_;
}
 void BidRequest_Content::set_embeddable(bool value) {
  set_has_embeddable();
  embeddable_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.embeddable)
}

// optional string language = 19;
bool BidRequest_Content::has_language() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BidRequest_Content::set_has_language() {
  _has_bits_[0] |= 0x00080000u;
}
void BidRequest_Content::clear_has_language() {
  _has_bits_[0] &= ~0x00080000u;
}
void BidRequest_Content::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
 const ::std::string& BidRequest_Content::language() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Content.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Content.language)
}
 void BidRequest_Content::set_language(const char* value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Content.language)
}
 void BidRequest_Content::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Content.language)
}
 ::std::string* BidRequest_Content::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Content.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Content::release_language() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Content.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Content::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Content.language)
}

// -------------------------------------------------------------------

// BidRequest_Producer

// optional string id = 1;
bool BidRequest_Producer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Producer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Producer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Producer::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Producer::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Producer.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Producer::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Producer.id)
}
 void BidRequest_Producer::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Producer.id)
}
 void BidRequest_Producer::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Producer.id)
}
 ::std::string* BidRequest_Producer::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Producer.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Producer::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Producer.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Producer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Producer.id)
}

// optional string name = 2;
bool BidRequest_Producer::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Producer::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Producer::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Producer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BidRequest_Producer::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Producer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Producer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Producer.name)
}
 void BidRequest_Producer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Producer.name)
}
 void BidRequest_Producer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Producer.name)
}
 ::std::string* BidRequest_Producer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Producer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Producer::release_name() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Producer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Producer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Producer.name)
}

// repeated string cat = 3;
int BidRequest_Producer::cat_size() const {
  return cat_.size();
}
void BidRequest_Producer::clear_cat() {
  cat_.Clear();
}
 const ::std::string& BidRequest_Producer::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Producer.cat)
  return cat_.Get(index);
}
 ::std::string* BidRequest_Producer::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Producer.cat)
  return cat_.Mutable(index);
}
 void BidRequest_Producer::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Producer.cat)
  cat_.Mutable(index)->assign(value);
}
 void BidRequest_Producer::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Producer.cat)
}
 void BidRequest_Producer::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Producer.cat)
}
 ::std::string* BidRequest_Producer::add_cat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.Producer.cat)
  return cat_.Add();
}
 void BidRequest_Producer::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Producer.cat)
}
 void BidRequest_Producer::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.Producer.cat)
}
 void BidRequest_Producer::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.Producer.cat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest_Producer::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Producer.cat)
  return cat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest_Producer::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Producer.cat)
  return &cat_;
}

// optional string domain = 4;
bool BidRequest_Producer::has_domain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Producer::set_has_domain() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Producer::clear_has_domain() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Producer::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
 const ::std::string& BidRequest_Producer::domain() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Producer.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Producer::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Producer.domain)
}
 void BidRequest_Producer::set_domain(const char* value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Producer.domain)
}
 void BidRequest_Producer::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Producer.domain)
}
 ::std::string* BidRequest_Producer::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Producer.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Producer::release_domain() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Producer.domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Producer::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Producer.domain)
}

// -------------------------------------------------------------------

// BidRequest_Device

// optional bool dnt = 1;
bool BidRequest_Device::has_dnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Device::set_has_dnt() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Device::clear_has_dnt() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Device::clear_dnt() {
  dnt_ = false;
  clear_has_dnt();
}
 bool BidRequest_Device::dnt() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.dnt)
  return dnt_;
}
 void BidRequest_Device::set_dnt(bool value) {
  set_has_dnt();
  dnt_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.dnt)
}

// optional string ua = 2;
bool BidRequest_Device::has_ua() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Device::set_has_ua() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Device::clear_has_ua() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Device::clear_ua() {
  ua_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ua();
}
 const ::std::string& BidRequest_Device::ua() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ua)
  return ua_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_ua(const ::std::string& value) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ua)
}
 void BidRequest_Device::set_ua(const char* value) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.ua)
}
 void BidRequest_Device::set_ua(const char* value, size_t size) {
  set_has_ua();
  ua_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.ua)
}
 ::std::string* BidRequest_Device::mutable_ua() {
  set_has_ua();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.ua)
  return ua_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_ua() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.ua)
  clear_has_ua();
  return ua_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_ua(::std::string* ua) {
  if (ua != NULL) {
    set_has_ua();
  } else {
    clear_has_ua();
  }
  ua_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ua);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.ua)
}

// optional string ip = 3;
bool BidRequest_Device::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Device::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Device::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Device::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& BidRequest_Device::ip() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ip)
}
 void BidRequest_Device::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.ip)
}
 void BidRequest_Device::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.ip)
}
 ::std::string* BidRequest_Device::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_ip() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.ip)
}

// optional .com.google.openrtb.BidRequest.Geo geo = 4;
bool BidRequest_Device::has_geo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Device::set_has_geo() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Device::clear_has_geo() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Device::clear_geo() {
  if (geo_ != NULL) geo_->::com::google::openrtb::BidRequest_Geo::Clear();
  clear_has_geo();
}
const ::com::google::openrtb::BidRequest_Geo& BidRequest_Device::geo() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
::com::google::openrtb::BidRequest_Geo* BidRequest_Device::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) {
    geo_ = new ::com::google::openrtb::BidRequest_Geo;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.geo)
  return geo_;
}
::com::google::openrtb::BidRequest_Geo* BidRequest_Device::release_geo() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.geo)
  clear_has_geo();
  ::com::google::openrtb::BidRequest_Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
void BidRequest_Device::set_allocated_geo(::com::google::openrtb::BidRequest_Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.geo)
}

// optional string didsha1 = 5;
bool BidRequest_Device::has_didsha1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Device::set_has_didsha1() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Device::clear_has_didsha1() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Device::clear_didsha1() {
  didsha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_didsha1();
}
 const ::std::string& BidRequest_Device::didsha1() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.didsha1)
  return didsha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_didsha1(const ::std::string& value) {
  set_has_didsha1();
  didsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.didsha1)
}
 void BidRequest_Device::set_didsha1(const char* value) {
  set_has_didsha1();
  didsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.didsha1)
}
 void BidRequest_Device::set_didsha1(const char* value, size_t size) {
  set_has_didsha1();
  didsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.didsha1)
}
 ::std::string* BidRequest_Device::mutable_didsha1() {
  set_has_didsha1();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.didsha1)
  return didsha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_didsha1() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.didsha1)
  clear_has_didsha1();
  return didsha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_didsha1(::std::string* didsha1) {
  if (didsha1 != NULL) {
    set_has_didsha1();
  } else {
    clear_has_didsha1();
  }
  didsha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), didsha1);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.didsha1)
}

// optional string didmd5 = 6;
bool BidRequest_Device::has_didmd5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Device::set_has_didmd5() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Device::clear_has_didmd5() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Device::clear_didmd5() {
  didmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_didmd5();
}
 const ::std::string& BidRequest_Device::didmd5() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.didmd5)
  return didmd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_didmd5(const ::std::string& value) {
  set_has_didmd5();
  didmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.didmd5)
}
 void BidRequest_Device::set_didmd5(const char* value) {
  set_has_didmd5();
  didmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.didmd5)
}
 void BidRequest_Device::set_didmd5(const char* value, size_t size) {
  set_has_didmd5();
  didmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.didmd5)
}
 ::std::string* BidRequest_Device::mutable_didmd5() {
  set_has_didmd5();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.didmd5)
  return didmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_didmd5() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.didmd5)
  clear_has_didmd5();
  return didmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_didmd5(::std::string* didmd5) {
  if (didmd5 != NULL) {
    set_has_didmd5();
  } else {
    clear_has_didmd5();
  }
  didmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), didmd5);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.didmd5)
}

// optional string dpidsha1 = 7;
bool BidRequest_Device::has_dpidsha1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Device::set_has_dpidsha1() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Device::clear_has_dpidsha1() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Device::clear_dpidsha1() {
  dpidsha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dpidsha1();
}
 const ::std::string& BidRequest_Device::dpidsha1() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.dpidsha1)
  return dpidsha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_dpidsha1(const ::std::string& value) {
  set_has_dpidsha1();
  dpidsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.dpidsha1)
}
 void BidRequest_Device::set_dpidsha1(const char* value) {
  set_has_dpidsha1();
  dpidsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.dpidsha1)
}
 void BidRequest_Device::set_dpidsha1(const char* value, size_t size) {
  set_has_dpidsha1();
  dpidsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.dpidsha1)
}
 ::std::string* BidRequest_Device::mutable_dpidsha1() {
  set_has_dpidsha1();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.dpidsha1)
  return dpidsha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_dpidsha1() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.dpidsha1)
  clear_has_dpidsha1();
  return dpidsha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_dpidsha1(::std::string* dpidsha1) {
  if (dpidsha1 != NULL) {
    set_has_dpidsha1();
  } else {
    clear_has_dpidsha1();
  }
  dpidsha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dpidsha1);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.dpidsha1)
}

// optional string dpidmd5 = 8;
bool BidRequest_Device::has_dpidmd5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Device::set_has_dpidmd5() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Device::clear_has_dpidmd5() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Device::clear_dpidmd5() {
  dpidmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dpidmd5();
}
 const ::std::string& BidRequest_Device::dpidmd5() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.dpidmd5)
  return dpidmd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_dpidmd5(const ::std::string& value) {
  set_has_dpidmd5();
  dpidmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.dpidmd5)
}
 void BidRequest_Device::set_dpidmd5(const char* value) {
  set_has_dpidmd5();
  dpidmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.dpidmd5)
}
 void BidRequest_Device::set_dpidmd5(const char* value, size_t size) {
  set_has_dpidmd5();
  dpidmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.dpidmd5)
}
 ::std::string* BidRequest_Device::mutable_dpidmd5() {
  set_has_dpidmd5();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.dpidmd5)
  return dpidmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_dpidmd5() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.dpidmd5)
  clear_has_dpidmd5();
  return dpidmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_dpidmd5(::std::string* dpidmd5) {
  if (dpidmd5 != NULL) {
    set_has_dpidmd5();
  } else {
    clear_has_dpidmd5();
  }
  dpidmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dpidmd5);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.dpidmd5)
}

// optional string ipv6 = 9;
bool BidRequest_Device::has_ipv6() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Device::set_has_ipv6() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Device::clear_has_ipv6() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Device::clear_ipv6() {
  ipv6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipv6();
}
 const ::std::string& BidRequest_Device::ipv6() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ipv6)
  return ipv6_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_ipv6(const ::std::string& value) {
  set_has_ipv6();
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ipv6)
}
 void BidRequest_Device::set_ipv6(const char* value) {
  set_has_ipv6();
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.ipv6)
}
 void BidRequest_Device::set_ipv6(const char* value, size_t size) {
  set_has_ipv6();
  ipv6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.ipv6)
}
 ::std::string* BidRequest_Device::mutable_ipv6() {
  set_has_ipv6();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.ipv6)
  return ipv6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_ipv6() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.ipv6)
  clear_has_ipv6();
  return ipv6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_ipv6(::std::string* ipv6) {
  if (ipv6 != NULL) {
    set_has_ipv6();
  } else {
    clear_has_ipv6();
  }
  ipv6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipv6);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.ipv6)
}

// optional string carrier = 10;
bool BidRequest_Device::has_carrier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Device::set_has_carrier() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Device::clear_has_carrier() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Device::clear_carrier() {
  carrier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_carrier();
}
 const ::std::string& BidRequest_Device::carrier() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.carrier)
  return carrier_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_carrier(const ::std::string& value) {
  set_has_carrier();
  carrier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.carrier)
}
 void BidRequest_Device::set_carrier(const char* value) {
  set_has_carrier();
  carrier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.carrier)
}
 void BidRequest_Device::set_carrier(const char* value, size_t size) {
  set_has_carrier();
  carrier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.carrier)
}
 ::std::string* BidRequest_Device::mutable_carrier() {
  set_has_carrier();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.carrier)
  return carrier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_carrier() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.carrier)
  clear_has_carrier();
  return carrier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_carrier(::std::string* carrier) {
  if (carrier != NULL) {
    set_has_carrier();
  } else {
    clear_has_carrier();
  }
  carrier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), carrier);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.carrier)
}

// optional string language = 11;
bool BidRequest_Device::has_language() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest_Device::set_has_language() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest_Device::clear_has_language() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest_Device::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language();
}
 const ::std::string& BidRequest_Device::language() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.language)
  return language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_language(const ::std::string& value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.language)
}
 void BidRequest_Device::set_language(const char* value) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.language)
}
 void BidRequest_Device::set_language(const char* value, size_t size) {
  set_has_language();
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.language)
}
 ::std::string* BidRequest_Device::mutable_language() {
  set_has_language();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_language() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.language)
  clear_has_language();
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    set_has_language();
  } else {
    clear_has_language();
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.language)
}

// optional string make = 12;
bool BidRequest_Device::has_make() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidRequest_Device::set_has_make() {
  _has_bits_[0] |= 0x00000800u;
}
void BidRequest_Device::clear_has_make() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidRequest_Device::clear_make() {
  make_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_make();
}
 const ::std::string& BidRequest_Device::make() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.make)
  return make_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_make(const ::std::string& value) {
  set_has_make();
  make_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.make)
}
 void BidRequest_Device::set_make(const char* value) {
  set_has_make();
  make_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.make)
}
 void BidRequest_Device::set_make(const char* value, size_t size) {
  set_has_make();
  make_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.make)
}
 ::std::string* BidRequest_Device::mutable_make() {
  set_has_make();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.make)
  return make_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_make() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.make)
  clear_has_make();
  return make_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_make(::std::string* make) {
  if (make != NULL) {
    set_has_make();
  } else {
    clear_has_make();
  }
  make_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), make);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.make)
}

// optional string model = 13;
bool BidRequest_Device::has_model() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void BidRequest_Device::set_has_model() {
  _has_bits_[0] |= 0x00001000u;
}
void BidRequest_Device::clear_has_model() {
  _has_bits_[0] &= ~0x00001000u;
}
void BidRequest_Device::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model();
}
 const ::std::string& BidRequest_Device::model() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_model(const ::std::string& value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.model)
}
 void BidRequest_Device::set_model(const char* value) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.model)
}
 void BidRequest_Device::set_model(const char* value, size_t size) {
  set_has_model();
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.model)
}
 ::std::string* BidRequest_Device::mutable_model() {
  set_has_model();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_model() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.model)
  clear_has_model();
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    set_has_model();
  } else {
    clear_has_model();
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.model)
}

// optional string os = 14;
bool BidRequest_Device::has_os() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void BidRequest_Device::set_has_os() {
  _has_bits_[0] |= 0x00002000u;
}
void BidRequest_Device::clear_has_os() {
  _has_bits_[0] &= ~0x00002000u;
}
void BidRequest_Device::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os();
}
 const ::std::string& BidRequest_Device::os() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.os)
  return os_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_os(const ::std::string& value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.os)
}
 void BidRequest_Device::set_os(const char* value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.os)
}
 void BidRequest_Device::set_os(const char* value, size_t size) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.os)
}
 ::std::string* BidRequest_Device::mutable_os() {
  set_has_os();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_os() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.os)
  clear_has_os();
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    set_has_os();
  } else {
    clear_has_os();
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.os)
}

// optional string osv = 15;
bool BidRequest_Device::has_osv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest_Device::set_has_osv() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest_Device::clear_has_osv() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest_Device::clear_osv() {
  osv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_osv();
}
 const ::std::string& BidRequest_Device::osv() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.osv)
  return osv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_osv(const ::std::string& value) {
  set_has_osv();
  osv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.osv)
}
 void BidRequest_Device::set_osv(const char* value) {
  set_has_osv();
  osv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.osv)
}
 void BidRequest_Device::set_osv(const char* value, size_t size) {
  set_has_osv();
  osv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.osv)
}
 ::std::string* BidRequest_Device::mutable_osv() {
  set_has_osv();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.osv)
  return osv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_osv() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.osv)
  clear_has_osv();
  return osv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_osv(::std::string* osv) {
  if (osv != NULL) {
    set_has_osv();
  } else {
    clear_has_osv();
  }
  osv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osv);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.osv)
}

// optional string hwv = 24;
bool BidRequest_Device::has_hwv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidRequest_Device::set_has_hwv() {
  _has_bits_[0] |= 0x00008000u;
}
void BidRequest_Device::clear_has_hwv() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidRequest_Device::clear_hwv() {
  hwv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hwv();
}
 const ::std::string& BidRequest_Device::hwv() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.hwv)
  return hwv_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_hwv(const ::std::string& value) {
  set_has_hwv();
  hwv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.hwv)
}
 void BidRequest_Device::set_hwv(const char* value) {
  set_has_hwv();
  hwv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.hwv)
}
 void BidRequest_Device::set_hwv(const char* value, size_t size) {
  set_has_hwv();
  hwv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.hwv)
}
 ::std::string* BidRequest_Device::mutable_hwv() {
  set_has_hwv();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.hwv)
  return hwv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_hwv() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.hwv)
  clear_has_hwv();
  return hwv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_hwv(::std::string* hwv) {
  if (hwv != NULL) {
    set_has_hwv();
  } else {
    clear_has_hwv();
  }
  hwv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hwv);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.hwv)
}

// optional int32 w = 25;
bool BidRequest_Device::has_w() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidRequest_Device::set_has_w() {
  _has_bits_[0] |= 0x00010000u;
}
void BidRequest_Device::clear_has_w() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidRequest_Device::clear_w() {
  w_ = 0;
  clear_has_w();
}
 ::google::protobuf::int32 BidRequest_Device::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.w)
  return w_;
}
 void BidRequest_Device::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.w)
}

// optional int32 h = 26;
bool BidRequest_Device::has_h() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void BidRequest_Device::set_has_h() {
  _has_bits_[0] |= 0x00020000u;
}
void BidRequest_Device::clear_has_h() {
  _has_bits_[0] &= ~0x00020000u;
}
void BidRequest_Device::clear_h() {
  h_ = 0;
  clear_has_h();
}
 ::google::protobuf::int32 BidRequest_Device::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.h)
  return h_;
}
 void BidRequest_Device::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.h)
}

// optional int32 ppi = 27;
bool BidRequest_Device::has_ppi() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void BidRequest_Device::set_has_ppi() {
  _has_bits_[0] |= 0x00040000u;
}
void BidRequest_Device::clear_has_ppi() {
  _has_bits_[0] &= ~0x00040000u;
}
void BidRequest_Device::clear_ppi() {
  ppi_ = 0;
  clear_has_ppi();
}
 ::google::protobuf::int32 BidRequest_Device::ppi() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ppi)
  return ppi_;
}
 void BidRequest_Device::set_ppi(::google::protobuf::int32 value) {
  set_has_ppi();
  ppi_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ppi)
}

// optional double pxratio = 28;
bool BidRequest_Device::has_pxratio() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void BidRequest_Device::set_has_pxratio() {
  _has_bits_[0] |= 0x00080000u;
}
void BidRequest_Device::clear_has_pxratio() {
  _has_bits_[0] &= ~0x00080000u;
}
void BidRequest_Device::clear_pxratio() {
  pxratio_ = 0;
  clear_has_pxratio();
}
 double BidRequest_Device::pxratio() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.pxratio)
  return pxratio_;
}
 void BidRequest_Device::set_pxratio(double value) {
  set_has_pxratio();
  pxratio_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.pxratio)
}

// optional bool js = 16;
bool BidRequest_Device::has_js() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void BidRequest_Device::set_has_js() {
  _has_bits_[0] |= 0x00100000u;
}
void BidRequest_Device::clear_has_js() {
  _has_bits_[0] &= ~0x00100000u;
}
void BidRequest_Device::clear_js() {
  js_ = false;
  clear_has_js();
}
 bool BidRequest_Device::js() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.js)
  return js_;
}
 void BidRequest_Device::set_js(bool value) {
  set_has_js();
  js_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.js)
}

// optional .com.google.openrtb.BidRequest.Device.ConnectionType connectiontype = 17;
bool BidRequest_Device::has_connectiontype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void BidRequest_Device::set_has_connectiontype() {
  _has_bits_[0] |= 0x00200000u;
}
void BidRequest_Device::clear_has_connectiontype() {
  _has_bits_[0] &= ~0x00200000u;
}
void BidRequest_Device::clear_connectiontype() {
  connectiontype_ = 0;
  clear_has_connectiontype();
}
 ::com::google::openrtb::BidRequest_Device_ConnectionType BidRequest_Device::connectiontype() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.connectiontype)
  return static_cast< ::com::google::openrtb::BidRequest_Device_ConnectionType >(connectiontype_);
}
 void BidRequest_Device::set_connectiontype(::com::google::openrtb::BidRequest_Device_ConnectionType value) {
  assert(::com::google::openrtb::BidRequest_Device_ConnectionType_IsValid(value));
  set_has_connectiontype();
  connectiontype_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.connectiontype)
}

// optional .com.google.openrtb.BidRequest.Device.DeviceType devicetype = 18;
bool BidRequest_Device::has_devicetype() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void BidRequest_Device::set_has_devicetype() {
  _has_bits_[0] |= 0x00400000u;
}
void BidRequest_Device::clear_has_devicetype() {
  _has_bits_[0] &= ~0x00400000u;
}
void BidRequest_Device::clear_devicetype() {
  devicetype_ = 1;
  clear_has_devicetype();
}
 ::com::google::openrtb::BidRequest_Device_DeviceType BidRequest_Device::devicetype() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.devicetype)
  return static_cast< ::com::google::openrtb::BidRequest_Device_DeviceType >(devicetype_);
}
 void BidRequest_Device::set_devicetype(::com::google::openrtb::BidRequest_Device_DeviceType value) {
  assert(::com::google::openrtb::BidRequest_Device_DeviceType_IsValid(value));
  set_has_devicetype();
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.devicetype)
}

// optional string flashver = 19;
bool BidRequest_Device::has_flashver() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void BidRequest_Device::set_has_flashver() {
  _has_bits_[0] |= 0x00800000u;
}
void BidRequest_Device::clear_has_flashver() {
  _has_bits_[0] &= ~0x00800000u;
}
void BidRequest_Device::clear_flashver() {
  flashver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_flashver();
}
 const ::std::string& BidRequest_Device::flashver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.flashver)
  return flashver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_flashver(const ::std::string& value) {
  set_has_flashver();
  flashver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.flashver)
}
 void BidRequest_Device::set_flashver(const char* value) {
  set_has_flashver();
  flashver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.flashver)
}
 void BidRequest_Device::set_flashver(const char* value, size_t size) {
  set_has_flashver();
  flashver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.flashver)
}
 ::std::string* BidRequest_Device::mutable_flashver() {
  set_has_flashver();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.flashver)
  return flashver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_flashver() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.flashver)
  clear_has_flashver();
  return flashver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_flashver(::std::string* flashver) {
  if (flashver != NULL) {
    set_has_flashver();
  } else {
    clear_has_flashver();
  }
  flashver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flashver);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.flashver)
}

// optional string ifa = 20;
bool BidRequest_Device::has_ifa() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void BidRequest_Device::set_has_ifa() {
  _has_bits_[0] |= 0x01000000u;
}
void BidRequest_Device::clear_has_ifa() {
  _has_bits_[0] &= ~0x01000000u;
}
void BidRequest_Device::clear_ifa() {
  ifa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ifa();
}
 const ::std::string& BidRequest_Device::ifa() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.ifa)
  return ifa_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_ifa(const ::std::string& value) {
  set_has_ifa();
  ifa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.ifa)
}
 void BidRequest_Device::set_ifa(const char* value) {
  set_has_ifa();
  ifa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.ifa)
}
 void BidRequest_Device::set_ifa(const char* value, size_t size) {
  set_has_ifa();
  ifa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.ifa)
}
 ::std::string* BidRequest_Device::mutable_ifa() {
  set_has_ifa();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.ifa)
  return ifa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_ifa() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.ifa)
  clear_has_ifa();
  return ifa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_ifa(::std::string* ifa) {
  if (ifa != NULL) {
    set_has_ifa();
  } else {
    clear_has_ifa();
  }
  ifa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ifa);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.ifa)
}

// optional string macsha1 = 21;
bool BidRequest_Device::has_macsha1() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void BidRequest_Device::set_has_macsha1() {
  _has_bits_[0] |= 0x02000000u;
}
void BidRequest_Device::clear_has_macsha1() {
  _has_bits_[0] &= ~0x02000000u;
}
void BidRequest_Device::clear_macsha1() {
  macsha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macsha1();
}
 const ::std::string& BidRequest_Device::macsha1() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.macsha1)
  return macsha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_macsha1(const ::std::string& value) {
  set_has_macsha1();
  macsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.macsha1)
}
 void BidRequest_Device::set_macsha1(const char* value) {
  set_has_macsha1();
  macsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.macsha1)
}
 void BidRequest_Device::set_macsha1(const char* value, size_t size) {
  set_has_macsha1();
  macsha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.macsha1)
}
 ::std::string* BidRequest_Device::mutable_macsha1() {
  set_has_macsha1();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.macsha1)
  return macsha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_macsha1() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.macsha1)
  clear_has_macsha1();
  return macsha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_macsha1(::std::string* macsha1) {
  if (macsha1 != NULL) {
    set_has_macsha1();
  } else {
    clear_has_macsha1();
  }
  macsha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macsha1);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.macsha1)
}

// optional string macmd5 = 22;
bool BidRequest_Device::has_macmd5() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void BidRequest_Device::set_has_macmd5() {
  _has_bits_[0] |= 0x04000000u;
}
void BidRequest_Device::clear_has_macmd5() {
  _has_bits_[0] &= ~0x04000000u;
}
void BidRequest_Device::clear_macmd5() {
  macmd5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macmd5();
}
 const ::std::string& BidRequest_Device::macmd5() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.macmd5)
  return macmd5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_macmd5(const ::std::string& value) {
  set_has_macmd5();
  macmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.macmd5)
}
 void BidRequest_Device::set_macmd5(const char* value) {
  set_has_macmd5();
  macmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Device.macmd5)
}
 void BidRequest_Device::set_macmd5(const char* value, size_t size) {
  set_has_macmd5();
  macmd5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Device.macmd5)
}
 ::std::string* BidRequest_Device::mutable_macmd5() {
  set_has_macmd5();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Device.macmd5)
  return macmd5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Device::release_macmd5() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Device.macmd5)
  clear_has_macmd5();
  return macmd5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Device::set_allocated_macmd5(::std::string* macmd5) {
  if (macmd5 != NULL) {
    set_has_macmd5();
  } else {
    clear_has_macmd5();
  }
  macmd5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macmd5);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Device.macmd5)
}

// optional bool lmt = 23;
bool BidRequest_Device::has_lmt() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void BidRequest_Device::set_has_lmt() {
  _has_bits_[0] |= 0x08000000u;
}
void BidRequest_Device::clear_has_lmt() {
  _has_bits_[0] &= ~0x08000000u;
}
void BidRequest_Device::clear_lmt() {
  lmt_ = false;
  clear_has_lmt();
}
 bool BidRequest_Device::lmt() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Device.lmt)
  return lmt_;
}
 void BidRequest_Device::set_lmt(bool value) {
  set_has_lmt();
  lmt_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Device.lmt)
}

// -------------------------------------------------------------------

// BidRequest_Geo

// optional double lat = 1;
bool BidRequest_Geo::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Geo::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Geo::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Geo::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
 double BidRequest_Geo::lat() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.lat)
  return lat_;
}
 void BidRequest_Geo::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.lat)
}

// optional double lon = 2;
bool BidRequest_Geo::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Geo::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Geo::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Geo::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
 double BidRequest_Geo::lon() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.lon)
  return lon_;
}
 void BidRequest_Geo::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.lon)
}

// optional string country = 3;
bool BidRequest_Geo::has_country() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Geo::set_has_country() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Geo::clear_has_country() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Geo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& BidRequest_Geo::country() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.country)
}
 void BidRequest_Geo::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.country)
}
 void BidRequest_Geo::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.country)
}
 ::std::string* BidRequest_Geo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo::release_country() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Geo.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.country)
}

// optional string region = 4;
bool BidRequest_Geo::has_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_Geo::set_has_region() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_Geo::clear_has_region() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_Geo::clear_region() {
  region_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_region();
}
 const ::std::string& BidRequest_Geo::region() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.region)
  return region_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_region(const ::std::string& value) {
  set_has_region();
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.region)
}
 void BidRequest_Geo::set_region(const char* value) {
  set_has_region();
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.region)
}
 void BidRequest_Geo::set_region(const char* value, size_t size) {
  set_has_region();
  region_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.region)
}
 ::std::string* BidRequest_Geo::mutable_region() {
  set_has_region();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.region)
  return region_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo::release_region() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Geo.region)
  clear_has_region();
  return region_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_allocated_region(::std::string* region) {
  if (region != NULL) {
    set_has_region();
  } else {
    clear_has_region();
  }
  region_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.region)
}

// optional string regionfips104 = 5;
bool BidRequest_Geo::has_regionfips104() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_Geo::set_has_regionfips104() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_Geo::clear_has_regionfips104() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_Geo::clear_regionfips104() {
  regionfips104_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_regionfips104();
}
 const ::std::string& BidRequest_Geo::regionfips104() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.regionfips104)
  return regionfips104_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_regionfips104(const ::std::string& value) {
  set_has_regionfips104();
  regionfips104_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.regionfips104)
}
 void BidRequest_Geo::set_regionfips104(const char* value) {
  set_has_regionfips104();
  regionfips104_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.regionfips104)
}
 void BidRequest_Geo::set_regionfips104(const char* value, size_t size) {
  set_has_regionfips104();
  regionfips104_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.regionfips104)
}
 ::std::string* BidRequest_Geo::mutable_regionfips104() {
  set_has_regionfips104();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.regionfips104)
  return regionfips104_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo::release_regionfips104() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Geo.regionfips104)
  clear_has_regionfips104();
  return regionfips104_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_allocated_regionfips104(::std::string* regionfips104) {
  if (regionfips104 != NULL) {
    set_has_regionfips104();
  } else {
    clear_has_regionfips104();
  }
  regionfips104_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regionfips104);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.regionfips104)
}

// optional string metro = 6;
bool BidRequest_Geo::has_metro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_Geo::set_has_metro() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_Geo::clear_has_metro() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_Geo::clear_metro() {
  metro_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metro();
}
 const ::std::string& BidRequest_Geo::metro() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.metro)
  return metro_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_metro(const ::std::string& value) {
  set_has_metro();
  metro_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.metro)
}
 void BidRequest_Geo::set_metro(const char* value) {
  set_has_metro();
  metro_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.metro)
}
 void BidRequest_Geo::set_metro(const char* value, size_t size) {
  set_has_metro();
  metro_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.metro)
}
 ::std::string* BidRequest_Geo::mutable_metro() {
  set_has_metro();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.metro)
  return metro_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo::release_metro() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Geo.metro)
  clear_has_metro();
  return metro_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_allocated_metro(::std::string* metro) {
  if (metro != NULL) {
    set_has_metro();
  } else {
    clear_has_metro();
  }
  metro_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metro);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.metro)
}

// optional string city = 7;
bool BidRequest_Geo::has_city() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_Geo::set_has_city() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_Geo::clear_has_city() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_Geo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
 const ::std::string& BidRequest_Geo::city() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.city)
}
 void BidRequest_Geo::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.city)
}
 void BidRequest_Geo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.city)
}
 ::std::string* BidRequest_Geo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo::release_city() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Geo.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.city)
}

// optional string zip = 8;
bool BidRequest_Geo::has_zip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest_Geo::set_has_zip() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest_Geo::clear_has_zip() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest_Geo::clear_zip() {
  zip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zip();
}
 const ::std::string& BidRequest_Geo::zip() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.zip)
  return zip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_zip(const ::std::string& value) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.zip)
}
 void BidRequest_Geo::set_zip(const char* value) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Geo.zip)
}
 void BidRequest_Geo::set_zip(const char* value, size_t size) {
  set_has_zip();
  zip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Geo.zip)
}
 ::std::string* BidRequest_Geo::mutable_zip() {
  set_has_zip();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Geo.zip)
  return zip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Geo::release_zip() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Geo.zip)
  clear_has_zip();
  return zip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Geo::set_allocated_zip(::std::string* zip) {
  if (zip != NULL) {
    set_has_zip();
  } else {
    clear_has_zip();
  }
  zip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zip);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Geo.zip)
}

// optional .com.google.openrtb.BidRequest.Geo.LocationType type = 9;
bool BidRequest_Geo::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest_Geo::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest_Geo::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest_Geo::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::com::google::openrtb::BidRequest_Geo_LocationType BidRequest_Geo::type() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.type)
  return static_cast< ::com::google::openrtb::BidRequest_Geo_LocationType >(type_);
}
 void BidRequest_Geo::set_type(::com::google::openrtb::BidRequest_Geo_LocationType value) {
  assert(::com::google::openrtb::BidRequest_Geo_LocationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.type)
}

// optional int32 utcoffset = 10;
bool BidRequest_Geo::has_utcoffset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidRequest_Geo::set_has_utcoffset() {
  _has_bits_[0] |= 0x00000200u;
}
void BidRequest_Geo::clear_has_utcoffset() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidRequest_Geo::clear_utcoffset() {
  utcoffset_ = 0;
  clear_has_utcoffset();
}
 ::google::protobuf::int32 BidRequest_Geo::utcoffset() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Geo.utcoffset)
  return utcoffset_;
}
 void BidRequest_Geo::set_utcoffset(::google::protobuf::int32 value) {
  set_has_utcoffset();
  utcoffset_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Geo.utcoffset)
}

// -------------------------------------------------------------------

// BidRequest_User

// optional string id = 1;
bool BidRequest_User::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_User::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_User::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_User::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.id)
}
 void BidRequest_User::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.id)
}
 void BidRequest_User::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.id)
}
 ::std::string* BidRequest_User::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_User::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.User.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.id)
}

// optional string buyeruid = 2;
bool BidRequest_User::has_buyeruid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_User::set_has_buyeruid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_User::clear_has_buyeruid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_User::clear_buyeruid() {
  buyeruid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buyeruid();
}
 const ::std::string& BidRequest_User::buyeruid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.buyeruid)
  return buyeruid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_buyeruid(const ::std::string& value) {
  set_has_buyeruid();
  buyeruid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.buyeruid)
}
 void BidRequest_User::set_buyeruid(const char* value) {
  set_has_buyeruid();
  buyeruid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.buyeruid)
}
 void BidRequest_User::set_buyeruid(const char* value, size_t size) {
  set_has_buyeruid();
  buyeruid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.buyeruid)
}
 ::std::string* BidRequest_User::mutable_buyeruid() {
  set_has_buyeruid();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.buyeruid)
  return buyeruid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_User::release_buyeruid() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.User.buyeruid)
  clear_has_buyeruid();
  return buyeruid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_allocated_buyeruid(::std::string* buyeruid) {
  if (buyeruid != NULL) {
    set_has_buyeruid();
  } else {
    clear_has_buyeruid();
  }
  buyeruid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buyeruid);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.buyeruid)
}

// optional int32 yob = 3;
bool BidRequest_User::has_yob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_User::set_has_yob() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_User::clear_has_yob() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_User::clear_yob() {
  yob_ = 0;
  clear_has_yob();
}
 ::google::protobuf::int32 BidRequest_User::yob() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.yob)
  return yob_;
}
 void BidRequest_User::set_yob(::google::protobuf::int32 value) {
  set_has_yob();
  yob_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.yob)
}

// optional string gender = 4;
bool BidRequest_User::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidRequest_User::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
void BidRequest_User::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidRequest_User::clear_gender() {
  gender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gender();
}
 const ::std::string& BidRequest_User::gender() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.gender)
  return gender_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_gender(const ::std::string& value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.gender)
}
 void BidRequest_User::set_gender(const char* value) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.gender)
}
 void BidRequest_User::set_gender(const char* value, size_t size) {
  set_has_gender();
  gender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.gender)
}
 ::std::string* BidRequest_User::mutable_gender() {
  set_has_gender();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.gender)
  return gender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_User::release_gender() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.User.gender)
  clear_has_gender();
  return gender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_allocated_gender(::std::string* gender) {
  if (gender != NULL) {
    set_has_gender();
  } else {
    clear_has_gender();
  }
  gender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gender);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.gender)
}

// optional string keywords = 5;
bool BidRequest_User::has_keywords() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest_User::set_has_keywords() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest_User::clear_has_keywords() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest_User::clear_keywords() {
  keywords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keywords();
}
 const ::std::string& BidRequest_User::keywords() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.keywords)
  return keywords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_keywords(const ::std::string& value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.keywords)
}
 void BidRequest_User::set_keywords(const char* value) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.keywords)
}
 void BidRequest_User::set_keywords(const char* value, size_t size) {
  set_has_keywords();
  keywords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.keywords)
}
 ::std::string* BidRequest_User::mutable_keywords() {
  set_has_keywords();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.keywords)
  return keywords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_User::release_keywords() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.User.keywords)
  clear_has_keywords();
  return keywords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_allocated_keywords(::std::string* keywords) {
  if (keywords != NULL) {
    set_has_keywords();
  } else {
    clear_has_keywords();
  }
  keywords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keywords);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.keywords)
}

// optional string customdata = 6;
bool BidRequest_User::has_customdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest_User::set_has_customdata() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest_User::clear_has_customdata() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest_User::clear_customdata() {
  customdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customdata();
}
 const ::std::string& BidRequest_User::customdata() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.customdata)
  return customdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_customdata(const ::std::string& value) {
  set_has_customdata();
  customdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.User.customdata)
}
 void BidRequest_User::set_customdata(const char* value) {
  set_has_customdata();
  customdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.User.customdata)
}
 void BidRequest_User::set_customdata(const char* value, size_t size) {
  set_has_customdata();
  customdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.User.customdata)
}
 ::std::string* BidRequest_User::mutable_customdata() {
  set_has_customdata();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.customdata)
  return customdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_User::release_customdata() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.User.customdata)
  clear_has_customdata();
  return customdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_User::set_allocated_customdata(::std::string* customdata) {
  if (customdata != NULL) {
    set_has_customdata();
  } else {
    clear_has_customdata();
  }
  customdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customdata);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.customdata)
}

// optional .com.google.openrtb.BidRequest.Geo geo = 7;
bool BidRequest_User::has_geo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest_User::set_has_geo() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest_User::clear_has_geo() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest_User::clear_geo() {
  if (geo_ != NULL) geo_->::com::google::openrtb::BidRequest_Geo::Clear();
  clear_has_geo();
}
const ::com::google::openrtb::BidRequest_Geo& BidRequest_User::geo() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.geo)
  return geo_ != NULL ? *geo_ : *default_instance_->geo_;
}
::com::google::openrtb::BidRequest_Geo* BidRequest_User::mutable_geo() {
  set_has_geo();
  if (geo_ == NULL) {
    geo_ = new ::com::google::openrtb::BidRequest_Geo;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.geo)
  return geo_;
}
::com::google::openrtb::BidRequest_Geo* BidRequest_User::release_geo() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.User.geo)
  clear_has_geo();
  ::com::google::openrtb::BidRequest_Geo* temp = geo_;
  geo_ = NULL;
  return temp;
}
void BidRequest_User::set_allocated_geo(::com::google::openrtb::BidRequest_Geo* geo) {
  delete geo_;
  geo_ = geo;
  if (geo) {
    set_has_geo();
  } else {
    clear_has_geo();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.User.geo)
}

// repeated .com.google.openrtb.BidRequest.Data data = 8;
int BidRequest_User::data_size() const {
  return data_.size();
}
void BidRequest_User::clear_data() {
  data_.Clear();
}
const ::com::google::openrtb::BidRequest_Data& BidRequest_User::data(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.User.data)
  return data_.Get(index);
}
::com::google::openrtb::BidRequest_Data* BidRequest_User::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.User.data)
  return data_.Mutable(index);
}
::com::google::openrtb::BidRequest_Data* BidRequest_User::add_data() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.User.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data >*
BidRequest_User::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.User.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data >&
BidRequest_User::data() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.User.data)
  return data_;
}

// -------------------------------------------------------------------

// BidRequest_Data_Segment

// optional string id = 1;
bool BidRequest_Data_Segment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Data_Segment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Data_Segment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Data_Segment::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Data_Segment::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.Segment.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data_Segment::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.Segment.id)
}
 void BidRequest_Data_Segment::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.Segment.id)
}
 void BidRequest_Data_Segment::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.Segment.id)
}
 ::std::string* BidRequest_Data_Segment::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.Segment.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Data_Segment::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Data.Segment.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data_Segment::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.Segment.id)
}

// optional string name = 2;
bool BidRequest_Data_Segment::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Data_Segment::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Data_Segment::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Data_Segment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BidRequest_Data_Segment::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.Segment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data_Segment::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.Segment.name)
}
 void BidRequest_Data_Segment::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.Segment.name)
}
 void BidRequest_Data_Segment::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.Segment.name)
}
 ::std::string* BidRequest_Data_Segment::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.Segment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Data_Segment::release_name() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Data.Segment.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data_Segment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.Segment.name)
}

// optional string value = 3;
bool BidRequest_Data_Segment::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidRequest_Data_Segment::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void BidRequest_Data_Segment::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidRequest_Data_Segment::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& BidRequest_Data_Segment::value() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.Segment.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data_Segment::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.Segment.value)
}
 void BidRequest_Data_Segment::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.Segment.value)
}
 void BidRequest_Data_Segment::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.Segment.value)
}
 ::std::string* BidRequest_Data_Segment::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.Segment.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Data_Segment::release_value() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Data.Segment.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data_Segment::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.Segment.value)
}

// -------------------------------------------------------------------

// BidRequest_Data

// optional string id = 1;
bool BidRequest_Data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Data::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest_Data::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.id)
}
 void BidRequest_Data::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.id)
}
 void BidRequest_Data::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.id)
}
 ::std::string* BidRequest_Data::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Data::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Data.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.id)
}

// optional string name = 2;
bool BidRequest_Data::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidRequest_Data::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BidRequest_Data::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidRequest_Data::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BidRequest_Data::name() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Data.name)
}
 void BidRequest_Data::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.Data.name)
}
 void BidRequest_Data::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.Data.name)
}
 ::std::string* BidRequest_Data::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest_Data::release_name() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.Data.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest_Data::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.Data.name)
}

// repeated .com.google.openrtb.BidRequest.Data.Segment segment = 3;
int BidRequest_Data::segment_size() const {
  return segment_.size();
}
void BidRequest_Data::clear_segment() {
  segment_.Clear();
}
const ::com::google::openrtb::BidRequest_Data_Segment& BidRequest_Data::segment(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Data.segment)
  return segment_.Get(index);
}
::com::google::openrtb::BidRequest_Data_Segment* BidRequest_Data::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.Data.segment)
  return segment_.Mutable(index);
}
::com::google::openrtb::BidRequest_Data_Segment* BidRequest_Data::add_segment() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.Data.segment)
  return segment_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data_Segment >*
BidRequest_Data::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.Data.segment)
  return &segment_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Data_Segment >&
BidRequest_Data::segment() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.Data.segment)
  return segment_;
}

// -------------------------------------------------------------------

// BidRequest_Regs

// optional bool coppa = 1;
bool BidRequest_Regs::has_coppa() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest_Regs::set_has_coppa() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest_Regs::clear_has_coppa() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest_Regs::clear_coppa() {
  coppa_ = false;
  clear_has_coppa();
}
 bool BidRequest_Regs::coppa() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.Regs.coppa)
  return coppa_;
}
 void BidRequest_Regs::set_coppa(bool value) {
  set_has_coppa();
  coppa_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.Regs.coppa)
}

// -------------------------------------------------------------------

// BidRequest

// required string id = 1;
bool BidRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidRequest::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.id)
}
 void BidRequest::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.id)
}
 void BidRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.id)
}
 ::std::string* BidRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidRequest::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.id)
}

// repeated .com.google.openrtb.BidRequest.Imp imp = 2;
int BidRequest::imp_size() const {
  return imp_.size();
}
void BidRequest::clear_imp() {
  imp_.Clear();
}
const ::com::google::openrtb::BidRequest_Imp& BidRequest::imp(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.imp)
  return imp_.Get(index);
}
::com::google::openrtb::BidRequest_Imp* BidRequest::mutable_imp(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.imp)
  return imp_.Mutable(index);
}
::com::google::openrtb::BidRequest_Imp* BidRequest::add_imp() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.imp)
  return imp_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp >*
BidRequest::mutable_imp() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.imp)
  return &imp_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidRequest_Imp >&
BidRequest::imp() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.imp)
  return imp_;
}

// optional .com.google.openrtb.BidRequest.Site site = 3;
bool BidRequest::has_site() const {
  return distributionchannel_oneof_case() == kSite;
}
void BidRequest::set_has_site() {
  _oneof_case_[0] = kSite;
}
void BidRequest::clear_site() {
  if (has_site()) {
    delete distributionchannel_oneof_.site_;
    clear_has_distributionchannel_oneof();
  }
}
 const ::com::google::openrtb::BidRequest_Site& BidRequest::site() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.site)
  return has_site()
      ? *distributionchannel_oneof_.site_
      : ::com::google::openrtb::BidRequest_Site::default_instance();
}
::com::google::openrtb::BidRequest_Site* BidRequest::mutable_site() {
  if (!has_site()) {
    clear_distributionchannel_oneof();
    set_has_site();
    distributionchannel_oneof_.site_ = new ::com::google::openrtb::BidRequest_Site;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.site)
  return distributionchannel_oneof_.site_;
}
::com::google::openrtb::BidRequest_Site* BidRequest::release_site() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.site)
  if (has_site()) {
    clear_has_distributionchannel_oneof();
    ::com::google::openrtb::BidRequest_Site* temp = distributionchannel_oneof_.site_;
    distributionchannel_oneof_.site_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BidRequest::set_allocated_site(::com::google::openrtb::BidRequest_Site* site) {
  clear_distributionchannel_oneof();
  if (site) {
    set_has_site();
    distributionchannel_oneof_.site_ = site;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.site)
}

// optional .com.google.openrtb.BidRequest.App app = 4;
bool BidRequest::has_app() const {
  return distributionchannel_oneof_case() == kApp;
}
void BidRequest::set_has_app() {
  _oneof_case_[0] = kApp;
}
void BidRequest::clear_app() {
  if (has_app()) {
    delete distributionchannel_oneof_.app_;
    clear_has_distributionchannel_oneof();
  }
}
 const ::com::google::openrtb::BidRequest_App& BidRequest::app() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.app)
  return has_app()
      ? *distributionchannel_oneof_.app_
      : ::com::google::openrtb::BidRequest_App::default_instance();
}
::com::google::openrtb::BidRequest_App* BidRequest::mutable_app() {
  if (!has_app()) {
    clear_distributionchannel_oneof();
    set_has_app();
    distributionchannel_oneof_.app_ = new ::com::google::openrtb::BidRequest_App;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.app)
  return distributionchannel_oneof_.app_;
}
::com::google::openrtb::BidRequest_App* BidRequest::release_app() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.app)
  if (has_app()) {
    clear_has_distributionchannel_oneof();
    ::com::google::openrtb::BidRequest_App* temp = distributionchannel_oneof_.app_;
    distributionchannel_oneof_.app_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BidRequest::set_allocated_app(::com::google::openrtb::BidRequest_App* app) {
  clear_distributionchannel_oneof();
  if (app) {
    set_has_app();
    distributionchannel_oneof_.app_ = app;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.app)
}

// optional .com.google.openrtb.BidRequest.Device device = 5;
bool BidRequest::has_device() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidRequest::set_has_device() {
  _has_bits_[0] |= 0x00000010u;
}
void BidRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidRequest::clear_device() {
  if (device_ != NULL) device_->::com::google::openrtb::BidRequest_Device::Clear();
  clear_has_device();
}
const ::com::google::openrtb::BidRequest_Device& BidRequest::device() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.device)
  return device_ != NULL ? *device_ : *default_instance_->device_;
}
::com::google::openrtb::BidRequest_Device* BidRequest::mutable_device() {
  set_has_device();
  if (device_ == NULL) {
    device_ = new ::com::google::openrtb::BidRequest_Device;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.device)
  return device_;
}
::com::google::openrtb::BidRequest_Device* BidRequest::release_device() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.device)
  clear_has_device();
  ::com::google::openrtb::BidRequest_Device* temp = device_;
  device_ = NULL;
  return temp;
}
void BidRequest::set_allocated_device(::com::google::openrtb::BidRequest_Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    set_has_device();
  } else {
    clear_has_device();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.device)
}

// optional .com.google.openrtb.BidRequest.Regs regs = 14;
bool BidRequest::has_regs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidRequest::set_has_regs() {
  _has_bits_[0] |= 0x00000020u;
}
void BidRequest::clear_has_regs() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidRequest::clear_regs() {
  if (regs_ != NULL) regs_->::com::google::openrtb::BidRequest_Regs::Clear();
  clear_has_regs();
}
const ::com::google::openrtb::BidRequest_Regs& BidRequest::regs() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.regs)
  return regs_ != NULL ? *regs_ : *default_instance_->regs_;
}
::com::google::openrtb::BidRequest_Regs* BidRequest::mutable_regs() {
  set_has_regs();
  if (regs_ == NULL) {
    regs_ = new ::com::google::openrtb::BidRequest_Regs;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.regs)
  return regs_;
}
::com::google::openrtb::BidRequest_Regs* BidRequest::release_regs() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.regs)
  clear_has_regs();
  ::com::google::openrtb::BidRequest_Regs* temp = regs_;
  regs_ = NULL;
  return temp;
}
void BidRequest::set_allocated_regs(::com::google::openrtb::BidRequest_Regs* regs) {
  delete regs_;
  regs_ = regs;
  if (regs) {
    set_has_regs();
  } else {
    clear_has_regs();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.regs)
}

// optional .com.google.openrtb.BidRequest.User user = 6;
bool BidRequest::has_user() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BidRequest::set_has_user() {
  _has_bits_[0] |= 0x00000040u;
}
void BidRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000040u;
}
void BidRequest::clear_user() {
  if (user_ != NULL) user_->::com::google::openrtb::BidRequest_User::Clear();
  clear_has_user();
}
const ::com::google::openrtb::BidRequest_User& BidRequest::user() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
::com::google::openrtb::BidRequest_User* BidRequest::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::com::google::openrtb::BidRequest_User;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.user)
  return user_;
}
::com::google::openrtb::BidRequest_User* BidRequest::release_user() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidRequest.user)
  clear_has_user();
  ::com::google::openrtb::BidRequest_User* temp = user_;
  user_ = NULL;
  return temp;
}
void BidRequest::set_allocated_user(::com::google::openrtb::BidRequest_User* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidRequest.user)
}

// optional .com.google.openrtb.BidRequest.AuctionType at = 7 [default = SECOND_PRICE];
bool BidRequest::has_at() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BidRequest::set_has_at() {
  _has_bits_[0] |= 0x00000080u;
}
void BidRequest::clear_has_at() {
  _has_bits_[0] &= ~0x00000080u;
}
void BidRequest::clear_at() {
  at_ = 2;
  clear_has_at();
}
 ::com::google::openrtb::BidRequest_AuctionType BidRequest::at() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.at)
  return static_cast< ::com::google::openrtb::BidRequest_AuctionType >(at_);
}
 void BidRequest::set_at(::com::google::openrtb::BidRequest_AuctionType value) {
  assert(::com::google::openrtb::BidRequest_AuctionType_IsValid(value));
  set_has_at();
  at_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.at)
}

// optional int32 tmax = 8;
bool BidRequest::has_tmax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidRequest::set_has_tmax() {
  _has_bits_[0] |= 0x00000100u;
}
void BidRequest::clear_has_tmax() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidRequest::clear_tmax() {
  tmax_ = 0;
  clear_has_tmax();
}
 ::google::protobuf::int32 BidRequest::tmax() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.tmax)
  return tmax_;
}
 void BidRequest::set_tmax(::google::protobuf::int32 value) {
  set_has_tmax();
  tmax_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.tmax)
}

// repeated string wseat = 9;
int BidRequest::wseat_size() const {
  return wseat_.size();
}
void BidRequest::clear_wseat() {
  wseat_.Clear();
}
 const ::std::string& BidRequest::wseat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.wseat)
  return wseat_.Get(index);
}
 ::std::string* BidRequest::mutable_wseat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.wseat)
  return wseat_.Mutable(index);
}
 void BidRequest::set_wseat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.wseat)
  wseat_.Mutable(index)->assign(value);
}
 void BidRequest::set_wseat(int index, const char* value) {
  wseat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.wseat)
}
 void BidRequest::set_wseat(int index, const char* value, size_t size) {
  wseat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.wseat)
}
 ::std::string* BidRequest::add_wseat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.wseat)
  return wseat_.Add();
}
 void BidRequest::add_wseat(const ::std::string& value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.wseat)
}
 void BidRequest::add_wseat(const char* value) {
  wseat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.wseat)
}
 void BidRequest::add_wseat(const char* value, size_t size) {
  wseat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.wseat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::wseat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.wseat)
  return wseat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_wseat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.wseat)
  return &wseat_;
}

// optional bool allimps = 10 [default = false];
bool BidRequest::has_allimps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidRequest::set_has_allimps() {
  _has_bits_[0] |= 0x00000400u;
}
void BidRequest::clear_has_allimps() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidRequest::clear_allimps() {
  allimps_ = false;
  clear_has_allimps();
}
 bool BidRequest::allimps() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.allimps)
  return allimps_;
}
 void BidRequest::set_allimps(bool value) {
  set_has_allimps();
  allimps_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.allimps)
}

// repeated string cur = 11;
int BidRequest::cur_size() const {
  return cur_.size();
}
void BidRequest::clear_cur() {
  cur_.Clear();
}
 const ::std::string& BidRequest::cur(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.cur)
  return cur_.Get(index);
}
 ::std::string* BidRequest::mutable_cur(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.cur)
  return cur_.Mutable(index);
}
 void BidRequest::set_cur(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.cur)
  cur_.Mutable(index)->assign(value);
}
 void BidRequest::set_cur(int index, const char* value) {
  cur_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.cur)
}
 void BidRequest::set_cur(int index, const char* value, size_t size) {
  cur_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.cur)
}
 ::std::string* BidRequest::add_cur() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.cur)
  return cur_.Add();
}
 void BidRequest::add_cur(const ::std::string& value) {
  cur_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.cur)
}
 void BidRequest::add_cur(const char* value) {
  cur_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.cur)
}
 void BidRequest::add_cur(const char* value, size_t size) {
  cur_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.cur)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::cur() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.cur)
  return cur_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_cur() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.cur)
  return &cur_;
}

// repeated string bcat = 12;
int BidRequest::bcat_size() const {
  return bcat_.size();
}
void BidRequest::clear_bcat() {
  bcat_.Clear();
}
 const ::std::string& BidRequest::bcat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.bcat)
  return bcat_.Get(index);
}
 ::std::string* BidRequest::mutable_bcat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.bcat)
  return bcat_.Mutable(index);
}
 void BidRequest::set_bcat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.bcat)
  bcat_.Mutable(index)->assign(value);
}
 void BidRequest::set_bcat(int index, const char* value) {
  bcat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.bcat)
}
 void BidRequest::set_bcat(int index, const char* value, size_t size) {
  bcat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.bcat)
}
 ::std::string* BidRequest::add_bcat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.bcat)
  return bcat_.Add();
}
 void BidRequest::add_bcat(const ::std::string& value) {
  bcat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.bcat)
}
 void BidRequest::add_bcat(const char* value) {
  bcat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.bcat)
}
 void BidRequest::add_bcat(const char* value, size_t size) {
  bcat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.bcat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::bcat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.bcat)
  return bcat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_bcat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.bcat)
  return &bcat_;
}

// repeated string badv = 13;
int BidRequest::badv_size() const {
  return badv_.size();
}
void BidRequest::clear_badv() {
  badv_.Clear();
}
 const ::std::string& BidRequest::badv(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.badv)
  return badv_.Get(index);
}
 ::std::string* BidRequest::mutable_badv(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidRequest.badv)
  return badv_.Mutable(index);
}
 void BidRequest::set_badv(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.badv)
  badv_.Mutable(index)->assign(value);
}
 void BidRequest::set_badv(int index, const char* value) {
  badv_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidRequest.badv)
}
 void BidRequest::set_badv(int index, const char* value, size_t size) {
  badv_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidRequest.badv)
}
 ::std::string* BidRequest::add_badv() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidRequest.badv)
  return badv_.Add();
}
 void BidRequest::add_badv(const ::std::string& value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidRequest.badv)
}
 void BidRequest::add_badv(const char* value) {
  badv_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidRequest.badv)
}
 void BidRequest::add_badv(const char* value, size_t size) {
  badv_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidRequest.badv)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidRequest::badv() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidRequest.badv)
  return badv_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidRequest::mutable_badv() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidRequest.badv)
  return &badv_;
}

// optional bool test = 15 [default = false];
bool BidRequest::has_test() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidRequest::set_has_test() {
  _has_bits_[0] |= 0x00004000u;
}
void BidRequest::clear_has_test() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidRequest::clear_test() {
  test_ = false;
  clear_has_test();
}
 bool BidRequest::test() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidRequest.test)
  return test_;
}
 void BidRequest::set_test(bool value) {
  set_has_test();
  test_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidRequest.test)
}

bool BidRequest::has_distributionchannel_oneof() const {
  return distributionchannel_oneof_case() != DISTRIBUTIONCHANNEL_ONEOF_NOT_SET;
}
void BidRequest::clear_has_distributionchannel_oneof() {
  _oneof_case_[0] = DISTRIBUTIONCHANNEL_ONEOF_NOT_SET;
}
BidRequest::DistributionchannelOneofCase BidRequest::distributionchannel_oneof_case() const {
  return BidRequest::DistributionchannelOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BidResponse_NoBidReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_NoBidReason_descriptor_;
}
bool BidResponse_NoBidReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BidResponse_NoBidReason BidResponse::UNKNOWN_ERROR;
const BidResponse_NoBidReason BidResponse::TECHNICAL_ERROR;
const BidResponse_NoBidReason BidResponse::INVALID_REQUEST;
const BidResponse_NoBidReason BidResponse::KNOWN_WEB_SPIDER;
const BidResponse_NoBidReason BidResponse::SUSPECTED_NONHUMAN_TRAFFIC;
const BidResponse_NoBidReason BidResponse::CLOUD_DATACENTER_PROXYIP;
const BidResponse_NoBidReason BidResponse::UNSUPPORTED_DEVICE;
const BidResponse_NoBidReason BidResponse::BLOCKED_PUBLISHER;
const BidResponse_NoBidReason BidResponse::UNMATCHED_USER;
const BidResponse_NoBidReason BidResponse::NoBidReason_MIN;
const BidResponse_NoBidReason BidResponse::NoBidReason_MAX;
const int BidResponse::NoBidReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_SeatBid_Bid::kIdFieldNumber;
const int BidResponse_SeatBid_Bid::kImpidFieldNumber;
const int BidResponse_SeatBid_Bid::kPriceFieldNumber;
const int BidResponse_SeatBid_Bid::kAdidFieldNumber;
const int BidResponse_SeatBid_Bid::kNurlFieldNumber;
const int BidResponse_SeatBid_Bid::kAdmFieldNumber;
const int BidResponse_SeatBid_Bid::kAdmNativeFieldNumber;
const int BidResponse_SeatBid_Bid::kAdomainFieldNumber;
const int BidResponse_SeatBid_Bid::kBundleFieldNumber;
const int BidResponse_SeatBid_Bid::kIurlFieldNumber;
const int BidResponse_SeatBid_Bid::kCidFieldNumber;
const int BidResponse_SeatBid_Bid::kCridFieldNumber;
const int BidResponse_SeatBid_Bid::kCatFieldNumber;
const int BidResponse_SeatBid_Bid::kAttrFieldNumber;
const int BidResponse_SeatBid_Bid::kDealidFieldNumber;
const int BidResponse_SeatBid_Bid::kWFieldNumber;
const int BidResponse_SeatBid_Bid::kHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_SeatBid_Bid::BidResponse_SeatBid_Bid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidResponse.SeatBid.Bid)
}

void BidResponse_SeatBid_Bid::InitAsDefaultInstance() {
  BidResponse_SeatBid_Bid_default_oneof_instance_->adm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  BidResponse_SeatBid_Bid_default_oneof_instance_->adm_native_ = const_cast< ::com::google::openrtb::NativeResponse*>(&::com::google::openrtb::NativeResponse::default_instance());
}

BidResponse_SeatBid_Bid::BidResponse_SeatBid_Bid(const BidResponse_SeatBid_Bid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidResponse.SeatBid.Bid)
}

void BidResponse_SeatBid_Bid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  adid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_adm_oneof();
}

BidResponse_SeatBid_Bid::~BidResponse_SeatBid_Bid() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidResponse.SeatBid.Bid)
  SharedDtor();
}

void BidResponse_SeatBid_Bid::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dealid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_adm_oneof()) {
    clear_adm_oneof();
  }
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid_Bid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid_Bid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_Bid_descriptor_;
}

const BidResponse_SeatBid_Bid& BidResponse_SeatBid_Bid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid_Bid* BidResponse_SeatBid_Bid::default_instance_ = NULL;

BidResponse_SeatBid_Bid* BidResponse_SeatBid_Bid::New(::google::protobuf::Arena* arena) const {
  BidResponse_SeatBid_Bid* n = new BidResponse_SeatBid_Bid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_SeatBid_Bid::clear_adm_oneof() {
// @@protoc_insertion_point(one_of_clear_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  switch(adm_oneof_case()) {
    case kAdm: {
      adm_oneof_.adm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kAdmNative: {
      delete adm_oneof_.adm_native_;
      break;
    }
    case ADM_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ADM_ONEOF_NOT_SET;
}


void BidResponse_SeatBid_Bid::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_impid()) {
      impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    price_ = 0;
    if (has_adid()) {
      adid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nurl()) {
      nurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 52992u) {
    if (has_bundle()) {
      bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_iurl()) {
      iurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cid()) {
      cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_crid()) {
      crid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dealid()) {
      dealid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    w_ = 0;
  }
  h_ = 0;
  adomain_.Clear();
  cat_.Clear();
  attr_.Clear();
  clear_adm_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_SeatBid_Bid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_impid;
        break;
      }

      // required string impid = 2;
      case 2: {
        if (tag == 18) {
         parse_impid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->impid().data(), this->impid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.impid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_price;
        break;
      }

      // required double price = 3;
      case 3: {
        if (tag == 25) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_adid;
        break;
      }

      // optional string adid = 4;
      case 4: {
        if (tag == 34) {
         parse_adid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adid().data(), this->adid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.adid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nurl;
        break;
      }

      // optional string nurl = 5;
      case 5: {
        if (tag == 42) {
         parse_nurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nurl().data(), this->nurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.nurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_adm;
        break;
      }

      // optional string adm = 6;
      case 6: {
        if (tag == 50) {
         parse_adm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adm().data(), this->adm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.adm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_adomain;
        break;
      }

      // repeated string adomain = 7;
      case 7: {
        if (tag == 58) {
         parse_adomain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_adomain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->adomain(this->adomain_size() - 1).data(),
            this->adomain(this->adomain_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.adomain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_adomain;
        if (input->ExpectTag(66)) goto parse_iurl;
        break;
      }

      // optional string iurl = 8;
      case 8: {
        if (tag == 66) {
         parse_iurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iurl().data(), this->iurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.iurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cid;
        break;
      }

      // optional string cid = 9;
      case 9: {
        if (tag == 74) {
         parse_cid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cid().data(), this->cid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.cid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_crid;
        break;
      }

      // optional string crid = 10;
      case 10: {
        if (tag == 82) {
         parse_crid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crid().data(), this->crid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.crid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_attr;
        break;
      }

      // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
      case 11: {
        if (tag == 90) {
         parse_attr:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
              add_attr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
            } else {
              mutable_unknown_fields()->AddVarint(11, value);
            }
          }
          input->PopLimit(limit);
        } else if (tag == 88) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::CreativeAttribute_IsValid(value)) {
            add_attr(static_cast< ::com::google::openrtb::CreativeAttribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_dealid;
        break;
      }

      // optional string dealid = 13;
      case 13: {
        if (tag == 106) {
         parse_dealid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dealid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dealid().data(), this->dealid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.dealid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_bundle;
        break;
      }

      // optional string bundle = 14;
      case 14: {
        if (tag == 114) {
         parse_bundle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bundle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bundle().data(), this->bundle().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.bundle");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_cat;
        break;
      }

      // repeated string cat = 15;
      case 15: {
        if (tag == 122) {
         parse_cat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cat(this->cat_size() - 1).data(),
            this->cat(this->cat_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.Bid.cat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_cat;
        if (input->ExpectTag(128)) goto parse_w;
        break;
      }

      // optional int32 w = 16;
      case 16: {
        if (tag == 128) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_h;
        break;
      }

      // optional int32 h = 17;
      case 17: {
        if (tag == 136) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_adm_native;
        break;
      }

      // optional .com.google.openrtb.NativeResponse adm_native = 50;
      case 50: {
        if (tag == 402) {
         parse_adm_native:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adm_native()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidResponse.SeatBid.Bid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidResponse.SeatBid.Bid)
  return false;
#undef DO_
}

void BidResponse_SeatBid_Bid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.impid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->impid(), output);
  }

  // required double price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional string adid = 4;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.adid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->adid(), output);
  }

  // optional string nurl = 5;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.nurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nurl(), output);
  }

  // optional string adm = 6;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.adm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->adm(), output);
  }

  // repeated string adomain = 7;
  for (int i = 0; i < this->adomain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adomain(i).data(), this->adomain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.adomain");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->adomain(i), output);
  }

  // optional string iurl = 8;
  if (has_iurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iurl().data(), this->iurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.iurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->iurl(), output);
  }

  // optional string cid = 9;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.cid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->cid(), output);
  }

  // optional string crid = 10;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.crid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->crid(), output);
  }

  // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
  if (this->attr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_attr_cached_byte_size_);
  }
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->attr(i), output);
  }

  // optional string dealid = 13;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.dealid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->dealid(), output);
  }

  // optional string bundle = 14;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.bundle");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->bundle(), output);
  }

  // repeated string cat = 15;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.cat");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->cat(i), output);
  }

  // optional int32 w = 16;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->w(), output);
  }

  // optional int32 h = 17;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->h(), output);
  }

  // optional .com.google.openrtb.NativeResponse adm_native = 50;
  if (has_adm_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *adm_oneof_.adm_native_, output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidResponse.SeatBid.Bid)
}

::google::protobuf::uint8* BidResponse_SeatBid_Bid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string impid = 2;
  if (has_impid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->impid().data(), this->impid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.impid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impid(), target);
  }

  // required double price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional string adid = 4;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adid().data(), this->adid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.adid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->adid(), target);
  }

  // optional string nurl = 5;
  if (has_nurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nurl().data(), this->nurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.nurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nurl(), target);
  }

  // optional string adm = 6;
  if (has_adm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adm().data(), this->adm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.adm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->adm(), target);
  }

  // repeated string adomain = 7;
  for (int i = 0; i < this->adomain_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->adomain(i).data(), this->adomain(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.adomain");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->adomain(i), target);
  }

  // optional string iurl = 8;
  if (has_iurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iurl().data(), this->iurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.iurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->iurl(), target);
  }

  // optional string cid = 9;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cid().data(), this->cid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.cid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cid(), target);
  }

  // optional string crid = 10;
  if (has_crid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crid().data(), this->crid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.crid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->crid(), target);
  }

  // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
  if (this->attr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _attr_cached_byte_size_, target);
  }
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->attr(i), target);
  }

  // optional string dealid = 13;
  if (has_dealid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dealid().data(), this->dealid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.dealid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->dealid(), target);
  }

  // optional string bundle = 14;
  if (has_bundle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bundle().data(), this->bundle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.bundle");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->bundle(), target);
  }

  // repeated string cat = 15;
  for (int i = 0; i < this->cat_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cat(i).data(), this->cat(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.Bid.cat");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->cat(i), target);
  }

  // optional int32 w = 16;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->w(), target);
  }

  // optional int32 h = 17;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->h(), target);
  }

  // optional .com.google.openrtb.NativeResponse adm_native = 50;
  if (has_adm_native()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *adm_oneof_.adm_native_, false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidResponse.SeatBid.Bid)
  return target;
}

int BidResponse_SeatBid_Bid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_impid()) {
    // required string impid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->impid());
  }

  if (has_price()) {
    // required double price = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int BidResponse_SeatBid_Bid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string impid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->impid());

    // required double price = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional string adid = 4;
    if (has_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adid());
    }

    // optional string nurl = 5;
    if (has_nurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nurl());
    }

  }
  if (_has_bits_[8 / 32] & 52992u) {
    // optional string bundle = 14;
    if (has_bundle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bundle());
    }

    // optional string iurl = 8;
    if (has_iurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iurl());
    }

    // optional string cid = 9;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cid());
    }

    // optional string crid = 10;
    if (has_crid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crid());
    }

    // optional string dealid = 13;
    if (has_dealid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dealid());
    }

    // optional int32 w = 16;
    if (has_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

  }
  // optional int32 h = 17;
  if (has_h()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->h());
  }

  // repeated string adomain = 7;
  total_size += 1 * this->adomain_size();
  for (int i = 0; i < this->adomain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->adomain(i));
  }

  // repeated string cat = 15;
  total_size += 1 * this->cat_size();
  for (int i = 0; i < this->cat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cat(i));
  }

  // repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->attr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->attr(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _attr_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  switch (adm_oneof_case()) {
    // optional string adm = 6;
    case kAdm: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adm());
      break;
    }
    // optional .com.google.openrtb.NativeResponse adm_native = 50;
    case kAdmNative: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *adm_oneof_.adm_native_);
      break;
    }
    case ADM_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid_Bid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_SeatBid_Bid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_SeatBid_Bid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidResponse.SeatBid.Bid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidResponse.SeatBid.Bid)
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid_Bid::MergeFrom(const BidResponse_SeatBid_Bid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  adomain_.MergeFrom(from.adomain_);
  cat_.MergeFrom(from.cat_);
  attr_.MergeFrom(from.attr_);
  switch (from.adm_oneof_case()) {
    case kAdm: {
      set_adm(from.adm());
      break;
    }
    case kAdmNative: {
      mutable_adm_native()->::com::google::openrtb::NativeResponse::MergeFrom(from.adm_native());
      break;
    }
    case ADM_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_impid()) {
      set_has_impid();
      impid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.impid_);
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_adid()) {
      set_has_adid();
      adid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adid_);
    }
    if (from.has_nurl()) {
      set_has_nurl();
      nurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nurl_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bundle()) {
      set_has_bundle();
      bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_);
    }
    if (from.has_iurl()) {
      set_has_iurl();
      iurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iurl_);
    }
    if (from.has_cid()) {
      set_has_cid();
      cid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cid_);
    }
    if (from.has_crid()) {
      set_has_crid();
      crid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.crid_);
    }
    if (from.has_dealid()) {
      set_has_dealid();
      dealid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dealid_);
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_SeatBid_Bid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid_Bid::CopyFrom(const BidResponse_SeatBid_Bid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidResponse.SeatBid.Bid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid_Bid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_adm_native()) {
    if (!this->adm_native().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse_SeatBid_Bid::Swap(BidResponse_SeatBid_Bid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_SeatBid_Bid::InternalSwap(BidResponse_SeatBid_Bid* other) {
  id_.Swap(&other->id_);
  impid_.Swap(&other->impid_);
  std::swap(price_, other->price_);
  adid_.Swap(&other->adid_);
  nurl_.Swap(&other->nurl_);
  adomain_.UnsafeArenaSwap(&other->adomain_);
  bundle_.Swap(&other->bundle_);
  iurl_.Swap(&other->iurl_);
  cid_.Swap(&other->cid_);
  crid_.Swap(&other->crid_);
  cat_.UnsafeArenaSwap(&other->cat_);
  attr_.UnsafeArenaSwap(&other->attr_);
  dealid_.Swap(&other->dealid_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(adm_oneof_, other->adm_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidResponse_SeatBid_Bid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_Bid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_Bid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse_SeatBid::kBidFieldNumber;
const int BidResponse_SeatBid::kSeatFieldNumber;
const int BidResponse_SeatBid::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse_SeatBid::BidResponse_SeatBid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidResponse.SeatBid)
}

void BidResponse_SeatBid::InitAsDefaultInstance() {
}

BidResponse_SeatBid::BidResponse_SeatBid(const BidResponse_SeatBid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidResponse.SeatBid)
}

void BidResponse_SeatBid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse_SeatBid::~BidResponse_SeatBid() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidResponse.SeatBid)
  SharedDtor();
}

void BidResponse_SeatBid::SharedDtor() {
  seat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse_SeatBid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse_SeatBid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_SeatBid_descriptor_;
}

const BidResponse_SeatBid& BidResponse_SeatBid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidResponse_SeatBid* BidResponse_SeatBid::default_instance_ = NULL;

BidResponse_SeatBid* BidResponse_SeatBid::New(::google::protobuf::Arena* arena) const {
  BidResponse_SeatBid* n = new BidResponse_SeatBid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse_SeatBid::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidResponse.SeatBid)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 6u) {
    if (has_seat()) {
      seat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    group_ = false;
  }
  bid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse_SeatBid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidResponse.SeatBid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_bid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_seat;
        break;
      }

      // optional string seat = 2;
      case 2: {
        if (tag == 18) {
         parse_seat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seat().data(), this->seat().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.SeatBid.seat");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // optional bool group = 3;
      case 3: {
        if (tag == 24) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidResponse.SeatBid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidResponse.SeatBid)
  return false;
#undef DO_
}

void BidResponse_SeatBid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidResponse.SeatBid)
  // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
  for (unsigned int i = 0, n = this->bid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bid(i), output);
  }

  // optional string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.seat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->seat(), output);
  }

  // optional bool group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->group(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidResponse.SeatBid)
}

::google::protobuf::uint8* BidResponse_SeatBid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidResponse.SeatBid)
  // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
  for (unsigned int i = 0, n = this->bid_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bid(i), false, target);
  }

  // optional string seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seat().data(), this->seat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.SeatBid.seat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seat(), target);
  }

  // optional bool group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->group(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidResponse.SeatBid)
  return target;
}

int BidResponse_SeatBid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidResponse.SeatBid)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional string seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seat());
    }

    // optional bool group = 3;
    if (has_group()) {
      total_size += 1 + 1;
    }

  }
  // repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
  total_size += 1 * this->bid_size();
  for (int i = 0; i < this->bid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bid(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse_SeatBid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidResponse.SeatBid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse_SeatBid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse_SeatBid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidResponse.SeatBid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidResponse.SeatBid)
    MergeFrom(*source);
  }
}

void BidResponse_SeatBid::MergeFrom(const BidResponse_SeatBid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidResponse.SeatBid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  bid_.MergeFrom(from.bid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_seat()) {
      set_has_seat();
      seat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seat_);
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse_SeatBid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidResponse.SeatBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse_SeatBid::CopyFrom(const BidResponse_SeatBid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidResponse.SeatBid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse_SeatBid::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bid())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse_SeatBid::Swap(BidResponse_SeatBid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse_SeatBid::InternalSwap(BidResponse_SeatBid* other) {
  bid_.UnsafeArenaSwap(&other->bid_);
  seat_.Swap(&other->seat_);
  std::swap(group_, other->group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidResponse_SeatBid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_SeatBid_descriptor_;
  metadata.reflection = BidResponse_SeatBid_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* BidResponse::_default_cur_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BidResponse::kIdFieldNumber;
const int BidResponse::kSeatbidFieldNumber;
const int BidResponse::kBididFieldNumber;
const int BidResponse::kCurFieldNumber;
const int BidResponse::kCustomdataFieldNumber;
const int BidResponse::kNbrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BidResponse::BidResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.BidResponse)
}

void BidResponse::InitAsDefaultInstance() {
}

BidResponse::BidResponse(const BidResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.BidResponse)
}

void BidResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_.UnsafeSetDefault(_default_cur_);
  customdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nbr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidResponse::~BidResponse() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.BidResponse)
  SharedDtor();
}

void BidResponse::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bidid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_.DestroyNoArena(_default_cur_);
  customdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidResponse_descriptor_;
}

const BidResponse& BidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

BidResponse* BidResponse::default_instance_ = NULL;

BidResponse* BidResponse::New(::google::protobuf::Arena* arena) const {
  BidResponse* n = new BidResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BidResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.BidResponse)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 61u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bidid()) {
      bidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_cur()) {
      cur_.ClearToDefaultNoArena(_default_cur_);
    }
    if (has_customdata()) {
      customdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    nbr_ = 0;
  }
  seatbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.BidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seatbid;
        break;
      }

      // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
      case 2: {
        if (tag == 18) {
         parse_seatbid:
          DO_(input->IncrementRecursionDepth());
         parse_loop_seatbid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_seatbid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_seatbid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_bidid;
        break;
      }

      // optional string bidid = 3;
      case 3: {
        if (tag == 26) {
         parse_bidid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bidid().data(), this->bidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.bidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cur;
        break;
      }

      // optional string cur = 4 [default = "CNY"];
      case 4: {
        if (tag == 34) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cur().data(), this->cur().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.cur");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_customdata;
        break;
      }

      // optional string customdata = 5;
      case 5: {
        if (tag == 42) {
         parse_customdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customdata().data(), this->customdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.BidResponse.customdata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nbr;
        break;
      }

      // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
      case 6: {
        if (tag == 48) {
         parse_nbr:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::BidResponse_NoBidReason_IsValid(value)) {
            set_nbr(static_cast< ::com::google::openrtb::BidResponse_NoBidReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.BidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.BidResponse)
  return false;
#undef DO_
}

void BidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
  for (unsigned int i = 0, n = this->seatbid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seatbid(i), output);
  }

  // optional string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.bidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bidid(), output);
  }

  // optional string cur = 4 [default = "CNY"];
  if (has_cur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur().data(), this->cur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.cur");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cur(), output);
  }

  // optional string customdata = 5;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdata().data(), this->customdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.customdata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->customdata(), output);
  }

  // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
  if (has_nbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->nbr(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.BidResponse)
}

::google::protobuf::uint8* BidResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.BidResponse)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
  for (unsigned int i = 0, n = this->seatbid_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->seatbid(i), false, target);
  }

  // optional string bidid = 3;
  if (has_bidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bidid().data(), this->bidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.bidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bidid(), target);
  }

  // optional string cur = 4 [default = "CNY"];
  if (has_cur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cur().data(), this->cur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.cur");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cur(), target);
  }

  // optional string customdata = 5;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customdata().data(), this->customdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.BidResponse.customdata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->customdata(), target);
  }

  // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
  if (has_nbr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->nbr(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.BidResponse)
  return target;
}

int BidResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.BidResponse)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional string bidid = 3;
    if (has_bidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bidid());
    }

    // optional string cur = 4 [default = "CNY"];
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur());
    }

    // optional string customdata = 5;
    if (has_customdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customdata());
    }

    // optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
    if (has_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nbr());
    }

  }
  // repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
  total_size += 1 * this->seatbid_size();
  for (int i = 0; i < this->seatbid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatbid(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BidResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BidResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.BidResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.BidResponse)
    MergeFrom(*source);
  }
}

void BidResponse::MergeFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.BidResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  seatbid_.MergeFrom(from.seatbid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_bidid()) {
      set_has_bidid();
      bidid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bidid_);
    }
    if (from.has_cur()) {
      set_has_cur();
      cur_.AssignWithDefault(_default_cur_, from.cur_);
    }
    if (from.has_customdata()) {
      set_has_customdata();
      customdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customdata_);
    }
    if (from.has_nbr()) {
      set_nbr(from.nbr());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BidResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidResponse::CopyFrom(const BidResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.BidResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seatbid())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void BidResponse::Swap(BidResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BidResponse::InternalSwap(BidResponse* other) {
  id_.Swap(&other->id_);
  seatbid_.UnsafeArenaSwap(&other->seatbid_);
  bidid_.Swap(&other->bidid_);
  cur_.Swap(&other->cur_);
  customdata_.Swap(&other->customdata_);
  std::swap(nbr_, other->nbr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata BidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidResponse_descriptor_;
  metadata.reflection = BidResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BidResponse_SeatBid_Bid

// required string id = 1;
bool BidResponse_SeatBid_Bid::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse_SeatBid_Bid::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse_SeatBid_Bid::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidResponse_SeatBid_Bid::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.id)
}
 void BidResponse_SeatBid_Bid::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.id)
}
 void BidResponse_SeatBid_Bid::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.id)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.id)
}

// required string impid = 2;
bool BidResponse_SeatBid_Bid::has_impid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_impid() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_SeatBid_Bid::clear_has_impid() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_SeatBid_Bid::clear_impid() {
  impid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_impid();
}
 const ::std::string& BidResponse_SeatBid_Bid::impid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
  return impid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_impid(const ::std::string& value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
}
 void BidResponse_SeatBid_Bid::set_impid(const char* value) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
}
 void BidResponse_SeatBid_Bid::set_impid(const char* value, size_t size) {
  set_has_impid();
  impid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_impid() {
  set_has_impid();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
  return impid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_impid() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
  clear_has_impid();
  return impid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_impid(::std::string* impid) {
  if (impid != NULL) {
    set_has_impid();
  } else {
    clear_has_impid();
  }
  impid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), impid);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.impid)
}

// required double price = 3;
bool BidResponse_SeatBid_Bid::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_SeatBid_Bid::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_SeatBid_Bid::clear_price() {
  price_ = 0;
  clear_has_price();
}
 double BidResponse_SeatBid_Bid::price() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.price)
  return price_;
}
 void BidResponse_SeatBid_Bid::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.price)
}

// optional string adid = 4;
bool BidResponse_SeatBid_Bid::has_adid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_adid() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse_SeatBid_Bid::clear_has_adid() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse_SeatBid_Bid::clear_adid() {
  adid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adid();
}
 const ::std::string& BidResponse_SeatBid_Bid::adid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
  return adid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_adid(const ::std::string& value) {
  set_has_adid();
  adid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
}
 void BidResponse_SeatBid_Bid::set_adid(const char* value) {
  set_has_adid();
  adid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
}
 void BidResponse_SeatBid_Bid::set_adid(const char* value, size_t size) {
  set_has_adid();
  adid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_adid() {
  set_has_adid();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
  return adid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_adid() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
  clear_has_adid();
  return adid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_adid(::std::string* adid) {
  if (adid != NULL) {
    set_has_adid();
  } else {
    clear_has_adid();
  }
  adid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adid);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.adid)
}

// optional string nurl = 5;
bool BidResponse_SeatBid_Bid::has_nurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_nurl() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse_SeatBid_Bid::clear_has_nurl() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse_SeatBid_Bid::clear_nurl() {
  nurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nurl();
}
 const ::std::string& BidResponse_SeatBid_Bid::nurl() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
  return nurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_nurl(const ::std::string& value) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
}
 void BidResponse_SeatBid_Bid::set_nurl(const char* value) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
}
 void BidResponse_SeatBid_Bid::set_nurl(const char* value, size_t size) {
  set_has_nurl();
  nurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_nurl() {
  set_has_nurl();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
  return nurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_nurl() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
  clear_has_nurl();
  return nurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_nurl(::std::string* nurl) {
  if (nurl != NULL) {
    set_has_nurl();
  } else {
    clear_has_nurl();
  }
  nurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nurl);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.nurl)
}

// optional string adm = 6;
bool BidResponse_SeatBid_Bid::has_adm() const {
  return adm_oneof_case() == kAdm;
}
void BidResponse_SeatBid_Bid::set_has_adm() {
  _oneof_case_[0] = kAdm;
}
void BidResponse_SeatBid_Bid::clear_adm() {
  if (has_adm()) {
    adm_oneof_.adm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_adm_oneof();
  }
}
 const ::std::string& BidResponse_SeatBid_Bid::adm() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.adm)
  if (has_adm()) {
    return adm_oneof_.adm_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void BidResponse_SeatBid_Bid::set_adm(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.adm)
  if (!has_adm()) {
    clear_adm_oneof();
    set_has_adm();
    adm_oneof_.adm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  adm_oneof_.adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.adm)
}
 void BidResponse_SeatBid_Bid::set_adm(const char* value) {
  if (!has_adm()) {
    clear_adm_oneof();
    set_has_adm();
    adm_oneof_.adm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  adm_oneof_.adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.adm)
}
 void BidResponse_SeatBid_Bid::set_adm(const char* value, size_t size) {
  if (!has_adm()) {
    clear_adm_oneof();
    set_has_adm();
    adm_oneof_.adm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  adm_oneof_.adm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.adm)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_adm() {
  if (!has_adm()) {
    clear_adm_oneof();
    set_has_adm();
    adm_oneof_.adm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.adm)
  return adm_oneof_.adm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_adm() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.adm)
  if (has_adm()) {
    clear_has_adm_oneof();
    return adm_oneof_.adm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void BidResponse_SeatBid_Bid::set_allocated_adm(::std::string* adm) {
  if (!has_adm()) {
    adm_oneof_.adm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_adm_oneof();
  if (adm != NULL) {
    set_has_adm();
    adm_oneof_.adm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        adm);
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.adm)
}

// optional .com.google.openrtb.NativeResponse adm_native = 50;
bool BidResponse_SeatBid_Bid::has_adm_native() const {
  return adm_oneof_case() == kAdmNative;
}
void BidResponse_SeatBid_Bid::set_has_adm_native() {
  _oneof_case_[0] = kAdmNative;
}
void BidResponse_SeatBid_Bid::clear_adm_native() {
  if (has_adm_native()) {
    delete adm_oneof_.adm_native_;
    clear_has_adm_oneof();
  }
}
 const ::com::google::openrtb::NativeResponse& BidResponse_SeatBid_Bid::adm_native() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.adm_native)
  return has_adm_native()
      ? *adm_oneof_.adm_native_
      : ::com::google::openrtb::NativeResponse::default_instance();
}
::com::google::openrtb::NativeResponse* BidResponse_SeatBid_Bid::mutable_adm_native() {
  if (!has_adm_native()) {
    clear_adm_oneof();
    set_has_adm_native();
    adm_oneof_.adm_native_ = new ::com::google::openrtb::NativeResponse;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.adm_native)
  return adm_oneof_.adm_native_;
}
::com::google::openrtb::NativeResponse* BidResponse_SeatBid_Bid::release_adm_native() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.adm_native)
  if (has_adm_native()) {
    clear_has_adm_oneof();
    ::com::google::openrtb::NativeResponse* temp = adm_oneof_.adm_native_;
    adm_oneof_.adm_native_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void BidResponse_SeatBid_Bid::set_allocated_adm_native(::com::google::openrtb::NativeResponse* adm_native) {
  clear_adm_oneof();
  if (adm_native) {
    set_has_adm_native();
    adm_oneof_.adm_native_ = adm_native;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.adm_native)
}

// repeated string adomain = 7;
int BidResponse_SeatBid_Bid::adomain_size() const {
  return adomain_.size();
}
void BidResponse_SeatBid_Bid::clear_adomain() {
  adomain_.Clear();
}
 const ::std::string& BidResponse_SeatBid_Bid::adomain(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return adomain_.Get(index);
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_adomain(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return adomain_.Mutable(index);
}
 void BidResponse_SeatBid_Bid::set_adomain(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  adomain_.Mutable(index)->assign(value);
}
 void BidResponse_SeatBid_Bid::set_adomain(int index, const char* value) {
  adomain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
 void BidResponse_SeatBid_Bid::set_adomain(int index, const char* value, size_t size) {
  adomain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
 ::std::string* BidResponse_SeatBid_Bid::add_adomain() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return adomain_.Add();
}
 void BidResponse_SeatBid_Bid::add_adomain(const ::std::string& value) {
  adomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
 void BidResponse_SeatBid_Bid::add_adomain(const char* value) {
  adomain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
 void BidResponse_SeatBid_Bid::add_adomain(const char* value, size_t size) {
  adomain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::adomain() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return adomain_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_adomain() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.SeatBid.Bid.adomain)
  return &adomain_;
}

// optional string bundle = 14;
bool BidResponse_SeatBid_Bid::has_bundle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_bundle() {
  _has_bits_[0] |= 0x00000100u;
}
void BidResponse_SeatBid_Bid::clear_has_bundle() {
  _has_bits_[0] &= ~0x00000100u;
}
void BidResponse_SeatBid_Bid::clear_bundle() {
  bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bundle();
}
 const ::std::string& BidResponse_SeatBid_Bid::bundle() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
  return bundle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_bundle(const ::std::string& value) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
}
 void BidResponse_SeatBid_Bid::set_bundle(const char* value) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
}
 void BidResponse_SeatBid_Bid::set_bundle(const char* value, size_t size) {
  set_has_bundle();
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_bundle() {
  set_has_bundle();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
  return bundle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_bundle() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
  clear_has_bundle();
  return bundle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_bundle(::std::string* bundle) {
  if (bundle != NULL) {
    set_has_bundle();
  } else {
    clear_has_bundle();
  }
  bundle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.bundle)
}

// optional string iurl = 8;
bool BidResponse_SeatBid_Bid::has_iurl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_iurl() {
  _has_bits_[0] |= 0x00000200u;
}
void BidResponse_SeatBid_Bid::clear_has_iurl() {
  _has_bits_[0] &= ~0x00000200u;
}
void BidResponse_SeatBid_Bid::clear_iurl() {
  iurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iurl();
}
 const ::std::string& BidResponse_SeatBid_Bid::iurl() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
  return iurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_iurl(const ::std::string& value) {
  set_has_iurl();
  iurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
}
 void BidResponse_SeatBid_Bid::set_iurl(const char* value) {
  set_has_iurl();
  iurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
}
 void BidResponse_SeatBid_Bid::set_iurl(const char* value, size_t size) {
  set_has_iurl();
  iurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_iurl() {
  set_has_iurl();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
  return iurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_iurl() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
  clear_has_iurl();
  return iurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_iurl(::std::string* iurl) {
  if (iurl != NULL) {
    set_has_iurl();
  } else {
    clear_has_iurl();
  }
  iurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iurl);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.iurl)
}

// optional string cid = 9;
bool BidResponse_SeatBid_Bid::has_cid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_cid() {
  _has_bits_[0] |= 0x00000400u;
}
void BidResponse_SeatBid_Bid::clear_has_cid() {
  _has_bits_[0] &= ~0x00000400u;
}
void BidResponse_SeatBid_Bid::clear_cid() {
  cid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cid();
}
 const ::std::string& BidResponse_SeatBid_Bid::cid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
  return cid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_cid(const ::std::string& value) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
}
 void BidResponse_SeatBid_Bid::set_cid(const char* value) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
}
 void BidResponse_SeatBid_Bid::set_cid(const char* value, size_t size) {
  set_has_cid();
  cid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_cid() {
  set_has_cid();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
  return cid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_cid() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
  clear_has_cid();
  return cid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_cid(::std::string* cid) {
  if (cid != NULL) {
    set_has_cid();
  } else {
    clear_has_cid();
  }
  cid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cid);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.cid)
}

// optional string crid = 10;
bool BidResponse_SeatBid_Bid::has_crid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_crid() {
  _has_bits_[0] |= 0x00000800u;
}
void BidResponse_SeatBid_Bid::clear_has_crid() {
  _has_bits_[0] &= ~0x00000800u;
}
void BidResponse_SeatBid_Bid::clear_crid() {
  crid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_crid();
}
 const ::std::string& BidResponse_SeatBid_Bid::crid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
  return crid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_crid(const ::std::string& value) {
  set_has_crid();
  crid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
}
 void BidResponse_SeatBid_Bid::set_crid(const char* value) {
  set_has_crid();
  crid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
}
 void BidResponse_SeatBid_Bid::set_crid(const char* value, size_t size) {
  set_has_crid();
  crid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_crid() {
  set_has_crid();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
  return crid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_crid() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
  clear_has_crid();
  return crid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_crid(::std::string* crid) {
  if (crid != NULL) {
    set_has_crid();
  } else {
    clear_has_crid();
  }
  crid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crid);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.crid)
}

// repeated string cat = 15;
int BidResponse_SeatBid_Bid::cat_size() const {
  return cat_.size();
}
void BidResponse_SeatBid_Bid::clear_cat() {
  cat_.Clear();
}
 const ::std::string& BidResponse_SeatBid_Bid::cat(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return cat_.Get(index);
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_cat(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return cat_.Mutable(index);
}
 void BidResponse_SeatBid_Bid::set_cat(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  cat_.Mutable(index)->assign(value);
}
 void BidResponse_SeatBid_Bid::set_cat(int index, const char* value) {
  cat_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
 void BidResponse_SeatBid_Bid::set_cat(int index, const char* value, size_t size) {
  cat_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
 ::std::string* BidResponse_SeatBid_Bid::add_cat() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return cat_.Add();
}
 void BidResponse_SeatBid_Bid::add_cat(const ::std::string& value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
 void BidResponse_SeatBid_Bid::add_cat(const char* value) {
  cat_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
 void BidResponse_SeatBid_Bid::add_cat(const char* value, size_t size) {
  cat_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
BidResponse_SeatBid_Bid::cat() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return cat_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
BidResponse_SeatBid_Bid::mutable_cat() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.SeatBid.Bid.cat)
  return &cat_;
}

// repeated .com.google.openrtb.CreativeAttribute attr = 11 [packed = true];
int BidResponse_SeatBid_Bid::attr_size() const {
  return attr_.size();
}
void BidResponse_SeatBid_Bid::clear_attr() {
  attr_.Clear();
}
 ::com::google::openrtb::CreativeAttribute BidResponse_SeatBid_Bid::attr(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
  return static_cast< ::com::google::openrtb::CreativeAttribute >(attr_.Get(index));
}
 void BidResponse_SeatBid_Bid::set_attr(int index, ::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  attr_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
}
 void BidResponse_SeatBid_Bid::add_attr(::com::google::openrtb::CreativeAttribute value) {
  assert(::com::google::openrtb::CreativeAttribute_IsValid(value));
  attr_.Add(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
}
 const ::google::protobuf::RepeatedField<int>&
BidResponse_SeatBid_Bid::attr() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
  return attr_;
}
 ::google::protobuf::RepeatedField<int>*
BidResponse_SeatBid_Bid::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.SeatBid.Bid.attr)
  return &attr_;
}

// optional string dealid = 13;
bool BidResponse_SeatBid_Bid::has_dealid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_dealid() {
  _has_bits_[0] |= 0x00004000u;
}
void BidResponse_SeatBid_Bid::clear_has_dealid() {
  _has_bits_[0] &= ~0x00004000u;
}
void BidResponse_SeatBid_Bid::clear_dealid() {
  dealid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dealid();
}
 const ::std::string& BidResponse_SeatBid_Bid::dealid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
  return dealid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_dealid(const ::std::string& value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
}
 void BidResponse_SeatBid_Bid::set_dealid(const char* value) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
}
 void BidResponse_SeatBid_Bid::set_dealid(const char* value, size_t size) {
  set_has_dealid();
  dealid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
}
 ::std::string* BidResponse_SeatBid_Bid::mutable_dealid() {
  set_has_dealid();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
  return dealid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid_Bid::release_dealid() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
  clear_has_dealid();
  return dealid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid_Bid::set_allocated_dealid(::std::string* dealid) {
  if (dealid != NULL) {
    set_has_dealid();
  } else {
    clear_has_dealid();
  }
  dealid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dealid);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.Bid.dealid)
}

// optional int32 w = 16;
bool BidResponse_SeatBid_Bid::has_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_w() {
  _has_bits_[0] |= 0x00008000u;
}
void BidResponse_SeatBid_Bid::clear_has_w() {
  _has_bits_[0] &= ~0x00008000u;
}
void BidResponse_SeatBid_Bid::clear_w() {
  w_ = 0;
  clear_has_w();
}
 ::google::protobuf::int32 BidResponse_SeatBid_Bid::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.w)
  return w_;
}
 void BidResponse_SeatBid_Bid::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.w)
}

// optional int32 h = 17;
bool BidResponse_SeatBid_Bid::has_h() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void BidResponse_SeatBid_Bid::set_has_h() {
  _has_bits_[0] |= 0x00010000u;
}
void BidResponse_SeatBid_Bid::clear_has_h() {
  _has_bits_[0] &= ~0x00010000u;
}
void BidResponse_SeatBid_Bid::clear_h() {
  h_ = 0;
  clear_has_h();
}
 ::google::protobuf::int32 BidResponse_SeatBid_Bid::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.Bid.h)
  return h_;
}
 void BidResponse_SeatBid_Bid::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.Bid.h)
}

bool BidResponse_SeatBid_Bid::has_adm_oneof() const {
  return adm_oneof_case() != ADM_ONEOF_NOT_SET;
}
void BidResponse_SeatBid_Bid::clear_has_adm_oneof() {
  _oneof_case_[0] = ADM_ONEOF_NOT_SET;
}
BidResponse_SeatBid_Bid::AdmOneofCase BidResponse_SeatBid_Bid::adm_oneof_case() const {
  return BidResponse_SeatBid_Bid::AdmOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BidResponse_SeatBid

// repeated .com.google.openrtb.BidResponse.SeatBid.Bid bid = 1;
int BidResponse_SeatBid::bid_size() const {
  return bid_.size();
}
void BidResponse_SeatBid::clear_bid() {
  bid_.Clear();
}
const ::com::google::openrtb::BidResponse_SeatBid_Bid& BidResponse_SeatBid::bid(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.bid)
  return bid_.Get(index);
}
::com::google::openrtb::BidResponse_SeatBid_Bid* BidResponse_SeatBid::mutable_bid(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.bid)
  return bid_.Mutable(index);
}
::com::google::openrtb::BidResponse_SeatBid_Bid* BidResponse_SeatBid::add_bid() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.SeatBid.bid)
  return bid_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid_Bid >*
BidResponse_SeatBid::mutable_bid() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.SeatBid.bid)
  return &bid_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid_Bid >&
BidResponse_SeatBid::bid() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.SeatBid.bid)
  return bid_;
}

// optional string seat = 2;
bool BidResponse_SeatBid::has_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BidResponse_SeatBid::set_has_seat() {
  _has_bits_[0] |= 0x00000002u;
}
void BidResponse_SeatBid::clear_has_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
void BidResponse_SeatBid::clear_seat() {
  seat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_seat();
}
 const ::std::string& BidResponse_SeatBid::seat() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.seat)
  return seat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid::set_seat(const ::std::string& value) {
  set_has_seat();
  seat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.seat)
}
 void BidResponse_SeatBid::set_seat(const char* value) {
  set_has_seat();
  seat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.SeatBid.seat)
}
 void BidResponse_SeatBid::set_seat(const char* value, size_t size) {
  set_has_seat();
  seat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.SeatBid.seat)
}
 ::std::string* BidResponse_SeatBid::mutable_seat() {
  set_has_seat();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.SeatBid.seat)
  return seat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse_SeatBid::release_seat() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.SeatBid.seat)
  clear_has_seat();
  return seat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse_SeatBid::set_allocated_seat(::std::string* seat) {
  if (seat != NULL) {
    set_has_seat();
  } else {
    clear_has_seat();
  }
  seat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seat);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.SeatBid.seat)
}

// optional bool group = 3;
bool BidResponse_SeatBid::has_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse_SeatBid::set_has_group() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse_SeatBid::clear_has_group() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse_SeatBid::clear_group() {
  group_ = false;
  clear_has_group();
}
 bool BidResponse_SeatBid::group() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.SeatBid.group)
  return group_;
}
 void BidResponse_SeatBid::set_group(bool value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.SeatBid.group)
}

// -------------------------------------------------------------------

// BidResponse

// required string id = 1;
bool BidResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BidResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BidResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BidResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BidResponse::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.id)
}
 void BidResponse::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.id)
}
 void BidResponse::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.id)
}
 ::std::string* BidResponse::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_id() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.id)
}

// repeated .com.google.openrtb.BidResponse.SeatBid seatbid = 2;
int BidResponse::seatbid_size() const {
  return seatbid_.size();
}
void BidResponse::clear_seatbid() {
  seatbid_.Clear();
}
const ::com::google::openrtb::BidResponse_SeatBid& BidResponse::seatbid(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.seatbid)
  return seatbid_.Get(index);
}
::com::google::openrtb::BidResponse_SeatBid* BidResponse::mutable_seatbid(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.seatbid)
  return seatbid_.Mutable(index);
}
::com::google::openrtb::BidResponse_SeatBid* BidResponse::add_seatbid() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.BidResponse.seatbid)
  return seatbid_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid >*
BidResponse::mutable_seatbid() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.BidResponse.seatbid)
  return &seatbid_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::BidResponse_SeatBid >&
BidResponse::seatbid() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.BidResponse.seatbid)
  return seatbid_;
}

// optional string bidid = 3;
bool BidResponse::has_bidid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BidResponse::set_has_bidid() {
  _has_bits_[0] |= 0x00000004u;
}
void BidResponse::clear_has_bidid() {
  _has_bits_[0] &= ~0x00000004u;
}
void BidResponse::clear_bidid() {
  bidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bidid();
}
 const ::std::string& BidResponse::bidid() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.bidid)
  return bidid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_bidid(const ::std::string& value) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.bidid)
}
 void BidResponse::set_bidid(const char* value) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.bidid)
}
 void BidResponse::set_bidid(const char* value, size_t size) {
  set_has_bidid();
  bidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.bidid)
}
 ::std::string* BidResponse::mutable_bidid() {
  set_has_bidid();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.bidid)
  return bidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_bidid() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.bidid)
  clear_has_bidid();
  return bidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_bidid(::std::string* bidid) {
  if (bidid != NULL) {
    set_has_bidid();
  } else {
    clear_has_bidid();
  }
  bidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bidid);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.bidid)
}

// optional string cur = 4 [default = "CNY"];
bool BidResponse::has_cur() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BidResponse::set_has_cur() {
  _has_bits_[0] |= 0x00000008u;
}
void BidResponse::clear_has_cur() {
  _has_bits_[0] &= ~0x00000008u;
}
void BidResponse::clear_cur() {
  cur_.ClearToDefaultNoArena(_default_cur_);
  clear_has_cur();
}
 const ::std::string& BidResponse::cur() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.cur)
  return cur_.GetNoArena(_default_cur_);
}
 void BidResponse::set_cur(const ::std::string& value) {
  set_has_cur();
  cur_.SetNoArena(_default_cur_, value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.cur)
}
 void BidResponse::set_cur(const char* value) {
  set_has_cur();
  cur_.SetNoArena(_default_cur_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.cur)
}
 void BidResponse::set_cur(const char* value, size_t size) {
  set_has_cur();
  cur_.SetNoArena(_default_cur_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.cur)
}
 ::std::string* BidResponse::mutable_cur() {
  set_has_cur();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.cur)
  return cur_.MutableNoArena(_default_cur_);
}
 ::std::string* BidResponse::release_cur() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.cur)
  clear_has_cur();
  return cur_.ReleaseNoArena(_default_cur_);
}
 void BidResponse::set_allocated_cur(::std::string* cur) {
  if (cur != NULL) {
    set_has_cur();
  } else {
    clear_has_cur();
  }
  cur_.SetAllocatedNoArena(_default_cur_, cur);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.cur)
}

// optional string customdata = 5;
bool BidResponse::has_customdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BidResponse::set_has_customdata() {
  _has_bits_[0] |= 0x00000010u;
}
void BidResponse::clear_has_customdata() {
  _has_bits_[0] &= ~0x00000010u;
}
void BidResponse::clear_customdata() {
  customdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_customdata();
}
 const ::std::string& BidResponse::customdata() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.customdata)
  return customdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_customdata(const ::std::string& value) {
  set_has_customdata();
  customdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.customdata)
}
 void BidResponse::set_customdata(const char* value) {
  set_has_customdata();
  customdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.BidResponse.customdata)
}
 void BidResponse::set_customdata(const char* value, size_t size) {
  set_has_customdata();
  customdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.BidResponse.customdata)
}
 ::std::string* BidResponse::mutable_customdata() {
  set_has_customdata();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.BidResponse.customdata)
  return customdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BidResponse::release_customdata() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.BidResponse.customdata)
  clear_has_customdata();
  return customdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BidResponse::set_allocated_customdata(::std::string* customdata) {
  if (customdata != NULL) {
    set_has_customdata();
  } else {
    clear_has_customdata();
  }
  customdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), customdata);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.BidResponse.customdata)
}

// optional .com.google.openrtb.BidResponse.NoBidReason nbr = 6;
bool BidResponse::has_nbr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BidResponse::set_has_nbr() {
  _has_bits_[0] |= 0x00000020u;
}
void BidResponse::clear_has_nbr() {
  _has_bits_[0] &= ~0x00000020u;
}
void BidResponse::clear_nbr() {
  nbr_ = 0;
  clear_has_nbr();
}
 ::com::google::openrtb::BidResponse_NoBidReason BidResponse::nbr() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.BidResponse.nbr)
  return static_cast< ::com::google::openrtb::BidResponse_NoBidReason >(nbr_);
}
 void BidResponse::set_nbr(::com::google::openrtb::BidResponse_NoBidReason value) {
  assert(::com::google::openrtb::BidResponse_NoBidReason_IsValid(value));
  set_has_nbr();
  nbr_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.BidResponse.nbr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* NativeRequest_LayoutId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_LayoutId_descriptor_;
}
bool NativeRequest_LayoutId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NativeRequest_LayoutId NativeRequest::CONTENT_WALL;
const NativeRequest_LayoutId NativeRequest::APP_WALL;
const NativeRequest_LayoutId NativeRequest::NEWS_FEED;
const NativeRequest_LayoutId NativeRequest::CHAT_LIST;
const NativeRequest_LayoutId NativeRequest::CAROUSEL;
const NativeRequest_LayoutId NativeRequest::CONTENT_STREAM;
const NativeRequest_LayoutId NativeRequest::GRID;
const NativeRequest_LayoutId NativeRequest::LayoutId_MIN;
const NativeRequest_LayoutId NativeRequest::LayoutId_MAX;
const int NativeRequest::LayoutId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NativeRequest_AdUnitId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_AdUnitId_descriptor_;
}
bool NativeRequest_AdUnitId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NativeRequest_AdUnitId NativeRequest::PAID_SEARCH_UNIT;
const NativeRequest_AdUnitId NativeRequest::RECOMMENDATION_WIDGET;
const NativeRequest_AdUnitId NativeRequest::PROMOTED_LISTING;
const NativeRequest_AdUnitId NativeRequest::IAB_IN_AD_NATIVE;
const NativeRequest_AdUnitId NativeRequest::CUSTOM;
const NativeRequest_AdUnitId NativeRequest::AdUnitId_MIN;
const NativeRequest_AdUnitId NativeRequest::AdUnitId_MAX;
const int NativeRequest::AdUnitId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeRequest_Asset_Title::kLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeRequest_Asset_Title::NativeRequest_Asset_Title()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest.Asset.Title)
}

void NativeRequest_Asset_Title::InitAsDefaultInstance() {
}

NativeRequest_Asset_Title::NativeRequest_Asset_Title(const NativeRequest_Asset_Title& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest.Asset.Title)
}

void NativeRequest_Asset_Title::SharedCtor() {
  _cached_size_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeRequest_Asset_Title::~NativeRequest_Asset_Title() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest.Asset.Title)
  SharedDtor();
}

void NativeRequest_Asset_Title::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NativeRequest_Asset_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest_Asset_Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Title_descriptor_;
}

const NativeRequest_Asset_Title& NativeRequest_Asset_Title::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest_Asset_Title* NativeRequest_Asset_Title::default_instance_ = NULL;

NativeRequest_Asset_Title* NativeRequest_Asset_Title::New(::google::protobuf::Arena* arena) const {
  NativeRequest_Asset_Title* n = new NativeRequest_Asset_Title;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeRequest_Asset_Title::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeRequest.Asset.Title)
  _extensions_.Clear();
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeRequest_Asset_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest.Asset.Title)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 len = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest.Asset.Title)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest.Asset.Title)
  return false;
#undef DO_
}

void NativeRequest_Asset_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest.Asset.Title)
  // required int32 len = 1;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->len(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest.Asset.Title)
}

::google::protobuf::uint8* NativeRequest_Asset_Title::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest.Asset.Title)
  // required int32 len = 1;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->len(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest.Asset.Title)
  return target;
}

int NativeRequest_Asset_Title::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeRequest.Asset.Title)
  int total_size = 0;

  // required int32 len = 1;
  if (has_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest_Asset_Title::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeRequest.Asset.Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeRequest_Asset_Title* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeRequest_Asset_Title>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeRequest.Asset.Title)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeRequest.Asset.Title)
    MergeFrom(*source);
  }
}

void NativeRequest_Asset_Title::MergeFrom(const NativeRequest_Asset_Title& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeRequest.Asset.Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeRequest_Asset_Title::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeRequest.Asset.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest_Asset_Title::CopyFrom(const NativeRequest_Asset_Title& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeRequest.Asset.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest_Asset_Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest_Asset_Title::Swap(NativeRequest_Asset_Title* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeRequest_Asset_Title::InternalSwap(NativeRequest_Asset_Title* other) {
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeRequest_Asset_Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_Asset_Title_descriptor_;
  metadata.reflection = NativeRequest_Asset_Title_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Image_ImageAssetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Image_ImageAssetType_descriptor_;
}
bool NativeRequest_Asset_Image_ImageAssetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::ICON;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::LOGO;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::MAIN;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::ImageAssetType_MIN;
const NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::ImageAssetType_MAX;
const int NativeRequest_Asset_Image::ImageAssetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeRequest_Asset_Image::kTypeFieldNumber;
const int NativeRequest_Asset_Image::kWFieldNumber;
const int NativeRequest_Asset_Image::kHFieldNumber;
const int NativeRequest_Asset_Image::kWminFieldNumber;
const int NativeRequest_Asset_Image::kHminFieldNumber;
const int NativeRequest_Asset_Image::kMimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeRequest_Asset_Image::NativeRequest_Asset_Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest.Asset.Image)
}

void NativeRequest_Asset_Image::InitAsDefaultInstance() {
}

NativeRequest_Asset_Image::NativeRequest_Asset_Image(const NativeRequest_Asset_Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest.Asset.Image)
}

void NativeRequest_Asset_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  w_ = 0;
  h_ = 0;
  wmin_ = 0;
  hmin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeRequest_Asset_Image::~NativeRequest_Asset_Image() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest.Asset.Image)
  SharedDtor();
}

void NativeRequest_Asset_Image::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NativeRequest_Asset_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest_Asset_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Image_descriptor_;
}

const NativeRequest_Asset_Image& NativeRequest_Asset_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest_Asset_Image* NativeRequest_Asset_Image::default_instance_ = NULL;

NativeRequest_Asset_Image* NativeRequest_Asset_Image::New(::google::protobuf::Arena* arena) const {
  NativeRequest_Asset_Image* n = new NativeRequest_Asset_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeRequest_Asset_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeRequest.Asset.Image)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NativeRequest_Asset_Image, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NativeRequest_Asset_Image*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(w_, wmin_);
    type_ = 1;
    hmin_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  mimes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeRequest_Asset_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest.Asset.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType_IsValid(value)) {
            set_type(static_cast< ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_w;
        break;
      }

      // optional int32 w = 2;
      case 2: {
        if (tag == 16) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_h;
        break;
      }

      // optional int32 h = 3;
      case 3: {
        if (tag == 24) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wmin;
        break;
      }

      // optional int32 wmin = 4;
      case 4: {
        if (tag == 32) {
         parse_wmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wmin_)));
          set_has_wmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hmin;
        break;
      }

      // optional int32 hmin = 5;
      case 5: {
        if (tag == 40) {
         parse_hmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmin_)));
          set_has_hmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mimes;
        break;
      }

      // repeated string mimes = 6;
      case 6: {
        if (tag == 50) {
         parse_mimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mimes(this->mimes_size() - 1).data(),
            this->mimes(this->mimes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeRequest.Asset.Image.mimes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mimes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest.Asset.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest.Asset.Image)
  return false;
#undef DO_
}

void NativeRequest_Asset_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest.Asset.Image)
  // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 w = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->w(), output);
  }

  // optional int32 h = 3;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h(), output);
  }

  // optional int32 wmin = 4;
  if (has_wmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wmin(), output);
  }

  // optional int32 hmin = 5;
  if (has_hmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hmin(), output);
  }

  // repeated string mimes = 6;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeRequest.Asset.Image.mimes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mimes(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest.Asset.Image)
}

::google::protobuf::uint8* NativeRequest_Asset_Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest.Asset.Image)
  // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 w = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->w(), target);
  }

  // optional int32 h = 3;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h(), target);
  }

  // optional int32 wmin = 4;
  if (has_wmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wmin(), target);
  }

  // optional int32 hmin = 5;
  if (has_hmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hmin(), target);
  }

  // repeated string mimes = 6;
  for (int i = 0; i < this->mimes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mimes(i).data(), this->mimes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeRequest.Asset.Image.mimes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->mimes(i), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest.Asset.Image)
  return target;
}

int NativeRequest_Asset_Image::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeRequest.Asset.Image)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 w = 2;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 3;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // optional int32 wmin = 4;
    if (has_wmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wmin());
    }

    // optional int32 hmin = 5;
    if (has_hmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmin());
    }

  }
  // repeated string mimes = 6;
  total_size += 1 * this->mimes_size();
  for (int i = 0; i < this->mimes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mimes(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest_Asset_Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeRequest.Asset.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeRequest_Asset_Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeRequest_Asset_Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeRequest.Asset.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeRequest.Asset.Image)
    MergeFrom(*source);
  }
}

void NativeRequest_Asset_Image::MergeFrom(const NativeRequest_Asset_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeRequest.Asset.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mimes_.MergeFrom(from.mimes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_wmin()) {
      set_wmin(from.wmin());
    }
    if (from.has_hmin()) {
      set_hmin(from.hmin());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeRequest_Asset_Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeRequest.Asset.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest_Asset_Image::CopyFrom(const NativeRequest_Asset_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeRequest.Asset.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest_Asset_Image::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest_Asset_Image::Swap(NativeRequest_Asset_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeRequest_Asset_Image::InternalSwap(NativeRequest_Asset_Image* other) {
  std::swap(type_, other->type_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(wmin_, other->wmin_);
  std::swap(hmin_, other->hmin_);
  mimes_.UnsafeArenaSwap(&other->mimes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeRequest_Asset_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_Asset_Image_descriptor_;
  metadata.reflection = NativeRequest_Asset_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* NativeRequest_Asset_Data_DataAssetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Data_DataAssetType_descriptor_;
}
bool NativeRequest_Asset_Data_DataAssetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::SPONSORED;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DESC;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::RATING;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::LIKES;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DOWNLOADS;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::PRICE;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::SALEPRICE;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::PHONE;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::ADDRESS;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DESC2;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DISPLAYURL;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::CTATEXT;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DataAssetType_MIN;
const NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::DataAssetType_MAX;
const int NativeRequest_Asset_Data::DataAssetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeRequest_Asset_Data::kTypeFieldNumber;
const int NativeRequest_Asset_Data::kLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeRequest_Asset_Data::NativeRequest_Asset_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest.Asset.Data)
}

void NativeRequest_Asset_Data::InitAsDefaultInstance() {
}

NativeRequest_Asset_Data::NativeRequest_Asset_Data(const NativeRequest_Asset_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest.Asset.Data)
}

void NativeRequest_Asset_Data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeRequest_Asset_Data::~NativeRequest_Asset_Data() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest.Asset.Data)
  SharedDtor();
}

void NativeRequest_Asset_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NativeRequest_Asset_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest_Asset_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_Data_descriptor_;
}

const NativeRequest_Asset_Data& NativeRequest_Asset_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest_Asset_Data* NativeRequest_Asset_Data::default_instance_ = NULL;

NativeRequest_Asset_Data* NativeRequest_Asset_Data::New(::google::protobuf::Arena* arena) const {
  NativeRequest_Asset_Data* n = new NativeRequest_Asset_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeRequest_Asset_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeRequest.Asset.Data)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    len_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeRequest_Asset_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest.Asset.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType_IsValid(value)) {
            set_type(static_cast< ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // optional int32 len = 2;
      case 2: {
        if (tag == 16) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest.Asset.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest.Asset.Data)
  return false;
#undef DO_
}

void NativeRequest_Asset_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest.Asset.Data)
  // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->len(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest.Asset.Data)
}

::google::protobuf::uint8* NativeRequest_Asset_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest.Asset.Data)
  // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->len(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest.Asset.Data)
  return target;
}

int NativeRequest_Asset_Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeRequest.Asset.Data)
  int total_size = 0;

  // required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional int32 len = 2;
  if (has_len()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->len());
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest_Asset_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeRequest.Asset.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeRequest_Asset_Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeRequest_Asset_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeRequest.Asset.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeRequest.Asset.Data)
    MergeFrom(*source);
  }
}

void NativeRequest_Asset_Data::MergeFrom(const NativeRequest_Asset_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeRequest.Asset.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeRequest_Asset_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeRequest.Asset.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest_Asset_Data::CopyFrom(const NativeRequest_Asset_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeRequest.Asset.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest_Asset_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest_Asset_Data::Swap(NativeRequest_Asset_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeRequest_Asset_Data::InternalSwap(NativeRequest_Asset_Data* other) {
  std::swap(type_, other->type_);
  std::swap(len_, other->len_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeRequest_Asset_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_Asset_Data_descriptor_;
  metadata.reflection = NativeRequest_Asset_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeRequest_Asset::kIdFieldNumber;
const int NativeRequest_Asset::kRequiredFieldNumber;
const int NativeRequest_Asset::kTitleFieldNumber;
const int NativeRequest_Asset::kImgFieldNumber;
const int NativeRequest_Asset::kVideoFieldNumber;
const int NativeRequest_Asset::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeRequest_Asset::NativeRequest_Asset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest.Asset)
}

void NativeRequest_Asset::InitAsDefaultInstance() {
  NativeRequest_Asset_default_oneof_instance_->title_ = const_cast< ::com::google::openrtb::NativeRequest_Asset_Title*>(&::com::google::openrtb::NativeRequest_Asset_Title::default_instance());
  NativeRequest_Asset_default_oneof_instance_->img_ = const_cast< ::com::google::openrtb::NativeRequest_Asset_Image*>(&::com::google::openrtb::NativeRequest_Asset_Image::default_instance());
  NativeRequest_Asset_default_oneof_instance_->video_ = const_cast< ::com::google::openrtb::BidRequest_Imp_Video*>(&::com::google::openrtb::BidRequest_Imp_Video::default_instance());
  NativeRequest_Asset_default_oneof_instance_->data_ = const_cast< ::com::google::openrtb::NativeRequest_Asset_Data*>(&::com::google::openrtb::NativeRequest_Asset_Data::default_instance());
}

NativeRequest_Asset::NativeRequest_Asset(const NativeRequest_Asset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest.Asset)
}

void NativeRequest_Asset::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  required_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_asset_oneof();
}

NativeRequest_Asset::~NativeRequest_Asset() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest.Asset)
  SharedDtor();
}

void NativeRequest_Asset::SharedDtor() {
  if (has_asset_oneof()) {
    clear_asset_oneof();
  }
  if (this != default_instance_) {
  }
}

void NativeRequest_Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest_Asset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_Asset_descriptor_;
}

const NativeRequest_Asset& NativeRequest_Asset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest_Asset* NativeRequest_Asset::default_instance_ = NULL;

NativeRequest_Asset* NativeRequest_Asset::New(::google::protobuf::Arena* arena) const {
  NativeRequest_Asset* n = new NativeRequest_Asset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeRequest_Asset::clear_asset_oneof() {
// @@protoc_insertion_point(one_of_clear_start:com.google.openrtb.NativeRequest.Asset)
  switch(asset_oneof_case()) {
    case kTitle: {
      delete asset_oneof_.title_;
      break;
    }
    case kImg: {
      delete asset_oneof_.img_;
      break;
    }
    case kVideo: {
      delete asset_oneof_.video_;
      break;
    }
    case kData: {
      delete asset_oneof_.data_;
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ASSET_ONEOF_NOT_SET;
}


void NativeRequest_Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeRequest.Asset)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NativeRequest_Asset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NativeRequest_Asset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, required_);

#undef ZR_HELPER_
#undef ZR_

  clear_asset_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeRequest_Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_required;
        break;
      }

      // optional bool required = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
          set_has_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_img;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
      case 4: {
        if (tag == 34) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_video;
        break;
      }

      // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
      case 5: {
        if (tag == 42) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest.Asset)
  return false;
#undef DO_
}

void NativeRequest_Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest.Asset)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool required = 2 [default = false];
  if (has_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->required(), output);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *asset_oneof_.title_, output);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *asset_oneof_.img_, output);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *asset_oneof_.video_, output);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *asset_oneof_.data_, output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest.Asset)
}

::google::protobuf::uint8* NativeRequest_Asset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest.Asset)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool required = 2 [default = false];
  if (has_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->required(), target);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *asset_oneof_.title_, false, target);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
  if (has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *asset_oneof_.img_, false, target);
  }

  // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *asset_oneof_.video_, false, target);
  }

  // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *asset_oneof_.data_, false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest.Asset)
  return target;
}

int NativeRequest_Asset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeRequest.Asset)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  // optional bool required = 2 [default = false];
  if (has_required()) {
    total_size += 1 + 1;
  }

  switch (asset_oneof_case()) {
    // optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
    case kTitle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *asset_oneof_.title_);
      break;
    }
    // optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
    case kImg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *asset_oneof_.img_);
      break;
    }
    // optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
    case kVideo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *asset_oneof_.video_);
      break;
    }
    // optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *asset_oneof_.data_);
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest_Asset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeRequest.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeRequest_Asset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeRequest_Asset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeRequest.Asset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeRequest.Asset)
    MergeFrom(*source);
  }
}

void NativeRequest_Asset::MergeFrom(const NativeRequest_Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeRequest.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.asset_oneof_case()) {
    case kTitle: {
      mutable_title()->::com::google::openrtb::NativeRequest_Asset_Title::MergeFrom(from.title());
      break;
    }
    case kImg: {
      mutable_img()->::com::google::openrtb::NativeRequest_Asset_Image::MergeFrom(from.img());
      break;
    }
    case kVideo: {
      mutable_video()->::com::google::openrtb::BidRequest_Imp_Video::MergeFrom(from.video());
      break;
    }
    case kData: {
      mutable_data()->::com::google::openrtb::NativeRequest_Asset_Data::MergeFrom(from.data());
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_required()) {
      set_required(from.required());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeRequest_Asset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeRequest.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest_Asset::CopyFrom(const NativeRequest_Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeRequest.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest_Asset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  if (has_img()) {
    if (!this->img().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest_Asset::Swap(NativeRequest_Asset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeRequest_Asset::InternalSwap(NativeRequest_Asset* other) {
  std::swap(id_, other->id_);
  std::swap(required_, other->required_);
  std::swap(asset_oneof_, other->asset_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeRequest_Asset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_Asset_descriptor_;
  metadata.reflection = NativeRequest_Asset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeRequest::kVerFieldNumber;
const int NativeRequest::kLayoutFieldNumber;
const int NativeRequest::kAdunitFieldNumber;
const int NativeRequest::kPlcmtcntFieldNumber;
const int NativeRequest::kSeqFieldNumber;
const int NativeRequest::kAssetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeRequest::NativeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeRequest)
}

void NativeRequest::InitAsDefaultInstance() {
}

NativeRequest::NativeRequest(const NativeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeRequest)
}

void NativeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layout_ = 1;
  adunit_ = 1;
  plcmtcnt_ = 1;
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeRequest::~NativeRequest() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeRequest)
  SharedDtor();
}

void NativeRequest::SharedDtor() {
  ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NativeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeRequest_descriptor_;
}

const NativeRequest& NativeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeRequest* NativeRequest::default_instance_ = NULL;

NativeRequest* NativeRequest::New(::google::protobuf::Arena* arena) const {
  NativeRequest* n = new NativeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeRequest)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_ver()) {
      ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    layout_ = 1;
    adunit_ = 1;
    plcmtcnt_ = 1;
    seq_ = 0;
  }
  assets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeRequest.ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_layout;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
      case 2: {
        if (tag == 16) {
         parse_layout:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::NativeRequest_LayoutId_IsValid(value)) {
            set_layout(static_cast< ::com::google::openrtb::NativeRequest_LayoutId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adunit;
        break;
      }

      // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
      case 3: {
        if (tag == 24) {
         parse_adunit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::google::openrtb::NativeRequest_AdUnitId_IsValid(value)) {
            set_adunit(static_cast< ::com::google::openrtb::NativeRequest_AdUnitId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plcmtcnt;
        break;
      }

      // optional int32 plcmtcnt = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_plcmtcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plcmtcnt_)));
          set_has_plcmtcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seq;
        break;
      }

      // optional int32 seq = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_assets;
        break;
      }

      // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
      case 6: {
        if (tag == 50) {
         parse_assets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_assets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeRequest)
  return false;
#undef DO_
}

void NativeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeRequest)
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeRequest.ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ver(), output);
  }

  // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
  if (has_layout()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->layout(), output);
  }

  // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
  if (has_adunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->adunit(), output);
  }

  // optional int32 plcmtcnt = 4 [default = 1];
  if (has_plcmtcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->plcmtcnt(), output);
  }

  // optional int32 seq = 5 [default = 0];
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seq(), output);
  }

  // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->assets(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeRequest)
}

::google::protobuf::uint8* NativeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeRequest)
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeRequest.ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ver(), target);
  }

  // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
  if (has_layout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->layout(), target);
  }

  // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
  if (has_adunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->adunit(), target);
  }

  // optional int32 plcmtcnt = 4 [default = 1];
  if (has_plcmtcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->plcmtcnt(), target);
  }

  // optional int32 seq = 5 [default = 0];
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seq(), target);
  }

  // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->assets(i), false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeRequest)
  return target;
}

int NativeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeRequest)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
    if (has_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->layout());
    }

    // optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
    if (has_adunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adunit());
    }

    // optional int32 plcmtcnt = 4 [default = 1];
    if (has_plcmtcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plcmtcnt());
    }

    // optional int32 seq = 5 [default = 0];
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  // repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assets(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeRequest)
    MergeFrom(*source);
  }
}

void NativeRequest::MergeFrom(const NativeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assets_.MergeFrom(from.assets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_has_ver();
      ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ver_);
    }
    if (from.has_layout()) {
      set_layout(from.layout());
    }
    if (from.has_adunit()) {
      set_adunit(from.adunit());
    }
    if (from.has_plcmtcnt()) {
      set_plcmtcnt(from.plcmtcnt());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeRequest::CopyFrom(const NativeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->assets())) return false;

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeRequest::Swap(NativeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeRequest::InternalSwap(NativeRequest* other) {
  ver_.Swap(&other->ver_);
  std::swap(layout_, other->layout_);
  std::swap(adunit_, other->adunit_);
  std::swap(plcmtcnt_, other->plcmtcnt_);
  std::swap(seq_, other->seq_);
  assets_.UnsafeArenaSwap(&other->assets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeRequest_descriptor_;
  metadata.reflection = NativeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NativeRequest_Asset_Title

// required int32 len = 1;
bool NativeRequest_Asset_Title::has_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeRequest_Asset_Title::set_has_len() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeRequest_Asset_Title::clear_has_len() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeRequest_Asset_Title::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::google::protobuf::int32 NativeRequest_Asset_Title::len() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Title.len)
  return len_;
}
 void NativeRequest_Asset_Title::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Title.len)
}

// -------------------------------------------------------------------

// NativeRequest_Asset_Image

// optional .com.google.openrtb.NativeRequest.Asset.Image.ImageAssetType type = 1;
bool NativeRequest_Asset_Image::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeRequest_Asset_Image::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeRequest_Asset_Image::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeRequest_Asset_Image::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType NativeRequest_Asset_Image::type() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.type)
  return static_cast< ::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType >(type_);
}
 void NativeRequest_Asset_Image::set_type(::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType value) {
  assert(::com::google::openrtb::NativeRequest_Asset_Image_ImageAssetType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.type)
}

// optional int32 w = 2;
bool NativeRequest_Asset_Image::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NativeRequest_Asset_Image::set_has_w() {
  _has_bits_[0] |= 0x00000002u;
}
void NativeRequest_Asset_Image::clear_has_w() {
  _has_bits_[0] &= ~0x00000002u;
}
void NativeRequest_Asset_Image::clear_w() {
  w_ = 0;
  clear_has_w();
}
 ::google::protobuf::int32 NativeRequest_Asset_Image::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.w)
  return w_;
}
 void NativeRequest_Asset_Image::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.w)
}

// optional int32 h = 3;
bool NativeRequest_Asset_Image::has_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NativeRequest_Asset_Image::set_has_h() {
  _has_bits_[0] |= 0x00000004u;
}
void NativeRequest_Asset_Image::clear_has_h() {
  _has_bits_[0] &= ~0x00000004u;
}
void NativeRequest_Asset_Image::clear_h() {
  h_ = 0;
  clear_has_h();
}
 ::google::protobuf::int32 NativeRequest_Asset_Image::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.h)
  return h_;
}
 void NativeRequest_Asset_Image::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.h)
}

// optional int32 wmin = 4;
bool NativeRequest_Asset_Image::has_wmin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NativeRequest_Asset_Image::set_has_wmin() {
  _has_bits_[0] |= 0x00000008u;
}
void NativeRequest_Asset_Image::clear_has_wmin() {
  _has_bits_[0] &= ~0x00000008u;
}
void NativeRequest_Asset_Image::clear_wmin() {
  wmin_ = 0;
  clear_has_wmin();
}
 ::google::protobuf::int32 NativeRequest_Asset_Image::wmin() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.wmin)
  return wmin_;
}
 void NativeRequest_Asset_Image::set_wmin(::google::protobuf::int32 value) {
  set_has_wmin();
  wmin_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.wmin)
}

// optional int32 hmin = 5;
bool NativeRequest_Asset_Image::has_hmin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NativeRequest_Asset_Image::set_has_hmin() {
  _has_bits_[0] |= 0x00000010u;
}
void NativeRequest_Asset_Image::clear_has_hmin() {
  _has_bits_[0] &= ~0x00000010u;
}
void NativeRequest_Asset_Image::clear_hmin() {
  hmin_ = 0;
  clear_has_hmin();
}
 ::google::protobuf::int32 NativeRequest_Asset_Image::hmin() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.hmin)
  return hmin_;
}
 void NativeRequest_Asset_Image::set_hmin(::google::protobuf::int32 value) {
  set_has_hmin();
  hmin_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.hmin)
}

// repeated string mimes = 6;
int NativeRequest_Asset_Image::mimes_size() const {
  return mimes_.size();
}
void NativeRequest_Asset_Image::clear_mimes() {
  mimes_.Clear();
}
 const ::std::string& NativeRequest_Asset_Image::mimes(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return mimes_.Get(index);
}
 ::std::string* NativeRequest_Asset_Image::mutable_mimes(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return mimes_.Mutable(index);
}
 void NativeRequest_Asset_Image::set_mimes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  mimes_.Mutable(index)->assign(value);
}
 void NativeRequest_Asset_Image::set_mimes(int index, const char* value) {
  mimes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
 void NativeRequest_Asset_Image::set_mimes(int index, const char* value, size_t size) {
  mimes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
 ::std::string* NativeRequest_Asset_Image::add_mimes() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return mimes_.Add();
}
 void NativeRequest_Asset_Image::add_mimes(const ::std::string& value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
 void NativeRequest_Asset_Image::add_mimes(const char* value) {
  mimes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
 void NativeRequest_Asset_Image::add_mimes(const char* value, size_t size) {
  mimes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.NativeRequest.Asset.Image.mimes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NativeRequest_Asset_Image::mimes() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return mimes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NativeRequest_Asset_Image::mutable_mimes() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeRequest.Asset.Image.mimes)
  return &mimes_;
}

// -------------------------------------------------------------------

// NativeRequest_Asset_Data

// required .com.google.openrtb.NativeRequest.Asset.Data.DataAssetType type = 1;
bool NativeRequest_Asset_Data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeRequest_Asset_Data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeRequest_Asset_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeRequest_Asset_Data::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType NativeRequest_Asset_Data::type() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Data.type)
  return static_cast< ::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType >(type_);
}
 void NativeRequest_Asset_Data::set_type(::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType value) {
  assert(::com::google::openrtb::NativeRequest_Asset_Data_DataAssetType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Data.type)
}

// optional int32 len = 2;
bool NativeRequest_Asset_Data::has_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NativeRequest_Asset_Data::set_has_len() {
  _has_bits_[0] |= 0x00000002u;
}
void NativeRequest_Asset_Data::clear_has_len() {
  _has_bits_[0] &= ~0x00000002u;
}
void NativeRequest_Asset_Data::clear_len() {
  len_ = 0;
  clear_has_len();
}
 ::google::protobuf::int32 NativeRequest_Asset_Data::len() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.Data.len)
  return len_;
}
 void NativeRequest_Asset_Data::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.Data.len)
}

// -------------------------------------------------------------------

// NativeRequest_Asset

// required int32 id = 1;
bool NativeRequest_Asset::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeRequest_Asset::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeRequest_Asset::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeRequest_Asset::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 NativeRequest_Asset::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.id)
  return id_;
}
 void NativeRequest_Asset::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.id)
}

// optional bool required = 2 [default = false];
bool NativeRequest_Asset::has_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NativeRequest_Asset::set_has_required() {
  _has_bits_[0] |= 0x00000002u;
}
void NativeRequest_Asset::clear_has_required() {
  _has_bits_[0] &= ~0x00000002u;
}
void NativeRequest_Asset::clear_required() {
  required_ = false;
  clear_has_required();
}
 bool NativeRequest_Asset::required() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.required)
  return required_;
}
 void NativeRequest_Asset::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.Asset.required)
}

// optional .com.google.openrtb.NativeRequest.Asset.Title title = 3;
bool NativeRequest_Asset::has_title() const {
  return asset_oneof_case() == kTitle;
}
void NativeRequest_Asset::set_has_title() {
  _oneof_case_[0] = kTitle;
}
void NativeRequest_Asset::clear_title() {
  if (has_title()) {
    delete asset_oneof_.title_;
    clear_has_asset_oneof();
  }
}
 const ::com::google::openrtb::NativeRequest_Asset_Title& NativeRequest_Asset::title() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.title)
  return has_title()
      ? *asset_oneof_.title_
      : ::com::google::openrtb::NativeRequest_Asset_Title::default_instance();
}
::com::google::openrtb::NativeRequest_Asset_Title* NativeRequest_Asset::mutable_title() {
  if (!has_title()) {
    clear_asset_oneof();
    set_has_title();
    asset_oneof_.title_ = new ::com::google::openrtb::NativeRequest_Asset_Title;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.Asset.title)
  return asset_oneof_.title_;
}
::com::google::openrtb::NativeRequest_Asset_Title* NativeRequest_Asset::release_title() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeRequest.Asset.title)
  if (has_title()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeRequest_Asset_Title* temp = asset_oneof_.title_;
    asset_oneof_.title_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NativeRequest_Asset::set_allocated_title(::com::google::openrtb::NativeRequest_Asset_Title* title) {
  clear_asset_oneof();
  if (title) {
    set_has_title();
    asset_oneof_.title_ = title;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeRequest.Asset.title)
}

// optional .com.google.openrtb.NativeRequest.Asset.Image img = 4;
bool NativeRequest_Asset::has_img() const {
  return asset_oneof_case() == kImg;
}
void NativeRequest_Asset::set_has_img() {
  _oneof_case_[0] = kImg;
}
void NativeRequest_Asset::clear_img() {
  if (has_img()) {
    delete asset_oneof_.img_;
    clear_has_asset_oneof();
  }
}
 const ::com::google::openrtb::NativeRequest_Asset_Image& NativeRequest_Asset::img() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.img)
  return has_img()
      ? *asset_oneof_.img_
      : ::com::google::openrtb::NativeRequest_Asset_Image::default_instance();
}
::com::google::openrtb::NativeRequest_Asset_Image* NativeRequest_Asset::mutable_img() {
  if (!has_img()) {
    clear_asset_oneof();
    set_has_img();
    asset_oneof_.img_ = new ::com::google::openrtb::NativeRequest_Asset_Image;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.Asset.img)
  return asset_oneof_.img_;
}
::com::google::openrtb::NativeRequest_Asset_Image* NativeRequest_Asset::release_img() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeRequest.Asset.img)
  if (has_img()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeRequest_Asset_Image* temp = asset_oneof_.img_;
    asset_oneof_.img_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NativeRequest_Asset::set_allocated_img(::com::google::openrtb::NativeRequest_Asset_Image* img) {
  clear_asset_oneof();
  if (img) {
    set_has_img();
    asset_oneof_.img_ = img;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeRequest.Asset.img)
}

// optional .com.google.openrtb.BidRequest.Imp.Video video = 5;
bool NativeRequest_Asset::has_video() const {
  return asset_oneof_case() == kVideo;
}
void NativeRequest_Asset::set_has_video() {
  _oneof_case_[0] = kVideo;
}
void NativeRequest_Asset::clear_video() {
  if (has_video()) {
    delete asset_oneof_.video_;
    clear_has_asset_oneof();
  }
}
 const ::com::google::openrtb::BidRequest_Imp_Video& NativeRequest_Asset::video() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.video)
  return has_video()
      ? *asset_oneof_.video_
      : ::com::google::openrtb::BidRequest_Imp_Video::default_instance();
}
::com::google::openrtb::BidRequest_Imp_Video* NativeRequest_Asset::mutable_video() {
  if (!has_video()) {
    clear_asset_oneof();
    set_has_video();
    asset_oneof_.video_ = new ::com::google::openrtb::BidRequest_Imp_Video;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.Asset.video)
  return asset_oneof_.video_;
}
::com::google::openrtb::BidRequest_Imp_Video* NativeRequest_Asset::release_video() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeRequest.Asset.video)
  if (has_video()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::BidRequest_Imp_Video* temp = asset_oneof_.video_;
    asset_oneof_.video_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NativeRequest_Asset::set_allocated_video(::com::google::openrtb::BidRequest_Imp_Video* video) {
  clear_asset_oneof();
  if (video) {
    set_has_video();
    asset_oneof_.video_ = video;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeRequest.Asset.video)
}

// optional .com.google.openrtb.NativeRequest.Asset.Data data = 6;
bool NativeRequest_Asset::has_data() const {
  return asset_oneof_case() == kData;
}
void NativeRequest_Asset::set_has_data() {
  _oneof_case_[0] = kData;
}
void NativeRequest_Asset::clear_data() {
  if (has_data()) {
    delete asset_oneof_.data_;
    clear_has_asset_oneof();
  }
}
 const ::com::google::openrtb::NativeRequest_Asset_Data& NativeRequest_Asset::data() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.Asset.data)
  return has_data()
      ? *asset_oneof_.data_
      : ::com::google::openrtb::NativeRequest_Asset_Data::default_instance();
}
::com::google::openrtb::NativeRequest_Asset_Data* NativeRequest_Asset::mutable_data() {
  if (!has_data()) {
    clear_asset_oneof();
    set_has_data();
    asset_oneof_.data_ = new ::com::google::openrtb::NativeRequest_Asset_Data;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.Asset.data)
  return asset_oneof_.data_;
}
::com::google::openrtb::NativeRequest_Asset_Data* NativeRequest_Asset::release_data() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeRequest.Asset.data)
  if (has_data()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeRequest_Asset_Data* temp = asset_oneof_.data_;
    asset_oneof_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NativeRequest_Asset::set_allocated_data(::com::google::openrtb::NativeRequest_Asset_Data* data) {
  clear_asset_oneof();
  if (data) {
    set_has_data();
    asset_oneof_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeRequest.Asset.data)
}

bool NativeRequest_Asset::has_asset_oneof() const {
  return asset_oneof_case() != ASSET_ONEOF_NOT_SET;
}
void NativeRequest_Asset::clear_has_asset_oneof() {
  _oneof_case_[0] = ASSET_ONEOF_NOT_SET;
}
NativeRequest_Asset::AssetOneofCase NativeRequest_Asset::asset_oneof_case() const {
  return NativeRequest_Asset::AssetOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NativeRequest

// optional string ver = 1;
bool NativeRequest::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeRequest::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeRequest::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeRequest::clear_ver() {
  ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ver();
}
 const ::std::string& NativeRequest::ver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.ver)
  return ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeRequest::set_ver(const ::std::string& value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.ver)
}
 void NativeRequest::set_ver(const char* value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeRequest.ver)
}
 void NativeRequest::set_ver(const char* value, size_t size) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeRequest.ver)
}
 ::std::string* NativeRequest::mutable_ver() {
  set_has_ver();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.ver)
  return ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeRequest::release_ver() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeRequest.ver)
  clear_has_ver();
  return ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeRequest::set_allocated_ver(::std::string* ver) {
  if (ver != NULL) {
    set_has_ver();
  } else {
    clear_has_ver();
  }
  ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ver);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeRequest.ver)
}

// optional .com.google.openrtb.NativeRequest.LayoutId layout = 2;
bool NativeRequest::has_layout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NativeRequest::set_has_layout() {
  _has_bits_[0] |= 0x00000002u;
}
void NativeRequest::clear_has_layout() {
  _has_bits_[0] &= ~0x00000002u;
}
void NativeRequest::clear_layout() {
  layout_ = 1;
  clear_has_layout();
}
 ::com::google::openrtb::NativeRequest_LayoutId NativeRequest::layout() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.layout)
  return static_cast< ::com::google::openrtb::NativeRequest_LayoutId >(layout_);
}
 void NativeRequest::set_layout(::com::google::openrtb::NativeRequest_LayoutId value) {
  assert(::com::google::openrtb::NativeRequest_LayoutId_IsValid(value));
  set_has_layout();
  layout_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.layout)
}

// optional .com.google.openrtb.NativeRequest.AdUnitId adunit = 3;
bool NativeRequest::has_adunit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NativeRequest::set_has_adunit() {
  _has_bits_[0] |= 0x00000004u;
}
void NativeRequest::clear_has_adunit() {
  _has_bits_[0] &= ~0x00000004u;
}
void NativeRequest::clear_adunit() {
  adunit_ = 1;
  clear_has_adunit();
}
 ::com::google::openrtb::NativeRequest_AdUnitId NativeRequest::adunit() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.adunit)
  return static_cast< ::com::google::openrtb::NativeRequest_AdUnitId >(adunit_);
}
 void NativeRequest::set_adunit(::com::google::openrtb::NativeRequest_AdUnitId value) {
  assert(::com::google::openrtb::NativeRequest_AdUnitId_IsValid(value));
  set_has_adunit();
  adunit_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.adunit)
}

// optional int32 plcmtcnt = 4 [default = 1];
bool NativeRequest::has_plcmtcnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NativeRequest::set_has_plcmtcnt() {
  _has_bits_[0] |= 0x00000008u;
}
void NativeRequest::clear_has_plcmtcnt() {
  _has_bits_[0] &= ~0x00000008u;
}
void NativeRequest::clear_plcmtcnt() {
  plcmtcnt_ = 1;
  clear_has_plcmtcnt();
}
 ::google::protobuf::int32 NativeRequest::plcmtcnt() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.plcmtcnt)
  return plcmtcnt_;
}
 void NativeRequest::set_plcmtcnt(::google::protobuf::int32 value) {
  set_has_plcmtcnt();
  plcmtcnt_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.plcmtcnt)
}

// optional int32 seq = 5 [default = 0];
bool NativeRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NativeRequest::set_has_seq() {
  _has_bits_[0] |= 0x00000010u;
}
void NativeRequest::clear_has_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
void NativeRequest::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
 ::google::protobuf::int32 NativeRequest::seq() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.seq)
  return seq_;
}
 void NativeRequest::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeRequest.seq)
}

// repeated .com.google.openrtb.NativeRequest.Asset assets = 6;
int NativeRequest::assets_size() const {
  return assets_.size();
}
void NativeRequest::clear_assets() {
  assets_.Clear();
}
const ::com::google::openrtb::NativeRequest_Asset& NativeRequest::assets(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeRequest.assets)
  return assets_.Get(index);
}
::com::google::openrtb::NativeRequest_Asset* NativeRequest::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeRequest.assets)
  return assets_.Mutable(index);
}
::com::google::openrtb::NativeRequest_Asset* NativeRequest::add_assets() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeRequest.assets)
  return assets_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeRequest_Asset >*
NativeRequest::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeRequest.assets)
  return &assets_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeRequest_Asset >&
NativeRequest::assets() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeRequest.assets)
  return assets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeResponse_Link::kUrlFieldNumber;
const int NativeResponse_Link::kClicktrackersFieldNumber;
const int NativeResponse_Link::kFallbackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeResponse_Link::NativeResponse_Link()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Link)
}

void NativeResponse_Link::InitAsDefaultInstance() {
}

NativeResponse_Link::NativeResponse_Link(const NativeResponse_Link& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Link)
}

void NativeResponse_Link::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fallback_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Link::~NativeResponse_Link() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Link)
  SharedDtor();
}

void NativeResponse_Link::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fallback_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NativeResponse_Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Link_descriptor_;
}

const NativeResponse_Link& NativeResponse_Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Link* NativeResponse_Link::default_instance_ = NULL;

NativeResponse_Link* NativeResponse_Link::New(::google::protobuf::Arena* arena) const {
  NativeResponse_Link* n = new NativeResponse_Link;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeResponse_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeResponse.Link)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 5u) {
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_fallback()) {
      fallback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  clicktrackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeResponse_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.Link.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clicktrackers;
        break;
      }

      // repeated string clicktrackers = 2;
      case 2: {
        if (tag == 18) {
         parse_clicktrackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_clicktrackers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clicktrackers(this->clicktrackers_size() - 1).data(),
            this->clicktrackers(this->clicktrackers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.Link.clicktrackers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clicktrackers;
        if (input->ExpectTag(26)) goto parse_fallback;
        break;
      }

      // optional string fallback = 3;
      case 3: {
        if (tag == 26) {
         parse_fallback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fallback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fallback().data(), this->fallback().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.Link.fallback");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Link)
  return false;
#undef DO_
}

void NativeResponse_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Link)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Link.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // repeated string clicktrackers = 2;
  for (int i = 0; i < this->clicktrackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clicktrackers(i).data(), this->clicktrackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Link.clicktrackers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clicktrackers(i), output);
  }

  // optional string fallback = 3;
  if (has_fallback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fallback().data(), this->fallback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Link.fallback");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fallback(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Link)
}

::google::protobuf::uint8* NativeResponse_Link::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Link)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Link.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // repeated string clicktrackers = 2;
  for (int i = 0; i < this->clicktrackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clicktrackers(i).data(), this->clicktrackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Link.clicktrackers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->clicktrackers(i), target);
  }

  // optional string fallback = 3;
  if (has_fallback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fallback().data(), this->fallback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Link.fallback");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fallback(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Link)
  return target;
}

int NativeResponse_Link::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeResponse.Link)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string fallback = 3;
    if (has_fallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fallback());
    }

  }
  // repeated string clicktrackers = 2;
  total_size += 1 * this->clicktrackers_size();
  for (int i = 0; i < this->clicktrackers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->clicktrackers(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Link::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeResponse.Link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeResponse_Link* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeResponse_Link>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeResponse.Link)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeResponse.Link)
    MergeFrom(*source);
  }
}

void NativeResponse_Link::MergeFrom(const NativeResponse_Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeResponse.Link)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  clicktrackers_.MergeFrom(from.clicktrackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_fallback()) {
      set_has_fallback();
      fallback_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fallback_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeResponse_Link::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeResponse.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Link::CopyFrom(const NativeResponse_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeResponse.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Link::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Link::Swap(NativeResponse_Link* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeResponse_Link::InternalSwap(NativeResponse_Link* other) {
  url_.Swap(&other->url_);
  clicktrackers_.UnsafeArenaSwap(&other->clicktrackers_);
  fallback_.Swap(&other->fallback_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeResponse_Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Link_descriptor_;
  metadata.reflection = NativeResponse_Link_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeResponse_Asset_Title::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeResponse_Asset_Title::NativeResponse_Asset_Title()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset.Title)
}

void NativeResponse_Asset_Title::InitAsDefaultInstance() {
}

NativeResponse_Asset_Title::NativeResponse_Asset_Title(const NativeResponse_Asset_Title& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset.Title)
}

void NativeResponse_Asset_Title::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Asset_Title::~NativeResponse_Asset_Title() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset.Title)
  SharedDtor();
}

void NativeResponse_Asset_Title::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NativeResponse_Asset_Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset_Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_Title_descriptor_;
}

const NativeResponse_Asset_Title& NativeResponse_Asset_Title::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset_Title* NativeResponse_Asset_Title::default_instance_ = NULL;

NativeResponse_Asset_Title* NativeResponse_Asset_Title::New(::google::protobuf::Arena* arena) const {
  NativeResponse_Asset_Title* n = new NativeResponse_Asset_Title;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeResponse_Asset_Title::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeResponse.Asset.Title)
  _extensions_.Clear();
  if (has_text()) {
    text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeResponse_Asset_Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset.Title)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.Asset.Title.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset.Title)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset.Title)
  return false;
#undef DO_
}

void NativeResponse_Asset_Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset.Title)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Title.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset.Title)
}

::google::protobuf::uint8* NativeResponse_Asset_Title::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset.Title)
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Title.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset.Title)
  return target;
}

int NativeResponse_Asset_Title::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeResponse.Asset.Title)
  int total_size = 0;

  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset_Title::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeResponse.Asset.Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeResponse_Asset_Title* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeResponse_Asset_Title>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeResponse.Asset.Title)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeResponse.Asset.Title)
    MergeFrom(*source);
  }
}

void NativeResponse_Asset_Title::MergeFrom(const NativeResponse_Asset_Title& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeResponse.Asset.Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeResponse_Asset_Title::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeResponse.Asset.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset_Title::CopyFrom(const NativeResponse_Asset_Title& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeResponse.Asset.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset_Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset_Title::Swap(NativeResponse_Asset_Title* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeResponse_Asset_Title::InternalSwap(NativeResponse_Asset_Title* other) {
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeResponse_Asset_Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_Title_descriptor_;
  metadata.reflection = NativeResponse_Asset_Title_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeResponse_Asset_Image::kUrlFieldNumber;
const int NativeResponse_Asset_Image::kWFieldNumber;
const int NativeResponse_Asset_Image::kHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeResponse_Asset_Image::NativeResponse_Asset_Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset.Image)
}

void NativeResponse_Asset_Image::InitAsDefaultInstance() {
}

NativeResponse_Asset_Image::NativeResponse_Asset_Image(const NativeResponse_Asset_Image& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset.Image)
}

void NativeResponse_Asset_Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Asset_Image::~NativeResponse_Asset_Image() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset.Image)
  SharedDtor();
}

void NativeResponse_Asset_Image::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NativeResponse_Asset_Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset_Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_Image_descriptor_;
}

const NativeResponse_Asset_Image& NativeResponse_Asset_Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset_Image* NativeResponse_Asset_Image::default_instance_ = NULL;

NativeResponse_Asset_Image* NativeResponse_Asset_Image::New(::google::protobuf::Arena* arena) const {
  NativeResponse_Asset_Image* n = new NativeResponse_Asset_Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeResponse_Asset_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeResponse.Asset.Image)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NativeResponse_Asset_Image, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NativeResponse_Asset_Image*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(w_, h_);
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeResponse_Asset_Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.Asset.Image.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_w;
        break;
      }

      // optional int32 w = 2;
      case 2: {
        if (tag == 16) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_h;
        break;
      }

      // optional int32 h = 3;
      case 3: {
        if (tag == 24) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset.Image)
  return false;
#undef DO_
}

void NativeResponse_Asset_Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Image.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional int32 w = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->w(), output);
  }

  // optional int32 h = 3;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset.Image)
}

::google::protobuf::uint8* NativeResponse_Asset_Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset.Image)
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Image.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // optional int32 w = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->w(), target);
  }

  // optional int32 h = 3;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset.Image)
  return target;
}

int NativeResponse_Asset_Image::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeResponse.Asset.Image)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 w = 2;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // optional int32 h = 3;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset_Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeResponse.Asset.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeResponse_Asset_Image* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeResponse_Asset_Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeResponse.Asset.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeResponse.Asset.Image)
    MergeFrom(*source);
  }
}

void NativeResponse_Asset_Image::MergeFrom(const NativeResponse_Asset_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeResponse.Asset.Image)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeResponse_Asset_Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeResponse.Asset.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset_Image::CopyFrom(const NativeResponse_Asset_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeResponse.Asset.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset_Image::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset_Image::Swap(NativeResponse_Asset_Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeResponse_Asset_Image::InternalSwap(NativeResponse_Asset_Image* other) {
  url_.Swap(&other->url_);
  std::swap(w_, other->w_);
  std::swap(h_, other->h_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeResponse_Asset_Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_Image_descriptor_;
  metadata.reflection = NativeResponse_Asset_Image_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeResponse_Asset_Data::kLabelFieldNumber;
const int NativeResponse_Asset_Data::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeResponse_Asset_Data::NativeResponse_Asset_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset.Data)
}

void NativeResponse_Asset_Data::InitAsDefaultInstance() {
}

NativeResponse_Asset_Data::NativeResponse_Asset_Data(const NativeResponse_Asset_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset.Data)
}

void NativeResponse_Asset_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Asset_Data::~NativeResponse_Asset_Data() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset.Data)
  SharedDtor();
}

void NativeResponse_Asset_Data::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NativeResponse_Asset_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_Data_descriptor_;
}

const NativeResponse_Asset_Data& NativeResponse_Asset_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset_Data* NativeResponse_Asset_Data::default_instance_ = NULL;

NativeResponse_Asset_Data* NativeResponse_Asset_Data::New(::google::protobuf::Arena* arena) const {
  NativeResponse_Asset_Data* n = new NativeResponse_Asset_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeResponse_Asset_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeResponse.Asset.Data)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeResponse_Asset_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.Asset.Data.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.Asset.Data.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset.Data)
  return false;
#undef DO_
}

void NativeResponse_Asset_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset.Data)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Data.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Data.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset.Data)
}

::google::protobuf::uint8* NativeResponse_Asset_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset.Data)
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Data.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Data.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset.Data)
  return target;
}

int NativeResponse_Asset_Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeResponse.Asset.Data)
  int total_size = 0;

  // required string value = 2;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }
  // optional string label = 1;
  if (has_label()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeResponse.Asset.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeResponse_Asset_Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeResponse_Asset_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeResponse.Asset.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeResponse.Asset.Data)
    MergeFrom(*source);
  }
}

void NativeResponse_Asset_Data::MergeFrom(const NativeResponse_Asset_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeResponse.Asset.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeResponse_Asset_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeResponse.Asset.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset_Data::CopyFrom(const NativeResponse_Asset_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeResponse.Asset.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset_Data::Swap(NativeResponse_Asset_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeResponse_Asset_Data::InternalSwap(NativeResponse_Asset_Data* other) {
  label_.Swap(&other->label_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeResponse_Asset_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_Data_descriptor_;
  metadata.reflection = NativeResponse_Asset_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeResponse_Asset_Video::kVasttagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeResponse_Asset_Video::NativeResponse_Asset_Video()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset.Video)
}

void NativeResponse_Asset_Video::InitAsDefaultInstance() {
}

NativeResponse_Asset_Video::NativeResponse_Asset_Video(const NativeResponse_Asset_Video& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset.Video)
}

void NativeResponse_Asset_Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse_Asset_Video::~NativeResponse_Asset_Video() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset.Video)
  SharedDtor();
}

void NativeResponse_Asset_Video::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NativeResponse_Asset_Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset_Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_Video_descriptor_;
}

const NativeResponse_Asset_Video& NativeResponse_Asset_Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset_Video* NativeResponse_Asset_Video::default_instance_ = NULL;

NativeResponse_Asset_Video* NativeResponse_Asset_Video::New(::google::protobuf::Arena* arena) const {
  NativeResponse_Asset_Video* n = new NativeResponse_Asset_Video;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeResponse_Asset_Video::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeResponse.Asset.Video)
  _extensions_.Clear();
  vasttag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeResponse_Asset_Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string vasttag = 1;
      case 1: {
        if (tag == 10) {
         parse_vasttag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vasttag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vasttag(this->vasttag_size() - 1).data(),
            this->vasttag(this->vasttag_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.Asset.Video.vasttag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_vasttag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset.Video)
  return false;
#undef DO_
}

void NativeResponse_Asset_Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset.Video)
  // repeated string vasttag = 1;
  for (int i = 0; i < this->vasttag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vasttag(i).data(), this->vasttag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Video.vasttag");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->vasttag(i), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset.Video)
}

::google::protobuf::uint8* NativeResponse_Asset_Video::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset.Video)
  // repeated string vasttag = 1;
  for (int i = 0; i < this->vasttag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vasttag(i).data(), this->vasttag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.Asset.Video.vasttag");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->vasttag(i), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset.Video)
  return target;
}

int NativeResponse_Asset_Video::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeResponse.Asset.Video)
  int total_size = 0;

  // repeated string vasttag = 1;
  total_size += 1 * this->vasttag_size();
  for (int i = 0; i < this->vasttag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vasttag(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset_Video::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeResponse.Asset.Video)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeResponse_Asset_Video* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeResponse_Asset_Video>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeResponse.Asset.Video)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeResponse.Asset.Video)
    MergeFrom(*source);
  }
}

void NativeResponse_Asset_Video::MergeFrom(const NativeResponse_Asset_Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeResponse.Asset.Video)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vasttag_.MergeFrom(from.vasttag_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeResponse_Asset_Video::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeResponse.Asset.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset_Video::CopyFrom(const NativeResponse_Asset_Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeResponse.Asset.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset_Video::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset_Video::Swap(NativeResponse_Asset_Video* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeResponse_Asset_Video::InternalSwap(NativeResponse_Asset_Video* other) {
  vasttag_.UnsafeArenaSwap(&other->vasttag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeResponse_Asset_Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_Video_descriptor_;
  metadata.reflection = NativeResponse_Asset_Video_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeResponse_Asset::kIdFieldNumber;
const int NativeResponse_Asset::kRequiredFieldNumber;
const int NativeResponse_Asset::kTitleFieldNumber;
const int NativeResponse_Asset::kImgFieldNumber;
const int NativeResponse_Asset::kVideoFieldNumber;
const int NativeResponse_Asset::kDataFieldNumber;
const int NativeResponse_Asset::kLinkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeResponse_Asset::NativeResponse_Asset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse.Asset)
}

void NativeResponse_Asset::InitAsDefaultInstance() {
  NativeResponse_Asset_default_oneof_instance_->title_ = const_cast< ::com::google::openrtb::NativeResponse_Asset_Title*>(&::com::google::openrtb::NativeResponse_Asset_Title::default_instance());
  NativeResponse_Asset_default_oneof_instance_->img_ = const_cast< ::com::google::openrtb::NativeResponse_Asset_Image*>(&::com::google::openrtb::NativeResponse_Asset_Image::default_instance());
  NativeResponse_Asset_default_oneof_instance_->video_ = const_cast< ::com::google::openrtb::NativeResponse_Asset_Video*>(&::com::google::openrtb::NativeResponse_Asset_Video::default_instance());
  NativeResponse_Asset_default_oneof_instance_->data_ = const_cast< ::com::google::openrtb::NativeResponse_Asset_Data*>(&::com::google::openrtb::NativeResponse_Asset_Data::default_instance());
  link_ = const_cast< ::com::google::openrtb::NativeResponse_Link*>(&::com::google::openrtb::NativeResponse_Link::default_instance());
}

NativeResponse_Asset::NativeResponse_Asset(const NativeResponse_Asset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse.Asset)
}

void NativeResponse_Asset::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  required_ = false;
  link_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_asset_oneof();
}

NativeResponse_Asset::~NativeResponse_Asset() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse.Asset)
  SharedDtor();
}

void NativeResponse_Asset::SharedDtor() {
  if (has_asset_oneof()) {
    clear_asset_oneof();
  }
  if (this != default_instance_) {
    delete link_;
  }
}

void NativeResponse_Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse_Asset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_Asset_descriptor_;
}

const NativeResponse_Asset& NativeResponse_Asset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse_Asset* NativeResponse_Asset::default_instance_ = NULL;

NativeResponse_Asset* NativeResponse_Asset::New(::google::protobuf::Arena* arena) const {
  NativeResponse_Asset* n = new NativeResponse_Asset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeResponse_Asset::clear_asset_oneof() {
// @@protoc_insertion_point(one_of_clear_start:com.google.openrtb.NativeResponse.Asset)
  switch(asset_oneof_case()) {
    case kTitle: {
      delete asset_oneof_.title_;
      break;
    }
    case kImg: {
      delete asset_oneof_.img_;
      break;
    }
    case kVideo: {
      delete asset_oneof_.video_;
      break;
    }
    case kData: {
      delete asset_oneof_.data_;
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ASSET_ONEOF_NOT_SET;
}


void NativeResponse_Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeResponse.Asset)
  _extensions_.Clear();
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NativeResponse_Asset, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NativeResponse_Asset*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 67u) {
    ZR_(id_, required_);
    if (has_link()) {
      if (link_ != NULL) link_->::com::google::openrtb::NativeResponse_Link::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  clear_asset_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeResponse_Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_required;
        break;
      }

      // optional bool required = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
          set_has_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_img;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
      case 4: {
        if (tag == 34) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_video;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
      case 5: {
        if (tag == 42) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_link;
        break;
      }

      // optional .com.google.openrtb.NativeResponse.Link link = 7;
      case 7: {
        if (tag == 58) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse.Asset)
  return false;
#undef DO_
}

void NativeResponse_Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse.Asset)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bool required = 2 [default = false];
  if (has_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->required(), output);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *asset_oneof_.title_, output);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *asset_oneof_.img_, output);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *asset_oneof_.video_, output);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *asset_oneof_.data_, output);
  }

  // optional .com.google.openrtb.NativeResponse.Link link = 7;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->link_, output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse.Asset)
}

::google::protobuf::uint8* NativeResponse_Asset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse.Asset)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bool required = 2 [default = false];
  if (has_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->required(), target);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *asset_oneof_.title_, false, target);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
  if (has_img()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *asset_oneof_.img_, false, target);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *asset_oneof_.video_, false, target);
  }

  // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *asset_oneof_.data_, false, target);
  }

  // optional .com.google.openrtb.NativeResponse.Link link = 7;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->link_, false, target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse.Asset)
  return target;
}

int NativeResponse_Asset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeResponse.Asset)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_has_bits_[1 / 32] & 66u) {
    // optional bool required = 2 [default = false];
    if (has_required()) {
      total_size += 1 + 1;
    }

    // optional .com.google.openrtb.NativeResponse.Link link = 7;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->link_);
    }

  }
  switch (asset_oneof_case()) {
    // optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
    case kTitle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *asset_oneof_.title_);
      break;
    }
    // optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
    case kImg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *asset_oneof_.img_);
      break;
    }
    // optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
    case kVideo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *asset_oneof_.video_);
      break;
    }
    // optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *asset_oneof_.data_);
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse_Asset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeResponse.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeResponse_Asset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeResponse_Asset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeResponse.Asset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeResponse.Asset)
    MergeFrom(*source);
  }
}

void NativeResponse_Asset::MergeFrom(const NativeResponse_Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeResponse.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.asset_oneof_case()) {
    case kTitle: {
      mutable_title()->::com::google::openrtb::NativeResponse_Asset_Title::MergeFrom(from.title());
      break;
    }
    case kImg: {
      mutable_img()->::com::google::openrtb::NativeResponse_Asset_Image::MergeFrom(from.img());
      break;
    }
    case kVideo: {
      mutable_video()->::com::google::openrtb::NativeResponse_Asset_Video::MergeFrom(from.video());
      break;
    }
    case kData: {
      mutable_data()->::com::google::openrtb::NativeResponse_Asset_Data::MergeFrom(from.data());
      break;
    }
    case ASSET_ONEOF_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_required()) {
      set_required(from.required());
    }
    if (from.has_link()) {
      mutable_link()->::com::google::openrtb::NativeResponse_Link::MergeFrom(from.link());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeResponse_Asset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeResponse.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse_Asset::CopyFrom(const NativeResponse_Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeResponse.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse_Asset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  if (has_img()) {
    if (!this->img().IsInitialized()) return false;
  }
  if (has_video()) {
    if (!this->video().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_link()) {
    if (!this->link_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse_Asset::Swap(NativeResponse_Asset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeResponse_Asset::InternalSwap(NativeResponse_Asset* other) {
  std::swap(id_, other->id_);
  std::swap(required_, other->required_);
  std::swap(link_, other->link_);
  std::swap(asset_oneof_, other->asset_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeResponse_Asset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_Asset_descriptor_;
  metadata.reflection = NativeResponse_Asset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NativeResponse::kVerFieldNumber;
const int NativeResponse::kAssetsFieldNumber;
const int NativeResponse::kLinkFieldNumber;
const int NativeResponse::kImptrackersFieldNumber;
const int NativeResponse::kJstrackerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NativeResponse::NativeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.google.openrtb.NativeResponse)
}

void NativeResponse::InitAsDefaultInstance() {
  link_ = const_cast< ::com::google::openrtb::NativeResponse_Link*>(&::com::google::openrtb::NativeResponse_Link::default_instance());
}

NativeResponse::NativeResponse(const NativeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.google.openrtb.NativeResponse)
}

void NativeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_ = NULL;
  jstracker_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NativeResponse::~NativeResponse() {
  // @@protoc_insertion_point(destructor:com.google.openrtb.NativeResponse)
  SharedDtor();
}

void NativeResponse::SharedDtor() {
  ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jstracker_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete link_;
  }
}

void NativeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NativeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NativeResponse_descriptor_;
}

const NativeResponse& NativeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openrtb_2eproto();
  return *default_instance_;
}

NativeResponse* NativeResponse::default_instance_ = NULL;

NativeResponse* NativeResponse::New(::google::protobuf::Arena* arena) const {
  NativeResponse* n = new NativeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NativeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.google.openrtb.NativeResponse)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 21u) {
    if (has_ver()) {
      ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_link()) {
      if (link_ != NULL) link_->::com::google::openrtb::NativeResponse_Link::Clear();
    }
    if (has_jstracker()) {
      jstracker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  assets_.Clear();
  imptrackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NativeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.google.openrtb.NativeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ver = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ver().data(), this->ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.ver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_assets;
        break;
      }

      // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
      case 2: {
        if (tag == 18) {
         parse_assets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_assets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_link;
        break;
      }

      // required .com.google.openrtb.NativeResponse.Link link = 3;
      case 3: {
        if (tag == 26) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_imptrackers;
        break;
      }

      // repeated string imptrackers = 4;
      case 4: {
        if (tag == 34) {
         parse_imptrackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_imptrackers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imptrackers(this->imptrackers_size() - 1).data(),
            this->imptrackers(this->imptrackers_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.imptrackers");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_imptrackers;
        if (input->ExpectTag(42)) goto parse_jstracker;
        break;
      }

      // optional string jstracker = 5;
      case 5: {
        if (tag == 42) {
         parse_jstracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jstracker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jstracker().data(), this->jstracker().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.google.openrtb.NativeResponse.jstracker");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.google.openrtb.NativeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.google.openrtb.NativeResponse)
  return false;
#undef DO_
}

void NativeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.google.openrtb.NativeResponse)
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ver(), output);
  }

  // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->assets(i), output);
  }

  // required .com.google.openrtb.NativeResponse.Link link = 3;
  if (has_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->link_, output);
  }

  // repeated string imptrackers = 4;
  for (int i = 0; i < this->imptrackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imptrackers(i).data(), this->imptrackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.imptrackers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->imptrackers(i), output);
  }

  // optional string jstracker = 5;
  if (has_jstracker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jstracker().data(), this->jstracker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.jstracker");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->jstracker(), output);
  }

  // Extension range [100, 10000)
  _extensions_.SerializeWithCachedSizes(
      100, 10000, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.google.openrtb.NativeResponse)
}

::google::protobuf::uint8* NativeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.google.openrtb.NativeResponse)
  // optional string ver = 1;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ver().data(), this->ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ver(), target);
  }

  // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
  for (unsigned int i = 0, n = this->assets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->assets(i), false, target);
  }

  // required .com.google.openrtb.NativeResponse.Link link = 3;
  if (has_link()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->link_, false, target);
  }

  // repeated string imptrackers = 4;
  for (int i = 0; i < this->imptrackers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imptrackers(i).data(), this->imptrackers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.imptrackers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->imptrackers(i), target);
  }

  // optional string jstracker = 5;
  if (has_jstracker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jstracker().data(), this->jstracker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.google.openrtb.NativeResponse.jstracker");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->jstracker(), target);
  }

  // Extension range [100, 10000)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 10000, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.google.openrtb.NativeResponse)
  return target;
}

int NativeResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:com.google.openrtb.NativeResponse)
  int total_size = 0;

  // required .com.google.openrtb.NativeResponse.Link link = 3;
  if (has_link()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->link_);
  }
  if (_has_bits_[0 / 32] & 17u) {
    // optional string ver = 1;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ver());
    }

    // optional string jstracker = 5;
    if (has_jstracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jstracker());
    }

  }
  // repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assets(i));
  }

  // repeated string imptrackers = 4;
  total_size += 1 * this->imptrackers_size();
  for (int i = 0; i < this->imptrackers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->imptrackers(i));
  }

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NativeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.google.openrtb.NativeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NativeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NativeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.google.openrtb.NativeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.google.openrtb.NativeResponse)
    MergeFrom(*source);
  }
}

void NativeResponse::MergeFrom(const NativeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.google.openrtb.NativeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assets_.MergeFrom(from.assets_);
  imptrackers_.MergeFrom(from.imptrackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_has_ver();
      ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ver_);
    }
    if (from.has_link()) {
      mutable_link()->::com::google::openrtb::NativeResponse_Link::MergeFrom(from.link());
    }
    if (from.has_jstracker()) {
      set_has_jstracker();
      jstracker_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jstracker_);
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NativeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.google.openrtb.NativeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NativeResponse::CopyFrom(const NativeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.google.openrtb.NativeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->assets())) return false;
  if (has_link()) {
    if (!this->link_->IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NativeResponse::Swap(NativeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NativeResponse::InternalSwap(NativeResponse* other) {
  ver_.Swap(&other->ver_);
  assets_.UnsafeArenaSwap(&other->assets_);
  std::swap(link_, other->link_);
  imptrackers_.UnsafeArenaSwap(&other->imptrackers_);
  jstracker_.Swap(&other->jstracker_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata NativeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NativeResponse_descriptor_;
  metadata.reflection = NativeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NativeResponse_Link

// optional string url = 1;
bool NativeResponse_Link::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeResponse_Link::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeResponse_Link::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeResponse_Link::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& NativeResponse_Link::url() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Link.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Link::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Link.url)
}
 void NativeResponse_Link::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Link.url)
}
 void NativeResponse_Link::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Link.url)
}
 ::std::string* NativeResponse_Link::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Link.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeResponse_Link::release_url() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Link.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Link::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Link.url)
}

// repeated string clicktrackers = 2;
int NativeResponse_Link::clicktrackers_size() const {
  return clicktrackers_.size();
}
void NativeResponse_Link::clear_clicktrackers() {
  clicktrackers_.Clear();
}
 const ::std::string& NativeResponse_Link::clicktrackers(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return clicktrackers_.Get(index);
}
 ::std::string* NativeResponse_Link::mutable_clicktrackers(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return clicktrackers_.Mutable(index);
}
 void NativeResponse_Link::set_clicktrackers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Link.clicktrackers)
  clicktrackers_.Mutable(index)->assign(value);
}
 void NativeResponse_Link::set_clicktrackers(int index, const char* value) {
  clicktrackers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
 void NativeResponse_Link::set_clicktrackers(int index, const char* value, size_t size) {
  clicktrackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
 ::std::string* NativeResponse_Link::add_clicktrackers() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return clicktrackers_.Add();
}
 void NativeResponse_Link::add_clicktrackers(const ::std::string& value) {
  clicktrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
 void NativeResponse_Link::add_clicktrackers(const char* value) {
  clicktrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
 void NativeResponse_Link::add_clicktrackers(const char* value, size_t size) {
  clicktrackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.NativeResponse.Link.clicktrackers)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NativeResponse_Link::clicktrackers() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return clicktrackers_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NativeResponse_Link::mutable_clicktrackers() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeResponse.Link.clicktrackers)
  return &clicktrackers_;
}

// optional string fallback = 3;
bool NativeResponse_Link::has_fallback() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NativeResponse_Link::set_has_fallback() {
  _has_bits_[0] |= 0x00000004u;
}
void NativeResponse_Link::clear_has_fallback() {
  _has_bits_[0] &= ~0x00000004u;
}
void NativeResponse_Link::clear_fallback() {
  fallback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fallback();
}
 const ::std::string& NativeResponse_Link::fallback() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Link.fallback)
  return fallback_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Link::set_fallback(const ::std::string& value) {
  set_has_fallback();
  fallback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Link.fallback)
}
 void NativeResponse_Link::set_fallback(const char* value) {
  set_has_fallback();
  fallback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Link.fallback)
}
 void NativeResponse_Link::set_fallback(const char* value, size_t size) {
  set_has_fallback();
  fallback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Link.fallback)
}
 ::std::string* NativeResponse_Link::mutable_fallback() {
  set_has_fallback();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Link.fallback)
  return fallback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeResponse_Link::release_fallback() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Link.fallback)
  clear_has_fallback();
  return fallback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Link::set_allocated_fallback(::std::string* fallback) {
  if (fallback != NULL) {
    set_has_fallback();
  } else {
    clear_has_fallback();
  }
  fallback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fallback);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Link.fallback)
}

// -------------------------------------------------------------------

// NativeResponse_Asset_Title

// required string text = 1;
bool NativeResponse_Asset_Title::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeResponse_Asset_Title::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeResponse_Asset_Title::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeResponse_Asset_Title::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& NativeResponse_Asset_Title::text() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Title.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Asset_Title::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Title.text)
}
 void NativeResponse_Asset_Title::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Title.text)
}
 void NativeResponse_Asset_Title::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Title.text)
}
 ::std::string* NativeResponse_Asset_Title::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Title.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeResponse_Asset_Title::release_text() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.Title.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Asset_Title::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Title.text)
}

// -------------------------------------------------------------------

// NativeResponse_Asset_Image

// optional string url = 1;
bool NativeResponse_Asset_Image::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeResponse_Asset_Image::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeResponse_Asset_Image::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeResponse_Asset_Image::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& NativeResponse_Asset_Image::url() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Image.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Asset_Image::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Image.url)
}
 void NativeResponse_Asset_Image::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Image.url)
}
 void NativeResponse_Asset_Image::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Image.url)
}
 ::std::string* NativeResponse_Asset_Image::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Image.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeResponse_Asset_Image::release_url() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.Image.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Asset_Image::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Image.url)
}

// optional int32 w = 2;
bool NativeResponse_Asset_Image::has_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NativeResponse_Asset_Image::set_has_w() {
  _has_bits_[0] |= 0x00000002u;
}
void NativeResponse_Asset_Image::clear_has_w() {
  _has_bits_[0] &= ~0x00000002u;
}
void NativeResponse_Asset_Image::clear_w() {
  w_ = 0;
  clear_has_w();
}
 ::google::protobuf::int32 NativeResponse_Asset_Image::w() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Image.w)
  return w_;
}
 void NativeResponse_Asset_Image::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Image.w)
}

// optional int32 h = 3;
bool NativeResponse_Asset_Image::has_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NativeResponse_Asset_Image::set_has_h() {
  _has_bits_[0] |= 0x00000004u;
}
void NativeResponse_Asset_Image::clear_has_h() {
  _has_bits_[0] &= ~0x00000004u;
}
void NativeResponse_Asset_Image::clear_h() {
  h_ = 0;
  clear_has_h();
}
 ::google::protobuf::int32 NativeResponse_Asset_Image::h() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Image.h)
  return h_;
}
 void NativeResponse_Asset_Image::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Image.h)
}

// -------------------------------------------------------------------

// NativeResponse_Asset_Data

// optional string label = 1;
bool NativeResponse_Asset_Data::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeResponse_Asset_Data::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeResponse_Asset_Data::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeResponse_Asset_Data::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
 const ::std::string& NativeResponse_Asset_Data::label() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Data.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Asset_Data::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Data.label)
}
 void NativeResponse_Asset_Data::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Data.label)
}
 void NativeResponse_Asset_Data::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Data.label)
}
 ::std::string* NativeResponse_Asset_Data::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Data.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeResponse_Asset_Data::release_label() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.Data.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Asset_Data::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Data.label)
}

// required string value = 2;
bool NativeResponse_Asset_Data::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NativeResponse_Asset_Data::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void NativeResponse_Asset_Data::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void NativeResponse_Asset_Data::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& NativeResponse_Asset_Data::value() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Data.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Asset_Data::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Data.value)
}
 void NativeResponse_Asset_Data::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Data.value)
}
 void NativeResponse_Asset_Data::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Data.value)
}
 ::std::string* NativeResponse_Asset_Data::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Data.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeResponse_Asset_Data::release_value() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.Data.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse_Asset_Data::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.Data.value)
}

// -------------------------------------------------------------------

// NativeResponse_Asset_Video

// repeated string vasttag = 1;
int NativeResponse_Asset_Video::vasttag_size() const {
  return vasttag_.size();
}
void NativeResponse_Asset_Video::clear_vasttag() {
  vasttag_.Clear();
}
 const ::std::string& NativeResponse_Asset_Video::vasttag(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
  return vasttag_.Get(index);
}
 ::std::string* NativeResponse_Asset_Video::mutable_vasttag(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
  return vasttag_.Mutable(index);
}
 void NativeResponse_Asset_Video::set_vasttag(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
  vasttag_.Mutable(index)->assign(value);
}
 void NativeResponse_Asset_Video::set_vasttag(int index, const char* value) {
  vasttag_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}
 void NativeResponse_Asset_Video::set_vasttag(int index, const char* value, size_t size) {
  vasttag_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}
 ::std::string* NativeResponse_Asset_Video::add_vasttag() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
  return vasttag_.Add();
}
 void NativeResponse_Asset_Video::add_vasttag(const ::std::string& value) {
  vasttag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}
 void NativeResponse_Asset_Video::add_vasttag(const char* value) {
  vasttag_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}
 void NativeResponse_Asset_Video::add_vasttag(const char* value, size_t size) {
  vasttag_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NativeResponse_Asset_Video::vasttag() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
  return vasttag_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NativeResponse_Asset_Video::mutable_vasttag() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeResponse.Asset.Video.vasttag)
  return &vasttag_;
}

// -------------------------------------------------------------------

// NativeResponse_Asset

// required int32 id = 1;
bool NativeResponse_Asset::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeResponse_Asset::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeResponse_Asset::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeResponse_Asset::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 NativeResponse_Asset::id() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.id)
  return id_;
}
 void NativeResponse_Asset::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.id)
}

// optional bool required = 2 [default = false];
bool NativeResponse_Asset::has_required() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NativeResponse_Asset::set_has_required() {
  _has_bits_[0] |= 0x00000002u;
}
void NativeResponse_Asset::clear_has_required() {
  _has_bits_[0] &= ~0x00000002u;
}
void NativeResponse_Asset::clear_required() {
  required_ = false;
  clear_has_required();
}
 bool NativeResponse_Asset::required() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.required)
  return required_;
}
 void NativeResponse_Asset::set_required(bool value) {
  set_has_required();
  required_ = value;
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.Asset.required)
}

// optional .com.google.openrtb.NativeResponse.Asset.Title title = 3;
bool NativeResponse_Asset::has_title() const {
  return asset_oneof_case() == kTitle;
}
void NativeResponse_Asset::set_has_title() {
  _oneof_case_[0] = kTitle;
}
void NativeResponse_Asset::clear_title() {
  if (has_title()) {
    delete asset_oneof_.title_;
    clear_has_asset_oneof();
  }
}
 const ::com::google::openrtb::NativeResponse_Asset_Title& NativeResponse_Asset::title() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.title)
  return has_title()
      ? *asset_oneof_.title_
      : ::com::google::openrtb::NativeResponse_Asset_Title::default_instance();
}
::com::google::openrtb::NativeResponse_Asset_Title* NativeResponse_Asset::mutable_title() {
  if (!has_title()) {
    clear_asset_oneof();
    set_has_title();
    asset_oneof_.title_ = new ::com::google::openrtb::NativeResponse_Asset_Title;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.title)
  return asset_oneof_.title_;
}
::com::google::openrtb::NativeResponse_Asset_Title* NativeResponse_Asset::release_title() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.title)
  if (has_title()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeResponse_Asset_Title* temp = asset_oneof_.title_;
    asset_oneof_.title_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NativeResponse_Asset::set_allocated_title(::com::google::openrtb::NativeResponse_Asset_Title* title) {
  clear_asset_oneof();
  if (title) {
    set_has_title();
    asset_oneof_.title_ = title;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.title)
}

// optional .com.google.openrtb.NativeResponse.Asset.Image img = 4;
bool NativeResponse_Asset::has_img() const {
  return asset_oneof_case() == kImg;
}
void NativeResponse_Asset::set_has_img() {
  _oneof_case_[0] = kImg;
}
void NativeResponse_Asset::clear_img() {
  if (has_img()) {
    delete asset_oneof_.img_;
    clear_has_asset_oneof();
  }
}
 const ::com::google::openrtb::NativeResponse_Asset_Image& NativeResponse_Asset::img() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.img)
  return has_img()
      ? *asset_oneof_.img_
      : ::com::google::openrtb::NativeResponse_Asset_Image::default_instance();
}
::com::google::openrtb::NativeResponse_Asset_Image* NativeResponse_Asset::mutable_img() {
  if (!has_img()) {
    clear_asset_oneof();
    set_has_img();
    asset_oneof_.img_ = new ::com::google::openrtb::NativeResponse_Asset_Image;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.img)
  return asset_oneof_.img_;
}
::com::google::openrtb::NativeResponse_Asset_Image* NativeResponse_Asset::release_img() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.img)
  if (has_img()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeResponse_Asset_Image* temp = asset_oneof_.img_;
    asset_oneof_.img_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NativeResponse_Asset::set_allocated_img(::com::google::openrtb::NativeResponse_Asset_Image* img) {
  clear_asset_oneof();
  if (img) {
    set_has_img();
    asset_oneof_.img_ = img;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.img)
}

// optional .com.google.openrtb.NativeResponse.Asset.Video video = 5;
bool NativeResponse_Asset::has_video() const {
  return asset_oneof_case() == kVideo;
}
void NativeResponse_Asset::set_has_video() {
  _oneof_case_[0] = kVideo;
}
void NativeResponse_Asset::clear_video() {
  if (has_video()) {
    delete asset_oneof_.video_;
    clear_has_asset_oneof();
  }
}
 const ::com::google::openrtb::NativeResponse_Asset_Video& NativeResponse_Asset::video() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.video)
  return has_video()
      ? *asset_oneof_.video_
      : ::com::google::openrtb::NativeResponse_Asset_Video::default_instance();
}
::com::google::openrtb::NativeResponse_Asset_Video* NativeResponse_Asset::mutable_video() {
  if (!has_video()) {
    clear_asset_oneof();
    set_has_video();
    asset_oneof_.video_ = new ::com::google::openrtb::NativeResponse_Asset_Video;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.video)
  return asset_oneof_.video_;
}
::com::google::openrtb::NativeResponse_Asset_Video* NativeResponse_Asset::release_video() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.video)
  if (has_video()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeResponse_Asset_Video* temp = asset_oneof_.video_;
    asset_oneof_.video_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NativeResponse_Asset::set_allocated_video(::com::google::openrtb::NativeResponse_Asset_Video* video) {
  clear_asset_oneof();
  if (video) {
    set_has_video();
    asset_oneof_.video_ = video;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.video)
}

// optional .com.google.openrtb.NativeResponse.Asset.Data data = 6;
bool NativeResponse_Asset::has_data() const {
  return asset_oneof_case() == kData;
}
void NativeResponse_Asset::set_has_data() {
  _oneof_case_[0] = kData;
}
void NativeResponse_Asset::clear_data() {
  if (has_data()) {
    delete asset_oneof_.data_;
    clear_has_asset_oneof();
  }
}
 const ::com::google::openrtb::NativeResponse_Asset_Data& NativeResponse_Asset::data() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.data)
  return has_data()
      ? *asset_oneof_.data_
      : ::com::google::openrtb::NativeResponse_Asset_Data::default_instance();
}
::com::google::openrtb::NativeResponse_Asset_Data* NativeResponse_Asset::mutable_data() {
  if (!has_data()) {
    clear_asset_oneof();
    set_has_data();
    asset_oneof_.data_ = new ::com::google::openrtb::NativeResponse_Asset_Data;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.data)
  return asset_oneof_.data_;
}
::com::google::openrtb::NativeResponse_Asset_Data* NativeResponse_Asset::release_data() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.data)
  if (has_data()) {
    clear_has_asset_oneof();
    ::com::google::openrtb::NativeResponse_Asset_Data* temp = asset_oneof_.data_;
    asset_oneof_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void NativeResponse_Asset::set_allocated_data(::com::google::openrtb::NativeResponse_Asset_Data* data) {
  clear_asset_oneof();
  if (data) {
    set_has_data();
    asset_oneof_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.data)
}

// optional .com.google.openrtb.NativeResponse.Link link = 7;
bool NativeResponse_Asset::has_link() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void NativeResponse_Asset::set_has_link() {
  _has_bits_[0] |= 0x00000040u;
}
void NativeResponse_Asset::clear_has_link() {
  _has_bits_[0] &= ~0x00000040u;
}
void NativeResponse_Asset::clear_link() {
  if (link_ != NULL) link_->::com::google::openrtb::NativeResponse_Link::Clear();
  clear_has_link();
}
const ::com::google::openrtb::NativeResponse_Link& NativeResponse_Asset::link() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.Asset.link)
  return link_ != NULL ? *link_ : *default_instance_->link_;
}
::com::google::openrtb::NativeResponse_Link* NativeResponse_Asset::mutable_link() {
  set_has_link();
  if (link_ == NULL) {
    link_ = new ::com::google::openrtb::NativeResponse_Link;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.Asset.link)
  return link_;
}
::com::google::openrtb::NativeResponse_Link* NativeResponse_Asset::release_link() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.Asset.link)
  clear_has_link();
  ::com::google::openrtb::NativeResponse_Link* temp = link_;
  link_ = NULL;
  return temp;
}
void NativeResponse_Asset::set_allocated_link(::com::google::openrtb::NativeResponse_Link* link) {
  delete link_;
  link_ = link;
  if (link) {
    set_has_link();
  } else {
    clear_has_link();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.Asset.link)
}

bool NativeResponse_Asset::has_asset_oneof() const {
  return asset_oneof_case() != ASSET_ONEOF_NOT_SET;
}
void NativeResponse_Asset::clear_has_asset_oneof() {
  _oneof_case_[0] = ASSET_ONEOF_NOT_SET;
}
NativeResponse_Asset::AssetOneofCase NativeResponse_Asset::asset_oneof_case() const {
  return NativeResponse_Asset::AssetOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NativeResponse

// optional string ver = 1;
bool NativeResponse::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NativeResponse::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
void NativeResponse::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
void NativeResponse::clear_ver() {
  ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ver();
}
 const ::std::string& NativeResponse::ver() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.ver)
  return ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse::set_ver(const ::std::string& value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.ver)
}
 void NativeResponse::set_ver(const char* value) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.ver)
}
 void NativeResponse::set_ver(const char* value, size_t size) {
  set_has_ver();
  ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.ver)
}
 ::std::string* NativeResponse::mutable_ver() {
  set_has_ver();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.ver)
  return ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeResponse::release_ver() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.ver)
  clear_has_ver();
  return ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse::set_allocated_ver(::std::string* ver) {
  if (ver != NULL) {
    set_has_ver();
  } else {
    clear_has_ver();
  }
  ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ver);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.ver)
}

// repeated .com.google.openrtb.NativeResponse.Asset assets = 2;
int NativeResponse::assets_size() const {
  return assets_.size();
}
void NativeResponse::clear_assets() {
  assets_.Clear();
}
const ::com::google::openrtb::NativeResponse_Asset& NativeResponse::assets(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.assets)
  return assets_.Get(index);
}
::com::google::openrtb::NativeResponse_Asset* NativeResponse::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.assets)
  return assets_.Mutable(index);
}
::com::google::openrtb::NativeResponse_Asset* NativeResponse::add_assets() {
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeResponse.assets)
  return assets_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeResponse_Asset >*
NativeResponse::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeResponse.assets)
  return &assets_;
}
const ::google::protobuf::RepeatedPtrField< ::com::google::openrtb::NativeResponse_Asset >&
NativeResponse::assets() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeResponse.assets)
  return assets_;
}

// required .com.google.openrtb.NativeResponse.Link link = 3;
bool NativeResponse::has_link() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NativeResponse::set_has_link() {
  _has_bits_[0] |= 0x00000004u;
}
void NativeResponse::clear_has_link() {
  _has_bits_[0] &= ~0x00000004u;
}
void NativeResponse::clear_link() {
  if (link_ != NULL) link_->::com::google::openrtb::NativeResponse_Link::Clear();
  clear_has_link();
}
const ::com::google::openrtb::NativeResponse_Link& NativeResponse::link() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.link)
  return link_ != NULL ? *link_ : *default_instance_->link_;
}
::com::google::openrtb::NativeResponse_Link* NativeResponse::mutable_link() {
  set_has_link();
  if (link_ == NULL) {
    link_ = new ::com::google::openrtb::NativeResponse_Link;
  }
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.link)
  return link_;
}
::com::google::openrtb::NativeResponse_Link* NativeResponse::release_link() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.link)
  clear_has_link();
  ::com::google::openrtb::NativeResponse_Link* temp = link_;
  link_ = NULL;
  return temp;
}
void NativeResponse::set_allocated_link(::com::google::openrtb::NativeResponse_Link* link) {
  delete link_;
  link_ = link;
  if (link) {
    set_has_link();
  } else {
    clear_has_link();
  }
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.link)
}

// repeated string imptrackers = 4;
int NativeResponse::imptrackers_size() const {
  return imptrackers_.size();
}
void NativeResponse::clear_imptrackers() {
  imptrackers_.Clear();
}
 const ::std::string& NativeResponse::imptrackers(int index) const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.imptrackers)
  return imptrackers_.Get(index);
}
 ::std::string* NativeResponse::mutable_imptrackers(int index) {
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.imptrackers)
  return imptrackers_.Mutable(index);
}
 void NativeResponse::set_imptrackers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.imptrackers)
  imptrackers_.Mutable(index)->assign(value);
}
 void NativeResponse::set_imptrackers(int index, const char* value) {
  imptrackers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.imptrackers)
}
 void NativeResponse::set_imptrackers(int index, const char* value, size_t size) {
  imptrackers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.imptrackers)
}
 ::std::string* NativeResponse::add_imptrackers() {
  // @@protoc_insertion_point(field_add_mutable:com.google.openrtb.NativeResponse.imptrackers)
  return imptrackers_.Add();
}
 void NativeResponse::add_imptrackers(const ::std::string& value) {
  imptrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.google.openrtb.NativeResponse.imptrackers)
}
 void NativeResponse::add_imptrackers(const char* value) {
  imptrackers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.google.openrtb.NativeResponse.imptrackers)
}
 void NativeResponse::add_imptrackers(const char* value, size_t size) {
  imptrackers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.google.openrtb.NativeResponse.imptrackers)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
NativeResponse::imptrackers() const {
  // @@protoc_insertion_point(field_list:com.google.openrtb.NativeResponse.imptrackers)
  return imptrackers_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
NativeResponse::mutable_imptrackers() {
  // @@protoc_insertion_point(field_mutable_list:com.google.openrtb.NativeResponse.imptrackers)
  return &imptrackers_;
}

// optional string jstracker = 5;
bool NativeResponse::has_jstracker() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NativeResponse::set_has_jstracker() {
  _has_bits_[0] |= 0x00000010u;
}
void NativeResponse::clear_has_jstracker() {
  _has_bits_[0] &= ~0x00000010u;
}
void NativeResponse::clear_jstracker() {
  jstracker_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_jstracker();
}
 const ::std::string& NativeResponse::jstracker() const {
  // @@protoc_insertion_point(field_get:com.google.openrtb.NativeResponse.jstracker)
  return jstracker_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse::set_jstracker(const ::std::string& value) {
  set_has_jstracker();
  jstracker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.google.openrtb.NativeResponse.jstracker)
}
 void NativeResponse::set_jstracker(const char* value) {
  set_has_jstracker();
  jstracker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.google.openrtb.NativeResponse.jstracker)
}
 void NativeResponse::set_jstracker(const char* value, size_t size) {
  set_has_jstracker();
  jstracker_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.google.openrtb.NativeResponse.jstracker)
}
 ::std::string* NativeResponse::mutable_jstracker() {
  set_has_jstracker();
  // @@protoc_insertion_point(field_mutable:com.google.openrtb.NativeResponse.jstracker)
  return jstracker_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NativeResponse::release_jstracker() {
  // @@protoc_insertion_point(field_release:com.google.openrtb.NativeResponse.jstracker)
  clear_has_jstracker();
  return jstracker_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NativeResponse::set_allocated_jstracker(::std::string* jstracker) {
  if (jstracker != NULL) {
    set_has_jstracker();
  } else {
    clear_has_jstracker();
  }
  jstracker_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jstracker);
  // @@protoc_insertion_point(field_set_allocated:com.google.openrtb.NativeResponse.jstracker)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace openrtb
}  // namespace google
}  // namespace com

// @@protoc_insertion_point(global_scope)
